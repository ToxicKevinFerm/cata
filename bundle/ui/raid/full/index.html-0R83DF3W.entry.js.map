{"version":3,"file":"index.html-0R83DF3W.entry.js","sources":["../../../../../../ui/raid/presets.ts","../../../../../../ui/raid/import_export.ts","../../../../../../ui/raid/raid_picker.tsx","../../../../../../ui/raid/raid_stats.tsx","../../../../../../ui/raid/raid_tab.ts","../../../../../../ui/core/components/raid_target_picker.ts","../../../../../../ui/raid/assignments_picker.ts","../../../../../../ui/raid/blessings_picker.ts","../../../../../../ui/raid/tanks_picker.ts","../../../../../../ui/raid/settings_tab.ts","../../../../../../ui/raid/raid_sim_ui.tsx","../../../../../../ui/raid/full/index.ts"],"sourcesContent":["import { IndividualSimUI, IndividualSimUIConfig, RaidSimPreset } from '../core/individual_sim_ui.js';\nimport { getSpecConfig, Player } from '../core/player.js';\nimport { PlayerClasses } from '../core/player_classes';\nimport { Spec } from '../core/proto/common.js';\nimport { BloodDeathKnightSimUI } from '../death_knight/blood/sim';\nimport { FrostDeathKnightSimUI } from '../death_knight/frost/sim';\nimport { UnholyDeathKnightSimUI } from '../death_knight/unholy/sim';\nimport { BalanceDruidSimUI } from '../druid/balance/sim.js';\nimport { FeralDruidSimUI } from '../druid/feral/sim.js';\nimport { RestorationDruidSimUI } from '../druid/restoration/sim.js';\nimport { BeastMasteryHunterSimUI } from '../hunter/beast_mastery/sim';\nimport { MarksmanshipHunterSimUI } from '../hunter/marksmanship/sim';\nimport { SurvivalHunterSimUI } from '../hunter/survival/sim';\nimport { ArcaneMageSimUI } from '../mage/arcane/sim';\nimport { FireMageSimUI } from '../mage/fire/sim';\nimport { FrostMageSimUI } from '../mage/frost/sim';\nimport { HolyPaladinSimUI } from '../paladin/holy/sim.js';\nimport { ProtectionPaladinSimUI } from '../paladin/protection/sim.js';\nimport { RetributionPaladinSimUI } from '../paladin/retribution/sim.js';\nimport { DisciplinePriestSimUI } from '../priest/discipline/sim';\nimport { HolyPriestSimUI } from '../priest/holy/sim';\nimport { ShadowPriestSimUI } from '../priest/shadow/sim.js';\nimport { AssassinationRogueSimUI } from '../rogue/assassination/sim';\nimport { CombatRogueSimUI } from '../rogue/combat/sim';\nimport { SubtletyRogueSimUI } from '../rogue/subtlety/sim';\nimport { ElementalShamanSimUI } from '../shaman/elemental/sim.js';\nimport { EnhancementShamanSimUI } from '../shaman/enhancement/sim.js';\nimport { RestorationShamanSimUI } from '../shaman/restoration/sim.js';\nimport { AfflictionWarlockSimUI } from '../warlock/affliction/sim';\nimport { DemonologyWarlockSimUI } from '../warlock/demonology/sim';\nimport { DestructionWarlockSimUI } from '../warlock/destruction/sim';\nimport { ArmsWarriorSimUI } from '../warrior/arms/sim';\nimport { FuryWarriorSimUI } from '../warrior/fury/sim';\nimport { ProtectionWarriorSimUI } from '../warrior/protection/sim';\n\nexport const specSimFactories: Partial<Record<Spec, (parentElem: HTMLElement, player: Player<any>) => IndividualSimUI<any>>> = {\n\t// Death Knight\n\t[Spec.SpecBloodDeathKnight]: (parentElem: HTMLElement, player: Player<any>) => new BloodDeathKnightSimUI(parentElem, player),\n\t[Spec.SpecFrostDeathKnight]: (parentElem: HTMLElement, player: Player<any>) => new FrostDeathKnightSimUI(parentElem, player),\n\t[Spec.SpecUnholyDeathKnight]: (parentElem: HTMLElement, player: Player<any>) => new UnholyDeathKnightSimUI(parentElem, player),\n\t// Druid\n\t[Spec.SpecBalanceDruid]: (parentElem: HTMLElement, player: Player<any>) => new BalanceDruidSimUI(parentElem, player),\n\t[Spec.SpecFeralDruid]: (parentElem: HTMLElement, player: Player<any>) => new FeralDruidSimUI(parentElem, player),\n\t[Spec.SpecRestorationDruid]: (parentElem: HTMLElement, player: Player<any>) => new RestorationDruidSimUI(parentElem, player),\n\t// Hunter\n\t[Spec.SpecBeastMasteryHunter]: (parentElem: HTMLElement, player: Player<any>) => new BeastMasteryHunterSimUI(parentElem, player),\n\t[Spec.SpecMarksmanshipHunter]: (parentElem: HTMLElement, player: Player<any>) => new MarksmanshipHunterSimUI(parentElem, player),\n\t[Spec.SpecSurvivalHunter]: (parentElem: HTMLElement, player: Player<any>) => new SurvivalHunterSimUI(parentElem, player),\n\t// Mage\n\t[Spec.SpecArcaneMage]: (parentElem: HTMLElement, player: Player<any>) => new ArcaneMageSimUI(parentElem, player),\n\t[Spec.SpecFireMage]: (parentElem: HTMLElement, player: Player<any>) => new FireMageSimUI(parentElem, player),\n\t[Spec.SpecFrostMage]: (parentElem: HTMLElement, player: Player<any>) => new FrostMageSimUI(parentElem, player),\n\t// Paladin\n\t[Spec.SpecHolyPaladin]: (parentElem: HTMLElement, player: Player<any>) => new HolyPaladinSimUI(parentElem, player),\n\t[Spec.SpecProtectionPaladin]: (parentElem: HTMLElement, player: Player<any>) => new ProtectionPaladinSimUI(parentElem, player),\n\t[Spec.SpecRetributionPaladin]: (parentElem: HTMLElement, player: Player<any>) => new RetributionPaladinSimUI(parentElem, player),\n\t// Priest\n\t[Spec.SpecDisciplinePriest]: (parentElem: HTMLElement, player: Player<any>) => new DisciplinePriestSimUI(parentElem, player),\n\t[Spec.SpecHolyPriest]: (parentElem: HTMLElement, player: Player<any>) => new HolyPriestSimUI(parentElem, player),\n\t[Spec.SpecShadowPriest]: (parentElem: HTMLElement, player: Player<any>) => new ShadowPriestSimUI(parentElem, player),\n\t// Rogue\n\t[Spec.SpecAssassinationRogue]: (parentElem: HTMLElement, player: Player<any>) => new AssassinationRogueSimUI(parentElem, player),\n\t[Spec.SpecCombatRogue]: (parentElem: HTMLElement, player: Player<any>) => new CombatRogueSimUI(parentElem, player),\n\t[Spec.SpecSubtletyRogue]: (parentElem: HTMLElement, player: Player<any>) => new SubtletyRogueSimUI(parentElem, player),\n\t// Shaman\n\t[Spec.SpecElementalShaman]: (parentElem: HTMLElement, player: Player<any>) => new ElementalShamanSimUI(parentElem, player),\n\t[Spec.SpecEnhancementShaman]: (parentElem: HTMLElement, player: Player<any>) => new EnhancementShamanSimUI(parentElem, player),\n\t[Spec.SpecRestorationShaman]: (parentElem: HTMLElement, player: Player<any>) => new RestorationShamanSimUI(parentElem, player),\n\t// Warlock\n\t[Spec.SpecAfflictionWarlock]: (parentElem: HTMLElement, player: Player<any>) => new AfflictionWarlockSimUI(parentElem, player),\n\t[Spec.SpecDemonologyWarlock]: (parentElem: HTMLElement, player: Player<any>) => new DemonologyWarlockSimUI(parentElem, player),\n\t[Spec.SpecDestructionWarlock]: (parentElem: HTMLElement, player: Player<any>) => new DestructionWarlockSimUI(parentElem, player),\n\t// Warrior\n\t[Spec.SpecArmsWarrior]: (parentElem: HTMLElement, player: Player<any>) => new ArmsWarriorSimUI(parentElem, player),\n\t[Spec.SpecFuryWarrior]: (parentElem: HTMLElement, player: Player<any>) => new FuryWarriorSimUI(parentElem, player),\n\t[Spec.SpecProtectionWarrior]: (parentElem: HTMLElement, player: Player<any>) => new ProtectionWarriorSimUI(parentElem, player),\n};\n\nexport const playerPresets: Array<RaidSimPreset<any>> = PlayerClasses.naturalOrder\n\t.map(playerClass => Object.values(playerClass.specs))\n\t.flat()\n\t.map(playerSpec => getSpecConfig(playerSpec.specID))\n\t.map(config => {\n\t\tconst indSimUiConfig = config as IndividualSimUIConfig<any>;\n\t\treturn indSimUiConfig.raidSimPresets;\n\t})\n\t.flat();\n\nexport const implementedSpecs: Array<any> = [...new Set(playerPresets.map(preset => preset.spec))];\n","import { Exporter } from '../core/components/exporters';\nimport { Importer } from '../core/components/importers';\nimport { Encounter } from '../core/encounter';\nimport { RaidSimPreset } from '../core/individual_sim_ui';\nimport { Player } from '../core/player';\nimport { PlayerSpecs } from '../core/player_specs';\nimport { Party as PartyProto, Player as PlayerProto, Raid as RaidProto } from '../core/proto/api';\nimport {\n\tClass,\n\tEncounter as EncounterProto,\n\tEquipmentSpec,\n\tFaction,\n\tItemSpec,\n\tProfession,\n\tRace,\n\tSpec,\n\tTarget as TargetProto,\n\tUnitReference,\n\tUnitReference_Type,\n} from '../core/proto/common';\nimport { RaidSimSettings } from '../core/proto/ui';\nimport { professionNames, raceNames } from '../core/proto_utils/names';\nimport {\n\tDruidSpecs,\n\tgetPlayerSpecFromPlayer,\n\tgetTalentTreePoints,\n\tmakeDefaultBlessings,\n\traceToFaction,\n\tRogueSpecs,\n\tSpecOptions,\n} from '../core/proto_utils/utils';\nimport { MAX_NUM_PARTIES } from '../core/raid';\nimport { EventID, TypedEvent } from '../core/typed_event';\nimport { bucket, distinct } from '../core/utils';\nimport { playerPresets } from './presets';\nimport { RaidSimUI } from './raid_sim_ui';\n\nexport class RaidJsonImporter extends Importer {\n\tprivate readonly simUI: RaidSimUI;\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, simUI, 'JSON Import', true);\n\t\tthis.simUI = simUI;\n\n\t\tthis.descriptionElem.innerHTML = `\n\t\t\t<p>\n\t\t\t\tImport settings from a JSON text file, which can be created using the JSON Export feature of this site.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the JSON text below and click, 'Import'.\n\t\t\t</p>\n\t\t`;\n\t}\n\n\tasync onImport(data: string) {\n\t\tconst settings = RaidSimSettings.fromJsonString(data, { ignoreUnknownFields: true });\n\t\tthis.simUI.fromProto(TypedEvent.nextEventID(), settings);\n\t\tthis.close();\n\t}\n}\n\nexport class RaidJsonExporter extends Exporter {\n\tprivate readonly simUI: RaidSimUI;\n\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, simUI, { title: 'JSON Export', allowDownload: true });\n\t\tthis.simUI = simUI;\n\t\tthis.init();\n\t}\n\n\tgetData(): string {\n\t\treturn JSON.stringify(RaidSimSettings.toJson(this.simUI.toProto()), null, 2);\n\t}\n}\n\nexport class RaidWCLImporter extends Importer {\n\tprivate queryCounter = 0;\n\n\tprivate readonly simUI: RaidSimUI;\n\tconstructor(parent: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parent, simUI, 'WCL Import', false);\n\t\tthis.simUI = simUI;\n\t\tthis.textElem.classList.add('small-textarea');\n\t\tthis.descriptionElem.innerHTML = `\n\t\t\t<p>\n\t\t\t\tImports the entire raid from a WCL report.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the WCL report and fight link (https://classic.warcraftlogs.com/reports/REPORTID#fight=FIGHTID).<br>\n\t\t\t\tInclude the fight ID or else the first fight in the report will be used.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tThe following are imported directly from the report:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Player Name</li>\n\t\t\t\t\t<li>Equipment (items, enchants, and gems)</li>\n\t\t\t\t\t<li>Faction (Alliance / Horde)</li>\n\t\t\t\t\t<li>Encounter: If the import link has a fight ID we try to match with a preset Encounter. Note that many Encounters are still unimplemented.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not available directly from the report data, but we try to infer them:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Talents: Log data only gives us the tree summary (e.g. '51/20/0') so we match this with the closest preset talent build.</li>\n\t\t\t\t\t<li>Glyphs: Glyphs are absent from log data, but we pair them with the inferred Talents.</li>\n\t\t\t\t\t<li>Race: Inferred from Race-specific abilties used in any fight if possible, or defaults to Spec-specific Race.</li>\n\t\t\t\t\t<li>Professions: Inferred from profession-locked items/enchants/gems.</li>\n\t\t\t\t\t<li>Buff assignments (Innervate, Unholy Frenzy, etc): Inferred from casts.</li>\n\t\t\t\t\t<li>Party Composition: Inferred from party-only effects, such as Prayer of Healing, or Vampiric Touch.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not imported, and instead use spec-specific defaults:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Rotation / Spec-specific options</li>\n\t\t\t\t\t<li>Consumes</li>\n\t\t\t\t\t<li>Paladin Blessings</li>\n\t\t\t\t</ul>\n\t\t\t</p>\n\t\t`;\n\t}\n\n\tprivate token = '';\n\tprivate async getWCLBearerToken(): Promise<string> {\n\t\tif (this.token == '') {\n\t\t\tconst response = await fetch('https://classic.warcraftlogs.com/oauth/token', {\n\t\t\t\tmethod: 'POST',\n\t\t\t\theaders: {\n\t\t\t\t\tAuthorization: 'Basic ' + btoa('963d31c8-7efa-4dde-87cf-1b254a8a2f8c:lRJVhujEEnF96xfUoxVHSpnqKN9v8bTqGEjutsO3'),\n\t\t\t\t},\n\t\t\t\tbody: new URLSearchParams({\n\t\t\t\t\tgrant_type: 'client_credentials',\n\t\t\t\t}),\n\t\t\t});\n\t\t\tconst json = await response.json();\n\t\t\tthis.token = json.access_token;\n\t\t}\n\t\treturn this.token;\n\t}\n\n\tprivate async queryWCL(query: string): Promise<any> {\n\t\tconst token = await this.getWCLBearerToken();\n\t\tconst headers = {\n\t\t\t'Content-Type': 'application/json',\n\t\t\tAuthorization: `Bearer ${token}`,\n\t\t\tAccept: 'application/json',\n\t\t};\n\n\t\tconst queryURL = `https://classic.warcraftlogs.com/api/v2/client?query=${query}`;\n\t\tthis.queryCounter++;\n\n\t\t// Query WCL\n\t\tconst res = await fetch(encodeURI(queryURL), {\n\t\t\tmethod: 'GET',\n\t\t\theaders: headers,\n\t\t});\n\n\t\tconst result = await res.json();\n\t\tif (result?.errors?.length) {\n\t\t\tconst errorStr = result.errors.map((e: any) => e.message).join('\\n');\n\t\t\tthrow new Error(`GraphQL error: ${errorStr}\\n\\nQuery: ${query}`);\n\t\t} else {\n\t\t\tconsole.debug(`WCL query: ${query}\\n\\nResult: ${JSON.stringify(result)}`);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async parseURL(url: string): Promise<wclUrlData> {\n\t\tconst match = url.match(/classic\\.warcraftlogs\\.com\\/reports\\/([a-zA-Z0-9:]+)\\/?(#.*fight=((\\d+)|(last)))?/);\n\t\tif (!match) {\n\t\t\tthrow new Error(`Invalid WCL URL ${url}, must look like \"classic.warcraftlogs.com/reports/XXXX\"`);\n\t\t}\n\n\t\tconst urlData = {\n\t\t\treportID: match[1],\n\t\t\tfightID: '',\n\t\t};\n\n\t\t// If the URL has a Fight ID in it, use it\n\t\tif (match[2] && match[3] && match[3] != 'last') {\n\t\t\turlData.fightID = match[3];\n\t\t} else {\n\t\t\t// Make a separate query to get the corresponding ReportFights\n\t\t\tconst fightDataQuery = `{\n\t\t\t\treportData {\n\t\t\t\t\treport(code: \"${urlData.reportID}\") {\n\t\t\t\t\t\tfights(killType: Kills, translate: true) {\n\t\t\t\t\t\t\tid, name\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}`;\n\n\t\t\tconst fightData = await this.queryWCL(fightDataQuery);\n\t\t\tconst fights = fightData.data.reportData.report.fights;\n\n\t\t\tif (match[3] == 'last') {\n\t\t\t\turlData.fightID = String(fights[fights.length - 1].id);\n\t\t\t} else {\n\t\t\t\t// Default to using the first Fight\n\t\t\t\turlData.fightID = String(fights[0].id);\n\t\t\t}\n\t\t}\n\n\t\tconsole.debug(`Importing WCL report: ${JSON.stringify(urlData)}`);\n\t\treturn urlData;\n\t}\n\n\tprivate async getRateLimit(): Promise<wclRateLimitData> {\n\t\tconst query = `{\n\t    rateLimitData {\n\t      limitPerHour, pointsSpentThisHour, pointsResetIn\n\t    }\n\t  }`;\n\t\tconst result = await this.queryWCL(query);\n\t\tconst data = result['data']['rateLimitData'] as wclRateLimitData;\n\t\treturn data;\n\t}\n\n\tasync onImport(importLink: string) {\n\t\tthis.importButton.disabled = true;\n\t\tthis.rootElem.style.cursor = 'wait';\n\t\ttry {\n\t\t\tawait this.doImport(importLink);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\talert('Failed import from WCL: ' + error);\n\t\t}\n\t\tthis.importButton.disabled = false;\n\t\tthis.rootElem.style.removeProperty('cursor');\n\t}\n\n\tasync doImport(importLink: string) {\n\t\tif (!importLink.length) {\n\t\t\tthrow new Error('No import link provided!');\n\t\t}\n\n\t\tconst urlData = await this.parseURL(importLink);\n\t\tconst _rateLimit = await this.getRateLimit();\n\n\t\t// Schema for WCL API here: https://www.warcraftlogs.com/v2-api-docs/warcraft/\n\t\t// WCL charges us 1 'point' for each subquery we issue within the request. So\n\t\t// by using filter expressions we can combine our queries together, to spend\n\t\t// fewer points.\n\t\tconst reportDataQuery = `{\n\t\t\treportData {\n\t\t\t\treport(code: \"${urlData.reportID}\") {\n\t\t\t\t\tguild {\n\t\t\t\t\t\tname faction {id}\n\t\t\t\t\t}\n\t\t\t\t\tplayerDetails: table(fightIDs: [${urlData.fightID}], dataType: Casts, killType: All, viewBy: Default)\n\t\t\t\t\tcombatantInfoEvents: events(fightIDs: [${urlData.fightID}], dataType:CombatantInfo, limit: 50) { data }\n\t\t\t\t\tfights(fightIDs: [${urlData.fightID}]) {\n\t\t\t\t\t\tstartTime, endTime, id, name\n\t\t\t\t\t}\n\n\t\t\t\t\treportCastEvents: events(dataType:Casts, endTime: 99999999, filterExpression: \"${[racialSpells, professionSpells]\n\t\t\t\t\t\t.flat()\n\t\t\t\t\t\t.map(spell => spell.id)\n\t\t\t\t\t\t.map(id => `ability.id = ${id}`)\n\t\t\t\t\t\t.join(' OR ')}\", limit: 10000) { data }\n\n\t\t\t\t\tfightCastEvents: events(fightIDs: [${urlData.fightID}], dataType:Casts, filterExpression: \"${[externalCDSpells]\n\t\t\t\t\t\t.flat()\n\t\t\t\t\t\t.map(spell => spell.id)\n\t\t\t\t\t\t.map(id => `ability.id = ${id}`)\n\t\t\t\t\t\t.join(' OR ')}\", limit: 10000) { data }\n\n\t\t\t\t\tfightHealEvents: events(fightIDs: [${urlData.fightID}], dataType:Healing, filterExpression: \"${[samePartyHealingSpells, otherPartyHealingSpells]\n\t\t\t\t\t\t.flat()\n\t\t\t\t\t\t.map(spell => spell.id)\n\t\t\t\t\t\t.map(id => `ability.id = ${id}`)\n\t\t\t\t\t\t.join(' OR ')}\", limit: 10000) { data }\n\n\t\t\t\t\tmanaTideTotem: events(fightIDs: [${urlData.fightID}], dataType:Resources, filterExpression: \"ability.id = 39609\", limit: 100) { data }\n\t\t\t\t}\n\t\t\t}\n\t\t}`;\n\t\tconst reportData = await this.queryWCL(reportDataQuery);\n\n\t\t// Process the report data.\n\t\tconst wclData = reportData.data.reportData.report; // TODO: Typings?\n\t\tconst playerData: wclPlayer[] = wclData.playerDetails.data.entries;\n\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tconst wclPlayers = playerData.map(wclPlayer => new WCLSimPlayer(wclPlayer, this.simUI, eventID));\n\t\t\tthis.inferRace(eventID, wclData, wclPlayers);\n\t\t\tthis.inferProfessions(eventID, wclData, wclPlayers);\n\t\t\tthis.inferAssignments(eventID, wclData, wclPlayers);\n\t\t\tthis.inferPartyComposition(eventID, wclData, wclPlayers);\n\t\t\tconst numPaladins = wclPlayers.filter(player => player.player.getClass() == Class.ClassPaladin).length;\n\t\t\tconst settings = RaidSimSettings.create({\n\t\t\t\tencounter: this.getEncounterProto(wclData),\n\t\t\t\traid: this.getRaidProto(wclPlayers),\n\t\t\t\tblessings: makeDefaultBlessings(numPaladins),\n\t\t\t});\n\n\t\t\t// Clear the raid out to avoid any taint issues.\n\t\t\tthis.simUI.clearRaid(eventID);\n\t\t\tthis.simUI.fromProto(eventID, settings);\n\t\t});\n\n\t\tthis.close();\n\t}\n\n\tprivate inferRace(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\twclPlayers.forEach(p => p.player.setRace(eventID, Race.RaceUnknown));\n\n\t\t// If defined in log, use that faction. Otherwise default to UI setting.\n\t\tlet faction = (wclData.guild?.faction?.id || this.simUI.raidPicker?.getCurrentFaction() || Faction.Horde) as Faction;\n\n\t\twclData.combatantInfoEvents.data.forEach((combatantInfo: wclCombatantInfoEvent) => {\n\t\t\tcombatantInfo.auras\n\t\t\t\t.filter(aura => aura.ability == 28878)\n\t\t\t\t.forEach(aura => {\n\t\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == aura.source);\n\t\t\t\t\tif (sourcePlayer && sourcePlayer.player.getRace() != Race.RaceDraenei) {\n\t\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} has race ${raceNames.get(Race.RaceDraenei)} from Heroic Presence aura event`);\n\t\t\t\t\t\tsourcePlayer.player.setRace(eventID, Race.RaceDraenei);\n\t\t\t\t\t\tfaction = Faction.Alliance;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\n\t\tconst castEventsBySpellId = bucket(wclData.reportCastEvents.data as Array<wclCastEvent>, event => String(event.abilityGameID));\n\t\tracialSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclCastEvent> = castEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tif (sourcePlayer) {\n\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} has race ${raceNames.get(spell.race)} from ${spell.name} event`);\n\t\t\t\t\tsourcePlayer.player.setRace(eventID, spell.race);\n\t\t\t\t\tfaction = raceToFaction[spell.race];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\twclPlayers.forEach(p => {\n\t\t\tif (p.player.getRace() == Race.RaceUnknown) {\n\t\t\t\tp.player.setRace(eventID, p.preset.defaultFactionRaces[faction]);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate inferProfessions(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\tconst castEventsBySpellId = bucket(wclData.reportCastEvents.data as Array<wclCastEvent>, event => String(event.abilityGameID));\n\t\tprofessionSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclCastEvent> = castEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tif (sourcePlayer && !sourcePlayer.inferredProfessions.includes(spell.profession)) {\n\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} has profession ${professionNames.get(spell.profession)} from ${spell.name} event`);\n\t\t\t\t\tsourcePlayer.inferredProfessions.push(spell.profession);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\twclPlayers.forEach(player => {\n\t\t\tlet professions = distinct(player.inferredProfessions.concat(player.player.getGear().getProfessionRequirements()));\n\t\t\tif (professions.length == 0) {\n\t\t\t\tprofessions = [Profession.Engineering, Profession.Jewelcrafting];\n\t\t\t} else if (professions.length == 1) {\n\t\t\t\tif (professions[0] != Profession.Engineering) {\n\t\t\t\t\tprofessions.push(Profession.Engineering);\n\t\t\t\t} else {\n\t\t\t\t\tprofessions.push(Profession.Jewelcrafting);\n\t\t\t\t}\n\t\t\t}\n\t\t\tplayer.player.setProfessions(eventID, professions);\n\t\t});\n\t}\n\n\tprivate inferAssignments(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\tconst castEventsBySpellId = bucket(wclData.fightCastEvents.data as Array<wclCastEvent>, event => String(event.abilityGameID));\n\t\texternalCDSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclCastEvent> = castEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tconst targetPlayer = wclPlayers.find(player => player.id == event.targetID);\n\t\t\t\tif (sourcePlayer && targetPlayer && sourcePlayer.player.getClass() == spell.class) {\n\t\t\t\t\tconst specOptions = spell.applyFunc(sourcePlayer.player, targetPlayer.toUnitReference());\n\t\t\t\t\tsourcePlayer.player.setSpecOptions(eventID, specOptions);\n\t\t\t\t\tconsole.log(`Inferring player ${sourcePlayer.name} is targeting ${targetPlayer.name} with ${spell.name} from cast event`);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t// Assigns the raidIndex field for all players.\n\tprivate inferPartyComposition(eventID: EventID, wclData: any, wclPlayers: WCLSimPlayer[]) {\n\t\tconst setPlayersInParty = (player1: WCLSimPlayer, player2: WCLSimPlayer, reason: string) => {\n\t\t\tif (player1.addPlayerInParty(player2) || player2.addPlayerInParty(player1)) {\n\t\t\t\tconsole.log(`Inferring players ${player1.name} and ${player2.name} in same party from ${reason} event`);\n\t\t\t}\n\t\t};\n\n\t\tconst healEventsBySpellId = bucket(wclData.fightHealEvents.data as Array<wclHealEvent>, event => String(event.abilityGameID));\n\n\t\t// These spells only affect players in the same party as the caster.\n\t\tsamePartyHealingSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclHealEvent> = healEventsBySpellId[spell.id] || [];\n\t\t\tspellEvents.forEach(event => {\n\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == event.sourceID);\n\t\t\t\tconst targetPlayer = wclPlayers.find(player => player.id == event.targetID);\n\t\t\t\tif (sourcePlayer && targetPlayer) {\n\t\t\t\t\tsetPlayersInParty(sourcePlayer, targetPlayer, spell.name);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// Prayer of Healing is a bit different, we can infer that players who are targeted at the same time are in a group.\n\t\totherPartyHealingSpells.forEach(spell => {\n\t\t\tconst spellEvents: Array<wclHealEvent> = healEventsBySpellId[spell.id] || [];\n\t\t\tconst spellEventsByTimestamp = bucket(spellEvents, event => String(event.timestamp) + String(event.sourceID));\n\t\t\tfor (const [_timestamp, eventsAtTime] of Object.entries(spellEventsByTimestamp)) {\n\t\t\t\tconst spellTargets = eventsAtTime.map(event => wclPlayers.find(player => player.id == event.targetID));\n\t\t\t\tfor (let i = 0; i < spellTargets.length; i++) {\n\t\t\t\t\tfor (let j = 0; j < spellTargets.length; j++) {\n\t\t\t\t\t\tif (i != j && spellTargets[i] && spellTargets[j]) {\n\t\t\t\t\t\t\tsetPlayersInParty(spellTargets[i]!, spellTargets[j]!, spell.name);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\twclData.combatantInfoEvents.data.forEach((combatantInfo: wclCombatantInfoEvent) => {\n\t\t\tconst targetPlayer = wclPlayers.find(player => player.id == combatantInfo.sourceID);\n\t\t\tcombatantInfo.auras\n\t\t\t\t.filter(aura => aura.ability == 28878)\n\t\t\t\t.forEach(aura => {\n\t\t\t\t\tconst sourcePlayer = wclPlayers.find(player => player.id == aura.source);\n\t\t\t\t\tif (sourcePlayer && targetPlayer) {\n\t\t\t\t\t\tsetPlayersInParty(sourcePlayer, targetPlayer, 'Heroic Presence');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\n\t\t// Assign players with same-group inferences.\n\t\tlet inferredPlayers = wclPlayers.filter(player => player.playersInParty.length > 0);\n\t\tlet nextEmptyPartyIdx = 0;\n\t\twhile (inferredPlayers.length > 0) {\n\t\t\t// Find all the players in the same party as the first player.\n\t\t\tlet partyMembers = [inferredPlayers[0]].concat(inferredPlayers[0].playersInParty);\n\t\t\tlet numMembers = 0;\n\t\t\twhile (partyMembers.length != numMembers) {\n\t\t\t\tnumMembers = partyMembers.length;\n\t\t\t\tpartyMembers = distinct(partyMembers.map(member => [member].concat(member.playersInParty)).flat());\n\t\t\t}\n\n\t\t\t// Assign these members to an empty party.\n\t\t\tconst partyIdx = nextEmptyPartyIdx;\n\t\t\tnextEmptyPartyIdx++;\n\t\t\tpartyMembers.forEach((member, i) => {\n\t\t\t\tmember.raidIndex = partyIdx * 5 + i;\n\t\t\t});\n\n\t\t\tinferredPlayers = inferredPlayers.filter(player => !partyMembers.includes(player));\n\t\t}\n\n\t\t// Assign remaining players into open slots.\n\t\tconst allRaidIndexes = [...Array(40).keys()];\n\t\tconst nextFreeIndex = () => allRaidIndexes.find(idx => !wclPlayers.some(p => p.raidIndex == idx)) ?? -1;\n\t\twclPlayers\n\t\t\t.filter(player => player.raidIndex == -1)\n\t\t\t.forEach(player => {\n\t\t\t\tconst nextIdx = nextFreeIndex();\n\t\t\t\tif (nextIdx == -1) {\n\t\t\t\t\tthrow new Error('Invalid next idx');\n\t\t\t\t}\n\t\t\t\tplayer.raidIndex = nextIdx;\n\t\t\t});\n\t}\n\n\tprivate getEncounterProto(wclData: any): EncounterProto {\n\t\tconst fight: { startTime: number; endTime: number; id: number; name: string } = wclData.fights[0];\n\n\t\tconst encounter = EncounterProto.create({\n\t\t\tduration: (fight.endTime - fight.startTime) / 1000,\n\t\t\ttargets: [],\n\t\t});\n\n\t\t// Use the preset encounter if it exists.\n\t\tconst closestEncounterPreset = this.simUI.sim.db.getAllPresetEncounters().find(enc => enc.path.includes(fight.name));\n\t\tif (closestEncounterPreset && closestEncounterPreset.targets.length) {\n\t\t\tclosestEncounterPreset.targets\n\t\t\t\t.map(mob => mob.target as TargetProto)\n\t\t\t\t.filter(target => target !== undefined)\n\t\t\t\t.forEach(target => encounter.targets.push(target));\n\t\t}\n\n\t\t// Build a manual target list if no preset encounter exists.\n\t\tif (encounter.targets.length === 0) {\n\t\t\tencounter.targets.push(Encounter.defaultTargetProto());\n\t\t}\n\n\t\treturn encounter;\n\t}\n\n\tprivate getRaidProto(wclPlayers: WCLSimPlayer[]): RaidProto {\n\t\tconst raid = RaidProto.create({\n\t\t\tparties: [...new Array(MAX_NUM_PARTIES).keys()].map(_party =>\n\t\t\t\tPartyProto.create({\n\t\t\t\t\tplayers: [...new Array(5).keys()].map(_player => PlayerProto.create()),\n\t\t\t\t}),\n\t\t\t),\n\t\t});\n\n\t\twclPlayers.forEach(player => {\n\t\t\tconst positionInParty = player.raidIndex % 5;\n\t\t\tconst partyIdx = (player.raidIndex - positionInParty) / 5;\n\t\t\tconst playerProto = player.player.toProto();\n\t\t\traid.parties[partyIdx].players[positionInParty] = playerProto;\n\n\t\t\tif (getPlayerSpecFromPlayer(playerProto).isTankSpec) {\n\t\t\t\traid.tanks.push(player.toUnitReference());\n\t\t\t}\n\t\t});\n\n\t\treturn raid;\n\t}\n}\n\nclass WCLSimPlayer {\n\tpublic readonly data: wclPlayer;\n\tpublic readonly id: number;\n\tpublic readonly name: string;\n\tpublic readonly type: string;\n\tpublic raidIndex = -1;\n\n\tprivate readonly simUI: RaidSimUI;\n\tprivate readonly fullType: string;\n\tprivate readonly spec: Spec | null;\n\n\treadonly player: Player<any>;\n\treadonly preset: RaidSimPreset<any>;\n\n\tinferredProfessions: Array<Profession> = [];\n\n\treadonly playersInParty: Array<WCLSimPlayer> = [];\n\n\tconstructor(data: wclPlayer, simUI: RaidSimUI, eventID: EventID) {\n\t\tthis.simUI = simUI;\n\t\tthis.data = data;\n\n\t\tthis.name = data.name;\n\t\tthis.id = data.id;\n\t\tthis.type = data.type;\n\n\t\tconst wclSpec = data.icon.split('-')[1];\n\t\tthis.fullType = this.type + wclSpec;\n\t\tconsole.log(`WCL spec: ${this.fullType}`);\n\n\t\tconst foundSpec = fullTypeToSpec[this.fullType] ?? null;\n\t\tif (foundSpec == null) {\n\t\t\tthrow new Error('Player type not implemented: ' + this.fullType);\n\t\t}\n\t\tthis.spec = foundSpec;\n\t\tthis.player = new Player(PlayerSpecs.fromProto(this.spec), simUI.sim);\n\n\t\tthis.preset = WCLSimPlayer.getMatchingPreset(foundSpec, data.talents);\n\t\tif (this.preset === undefined) {\n\t\t\tthrow new Error(\n\t\t\t\t'Could not find matching preset: ' +\n\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\tname: this.name,\n\t\t\t\t\t\ttype: this.fullType,\n\t\t\t\t\t\ttalents: data.talents,\n\t\t\t\t\t}).toString(),\n\t\t\t);\n\t\t}\n\n\t\t// Apply preset defaults.\n\t\tthis.player.applySharedDefaults(eventID);\n\t\tthis.player.setTalentsString(eventID, this.preset.talents.talentsString);\n\t\tthis.player.setGlyphs(eventID, this.preset.talents.glyphs!);\n\t\tthis.player.setConsumes(eventID, this.preset.consumes);\n\t\tthis.player.setSpecOptions(eventID, this.preset.specOptions);\n\t\tthis.player.setProfessions(eventID, [Profession.Engineering, Profession.Jewelcrafting]);\n\n\t\t// Apply settings from report data.\n\t\tthis.player.setName(eventID, data.name);\n\t\tthis.player.setGear(\n\t\t\teventID,\n\t\t\tsimUI.sim.db.lookupEquipmentSpec(\n\t\t\t\tEquipmentSpec.create({\n\t\t\t\t\titems: data.gear.map(gear =>\n\t\t\t\t\t\tItemSpec.create({\n\t\t\t\t\t\t\tid: gear.id,\n\t\t\t\t\t\t\tenchant: gear.permanentEnchant,\n\t\t\t\t\t\t\tgems: gear.gems ? gear.gems.map(gemInfo => gemInfo.id) : [],\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t\t}),\n\t\t\t),\n\t\t);\n\t}\n\n\tprivate static getMatchingPreset<SpecType extends Spec>(spec: SpecType, talents: wclTalents[]): RaidSimPreset<SpecType> {\n\t\tconst matchingPresets = playerPresets.filter(preset => preset.spec == spec);\n\t\tlet presetIdx = 0;\n\n\t\tif (matchingPresets && matchingPresets.length > 1) {\n\t\t\tlet distance = 999;\n\t\t\t// Search talents and find the preset that the players talents most closely match.\n\t\t\tmatchingPresets.forEach((preset, i) => {\n\t\t\t\tconst presetTalents = getTalentTreePoints(preset.talents.talentsString);\n\t\t\t\t// Diff the distance to the preset.\n\t\t\t\tconst newDistance = presetTalents.reduce((acc, v, i) => (acc += Math.abs(talents[i]?.guid - presetTalents[i])), 0);\n\n\t\t\t\t// If this is the best distance, assign this preset.\n\t\t\t\tif (newDistance < distance) {\n\t\t\t\t\tpresetIdx = i;\n\t\t\t\t\tdistance = newDistance;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn matchingPresets[presetIdx];\n\t}\n\n\tpublic toUnitReference(): UnitReference {\n\t\treturn UnitReference.create({\n\t\t\ttype: UnitReference_Type.Player,\n\t\t\tindex: this.raidIndex,\n\t\t});\n\t}\n\n\tpublic addPlayerInParty(other: WCLSimPlayer): boolean {\n\t\tif (other != this && !this.playersInParty.includes(other)) {\n\t\t\tthis.playersInParty.push(other);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nconst fullTypeToSpec: Record<string, Spec> = {\n\tDeathKnightBlood: Spec.SpecBloodDeathKnight,\n\tDeathKnightFrost: Spec.SpecFrostDeathKnight,\n\tDeathKnightUnholy: Spec.SpecUnholyDeathKnight,\n\tDruidBalance: Spec.SpecBalanceDruid,\n\tDruidFeral: Spec.SpecFeralDruid,\n\t// TOCO: Cata - Verify tank druid\n\t// 'DruidWarden': Spec.SpecFeralDruid,\n\t// 'DruidGuardian': Spec.SpecFeralDruid,\n\tDruidRestoration: Spec.SpecRestorationDruid,\n\tHunterBeastMastery: Spec.SpecBeastMasteryHunter,\n\tHunterMarksmanship: Spec.SpecMarksmanshipHunter,\n\tHunterSurvival: Spec.SpecSurvivalHunter,\n\tMageArcane: Spec.SpecArcaneMage,\n\tMageFire: Spec.SpecFireMage,\n\tMageFrost: Spec.SpecFrostMage,\n\tPaladinHoly: Spec.SpecHolyPaladin,\n\tPaladinJusticar: Spec.SpecProtectionPaladin,\n\tPaladinProtection: Spec.SpecProtectionPaladin,\n\tPaladinRetribution: Spec.SpecRetributionPaladin,\n\tPriestHoly: Spec.SpecHolyPriest,\n\tPriestDiscipline: Spec.SpecDisciplinePriest,\n\tPriestShadow: Spec.SpecShadowPriest,\n\t// 'PriestSmite': Spec.SpecSmitePriest,\n\tRogueAssassination: Spec.SpecAssassinationRogue,\n\tRogueCombat: Spec.SpecCombatRogue,\n\tRogueSubtlety: Spec.SpecSubtletyRogue,\n\tShamanElemental: Spec.SpecElementalShaman,\n\tShamanEnhancement: Spec.SpecEnhancementShaman,\n\tShamanRestoration: Spec.SpecRestorationShaman,\n\tWarlockDestruction: Spec.SpecDestructionWarlock,\n\tWarlockAffliction: Spec.SpecAfflictionWarlock,\n\tWarlockDemonology: Spec.SpecDemonologyWarlock,\n\tWarriorArms: Spec.SpecArmsWarrior,\n\tWarriorFury: Spec.SpecFuryWarrior,\n\t// 'WarriorChampion': Spec.SpecWarrior,\n\t// 'WarriorWarrior': Spec.SpecWarrior,\n\t// 'WarriorGladiator': Spec.SpecWarrior,\n\tWarriorProtection: Spec.SpecProtectionWarrior,\n};\n\n// Spells which imply a specific Race.\nconst racialSpells: Array<{ id: number; name: string; race: Race }> = [\n\t{ id: 25046, name: 'Arcane Torrent (Energy)', race: Race.RaceBloodElf },\n\t{ id: 28730, name: 'Arcane Torrent (Mana)', race: Race.RaceBloodElf },\n\t{ id: 50613, name: 'Arcane Torrent (Runic Power)', race: Race.RaceBloodElf },\n\t{ id: 26297, name: 'Berserking', race: Race.RaceTroll },\n\t{ id: 20572, name: 'Blood Fury (AP)', race: Race.RaceOrc },\n\t{ id: 33697, name: 'Blood Fury (AP+SP)', race: Race.RaceOrc },\n\t{ id: 33702, name: 'Blood Fury (SP)', race: Race.RaceOrc },\n\t{ id: 20589, name: 'Escape Artist', race: Race.RaceGnome },\n\t{ id: 20594, name: 'Stoneform', race: Race.RaceDwarf },\n\t{ id: 20549, name: 'War Stomp', race: Race.RaceTauren },\n\t{ id: 7744, name: 'Will of the Forsaken', race: Race.RaceUndead },\n\t{ id: 59752, name: 'Will to Survive', race: Race.RaceHuman },\n];\n\n// Spells which imply a specific Profession.\nconst professionSpells: Array<{ id: number; name: string; profession: Profession }> = [\n\t{ id: 55503, name: 'Lifeblood', profession: Profession.Herbalism },\n\t{ id: 50305, name: 'Skinning', profession: Profession.Skinning },\n];\n\nconst externalCDSpells: Array<{ id: number; name: string; class: Class; applyFunc: (player: Player<any>, raidTarget: UnitReference) => SpecOptions<any> }> = [\n\t{\n\t\tid: 29166,\n\t\tname: 'Innervate',\n\t\tclass: Class.ClassDruid,\n\t\tapplyFunc: (player: Player<any>, raidTarget: UnitReference) => {\n\t\t\tconst options = player.getSpecOptions() as SpecOptions<DruidSpecs>;\n\t\t\toptions.classOptions!.innervateTarget = raidTarget;\n\t\t\treturn options;\n\t\t},\n\t},\n\t{\n\t\tid: 10060,\n\t\tname: 'Power Infusion',\n\t\tclass: Class.ClassPriest,\n\t\tapplyFunc: (player: Player<any>, raidTarget: UnitReference) => {\n\t\t\tconst options = player.getSpecOptions() as SpecOptions<Spec.SpecDisciplinePriest>;\n\t\t\toptions.powerInfusionTarget = raidTarget;\n\t\t\treturn options;\n\t\t},\n\t},\n\t{\n\t\tid: 57933,\n\t\tname: 'Tricks of the Trade',\n\t\tclass: Class.ClassRogue,\n\t\tapplyFunc: (player: Player<any>, raidTarget: UnitReference) => {\n\t\t\tconst options = player.getSpecOptions() as SpecOptions<RogueSpecs>;\n\t\t\toptions.classOptions!.tricksOfTheTradeTarget = raidTarget;\n\t\t\treturn options;\n\t\t},\n\t},\n\t{\n\t\tid: 49016,\n\t\tname: 'Unholy Frenzy',\n\t\tclass: Class.ClassDeathKnight,\n\t\tapplyFunc: (player: Player<any>, raidTarget: UnitReference) => {\n\t\t\tconst options = player.getSpecOptions() as SpecOptions<Spec.SpecUnholyDeathKnight>;\n\t\t\toptions.unholyFrenzyTarget = raidTarget;\n\t\t\treturn options;\n\t\t},\n\t},\n];\n\n// Healing spells which only affect the caster's party.\nconst samePartyHealingSpells: Array<{ id: number; name: string }> = [\n\t{ id: 52042, name: 'Healing Stream Totem' },\n\t{ id: 48076, name: 'Holy Nova' },\n\t{ id: 48445, name: 'Tranquility' },\n\t{ id: 15290, name: 'Vampiric Embrace' },\n];\n\n// Healing spells which only affect a single party, but not necessarily the caster's party.\nconst otherPartyHealingSpells: Array<{ id: number; name: string }> = [{ id: 48072, name: 'Prayer of Healing' }];\n\ninterface wclUrlData {\n\treportID: string;\n\tfightID: string;\n}\n\ninterface wclCastEvent {\n\ttype: 'cast';\n\ttimestamp: number;\n\tsourceID: number;\n\ttargetID: number;\n\tabilityGameID: number;\n\tfight: number;\n}\n\ninterface wclHealEvent {\n\ttype: 'heal';\n\ttimestamp: number;\n\tsourceID: number;\n\ttargetID: number;\n\tabilityGameID: number;\n\tfight: number;\n\tamount: number;\n}\n\ninterface wclCombatantInfoEvent {\n\ttype: 'combatantinfo';\n\tsourceID: number;\n\tauras: {\n\t\tsource: number;\n\t\tability: number;\n\t\tname: string;\n\t}[];\n}\n\ninterface wclRateLimitData {\n\tlimitPerHour: number;\n\tpointsSpentThisHour: number;\n\tpointsResetIn: number;\n}\n\n// Typed interface for WCL talents\ninterface wclTalents {\n\tname: string;\n\tguid: number;\n\ttype: number;\n\tabilityIcon: string;\n}\n\n// Typed interface for WCL Gems\ninterface wclGems {\n\tid: number;\n\titemLevel: number;\n\ticon: string;\n}\n\n// Typed interface for WCL Gear\ninterface wclGear {\n\tid: number;\n\tslot: number;\n\tquality: number;\n\ticon: string;\n\tname: string;\n\titemLevel: number;\n\tpermanentEnchant: number;\n\tpermanentEnchantName: string;\n\ttemporaryEnchant: number;\n\tgems?: wclGems[];\n}\n\n// Typed interface for WCL Player Data\ninterface wclPlayer {\n\tname: string;\n\tid: number;\n\tguid?: number;\n\ttype: string; // Paladin, Mage, etc.\n\ticon: string; // Paladin-Justicar, Mage-Fire, etc.\n\titemLevel?: number;\n\ttotal?: number;\n\tactiveTime?: number;\n\tactiveTimeReduced?: number;\n\tabilities?: unknown[]; // Don't care about abilities.\n\tdamageAbilities?: unknown[];\n\ttargets?: unknown[];\n\ttalents: wclTalents[];\n\tgear: wclGear[];\n}\n\ninterface _wclAura {\n\tname: string;\n\tid: number;\n\tguid: number;\n\ttype: string;\n\ticon: string;\n\ttotalUptime: number;\n\ttotalUses: number;\n\tbands: {\n\t\tstartTime: number;\n\t\tendTime: number;\n\t}[];\n}\n","import tippy, { Instance as TippyInstance, Props as TippyProps } from 'tippy.js';\nimport { element, ref } from 'tsx-vanilla';\n\nimport { BaseModal } from '../core/components/base_modal.jsx';\nimport { Component } from '../core/components/component.js';\nimport { EnumPicker } from '../core/components/enum_picker.js';\nimport { MAX_PARTY_SIZE, Party } from '../core/party.js';\nimport { Player } from '../core/player.js';\nimport { PlayerClasses } from '../core/player_classes/index.js';\nimport { PlayerSpecs } from '../core/player_specs/index.js';\nimport { Player as PlayerProto } from '../core/proto/api.js';\nimport { Class, Faction, Glyphs, Profession, Spec } from '../core/proto/common.js';\nimport { UnholyDeathKnight_Options } from '../core/proto/death_knight.js';\nimport { BalanceDruid_Options as BalanceDruidOptions } from '../core/proto/druid.js';\nimport { ArcaneMage_Options } from '../core/proto/mage.js';\nimport { getPlayerSpecFromPlayer, newUnitReference, SpecClasses, SpecType } from '../core/proto_utils/utils.js';\nimport { Raid } from '../core/raid.js';\nimport { EventID, TypedEvent } from '../core/typed_event.js';\nimport { formatDeltaTextElem, getEnumValues } from '../core/utils.js';\nimport { playerPresets, specSimFactories } from './presets.js';\nimport { RaidSimUI } from './raid_sim_ui.js';\n\nconst NEW_PLAYER = -1;\n\nconst LATEST_PHASE_WITH_ALL_PRESETS = Math.min(\n\t...playerPresets.map(preset => Math.max(...Object.keys(preset.defaultGear[Faction.Alliance]).map(k => parseInt(k)))),\n);\n\nenum DragType {\n\tNone,\n\tNew,\n\tMove,\n\tSwap,\n\tCopy,\n}\n\nexport class RaidPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly raid: Raid;\n\treadonly partyPickers: Array<PartyPicker>;\n\treadonly newPlayerPicker: NewPlayerPicker;\n\treadonly playerEditorModal: PlayerEditorModal<Spec>;\n\n\t// Hold data about the player being dragged while the drag is happening.\n\tcurrentDragPlayer: Player<any> | null = null;\n\tcurrentDragPlayerFromIndex: number = NEW_PLAYER;\n\tcurrentDragType: DragType = DragType.New;\n\n\t// Hold data about the party being dragged while the drag is happening.\n\tcurrentDragParty: PartyPicker | null = null;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parent, 'raid-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.raid = raidSimUI.sim.raid;\n\n\t\tconst raidControls = document.createElement('div');\n\t\traidControls.classList.add('raid-controls');\n\t\tthis.rootElem.appendChild(raidControls);\n\n\t\tthis.newPlayerPicker = new NewPlayerPicker(this.rootElem, this);\n\t\tthis.playerEditorModal = new PlayerEditorModal();\n\n\t\tconst _activePartiesSelector = new EnumPicker<Raid>(raidControls, this.raidSimUI.sim.raid, {\n\t\t\tlabel: 'Raid Size',\n\t\t\tlabelTooltip: 'Number of players participating in the sim.',\n\t\t\tvalues: [\n\t\t\t\t{ name: '5', value: 1 },\n\t\t\t\t{ name: '10', value: 2 },\n\t\t\t\t{ name: '25', value: 5 },\n\t\t\t],\n\t\t\tchangedEvent: (raid: Raid) => raid.numActivePartiesChangeEmitter,\n\t\t\tgetValue: (raid: Raid) => raid.getNumActiveParties(),\n\t\t\tsetValue: (eventID: EventID, raid: Raid, newValue: number) => {\n\t\t\t\traid.setNumActiveParties(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tconst _factionSelector = new EnumPicker<NewPlayerPicker>(raidControls, this.newPlayerPicker, {\n\t\t\tlabel: 'Default Faction',\n\t\t\tlabelTooltip: 'Default faction for newly-created players.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Alliance', value: Faction.Alliance },\n\t\t\t\t{ name: 'Horde', value: Faction.Horde },\n\t\t\t],\n\t\t\tchangedEvent: (_picker: NewPlayerPicker) => this.raid.sim.factionChangeEmitter,\n\t\t\tgetValue: (_picker: NewPlayerPicker) => this.raid.sim.getFaction(),\n\t\t\tsetValue: (eventID: EventID, picker: NewPlayerPicker, newValue: Faction) => {\n\t\t\t\tthis.raid.sim.setFaction(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tconst _phaseSelector = new EnumPicker<NewPlayerPicker>(raidControls, this.newPlayerPicker, {\n\t\t\tlabel: 'Default Gear',\n\t\t\tlabelTooltip: 'Newly-created players will start with approximate BIS gear from this phase.',\n\t\t\tvalues: [...Array(LATEST_PHASE_WITH_ALL_PRESETS).keys()].map(val => {\n\t\t\t\tconst phase = val + 1;\n\t\t\t\treturn { name: 'Phase ' + phase, value: phase };\n\t\t\t}),\n\t\t\tchangedEvent: (_picker: NewPlayerPicker) => this.raid.sim.phaseChangeEmitter,\n\t\t\tgetValue: (_picker: NewPlayerPicker) => this.raid.sim.getPhase(),\n\t\t\tsetValue: (eventID: EventID, picker: NewPlayerPicker, newValue: number) => {\n\t\t\t\tthis.raid.sim.setPhase(eventID, newValue);\n\t\t\t},\n\t\t});\n\n\t\tconst partiesContainer = document.createElement('div');\n\t\tpartiesContainer.classList.add('parties-container');\n\t\tthis.rootElem.appendChild(partiesContainer);\n\n\t\tthis.partyPickers = this.raid.getParties().map((party, i) => new PartyPicker(partiesContainer, party, i, this));\n\n\t\tconst updateActiveParties = () => {\n\t\t\tif (this.raidSimUI.sim.raid.getNumActiveParties() == 1) {\n\t\t\t\tpartiesContainer.classList.remove('parties-container-small');\n\t\t\t\tpartiesContainer.classList.remove('parties-container-full');\n\t\t\t} else if (this.raidSimUI.sim.raid.getNumActiveParties() <= 2) {\n\t\t\t\tpartiesContainer.classList.add('parties-container-small');\n\t\t\t\tpartiesContainer.classList.remove('parties-container-full');\n\t\t\t} else {\n\t\t\t\tpartiesContainer.classList.remove('parties-container-small');\n\t\t\t\tpartiesContainer.classList.add('parties-container-full');\n\t\t\t}\n\t\t\tthis.partyPickers.forEach(partyPicker => {\n\t\t\t\tif (partyPicker.index < this.raidSimUI.sim.raid.getNumActiveParties()) {\n\t\t\t\t\tpartyPicker.rootElem.classList.add('active');\n\t\t\t\t\tpartyPicker.rootElem.classList.remove('hide');\n\t\t\t\t} else {\n\t\t\t\t\tpartyPicker.rootElem.classList.remove('active');\n\t\t\t\t\tpartyPicker.rootElem.classList.add('hide');\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t\tthis.raidSimUI.sim.raid.numActivePartiesChangeEmitter.on(updateActiveParties);\n\t\tupdateActiveParties();\n\n\t\tthis.rootElem.ondragend = _event => {\n\t\t\t// Uncomment to remove player when dropped 'off' the raid.\n\t\t\t//if (this.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\t//\tconst playerPicker = this.getPlayerPicker(this.currentDragPlayerFromIndex);\n\t\t\t//\tplayerPicker.setPlayer(null, null, DragType.None);\n\t\t\t//}\n\n\t\t\tthis.clearDragPlayer();\n\t\t\tthis.clearDragParty();\n\t\t};\n\t}\n\n\tgetCurrentFaction(): Faction {\n\t\treturn this.raid.sim.getFaction();\n\t}\n\n\tgetCurrentPhase(): number {\n\t\treturn this.raid.sim.getPhase();\n\t}\n\n\tgetPlayerPicker(raidIndex: number): PlayerPicker {\n\t\treturn this.partyPickers[Math.floor(raidIndex / MAX_PARTY_SIZE)].playerPickers[raidIndex % MAX_PARTY_SIZE];\n\t}\n\n\tgetPlayerPickers(): Array<PlayerPicker> {\n\t\treturn [...new Array(25).keys()].map(i => this.getPlayerPicker(i));\n\t}\n\n\tsetDragPlayer(player: Player<any>, fromIndex: number, type: DragType) {\n\t\tthis.clearDragPlayer();\n\n\t\tthis.currentDragPlayer = player;\n\t\tthis.currentDragPlayerFromIndex = fromIndex;\n\t\tthis.currentDragType = type;\n\n\t\tif (fromIndex != NEW_PLAYER) {\n\t\t\tconst playerPicker = this.getPlayerPicker(fromIndex);\n\t\t\tplayerPicker.rootElem.classList.add('dragfrom');\n\t\t}\n\t}\n\n\tclearDragPlayer() {\n\t\tif (this.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\tconst playerPicker = this.getPlayerPicker(this.currentDragPlayerFromIndex);\n\t\t\tplayerPicker.rootElem.classList.remove('dragfrom');\n\t\t}\n\n\t\tthis.currentDragPlayer = null;\n\t\tthis.currentDragPlayerFromIndex = NEW_PLAYER;\n\t\tthis.currentDragType = DragType.New;\n\t}\n\n\tsetDragParty(party: PartyPicker) {\n\t\tthis.currentDragParty = party;\n\t\tparty.rootElem.classList.add('dragfrom');\n\t}\n\tclearDragParty() {\n\t\tif (this.currentDragParty) {\n\t\t\tthis.currentDragParty.rootElem.classList.remove('dragfrom');\n\t\t\tthis.currentDragParty = null;\n\t\t}\n\t}\n}\n\nexport class PartyPicker extends Component {\n\treadonly party: Party;\n\treadonly index: number;\n\treadonly raidPicker: RaidPicker;\n\treadonly playerPickers: Array<PlayerPicker>;\n\n\tconstructor(parent: HTMLElement, party: Party, index: number, raidPicker: RaidPicker) {\n\t\tsuper(parent, 'party-picker-root');\n\t\tthis.party = party;\n\t\tthis.index = index;\n\t\tthis.raidPicker = raidPicker;\n\n\t\tthis.rootElem.setAttribute('draggable', 'true');\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<div class=\"party-header\">\n\t\t\t\t<label class=\"party-label form-label\">Group ${index + 1}</label>\n\t\t\t\t<div class=\"party-results\">\n\t\t\t\t\t<span class=\"party-results-dps\"></span>\n\t\t\t\t\t<span class=\"party-results-reference-delta\"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"players-container\">\n\t\t\t</div>\n\t\t`;\n\n\t\tconst playersContainer = this.rootElem.getElementsByClassName('players-container')[0] as HTMLDivElement;\n\t\tthis.playerPickers = [...Array(MAX_PARTY_SIZE).keys()].map(i => new PlayerPicker(playersContainer, this, i));\n\n\t\tconst dpsResultElem = this.rootElem.getElementsByClassName('party-results-dps')[0] as HTMLElement;\n\t\tconst referenceDeltaElem = this.rootElem.getElementsByClassName('party-results-reference-delta')[0] as HTMLElement;\n\n\t\tthis.raidPicker.raidSimUI.referenceChangeEmitter.on(() => {\n\t\t\tconst currentData = this.raidPicker.raidSimUI.getCurrentData();\n\t\t\tconst referenceData = this.raidPicker.raidSimUI.getReferenceData();\n\n\t\t\tconst partyDps = currentData?.simResult.raidMetrics.parties[this.index]?.dps.avg || 0;\n\t\t\tconst referenceDps = referenceData?.simResult.raidMetrics.parties[this.index]?.dps.avg || 0;\n\n\t\t\tif (partyDps == 0 && referenceDps == 0) {\n\t\t\t\tdpsResultElem.textContent = '';\n\t\t\t\treferenceDeltaElem.textContent = '';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdpsResultElem.textContent = `${partyDps.toFixed(1)} DPS`;\n\n\t\t\tif (!referenceData) {\n\t\t\t\treferenceDeltaElem.textContent = '';\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tformatDeltaTextElem(referenceDeltaElem, referenceDps, partyDps, 1);\n\t\t});\n\n\t\tthis.rootElem.ondragstart = event => {\n\t\t\tif (event.target == this.rootElem) {\n\t\t\t\tevent.dataTransfer!.dropEffect = 'move';\n\t\t\t\tevent.dataTransfer!.effectAllowed = 'all';\n\t\t\t\tthis.raidPicker.setDragParty(this);\n\t\t\t}\n\t\t};\n\n\t\tlet dragEnterCounter = 0;\n\t\tthis.rootElem.ondragenter = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (!this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter++;\n\t\t\tthis.rootElem.classList.add('dragto');\n\t\t};\n\t\tthis.rootElem.ondragleave = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (!this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter--;\n\t\t\tif (dragEnterCounter <= 0) {\n\t\t\t\tthis.rootElem.classList.remove('dragto');\n\t\t\t}\n\t\t};\n\t\tthis.rootElem.ondragover = event => {\n\t\t\tevent.preventDefault();\n\t\t};\n\t\tthis.rootElem.ondrop = event => {\n\t\t\tif (!this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.preventDefault();\n\t\t\tdragEnterCounter = 0;\n\t\t\tthis.rootElem.classList.remove('dragto');\n\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\tconst srcPartyPicker = this.raidPicker.currentDragParty!;\n\n\t\t\t\tfor (let i = 0; i < MAX_PARTY_SIZE; i++) {\n\t\t\t\t\tconst srcPlayerPicker = srcPartyPicker.playerPickers[i]!;\n\t\t\t\t\tconst dstPlayerPicker = this.playerPickers[i]!;\n\n\t\t\t\t\tconst srcPlayer = srcPlayerPicker.player;\n\t\t\t\t\tconst dstPlayer = dstPlayerPicker.player;\n\n\t\t\t\t\tsrcPlayerPicker.setPlayer(eventID, dstPlayer, DragType.Swap);\n\t\t\t\t\tdstPlayerPicker.setPlayer(eventID, srcPlayer, DragType.Swap);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.raidPicker.clearDragParty();\n\t\t};\n\t}\n\n\tgetClosestEmptyIndex() {\n\t\tconst closestEmptyIndex = this.playerPickers.findIndex(pp => !pp.player);\n\t\treturn closestEmptyIndex !== -1 ? closestEmptyIndex : null;\n\t}\n}\n\nconst EMPTY_PLAYER_NAME = 'Unnamed';\n\nexport class PlayerPicker extends Component {\n\t// Index of this player within its party (0-4).\n\treadonly index: number;\n\n\t// Index of this player within the whole raid (0-24).\n\treadonly raidIndex: number;\n\n\tplayer: Player<any> | null;\n\n\treadonly partyPicker: PartyPicker;\n\treadonly raidPicker: RaidPicker;\n\n\tprivate labelElem: HTMLElement | null;\n\tprivate iconElem: HTMLImageElement | null;\n\tprivate nameElem: HTMLInputElement | null;\n\tprivate resultsElem: HTMLElement | null;\n\tprivate dpsResultElem: HTMLElement | null;\n\tprivate referenceDeltaElem: HTMLElement | null;\n\n\tconstructor(parent: HTMLElement, partyPicker: PartyPicker, index: number) {\n\t\tsuper(parent, 'player-picker-root');\n\t\tthis.index = index;\n\t\tthis.raidIndex = partyPicker.index * MAX_PARTY_SIZE + index;\n\t\tthis.player = null;\n\t\tthis.partyPicker = partyPicker;\n\t\tthis.raidPicker = partyPicker.raidPicker;\n\n\t\tthis.labelElem = null;\n\t\tthis.iconElem = null;\n\t\tthis.nameElem = null;\n\t\tthis.resultsElem = null;\n\t\tthis.dpsResultElem = null;\n\t\tthis.referenceDeltaElem = null;\n\n\t\tthis.rootElem.classList.add('player');\n\n\t\tthis.partyPicker.party.compChangeEmitter.on(eventID => {\n\t\t\tconst newPlayer = this.partyPicker.party.getPlayer(this.index);\n\t\t\tif (newPlayer != this.player) this.setPlayer(eventID, newPlayer, DragType.None);\n\t\t});\n\n\t\tthis.raidPicker.raidSimUI.referenceChangeEmitter.on(() => {\n\t\t\tconst currentData = this.raidPicker.raidSimUI.getCurrentData();\n\t\t\tconst referenceData = this.raidPicker.raidSimUI.getReferenceData();\n\n\t\t\tconst playerDps = currentData?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg || 0;\n\t\t\tconst referenceDps = referenceData?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg || 0;\n\n\t\t\tif (this.player) {\n\t\t\t\tthis.resultsElem?.classList.remove('hide');\n\t\t\t\t(this.dpsResultElem as HTMLElement).textContent = `${playerDps.toFixed(1)} DPS`;\n\n\t\t\t\tif (referenceData) formatDeltaTextElem(this.referenceDeltaElem as HTMLElement, referenceDps, playerDps, 1);\n\t\t\t}\n\t\t});\n\n\t\tlet dragEnterCounter = 0;\n\t\tthis.rootElem.ondragenter = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter++;\n\t\t\tthis.rootElem.classList.add('dragto');\n\t\t};\n\t\tthis.rootElem.ondragleave = event => {\n\t\t\tevent.preventDefault();\n\t\t\tif (this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tdragEnterCounter--;\n\t\t\tif (dragEnterCounter <= 0) {\n\t\t\t\tthis.rootElem.classList.remove('dragto');\n\t\t\t}\n\t\t};\n\t\tthis.rootElem.ondragover = event => event.preventDefault();\n\t\tthis.rootElem.ondrop = event => {\n\t\t\tif (this.raidPicker.currentDragParty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst dropData = event.dataTransfer!.getData('text/plain');\n\n\t\t\tevent.preventDefault();\n\t\t\tdragEnterCounter = 0;\n\t\t\tthis.rootElem.classList.remove('dragto');\n\n\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\tif (this.raidPicker.currentDragPlayer == null && dropData.length == 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this.raidPicker.currentDragPlayerFromIndex == this.raidIndex) {\n\t\t\t\t\tthis.raidPicker.clearDragPlayer();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst dragType = this.raidPicker.currentDragType;\n\n\t\t\t\tif (this.raidPicker.currentDragPlayerFromIndex != NEW_PLAYER) {\n\t\t\t\t\tconst fromPlayerPicker = this.raidPicker.getPlayerPicker(this.raidPicker.currentDragPlayerFromIndex);\n\t\t\t\t\tif (dragType == DragType.Swap) {\n\t\t\t\t\t\tfromPlayerPicker.setPlayer(eventID, this.player, dragType);\n\t\t\t\t\t} else if (dragType == DragType.Move) {\n\t\t\t\t\t\tfromPlayerPicker.setPlayer(eventID, null, dragType);\n\t\t\t\t\t}\n\t\t\t\t} else if (this.raidPicker.currentDragPlayer == null) {\n\t\t\t\t\t// This would be a copy from another window.\n\t\t\t\t\tconst binary = atob(dropData);\n\t\t\t\t\tconst bytes = new Uint8Array(binary.length);\n\t\t\t\t\tfor (let i = 0; i < bytes.length; i++) {\n\t\t\t\t\t\tbytes[i] = binary.charCodeAt(i);\n\t\t\t\t\t}\n\t\t\t\t\tconst playerProto = PlayerProto.fromBinary(bytes);\n\n\t\t\t\t\tconst localPlayer = new Player(getPlayerSpecFromPlayer(playerProto), this.raidPicker.raidSimUI.sim);\n\t\t\t\t\tlocalPlayer.fromProto(eventID, playerProto);\n\t\t\t\t\tthis.raidPicker.currentDragPlayer = localPlayer;\n\t\t\t\t}\n\n\t\t\t\tif (dragType == DragType.Copy) {\n\t\t\t\t\tthis.setPlayer(eventID, this.raidPicker.currentDragPlayer!.clone(eventID), dragType);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setPlayer(eventID, this.raidPicker.currentDragPlayer, dragType);\n\t\t\t\t}\n\n\t\t\t\tthis.raidPicker.clearDragPlayer();\n\t\t\t});\n\t\t};\n\n\t\tthis.update();\n\t}\n\n\tsetPlayer(eventID: EventID, newPlayer: Player<any> | null, dragType: DragType) {\n\t\tif (newPlayer == this.player) {\n\t\t\treturn;\n\t\t}\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tconst closestEmptySlot = this.partyPicker.getClosestEmptyIndex();\n\t\t\t// If there's empty slots before the current player, we should place the player there.\n\t\t\tconst placementIndex = closestEmptySlot && closestEmptySlot < this.index ? closestEmptySlot : this.index;\n\n\t\t\tthis.player = newPlayer;\n\n\t\t\tif (newPlayer) {\n\t\t\t\tthis.partyPicker.party.setPlayer(eventID, placementIndex, newPlayer);\n\n\t\t\t\tif (dragType == DragType.New) {\n\t\t\t\t\tapplyNewPlayerAssignments(eventID, newPlayer, this.raidPicker.raid);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Updates the old player's index\n\t\t\t\tthis.partyPicker.party.setPlayer(eventID, placementIndex, newPlayer);\n\t\t\t\t// If the player left a gap in the grouping, we need to shift the rest of the players up.\n\t\t\t\tconst remainingOptionsToMove = this.partyPicker.playerPickers.slice(this.index, 5).filter(pp => pp.player);\n\t\t\t\tremainingOptionsToMove.forEach((pp, index) => {\n\t\t\t\t\tif (placementIndex < pp.index) this.partyPicker.party.setPlayer(eventID, placementIndex + index, pp.player);\n\t\t\t\t});\n\t\t\t\tthis.partyPicker.party.compChangeEmitter.emit(eventID);\n\t\t\t}\n\t\t});\n\n\t\tthis.update();\n\t}\n\n\tprivate update() {\n\t\tif (this.player == null) {\n\t\t\tthis.rootElem.className = 'player-picker-root player';\n\t\t\tthis.rootElem.innerHTML = '';\n\n\t\t\tthis.labelElem = null;\n\t\t\tthis.iconElem = null;\n\t\t\tthis.nameElem = null;\n\t\t\tthis.resultsElem = null;\n\t\t\tthis.dpsResultElem = null;\n\t\t\tthis.referenceDeltaElem = null;\n\t\t} else {\n\t\t\tconst classCssClass = PlayerClasses.getCssClass(this.player.getPlayerClass());\n\n\t\t\tthis.rootElem.className = `player-picker-root player bg-${classCssClass}-dampened`;\n\t\t\tthis.rootElem.innerHTML = `\n\t\t\t\t<div class=\"player-label\">\n\t\t\t\t\t<img class=\"player-icon\" src=\"${this.player.getSpecIcon()}\" draggable=\"true\" />\n\t\t\t\t\t<div class=\"player-details\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclass=\"player-name text-${classCssClass}\"\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tvalue=\"${this.player.getName()}\"\n\t\t\t\t\t\t\tspellcheck=\"false\"\n\t\t\t\t\t\t\tmaxlength=\"15\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div class=\"player-results hide\">\n\t\t\t\t\t\t\t<span class=\"player-results-dps\"></span>\n\t\t\t\t\t\t\t<span class=\"player-results-reference-delta\"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"player-options\">\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"player-edit\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdata-tippy-content=\"Click to Edit\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-edit fa-lg\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"player-copy link-warning\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdraggable=\"true\"\n\t\t\t\t\t\tdata-tippy-content=\"Drag to Copy\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-copy fa-lg\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"player-delete link-danger\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdata-tippy-content=\"Click to Delete\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-times fa-lg\"></i>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t`;\n\n\t\t\tthis.labelElem = this.rootElem.querySelector('.player-label') as HTMLElement;\n\t\t\tthis.iconElem = this.rootElem.querySelector('.player-icon') as HTMLImageElement;\n\t\t\tthis.nameElem = this.rootElem.querySelector('.player-name') as HTMLInputElement;\n\t\t\tthis.resultsElem = this.rootElem.querySelector('.player-results') as HTMLElement;\n\t\t\tthis.dpsResultElem = this.rootElem.querySelector('.player-results-dps') as HTMLElement;\n\t\t\tthis.referenceDeltaElem = this.rootElem.querySelector('.player-results-reference-delta') as HTMLElement;\n\n\t\t\tthis.bindPlayerEvents();\n\t\t}\n\t}\n\n\tprivate bindPlayerEvents() {\n\t\tconst onNameSetHandler = () => {\n\t\t\tthis.player?.setName(TypedEvent.nextEventID(), this.nameElem?.value || '');\n\t\t};\n\t\tthis.nameElem?.addEventListener('input', onNameSetHandler);\n\n\t\tconst onNameMouseDownHandler = () => {\n\t\t\tthis.partyPicker.rootElem.setAttribute('draggable', 'false');\n\t\t};\n\t\tthis.nameElem?.addEventListener('mousedown', onNameMouseDownHandler);\n\n\t\tconst onNameMouseUpHandler = () => {\n\t\t\tthis.partyPicker.rootElem.setAttribute('draggable', 'true');\n\t\t};\n\t\tthis.nameElem?.addEventListener('mouseup', onNameMouseUpHandler);\n\n\t\tconst onNameFocusOutHandler = () => {\n\t\t\tif (this.nameElem && !this.nameElem.value) {\n\t\t\t\tthis.nameElem.value = EMPTY_PLAYER_NAME;\n\t\t\t\tthis.player?.setName(TypedEvent.nextEventID(), this.nameElem.value);\n\t\t\t}\n\t\t};\n\t\tthis.nameElem?.addEventListener('focusout', onNameFocusOutHandler);\n\n\t\tconst dragStart = (event: DragEvent, type: DragType) => {\n\t\t\tif (this.player == null) {\n\t\t\t\tevent.preventDefault();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tevent.dataTransfer!.dropEffect = 'move';\n\t\t\tevent.dataTransfer!.effectAllowed = 'all';\n\n\t\t\tif (this.player) {\n\t\t\t\tconst playerDataProto = this.player.toProto(true);\n\t\t\t\tevent.dataTransfer!.setData('text/plain', btoa(String.fromCharCode(...PlayerProto.toBinary(playerDataProto))));\n\t\t\t}\n\n\t\t\tthis.raidPicker.setDragPlayer(this.player, this.raidIndex, type);\n\t\t};\n\n\t\tconst editElem = this.rootElem.querySelector<HTMLElement>('.player-edit')!;\n\t\tconst copyElem = this.rootElem.querySelector<HTMLElement>('.player-copy')!;\n\t\tconst deleteElem = this.rootElem.querySelector<HTMLElement>('.player-delete')!;\n\n\t\tconst editTooltip = tippy(editElem);\n\t\tconst copyTooltip = tippy(copyElem);\n\t\tconst deleteTooltip = tippy(deleteElem);\n\n\t\tconst onIconDragStartHandler = (event: DragEvent) => {\n\t\t\tevent.dataTransfer!.setDragImage(this.rootElem, 20, 20);\n\t\t\tdragStart(event, DragType.Swap);\n\t\t};\n\t\tthis.iconElem?.addEventListener('dragstart', onIconDragStartHandler);\n\n\t\tconst onEditClickHandler = () => {\n\t\t\tif (this.player) this.raidPicker.playerEditorModal.openEditor(this.player);\n\t\t};\n\t\teditElem.addEventListener('click', onEditClickHandler);\n\n\t\tconst onCopyDragStartHandler = (event: DragEvent) => {\n\t\t\tevent.dataTransfer!.setDragImage(this.rootElem, 20, 20);\n\t\t\tdragStart(event, DragType.Copy);\n\t\t};\n\t\tcopyElem.addEventListener('dragstart', onCopyDragStartHandler);\n\n\t\tconst onDeleteClickHandler = () => {\n\t\t\tthis.setPlayer(TypedEvent.nextEventID(), null, DragType.None);\n\t\t\tthis.dispose();\n\t\t};\n\t\tdeleteElem.addEventListener('click', onDeleteClickHandler);\n\n\t\tthis.addOnDisposeCallback(() => {\n\t\t\tthis.nameElem?.removeEventListener('input', onNameSetHandler);\n\t\t\tthis.nameElem?.removeEventListener('mousedown', onNameMouseDownHandler);\n\t\t\tthis.nameElem?.removeEventListener('mouseup', onNameMouseUpHandler);\n\t\t\tthis.nameElem?.removeEventListener('focusout', onNameFocusOutHandler);\n\n\t\t\tthis.iconElem?.removeEventListener('dragstart', onIconDragStartHandler);\n\t\t\teditElem?.removeEventListener('click', onEditClickHandler);\n\t\t\tcopyElem?.removeEventListener('dragstart', onCopyDragStartHandler);\n\t\t\tdeleteElem?.removeEventListener('click', onDeleteClickHandler);\n\n\t\t\teditTooltip?.destroy();\n\t\t\tcopyTooltip?.destroy();\n\t\t\tdeleteTooltip?.destroy();\n\t\t});\n\t}\n}\n\nclass PlayerEditorModal<SpecType extends Spec> extends BaseModal {\n\tplayerEditorRoot: HTMLDivElement;\n\tconstructor() {\n\t\tsuper(document.body, 'player-editor-modal', {\n\t\t\tcloseButton: { fixed: true },\n\t\t\theader: false,\n\t\t\tdisposeOnClose: false,\n\t\t});\n\n\t\tconst playerEditorElemRef = ref<HTMLDivElement>();\n\t\tconst playerEditorElem = (<div ref={playerEditorElemRef} className=\"player-editor within-raid-sim\"></div>) as HTMLDivElement;\n\n\t\tthis.rootElem.id = 'playerEditorModal';\n\t\tthis.body.appendChild(playerEditorElem);\n\n\t\tthis.playerEditorRoot = playerEditorElemRef.value!;\n\t}\n\n\topenEditor(player: Player<SpecType>) {\n\t\tthis.setData(player);\n\t\tsuper.open();\n\t}\n\n\tsetData(player: Player<SpecType>) {\n\t\tthis.playerEditorRoot.innerHTML = '';\n\t\tspecSimFactories[player.getSpec()]?.(this.playerEditorRoot!, player);\n\t}\n}\n\nclass NewPlayerPicker extends Component {\n\treadonly raidPicker: RaidPicker;\n\n\tconstructor(parent: HTMLElement, raidPicker: RaidPicker) {\n\t\tsuper(parent, 'new-player-picker-root');\n\t\tthis.raidPicker = raidPicker;\n\n\t\tgetEnumValues(Class).forEach(wowClass => {\n\t\t\tif (wowClass == Class.ClassUnknown) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchingPresets = playerPresets.filter(preset => PlayerSpecs.fromProto(preset.spec).classID == wowClass);\n\t\t\tif (matchingPresets.length == 0) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst classPresetsContainer = document.createElement('div');\n\t\t\tclassPresetsContainer.classList.add(\n\t\t\t\t'class-presets-container',\n\t\t\t\t`bg-${PlayerClasses.getCssClass(PlayerClasses.fromProto(wowClass as Class))}-dampened`,\n\t\t\t);\n\t\t\tthis.rootElem.appendChild(classPresetsContainer);\n\n\t\t\tmatchingPresets.forEach(matchingPreset => {\n\t\t\t\tconst playerSpec = PlayerSpecs.fromProto(matchingPreset.spec);\n\t\t\t\tconst presetElemFragment = document.createElement('fragment');\n\t\t\t\tpresetElemFragment.innerHTML = `\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t\tdraggable=\"true\"\n\t\t\t\t\t\tdata-tippy-content=\"${matchingPreset.tooltip ?? PlayerSpecs.getFullSpecName(playerSpec)}\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<img class=\"preset-picker-icon player-icon\" src=\"${playerSpec.getIcon('medium')}\"/>\n\t\t\t\t\t</a>\n\t\t\t\t`;\n\t\t\t\tconst presetElem = presetElemFragment.children[0] as HTMLElement;\n\t\t\t\tclassPresetsContainer.appendChild(presetElem);\n\n\t\t\t\ttippy(presetElem);\n\n\t\t\t\tpresetElem.ondragstart = event => {\n\t\t\t\t\tconst eventID = TypedEvent.nextEventID();\n\t\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\t\tconst dragImage = new Image();\n\t\t\t\t\t\tdragImage.src = matchingPreset.iconUrl ?? playerSpec.getIcon('medium');\n\t\t\t\t\t\tevent.dataTransfer!.setDragImage(dragImage, 30, 30);\n\t\t\t\t\t\tevent.dataTransfer!.setData('text/plain', '');\n\t\t\t\t\t\tevent.dataTransfer!.dropEffect = 'copy';\n\n\t\t\t\t\t\tconst newPlayer = new Player(playerSpec, this.raidPicker.raid.sim);\n\n\t\t\t\t\t\tnewPlayer.applySharedDefaults(eventID);\n\t\t\t\t\t\tnewPlayer.setRace(eventID, matchingPreset.defaultFactionRaces[this.raidPicker.getCurrentFaction()]);\n\t\t\t\t\t\tnewPlayer.setTalentsString(eventID, matchingPreset.talents.talentsString);\n\t\t\t\t\t\tnewPlayer.setGlyphs(eventID, matchingPreset.talents.glyphs || Glyphs.create());\n\t\t\t\t\t\tnewPlayer.setSpecOptions(eventID, matchingPreset.specOptions);\n\t\t\t\t\t\tnewPlayer.setConsumes(eventID, matchingPreset.consumes);\n\t\t\t\t\t\tnewPlayer.setName(eventID, matchingPreset.defaultName ?? playerSpec.friendlyName);\n\t\t\t\t\t\tnewPlayer.setProfession1(eventID, matchingPreset.otherDefaults?.profession1 || Profession.Engineering);\n\t\t\t\t\t\tnewPlayer.setProfession2(eventID, matchingPreset.otherDefaults?.profession2 || Profession.Jewelcrafting);\n\t\t\t\t\t\tnewPlayer.setDistanceFromTarget(eventID, matchingPreset.otherDefaults?.distanceFromTarget || 0);\n\n\t\t\t\t\t\t// Need to wait because the gear might not be loaded yet.\n\t\t\t\t\t\tthis.raidPicker.raid.sim.waitForInit().then(() => {\n\t\t\t\t\t\t\tconst phase = Math.min(this.raidPicker.getCurrentPhase(), LATEST_PHASE_WITH_ALL_PRESETS);\n\t\t\t\t\t\t\tconst gearSet = matchingPreset.defaultGear[this.raidPicker.getCurrentFaction()][phase];\n\t\t\t\t\t\t\tnewPlayer.setGear(eventID, this.raidPicker.raid.sim.db.lookupEquipmentSpec(gearSet));\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.raidPicker.setDragPlayer(newPlayer, NEW_PLAYER, DragType.New);\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n}\n\nfunction applyNewPlayerAssignments(eventID: EventID, newPlayer: Player<any>, raid: Raid) {\n\tif (newPlayer.getPlayerSpec().isTankSpec) {\n\t\tconst tanks = raid.getTanks();\n\t\tconst emptyIdx = tanks.findIndex(tank => raid.getPlayerFromUnitReference(tank) == null);\n\t\tif (emptyIdx == -1) {\n\t\t\tif (tanks.length < 3) {\n\t\t\t\traid.setTanks(eventID, tanks.concat([newPlayer.makeUnitReference()]));\n\t\t\t}\n\t\t} else {\n\t\t\ttanks[emptyIdx] = newPlayer.makeUnitReference();\n\t\t\traid.setTanks(eventID, tanks);\n\t\t}\n\t}\n\n\t// Spec-specific assignments. For most cases, default to buffing self.\n\tif (newPlayer.getSpec() == Spec.SpecBalanceDruid) {\n\t\tconst newOptions = newPlayer.getSpecOptions() as BalanceDruidOptions;\n\t\tnewOptions.classOptions!.innervateTarget = newUnitReference(newPlayer.getRaidIndex());\n\t\tnewPlayer.setSpecOptions(eventID, newOptions);\n\t} else if (newPlayer.getSpec() == Spec.SpecArcaneMage) {\n\t\tconst newOptions = newPlayer.getSpecOptions() as ArcaneMage_Options;\n\t\tnewOptions.focusMagicTarget = newUnitReference(newPlayer.getRaidIndex());\n\t\tnewPlayer.setSpecOptions(eventID, newOptions);\n\t} else if (newPlayer.getSpec() == Spec.SpecUnholyDeathKnight) {\n\t\tconst newOptions = newPlayer.getSpecOptions() as UnholyDeathKnight_Options;\n\t\tnewOptions.unholyFrenzyTarget = newUnitReference(newPlayer.getRaidIndex());\n\t\tnewPlayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n","import tippy from 'tippy.js';\nimport { element, fragment, ref } from 'tsx-vanilla';\n\nimport { Component } from '../core/components/component.js';\nimport { Player } from '../core/player.js';\nimport { PlayerClasses } from '../core/player_classes/index.js';\nimport { PlayerSpecs } from '../core/player_specs/index.js';\nimport { Class, RaidBuffs, Spec } from '../core/proto/common.js';\nimport { HunterOptions_PetType as HunterPetType } from '../core/proto/hunter.js';\nimport { PaladinAura } from '../core/proto/paladin.js';\nimport { AirTotem, EarthTotem, FireTotem, WaterTotem } from '../core/proto/shaman.js';\nimport { WarlockOptions_Summon as WarlockSummon } from '../core/proto/warlock.js';\nimport { WarriorShout } from '../core/proto/warrior.js';\nimport { ActionId } from '../core/proto_utils/action_id.js';\nimport { ClassSpecs, SpecTalents, textCssClassForClass } from '../core/proto_utils/utils.js';\nimport { Raid } from '../core/raid.js';\nimport { sum } from '../core/utils.js';\nimport { RaidSimUI } from './raid_sim_ui.js';\n\ninterface RaidStatsOptions {\n\tsections: Array<RaidStatsSectionOptions>;\n}\n\ninterface RaidStatsSectionOptions {\n\tlabel: string;\n\tcategories: Array<RaidStatsCategoryOptions>;\n}\n\ninterface RaidStatsCategoryOptions {\n\tlabel: string;\n\teffects: Array<RaidStatsEffectOptions>;\n}\n\ntype PlayerProvider = { class?: Class; condition: (player: Player<any>) => boolean };\ntype RaidProvider = (raid: Raid) => boolean;\n\ninterface RaidStatsEffectOptions {\n\tlabel: string;\n\tactionId?: ActionId;\n\tplayerData?: PlayerProvider;\n\traidData?: RaidProvider;\n}\n\nexport class RaidStats extends Component {\n\tprivate readonly categories: Array<RaidStatsCategory>;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parent, 'raid-stats');\n\n\t\tconst categories: Array<RaidStatsCategory> = [];\n\t\tRAID_STATS_OPTIONS.sections.forEach(section => {\n\t\t\tconst contentElemRef = ref<HTMLDivElement>();\n\n\t\t\tconst sectionElem = (\n\t\t\t\t<div className=\"raid-stats-section\">\n\t\t\t\t\t<div className=\"raid-stats-section-header\">\n\t\t\t\t\t\t<label className=\"raid-stats-section-label form-label\">{section.label}</label>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div ref={contentElemRef} className=\"raid-stats-section-content\"></div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t\tthis.rootElem.appendChild(sectionElem);\n\n\t\t\tconst contentElem = contentElemRef.value!;\n\t\t\tsection.categories.forEach(categoryOptions => {\n\t\t\t\tcategories.push(new RaidStatsCategory(contentElem, raidSimUI, categoryOptions));\n\t\t\t});\n\t\t});\n\t\tthis.categories = categories;\n\n\t\traidSimUI.changeEmitter.on(_eventID => this.categories.forEach(c => c.update()));\n\t}\n}\n\nclass RaidStatsCategory extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\tprivate readonly options: RaidStatsCategoryOptions;\n\tprivate readonly effects: Array<RaidStatsEffect>;\n\tprivate readonly counterElem: HTMLElement;\n\tprivate readonly tooltipElem: HTMLElement;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI, options: RaidStatsCategoryOptions) {\n\t\tsuper(parent, 'raid-stats-category-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.options = options;\n\n\t\tconst counterElemRef = ref<HTMLElement>();\n\t\tconst categoryElemRef = ref<HTMLAnchorElement>();\n\t\tthis.rootElem.appendChild(\n\t\t\t<a ref={categoryElemRef} href=\"javascript:void(0)\" className=\"raid-stats-category\" attributes={{ role: 'button' }}>\n\t\t\t\t<span ref={counterElemRef} className=\"raid-stats-category-counter\"></span>\n\t\t\t\t<span className=\"raid-stats-category-label\">{options.label}</span>\n\t\t\t</a>,\n\t\t);\n\n\t\tthis.counterElem = counterElemRef.value!;\n\t\tthis.tooltipElem = (\n\t\t\t<div>\n\t\t\t\t<label className=\"raid-stats-category-label\">{options.label}</label>\n\t\t\t</div>\n\t\t) as HTMLElement;\n\n\t\tthis.effects = options.effects.map(opt => new RaidStatsEffect(this.tooltipElem, raidSimUI, opt));\n\n\t\tif (options.effects.length != 1 || options.effects[0].playerData?.class) {\n\t\t\tconst statsLink = categoryElemRef.value!;\n\n\t\t\t// Using the title option here because outerHTML sanitizes and filters out the img src options\n\t\t\ttippy(statsLink, {\n\t\t\t\ttheme: 'raid-stats-category-tooltip',\n\t\t\t\tplacement: 'right',\n\t\t\t\tcontent: this.tooltipElem,\n\t\t\t});\n\t\t}\n\t}\n\n\tupdate() {\n\t\tthis.effects.forEach(effect => effect.update());\n\n\t\tconst total = sum(this.effects.map(effect => effect.count));\n\t\tthis.counterElem.textContent = String(total);\n\n\t\tconst statsLink = this.rootElem.querySelector<HTMLElement>('.raid-stats-category')!;\n\n\t\tif (total == 0) {\n\t\t\tstatsLink?.classList.remove('active');\n\t\t} else {\n\t\t\tstatsLink?.classList.add('active');\n\t\t}\n\t}\n}\n\nclass RaidStatsEffect extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\tprivate readonly options: RaidStatsEffectOptions;\n\tprivate readonly counterElem: HTMLElement;\n\n\tcurPlayers: Array<Player<any>>;\n\tcount: number;\n\n\tconstructor(parent: HTMLElement, raidSimUI: RaidSimUI, options: RaidStatsEffectOptions) {\n\t\tsuper(parent, 'raid-stats-effect');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.options = options;\n\n\t\tthis.curPlayers = [];\n\t\tthis.count = 0;\n\n\t\tconst counterElemRef = ref<HTMLElement>();\n\t\tconst labelElemRef = ref<HTMLElement>();\n\t\tconst iconElemRef = ref<HTMLImageElement>();\n\t\tthis.rootElem.appendChild(\n\t\t\t<>\n\t\t\t\t<span ref={counterElemRef} className=\"raid-stats-effect-counter\"></span>\n\t\t\t\t<img ref={iconElemRef} className=\"raid-stats-effect-icon\"></img>\n\t\t\t\t<span ref={labelElemRef} className=\"raid-stats-effect-label\">\n\t\t\t\t\t{options.label}\n\t\t\t\t</span>\n\t\t\t</>,\n\t\t);\n\n\t\tthis.counterElem = counterElemRef.value!;\n\n\t\tif (this.options.playerData?.class) {\n\t\t\tconst playerCssClass = textCssClassForClass(PlayerClasses.fromProto(this.options.playerData.class));\n\t\t\tlabelElemRef.value!.classList.add(playerCssClass);\n\t\t}\n\n\t\tif (options.actionId) {\n\t\t\toptions.actionId.fill().then(actionId => (iconElemRef.value!.src = actionId.iconUrl));\n\t\t} else {\n\t\t\ticonElemRef.value!.remove();\n\t\t}\n\t}\n\n\tupdate() {\n\t\tif (this.options.playerData) {\n\t\t\tthis.curPlayers = this.raidSimUI.getActivePlayers().filter(p => this.options.playerData!.condition(p));\n\t\t}\n\n\t\tconst raidData = this.options.raidData && this.options.raidData(this.raidSimUI.sim.raid);\n\n\t\tthis.count = this.curPlayers.length + (raidData ? 1 : 0);\n\t\tthis.counterElem.textContent = String(this.count);\n\t\tif (this.count == 0) {\n\t\t\tthis.rootElem.classList.remove('active');\n\t\t} else {\n\t\t\tthis.rootElem.classList.add('active');\n\t\t}\n\t}\n}\n\nfunction negateIf(val: boolean, cond: boolean): boolean {\n\treturn cond ? !val : val;\n}\n\nfunction playerClass<T extends Class>(clazz: T, extraCondition?: (player: Player<ClassSpecs<T>>) => boolean): PlayerProvider {\n\treturn {\n\t\tclass: clazz,\n\t\tcondition: (player: Player<any>): boolean => {\n\t\t\treturn player.isClass(clazz) && (!extraCondition || extraCondition(player));\n\t\t},\n\t};\n}\nfunction playerClassAndTalentInternal<T extends Class>(\n\tclazz: T,\n\ttalentName: keyof SpecTalents<ClassSpecs<T>>,\n\tnegateTalent: boolean,\n\textraCondition?: (player: Player<ClassSpecs<T>>) => boolean,\n): PlayerProvider {\n\treturn {\n\t\tclass: clazz,\n\t\tcondition: (player: Player<any>): boolean => {\n\t\t\treturn (\n\t\t\t\tplayer.isClass(clazz) &&\n\t\t\t\tnegateIf(Boolean((player.getTalents() as any)[talentName]), negateTalent) &&\n\t\t\t\t(!extraCondition || extraCondition(player))\n\t\t\t);\n\t\t},\n\t};\n}\nfunction playerClassAndTalent<T extends Class>(\n\tclazz: T,\n\ttalentName: keyof SpecTalents<ClassSpecs<T>>,\n\textraCondition?: (player: Player<ClassSpecs<T>>) => boolean,\n): PlayerProvider {\n\treturn playerClassAndTalentInternal(clazz, talentName, false, extraCondition);\n}\nfunction playerClassAndMissingTalent<T extends Class>(\n\tclazz: T,\n\ttalentName: keyof SpecTalents<ClassSpecs<T>>,\n\textraCondition?: (player: Player<ClassSpecs<T>>) => boolean,\n): PlayerProvider {\n\treturn playerClassAndTalentInternal(clazz, talentName, true, extraCondition);\n}\nfunction playerSpecAndTalentInternal<T extends Spec>(\n\tspec: T,\n\ttalentName: keyof SpecTalents<T>,\n\tnegateTalent: boolean,\n\textraCondition?: (player: Player<T>) => boolean,\n): PlayerProvider {\n\treturn {\n\t\tclass: PlayerSpecs.fromProto(spec).classID,\n\t\tcondition: (player: Player<any>): boolean => {\n\t\t\treturn (\n\t\t\t\tplayer.isSpec(spec) && negateIf(Boolean((player.getTalents() as any)[talentName]), negateTalent) && (!extraCondition || extraCondition(player))\n\t\t\t);\n\t\t},\n\t};\n}\nfunction playerSpecAndTalent<T extends Spec>(spec: T, talentName: keyof SpecTalents<T>, extraCondition?: (player: Player<T>) => boolean): PlayerProvider {\n\treturn playerSpecAndTalentInternal(spec, talentName, false, extraCondition);\n}\nfunction playerSpecAndMissingTalent<T extends Spec>(\n\tspec: T,\n\ttalentName: keyof SpecTalents<T>,\n\textraCondition?: (player: Player<T>) => boolean,\n): PlayerProvider {\n\treturn playerSpecAndTalentInternal(spec, talentName, true, extraCondition);\n}\n\nfunction raidBuff(buffName: keyof RaidBuffs): RaidProvider {\n\treturn (raid: Raid): boolean => {\n\t\treturn Boolean(raid.getBuffs()[buffName]);\n\t};\n}\n\nconst RAID_STATS_OPTIONS: RaidStatsOptions = {\n\tsections: [\n\t\t{\n\t\t\tlabel: 'Roles',\n\t\t\tcategories: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Tanks',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Tanks',\n\t\t\t\t\t\t\tplayerData: {\n\t\t\t\t\t\t\t\tcondition: player => player.getPlayerSpec().isTankSpec,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Healers',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Healers',\n\t\t\t\t\t\t\tplayerData: { condition: player => player.getPlayerSpec().isHealingSpec },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Melee',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Melee',\n\t\t\t\t\t\t\tplayerData: { condition: player => player.getPlayerSpec().isMeleeDpsSpec },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Ranged',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Ranged',\n\t\t\t\t\t\t\tplayerData: { condition: player => player.getPlayerSpec().isRangedDpsSpec },\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tlabel: 'Buffs',\n\t\t\tcategories: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Bloodlust',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Bloodlust',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(2825),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassShaman),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Time Warp',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(80353),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassMage),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Stats %',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Mark of the Wild',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(1126),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassDruid),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blessing of Kings',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(20217),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Drums of the Burning Wild',\n\t\t\t\t\t\t\tactionId: ActionId.fromItemId(63140),\n\t\t\t\t\t\t\traidData: raidBuff('drumsOfTheBurningWild'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Strength/Agility',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Strength of Earth Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(8075),\n\t\t\t\t\t\t\tplayerData: playerClass(\n\t\t\t\t\t\t\t\tClass.ClassShaman,\n\t\t\t\t\t\t\t\tplayer => player.getSpecOptions().classOptions?.totems?.earth == EarthTotem.StrengthOfEarthTotem,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Horn of Winter',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(57330),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassDeathKnight),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Battle Shout',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(6673),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarrior),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Armor',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Devotion Aura',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(465),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Stoneskin Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(8071),\n\t\t\t\t\t\t\tplayerData: playerClass(\n\t\t\t\t\t\t\t\tClass.ClassShaman,\n\t\t\t\t\t\t\t\tplayer => player.getSpecOptions().classOptions?.totems?.earth == EarthTotem.StoneskinTotem,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Attack Power %',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blessing of Might',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(19740),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Abominations Might',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(53138),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathKnight, 'abominationsMight'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Unleashed Rage',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(30808),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'unleashedRage'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Trueshot Aura',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(19506),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassHunter, 'trueshotAura'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Spell Power',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Demonic Pact',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(47236),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'demonicPact'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Totemic Wrath',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(77746),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'totemicWrath'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Arcane Brilliance',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(1459),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassMage),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Flametongue Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(8227),\n\t\t\t\t\t\t\tplayerData: playerClass(\n\t\t\t\t\t\t\t\tClass.ClassShaman,\n\t\t\t\t\t\t\t\tplayer => player.getSpecOptions().classOptions?.totems?.fire == FireTotem.FlametongueTotem,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: '+3% Damage',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Communion',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(31876),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'communion'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Arcane Tactics',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(82930),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassMage, 'arcaneTactics'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Ferocious Inspiration',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(34460),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassHunter, 'ferociousInspiration'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Melee Haste',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Icy Talons',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(55610),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathKnight, 'improvedIcyTalons'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Hunting Party',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(53290),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassHunter, 'huntingParty'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Windfury Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(8512),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassShaman, player => player.getSpecOptions().classOptions?.totems?.air == AirTotem.WindfuryTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Spell Haste',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Shadow Form',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(15473),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'shadowform'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Moonkin Form',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(24858),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'moonkinForm'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Wrath of Air Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(3738),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassShaman, player => player.getSpecOptions().classOptions?.totems?.air == AirTotem.WrathOfAirTotem),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: '+5% Crit',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Leader of the Pack',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(17007),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'leaderOfThePack'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Elemental Oath',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(51470),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'elementalOath'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Honor Among Thieves',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(51701),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassRogue, 'honorAmongThieves'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Rampage',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(29801),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'rampage'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Mana',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Arcane Brilliance',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(1459),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassMage),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Fel Intelligence',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(54424),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarlock),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'MP5',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blessing of Might',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(19740),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Fel Intelligence',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(54424),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarlock),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Mana Spring Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(5675),\n\t\t\t\t\t\t\tplayerData: playerClass(\n\t\t\t\t\t\t\t\tClass.ClassShaman,\n\t\t\t\t\t\t\t\tplayer => player.getSpecOptions().classOptions?.totems?.water == WaterTotem.ManaSpringTotem,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Replenishment',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Vampiric Touch',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(34914),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'vampiricTouch'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Communion',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(31876),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'communion'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Revitalize',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48544),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'revitalize'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Soul Leach',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(30295),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'soulLeech'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Enduring Winter',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(86508),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassMage, 'enduringWinter'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Stamina',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Power Word Fortitude',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(21562),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPriest),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blood Pact',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(6307),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarlock),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Commanding Shout',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(469),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarrior),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Resistances',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Resistance Aura',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(19891),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Elemental Resistance Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(8184),\n\t\t\t\t\t\t\tplayerData: playerClass(\n\t\t\t\t\t\t\t\tClass.ClassShaman,\n\t\t\t\t\t\t\t\tplayer => player.getSpecOptions().classOptions?.totems?.water == WaterTotem.ElementalResistanceTotem,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Aspect of the Wild',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(20043),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Shadow Protection',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(27683),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPriest),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blessing of Kings',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(20217),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassPaladin),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Mark of the Wild',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(1126),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassDruid),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tlabel: 'External Buffs',\n\t\t\tcategories: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Innervate',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Innervate',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(29166),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassDruid),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Power Infusion',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Power Infusion',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(10060),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'powerInfusion'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Focus Magic',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Focus Magic',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(54648),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassMage, 'focusMagic'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Tricks of the Trade',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Tricks of the Trade',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(57933),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassRogue),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Dark Intent',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Dark Intent',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(85759),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarlock),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Unholy Frenzy',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Unholy Frenzy',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(49016),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathKnight, 'unholyFrenzy'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Pain Suppression',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Pain Suppression',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(33206),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPriest, 'painSuppression'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Divine Guardian',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Divine Guardian',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(70940),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'divineGuardian'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Mana Tide',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Mana Tide Totem',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(16190),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassShaman, 'manaTideTotem'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tlabel: 'DPS Debuffs',\n\t\t\tcategories: [\n\t\t\t\t{\n\t\t\t\t\tlabel: '-Armor %',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Sunder Armor',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(7386),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarrior),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Expose Armor',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(8647),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassRogue),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Faerie Fire',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(770),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassDruid),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Corosive Spit',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(35387),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().classOptions?.petType == HunterPetType.Serpent),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Phys Vuln',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blood Frenzy',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(29859),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'bloodFrenzy'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Savage Combat',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(58413),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassRogue, 'savageCombat'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Brittle Bones',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(81328),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathKnight, 'brittleBones'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Acid Spit',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(55749),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().classOptions?.petType == HunterPetType.Worm),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: '+Bleed %',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Blood Frenzy',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(29859),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarrior, 'bloodFrenzy'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Mangle',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(33878),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassDruid, player => player.isSpec(Spec.SpecFeralDruid)),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Hemorrhage',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(16511),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassRogue, 'hemorrhage'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Stampede',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(57386),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().classOptions?.petType == HunterPetType.Rhino),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Spell Crit',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Critical Mass',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(12873),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassMage, 'criticalMass'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Shadow and Flame',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(17801),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassWarlock, 'shadowAndFlame'),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Spell Dmg',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Ebon Plaguebringer',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(51160),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathKnight, 'ebonPlaguebringer'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Earth and Moon',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(60433),\n\t\t\t\t\t\t\tplayerData: playerSpecAndTalent(Spec.SpecBalanceDruid, 'earthAndMoon'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Curse of Elements',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(1490),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarlock),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Master Poisoner',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(58410),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassRogue, 'masterPoisoner'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Fire Breath',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(34889),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().classOptions?.petType == HunterPetType.Dragonhawk),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Lightning Breath',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(24844),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().classOptions?.petType == HunterPetType.WindSerpent),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t\t{\n\t\t\tlabel: 'Mitigation Debuffs',\n\t\t\tcategories: [\n\t\t\t\t{\n\t\t\t\t\tlabel: '-Dmg %',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Vindication',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(26016),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'vindication', player =>\n\t\t\t\t\t\t\t\t[Spec.SpecRetributionPaladin, Spec.SpecProtectionPaladin].includes(player.getSpec()),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Curse of Weakness',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(702),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarlock),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Demoralizing Roar',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(99),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassDruid, player => player.isSpec(Spec.SpecFeralDruid)),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Scarlet Fever',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(81130),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDeathKnight, 'scarletFever'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Demoralizing Shout',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(1160),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarrior),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Atk Speed',\n\t\t\t\t\teffects: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Thunder Clap',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(6343),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassWarrior),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Frost Fever',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(59921),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassDeathKnight),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Judgements of the Just',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(53696),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassPaladin, 'judgementsOfTheJust'),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Infected Wounds',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(48484),\n\t\t\t\t\t\t\tplayerData: playerClassAndTalent(Class.ClassDruid, 'infectedWounds', player =>\n\t\t\t\t\t\t\t\t[Spec.SpecFeralDruid, Spec.SpecFeralDruid].includes(player.getSpec()),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Earth Shock',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(8042),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassShaman),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Dust Cloud',\n\t\t\t\t\t\t\tactionId: ActionId.fromSpellId(50285),\n\t\t\t\t\t\t\tplayerData: playerClass(Class.ClassHunter, player => player.getSpecOptions().classOptions?.petType == HunterPetType.Tallstrider),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t],\n\t\t},\n\t],\n};\n","import { SavedDataManager } from '../core/components/saved_data_manager';\nimport { SimTab } from '../core/components/sim_tab';\nimport { Raid as RaidProto } from '../core/proto/api';\nimport { BlessingsAssignments, SavedRaid } from '../core/proto/ui';\nimport { EventID, TypedEvent } from '../core/typed_event';\nimport { RaidPicker } from './raid_picker';\nimport { RaidSimUI } from './raid_sim_ui';\nimport { RaidStats } from './raid_stats';\n\nexport class RaidTab extends SimTab {\n\tprotected simUI: RaidSimUI;\n\n\treadonly leftPanel: HTMLElement;\n\treadonly rightPanel: HTMLElement;\n\n\tconstructor(parentElem: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parentElem, simUI, { identifier: 'raid-tab', title: 'Raid' });\n\t\tthis.simUI = simUI;\n\n\t\tthis.rootElem.classList.add('active', 'show');\n\n\t\tthis.leftPanel = document.createElement('div');\n\t\tthis.leftPanel.classList.add('raid-tab-left', 'tab-panel-left');\n\n\t\tthis.rightPanel = document.createElement('div');\n\t\tthis.rightPanel.classList.add('raid-tab-right', 'tab-panel-right');\n\n\t\tthis.contentContainer.appendChild(this.leftPanel);\n\t\tthis.contentContainer.appendChild(this.rightPanel);\n\n\t\tthis.buildTabContent();\n\t}\n\n\tprotected buildTabContent() {\n\t\tthis.simUI.raidPicker = new RaidPicker(this.leftPanel, this.simUI);\n\t\tnew RaidStats(this.leftPanel, this.simUI);\n\n\t\tconst savedRaidManager = new SavedDataManager<RaidSimUI, SavedRaid>(this.rightPanel, this.simUI, {\n\t\t\tlabel: 'Raid',\n\t\t\theader: { title: 'Saved Raid Groups' },\n\t\t\tstorageKey: this.simUI.getSavedRaidStorageKey(),\n\t\t\tgetData: () =>\n\t\t\t\tSavedRaid.create({\n\t\t\t\t\traid: this.simUI.sim.raid.toProto(),\n\t\t\t\t\tblessings: this.simUI.blessingsPicker?.getAssignments(),\n\t\t\t\t\tfaction: this.simUI.sim.getFaction(),\n\t\t\t\t\tphase: this.simUI.sim.getPhase(),\n\t\t\t\t}),\n\t\t\tsetData: (eventID: EventID, _, newRaid: SavedRaid) => {\n\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\tthis.simUI.sim.raid.fromProto(eventID, newRaid.raid || RaidProto.create());\n\t\t\t\t\tthis.simUI.blessingsPicker?.setAssignments(eventID, newRaid.blessings || BlessingsAssignments.create());\n\t\t\t\t\tif (newRaid.faction) this.simUI.sim.setFaction(eventID, newRaid.faction);\n\t\t\t\t\tif (newRaid.phase) this.simUI.sim.setPhase(eventID, newRaid.phase);\n\t\t\t\t});\n\t\t\t},\n\t\t\tchangeEmitters: [this.simUI.changeEmitter, this.simUI.sim.changeEmitter],\n\t\t\tequals: (a: SavedRaid, b: SavedRaid) => {\n\t\t\t\treturn SavedRaid.equals(a, b);\n\t\t\t},\n\t\t\ttoJson: (a: SavedRaid) => SavedRaid.toJson(a),\n\t\t\tfromJson: (obj: any) => SavedRaid.fromJson(obj),\n\t\t});\n\t\tthis.simUI.sim.waitForInit().then(() => {\n\t\t\tsavedRaidManager.loadUserData();\n\t\t});\n\t}\n}\n","import { Input, InputConfig } from '../components/input.js';\nimport { Player } from '../player.js';\nimport { PlayerClasses } from '../player_classes';\nimport { UnitReference } from '../proto/common.js';\nimport { emptyUnitReference } from '../proto_utils/utils.js';\nimport { Raid } from '../raid.js';\nimport { EventID, TypedEvent } from '../typed_event.js';\n\nexport interface UnitReferencePickerConfig<ModObject> extends InputConfig<ModObject, UnitReference> {\n\tnoTargetLabel: string;\n\tcompChangeEmitter: TypedEvent<void>;\n}\n\ninterface OptionElemOptions {\n\tisDropdown?: boolean;\n\tplayer: Player<any> | null;\n}\n\n// Dropdown menu for selecting a player.\nexport class UnitReferencePicker<ModObject> extends Input<ModObject, UnitReference> {\n\tprivate readonly config: UnitReferencePickerConfig<ModObject>;\n\tprivate readonly raid: Raid;\n\n\tprivate curPlayer: Player<any> | null;\n\tprivate curUnitReference: UnitReference;\n\n\tprivate currentOptions: Array<OptionElemOptions>;\n\n\tprivate readonly buttonElem: HTMLElement;\n\tprivate readonly dropdownElem: HTMLElement;\n\n\tconstructor(parent: HTMLElement, raid: Raid, modObj: ModObject, config: UnitReferencePickerConfig<ModObject>) {\n\t\tsuper(parent, 'raid-target-picker-root', modObj, config);\n\t\tthis.rootElem.classList.add('dropdown');\n\t\tthis.config = config;\n\t\tthis.raid = raid;\n\t\tthis.curPlayer = this.raid.getPlayerFromUnitReference(config.getValue(modObj));\n\t\tthis.curUnitReference = this.getInputValue();\n\n\t\tthis.rootElem.innerHTML = `\n\t\t\t<a\n\t\t\t\tclass=\"raid-target-picker-button\"\n\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\trole=\"button\"\n\t\t\t\tdata-bs-toggle=\"dropdown\"\n\t\t\t></a>\n\t\t\t<div class=\"dropdown-menu\"></div>\n    `;\n\n\t\tthis.buttonElem = this.rootElem.querySelector('.raid-target-picker-button') as HTMLElement;\n\t\tthis.dropdownElem = this.rootElem.querySelector('.dropdown-menu') as HTMLElement;\n\n\t\tthis.buttonElem.addEventListener('click', event => event.preventDefault());\n\n\t\tthis.currentOptions = [];\n\t\tthis.updateOptions(TypedEvent.nextEventID());\n\t\tconfig.compChangeEmitter.on(eventID => this.updateOptions(eventID));\n\n\t\tthis.init();\n\t}\n\n\tprivate makeTargetOptions(): Array<OptionElemOptions> {\n\t\tconst unassignedOption = { player: null, isDropdown: true };\n\t\tconst playerOptions = this.raid\n\t\t\t.getPlayers()\n\t\t\t.filter(player => player != null)\n\t\t\t.map(player => {\n\t\t\t\treturn { player: player, isDropdown: true };\n\t\t\t});\n\n\t\treturn [unassignedOption, ...playerOptions];\n\t}\n\n\tprivate updateOptions(eventID: EventID) {\n\t\tthis.currentOptions = this.makeTargetOptions();\n\n\t\tthis.dropdownElem.innerHTML = '';\n\t\tthis.currentOptions.forEach(option => this.dropdownElem.appendChild(this.makeOption(option)));\n\n\t\tconst prevUnitReference = this.curUnitReference;\n\t\tthis.curUnitReference = this.getInputValue();\n\t\tif (!UnitReference.equals(prevUnitReference, this.curUnitReference)) {\n\t\t\tthis.inputChanged(eventID);\n\t\t} else {\n\t\t\tthis.setInputValue(this.curUnitReference);\n\t\t}\n\t}\n\n\tprivate makeOption(data: OptionElemOptions): HTMLElement {\n\t\tconst option = UnitReferencePicker.makeOptionElem(data);\n\n\t\toption.addEventListener('click', event => {\n\t\t\tevent.preventDefault();\n\t\t\tthis.curPlayer = data.player;\n\t\t\tthis.curUnitReference = this.getInputValue();\n\t\t\tthis.inputChanged(TypedEvent.nextEventID());\n\t\t});\n\n\t\treturn option;\n\t}\n\n\tgetInputElem(): HTMLElement {\n\t\treturn this.buttonElem;\n\t}\n\n\tgetInputValue(): UnitReference {\n\t\tif (this.curPlayer) {\n\t\t\treturn this.curPlayer.makeUnitReference();\n\t\t} else {\n\t\t\treturn emptyUnitReference();\n\t\t}\n\t}\n\n\tsetInputValue(newValue: UnitReference) {\n\t\tthis.curUnitReference = UnitReference.clone(newValue);\n\t\tthis.curPlayer = this.raid.getPlayerFromUnitReference(this.curUnitReference);\n\n\t\tconst optionData = this.currentOptions.find(optionData => optionData.player == this.curPlayer);\n\n\t\tif (optionData) this.buttonElem.innerHTML = UnitReferencePicker.makeOptionElem({ player: optionData.player }).outerHTML;\n\t}\n\n\tstatic makeOptionElem(data: OptionElemOptions): HTMLElement {\n\t\tconst classCssClass = data.player ? PlayerClasses.getCssClass(data.player.getPlayerClass()) : '';\n\t\tconst playerFragment = document.createElement('fragment');\n\n\t\tplayerFragment.innerHTML = `\n\t\t\t<div class=\"player ${classCssClass ? `bg-${classCssClass}-dampened` : ''}\">\n\t\t\t\t<div class=\"player-label\">\n\t\t\t\t\t${data.player ? `<img class=\"player-icon\" src=\"${data.player.getSpecIcon()}\" draggable=\"false\"/>` : ''}\n\t\t\t\t\t<div class=\"player-details\">\n\t\t\t\t\t\t<span class=\"player-name ${classCssClass ? `text-${classCssClass}` : ''}\">\n\t\t\t\t\t\t\t${data.player ? data.player.getName() : 'Unassigned'}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\n\n\t\tif (data.isDropdown) {\n\t\t\tplayerFragment.innerHTML = `\n\t\t\t\t<a class=\"dropdown-option\" href=\"javascript:void(0) role=\"button\">${playerFragment.innerHTML}</a>\n\t\t\t`;\n\t\t}\n\n\t\treturn playerFragment.children[0] as HTMLElement;\n\t}\n}\n","import { Component } from '../core/components/component';\nimport { UnitReferencePicker } from '../core/components/raid_target_picker';\nimport { Player } from '../core/player';\nimport { Class, Spec, UnitReference } from '../core/proto/common';\nimport { DeathKnightTalents } from '../core/proto/death_knight';\nimport { PriestTalents } from '../core/proto/priest';\nimport { emptyUnitReference, RogueSpecs } from '../core/proto_utils/utils';\nimport { EventID, TypedEvent } from '../core/typed_event';\nimport { RaidSimUI } from './raid_sim_ui';\n\nexport class AssignmentsPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly innervatesPicker: InnervatesPicker;\n\tprivate readonly powerInfusionsPicker: PowerInfusionsPicker;\n\tprivate readonly tricksOfTheTradesPicker: TricksOfTheTradesPicker;\n\tprivate readonly unholyFrenzyPicker: UnholyFrenzyPicker;\n\tprivate readonly focusMagicsPicker: FocusMagicsPicker;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'assignments-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\n\t\tthis.innervatesPicker = new InnervatesPicker(this.rootElem, raidSimUI);\n\t\tthis.powerInfusionsPicker = new PowerInfusionsPicker(this.rootElem, raidSimUI);\n\t\tthis.tricksOfTheTradesPicker = new TricksOfTheTradesPicker(this.rootElem, raidSimUI);\n\t\tthis.unholyFrenzyPicker = new UnholyFrenzyPicker(this.rootElem, raidSimUI);\n\t\tthis.focusMagicsPicker = new FocusMagicsPicker(this.rootElem, raidSimUI);\n\t}\n}\n\ninterface AssignmentTargetPicker {\n\tplayer: Player<any>;\n\ttargetPicker: UnitReferencePicker<Player<any>>;\n\ttargetPlayer: Player<any> | null;\n}\n\nabstract class AssignedBuffPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly playersContainer: HTMLElement;\n\n\tprivate targetPickers: Array<AssignmentTargetPicker>;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'assigned-buff-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\t\tthis.targetPickers = [];\n\n\t\tthis.playersContainer = document.createElement('div');\n\t\tthis.playersContainer.classList.add('assigned-buff-container');\n\t\tthis.rootElem.appendChild(this.playersContainer);\n\n\t\tthis.raidSimUI.changeEmitter.on(_eventID => this.update());\n\t\tthis.update();\n\t}\n\n\tprivate update() {\n\t\tthis.playersContainer.innerHTML = `\n\t\t\t<label class=\"assignmented-buff-label form-label\">${this.getTitle()}</label>\n\t\t`;\n\n\t\tconst sourcePlayers = this.getSourcePlayers();\n\t\tif (sourcePlayers.length == 0) this.rootElem.classList.add('hide');\n\t\telse this.rootElem.classList.remove('hide');\n\n\t\tthis.targetPickers = sourcePlayers.map((sourcePlayer, _sourcePlayerIndex) => {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('assigned-buff-player', 'input-inline');\n\t\t\tthis.playersContainer.appendChild(row);\n\n\t\t\tconst sourceElem = document.createElement('div');\n\t\t\tsourceElem.classList.add('raid-target-picker-root');\n\t\t\tsourceElem.appendChild(UnitReferencePicker.makeOptionElem({ player: sourcePlayer, isDropdown: false }));\n\t\t\trow.appendChild(sourceElem);\n\n\t\t\tconst arrow = document.createElement('i');\n\t\t\tarrow.classList.add('assigned-buff-arrow', 'fa', 'fa-arrow-right');\n\t\t\trow.appendChild(arrow);\n\n\t\t\tconst raidTargetPicker: UnitReferencePicker<Player<any>> | null = new UnitReferencePicker<Player<any>>(row, this.raidSimUI.sim.raid, sourcePlayer, {\n\t\t\t\textraCssClasses: ['assigned-buff-target-picker'],\n\t\t\t\tnoTargetLabel: 'Unassigned',\n\t\t\t\tcompChangeEmitter: this.raidSimUI.sim.raid.compChangeEmitter,\n\n\t\t\t\tchangedEvent: (player: Player<any>) => player.specOptionsChangeEmitter,\n\t\t\t\tgetValue: (player: Player<any>) => this.getPlayerValue(player),\n\t\t\t\tsetValue: (eventID: EventID, player: Player<any>, newValue: UnitReference) => this.setPlayerValue(eventID, player, newValue),\n\t\t\t});\n\n\t\t\tconst targetPickerData = {\n\t\t\t\tplayer: sourcePlayer,\n\t\t\t\ttargetPicker: raidTargetPicker!,\n\t\t\t\ttargetPlayer: this.raidSimUI.sim.raid.getPlayerFromUnitReference(raidTargetPicker!.getInputValue()),\n\t\t\t};\n\n\t\t\traidTargetPicker!.changeEmitter.on(_eventID => {\n\t\t\t\ttargetPickerData.targetPlayer = this.raidSimUI.sim.raid.getPlayerFromUnitReference(raidTargetPicker!.getInputValue());\n\t\t\t});\n\n\t\t\treturn targetPickerData;\n\t\t});\n\t}\n\n\tabstract getTitle(): string;\n\tabstract getSourcePlayers(): Array<Player<any>>;\n\n\tabstract getPlayerValue(player: Player<any>): UnitReference;\n\tabstract setPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference): void;\n}\n\nclass InnervatesPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Innervate';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassDruid));\n\t}\n\n\tgetPlayerValue(player: Player<any>): UnitReference {\n\t\treturn (player as Player<Spec.SpecBalanceDruid>).getSpecOptions().classOptions?.innervateTarget || emptyUnitReference();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n\t\tconst newOptions = (player as Player<Spec.SpecBalanceDruid>).getSpecOptions();\n\t\tnewOptions.classOptions!.innervateTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass PowerInfusionsPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Power Infusion';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI\n\t\t\t.getActivePlayers()\n\t\t\t.filter(player => player.isSpec(Spec.SpecDisciplinePriest) && (player.getTalents() as PriestTalents).powerInfusion);\n\t}\n\n\tgetPlayerValue(player: Player<any>): UnitReference {\n\t\treturn (player as Player<Spec.SpecDisciplinePriest>).getSpecOptions().powerInfusionTarget || emptyUnitReference();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n\t\tconst newOptions = (player as Player<Spec.SpecDisciplinePriest>).getSpecOptions();\n\t\tnewOptions.powerInfusionTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass TricksOfTheTradesPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Tricks of the Trade';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isClass(Class.ClassRogue));\n\t}\n\n\tgetPlayerValue(player: Player<any>): UnitReference {\n\t\treturn (player as Player<RogueSpecs>).getSpecOptions().classOptions!.tricksOfTheTradeTarget || emptyUnitReference();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n\t\tconst newOptions = (player as Player<RogueSpecs>).getSpecOptions();\n\t\tnewOptions.classOptions!.tricksOfTheTradeTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass UnholyFrenzyPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Unholy Frenzy';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI\n\t\t\t.getActivePlayers()\n\t\t\t.filter(player => player.isSpec(Spec.SpecUnholyDeathKnight) && (player.getTalents() as DeathKnightTalents).unholyFrenzy);\n\t}\n\n\tgetPlayerValue(player: Player<any>): UnitReference {\n\t\treturn (player as Player<Spec.SpecUnholyDeathKnight>).getSpecOptions().unholyFrenzyTarget || emptyUnitReference();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n\t\tconst newOptions = (player as Player<Spec.SpecUnholyDeathKnight>).getSpecOptions();\n\t\tnewOptions.unholyFrenzyTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n\nclass FocusMagicsPicker extends AssignedBuffPicker {\n\tgetTitle(): string {\n\t\treturn 'Focus Magic';\n\t}\n\n\tgetSourcePlayers(): Array<Player<any>> {\n\t\treturn this.raidSimUI.getActivePlayers().filter(player => player.isSpec(Spec.SpecArcaneMage));\n\t}\n\n\tgetPlayerValue(player: Player<any>): UnitReference {\n\t\treturn (player as Player<Spec.SpecArcaneMage>).getSpecOptions().focusMagicTarget || emptyUnitReference();\n\t}\n\n\tsetPlayerValue(eventID: EventID, player: Player<any>, newValue: UnitReference) {\n\t\tconst newOptions = (player as Player<Spec.SpecArcaneMage>).getSpecOptions();\n\t\tnewOptions.focusMagicTarget = newValue;\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t}\n}\n","import tippy from 'tippy.js';\n\nimport { Component } from '../core/components/component';\nimport { IconEnumPicker } from '../core/components/icon_enum_picker';\nimport { PlayerClasses } from '../core/player_classes';\nimport { Paladin } from '../core/player_classes/paladin';\nimport { PlayerSpec } from '../core/player_spec';\nimport { Class as ClassProto } from '../core/proto/common';\nimport { Blessings } from '../core/proto/paladin';\nimport { BlessingsAssignments } from '../core/proto/ui';\nimport { ActionId } from '../core/proto_utils/action_id';\nimport { makeDefaultBlessings } from '../core/proto_utils/utils';\nimport { EventID, TypedEvent } from '../core/typed_event';\nimport { implementedSpecs } from './presets';\nimport { RaidSimUI } from './raid_sim_ui';\n\nconst MAX_PALADINS = 4;\n\nexport class BlessingsPicker extends Component {\n\treadonly simUI: RaidSimUI;\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly pickers: Array<Array<IconEnumPicker<this, Blessings>>> = [];\n\n\tprivate assignments: BlessingsAssignments;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'blessings-picker-root');\n\t\tthis.simUI = raidSimUI;\n\t\tthis.assignments = BlessingsAssignments.clone(makeDefaultBlessings(4));\n\n\t\tconst playerSpecs = PlayerClasses.naturalOrder\n\t\t\t.map(playerClass => Object.values(playerClass.specs))\n\t\t\t.flat()\n\t\t\t.filter(spec => implementedSpecs.includes(spec.specID));\n\t\tconst paladinIndexes = [...Array(MAX_PALADINS).keys()];\n\n\t\tplayerSpecs.map(playerSpec => {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('blessings-picker-row');\n\t\t\tthis.rootElem.appendChild(row);\n\n\t\t\trow.append(this.buildSpecIcon(playerSpec));\n\n\t\t\tconst container = document.createElement('div');\n\t\t\tcontainer.classList.add('blessings-picker-container');\n\t\t\trow.appendChild(container);\n\n\t\t\tpaladinIndexes.forEach(paladinIdx => {\n\t\t\t\tif (!this.pickers[paladinIdx]) this.pickers.push([]);\n\n\t\t\t\tconst blessingPicker = new IconEnumPicker(container, this, {\n\t\t\t\t\textraCssClasses: ['blessing-picker'],\n\t\t\t\t\tnumColumns: 1,\n\t\t\t\t\tvalues: [\n\t\t\t\t\t\t{ color: Paladin.hexColor, value: Blessings.BlessingUnknown },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(20217), value: Blessings.BlessingOfKings },\n\t\t\t\t\t\t{ actionId: ActionId.fromSpellId(19740), value: Blessings.BlessingOfMight },\n\t\t\t\t\t],\n\t\t\t\t\tequals: (a: Blessings, b: Blessings) => a == b,\n\t\t\t\t\tzeroValue: Blessings.BlessingUnknown,\n\t\t\t\t\tenableWhen: (_picker: BlessingsPicker) => {\n\t\t\t\t\t\tconst numPaladins = Math.min(this.simUI.getClassCount(ClassProto.ClassPaladin), MAX_PALADINS);\n\t\t\t\t\t\treturn paladinIdx < numPaladins;\n\t\t\t\t\t},\n\t\t\t\t\tchangedEvent: (picker: BlessingsPicker) => picker.changeEmitter,\n\t\t\t\t\tgetValue: (picker: BlessingsPicker) => picker.assignments.paladins[paladinIdx]?.blessings[playerSpec.specID] || Blessings.BlessingUnknown,\n\t\t\t\t\tsetValue: (eventID: EventID, picker: BlessingsPicker, newValue: number) => {\n\t\t\t\t\t\tconst currentValue = picker.assignments.paladins[paladinIdx].blessings[playerSpec.specID];\n\t\t\t\t\t\tif (currentValue != newValue) {\n\t\t\t\t\t\t\tpicker.assignments.paladins[paladinIdx].blessings[playerSpec.specID] = newValue;\n\t\t\t\t\t\t\tthis.changeEmitter.emit(eventID);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tthis.pickers[paladinIdx].push(blessingPicker);\n\t\t\t});\n\n\t\t\treturn row;\n\t\t});\n\n\t\tthis.updatePickers();\n\t\tthis.simUI.compChangeEmitter.on(_eventID => this.updatePickers());\n\t}\n\n\tprivate updatePickers() {\n\t\tfor (let i = 0; i < MAX_PALADINS; i++) {\n\t\t\tthis.pickers[i].forEach(picker => picker.update());\n\t\t}\n\t}\n\n\tprivate buildSpecIcon(spec: PlayerSpec<any>): HTMLElement {\n\t\tconst fragment = document.createElement('fragment');\n\t\tfragment.innerHTML = `\n\t\t\t<div class=\"blessings-picker-spec\">\n\t\t\t\t<img\n\t\t\t\t\tsrc=\"${spec.getIcon('medium')}\"\n\t\t\t\t\tclass=\"blessings-spec-icon\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t`;\n\n\t\tconst icon = fragment.querySelector('.blessings-spec-icon') as HTMLElement;\n\t\ttippy(icon, { content: spec.friendlyName });\n\n\t\treturn fragment.children[0] as HTMLElement;\n\t}\n\n\tgetAssignments(): BlessingsAssignments {\n\t\t// Defensive copy.\n\t\treturn BlessingsAssignments.clone(this.assignments);\n\t}\n\n\tsetAssignments(eventID: EventID, newAssignments: BlessingsAssignments) {\n\t\tthis.assignments = BlessingsAssignments.clone(newAssignments);\n\t\tthis.changeEmitter.emit(eventID);\n\t}\n}\n","import { Component } from '../core/components/component';\nimport { UnitReferencePicker } from '../core/components/raid_target_picker';\n\nimport { Raid } from '../core/raid';\nimport { EventID } from '../core/typed_event';\n\nimport { UnitReference } from '../core/proto/common';\nimport { emptyUnitReference } from '../core/proto_utils/utils';\n\nimport { RaidSimUI } from './raid_sim_ui';\n\nconst MAX_TANKS = 4;\n\nexport class TanksPicker extends Component {\n\treadonly raidSimUI: RaidSimUI;\n\n\tconstructor(parentElem: HTMLElement, raidSimUI: RaidSimUI) {\n\t\tsuper(parentElem, 'tanks-picker-root');\n\t\tthis.raidSimUI = raidSimUI;\n\n\t\tconst raid = this.raidSimUI.sim.raid;\n\n\t\tfor (let i = 0; i < MAX_TANKS; i++) {\n\t\t\tconst row = document.createElement('div');\n\t\t\trow.classList.add('tank-picker-row', 'input-inline');\n\t\t\tthis.rootElem.appendChild(row);\n\n\t\t\tconst labelElem = document.createElement('label');\n\t\t\tlabelElem.textContent = i == 0 ? 'Main Tank' : `Tank ${i + 1}`;\n\t\t\tlabelElem.classList.add('tank-picker-label', 'form-label');\n\t\t\trow.appendChild(labelElem);\n\n\t\t\tnew UnitReferencePicker<Raid>(row, raid, raid, {\n\t\t\t\textraCssClasses: ['tank-picker'],\n\t\t\t\tnoTargetLabel: 'Unassigned',\n\t\t\t\tcompChangeEmitter: raid.compChangeEmitter,\n\n\t\t\t\tchangedEvent: (raid: Raid) => raid.tanksChangeEmitter,\n\t\t\t\tgetValue: (raid: Raid) => raid.getTanks()[i] || emptyUnitReference(),\n\t\t\t\tsetValue: (eventID: EventID, raid: Raid, newValue: UnitReference) => {\n\t\t\t\t\tconst tanks = raid.getTanks();\n\t\t\t\t\tfor (let j = 0; j < i; j++) {\n\t\t\t\t\t\tif (!tanks[j]) {\n\t\t\t\t\t\t\ttanks.push(emptyUnitReference());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttanks[i] = newValue;\n\t\t\t\t\traid.setTanks(eventID, tanks);\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}\n}\n","import { ContentBlock } from '../core/components/content_block';\nimport { EncounterPicker } from '../core/components/encounter_picker';\nimport { IconPicker } from '../core/components/icon_picker';\nimport { SavedDataManager } from '../core/components/saved_data_manager';\nimport { SimTab } from '../core/components/sim_tab';\nimport * as Tooltips from '../core/constants/tooltips.js';\nimport { Encounter } from '../core/encounter';\nimport { RaidBuffs } from '../core/proto/common';\nimport { SavedEncounter } from '../core/proto/ui';\nimport { ActionId } from '../core/proto_utils/action_id';\nimport { Raid } from '../core/raid';\nimport { EventID } from '../core/typed_event';\nimport { AssignmentsPicker } from './assignments_picker';\nimport { BlessingsPicker } from './blessings_picker';\nimport { RaidSimUI } from './raid_sim_ui';\nimport { TanksPicker } from './tanks_picker';\n\nexport class SettingsTab extends SimTab {\n\tprotected simUI: RaidSimUI;\n\n\treadonly leftPanel: HTMLElement;\n\treadonly rightPanel: HTMLElement;\n\n\treadonly column1: HTMLElement = this.buildColumn(1, 'raid-settings-col');\n\treadonly column2: HTMLElement = this.buildColumn(2, 'raid-settings-col');\n\treadonly column3: HTMLElement = this.buildColumn(3, 'raid-settings-col');\n\n\tconstructor(parentElem: HTMLElement, simUI: RaidSimUI) {\n\t\tsuper(parentElem, simUI, { identifier: 'raid-settings-tab', title: 'Settings' });\n\t\tthis.simUI = simUI;\n\n\t\tthis.leftPanel = document.createElement('div');\n\t\tthis.leftPanel.classList.add('raid-settings-tab-left', 'tab-panel-left');\n\n\t\tthis.leftPanel.appendChild(this.column1);\n\t\tthis.leftPanel.appendChild(this.column2);\n\t\tthis.leftPanel.appendChild(this.column3);\n\n\t\tthis.rightPanel = document.createElement('div');\n\t\tthis.rightPanel.classList.add('raid-settings-tab-right', 'tab-panel-right', 'within-raid-sim-hide');\n\n\t\tthis.contentContainer.appendChild(this.leftPanel);\n\t\tthis.contentContainer.appendChild(this.rightPanel);\n\n\t\tthis.buildTabContent();\n\t}\n\n\tprotected buildTabContent() {\n\t\tthis.buildEncounterSettings();\n\t\tthis.buildConsumesSettings();\n\n\t\tthis.buildTankSettings();\n\t\tthis.buildAssignmentSettings();\n\t\tthis.buildOtherSettings();\n\n\t\tthis.buildBlessingsPicker();\n\t\tthis.buildSavedDataPickers();\n\t}\n\n\tprivate buildEncounterSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column1, 'encounter-settings', {\n\t\t\theader: { title: 'Encounter' },\n\t\t});\n\n\t\tnew EncounterPicker(contentBlock.bodyElement, this.simUI.sim.encounter, { showExecuteProportion: true }, this.simUI);\n\t}\n\n\tprivate buildConsumesSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column1, 'consumes-settings', {\n\t\t\theader: { title: 'Consumables' },\n\t\t});\n\n\t\tconst container = document.createElement('div');\n\t\tcontainer.classList.add('consumes-container');\n\n\t\tcontentBlock.bodyElement.appendChild(container);\n\n\t\t// this.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(37094), 'scrollOfStamina'),\n\t\t// \tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(43466), 'scrollOfStrength'),\n\t\t// \tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(43464), 'scrollOfAgility'),\n\t\t// \tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(37092), 'scrollOfIntellect'),\n\t\t// \tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(37098), 'scrollOfSpirit'),\n\t\t// \tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(43468), 'scrollOfProtection'),\n\t\t// \tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(49633), 'drumsOfForgottenKings'),\n\t\t// \tthis.makeBooleanRaidIconBuffInput(container, ActionId.fromItemId(49634), 'drumsOfTheWild');\n\t}\n\n\tprivate buildOtherSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column2, 'other-settings', {\n\t\t\theader: { title: 'Other' },\n\t\t});\n\n\t\t// new BooleanPicker(contentBlock.bodyElement, this.simUI.sim.raid, {\n\t\t// \tlabel: 'Stagger Stormstrikes',\n\t\t// \tlabelTooltip: 'When there are multiple Enhancement Shaman in the raid, causes them to coordinate their Stormstrike casts for optimal SS charge usage.',\n\t\t// \tchangedEvent: (raid: Raid) => raid.staggerStormstrikesChangeEmitter,\n\t\t// \tgetValue: (raid: Raid) => raid.getStaggerStormstrikes(),\n\t\t// \tsetValue: (eventID: EventID, raid: Raid, newValue: boolean) => {\n\t\t// \t\traid.setStaggerStormstrikes(eventID, newValue);\n\t\t// \t},\n\t\t// });\n\t}\n\n\tprivate buildTankSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column2, 'tanks-settings', {\n\t\t\theader: { title: 'Tanks' },\n\t\t});\n\n\t\tnew TanksPicker(contentBlock.bodyElement, this.simUI);\n\t}\n\n\tprivate buildAssignmentSettings() {\n\t\tconst contentBlock = new ContentBlock(this.column2, 'assignments-settings', {\n\t\t\theader: { title: 'External Buffs' },\n\t\t});\n\n\t\tnew AssignmentsPicker(contentBlock.bodyElement, this.simUI);\n\t}\n\n\tprivate buildBlessingsPicker() {\n\t\tconst contentBlock = new ContentBlock(this.column3, 'blessings-settings', {\n\t\t\theader: { title: 'Blessings', tooltip: Tooltips.BLESSINGS_SECTION },\n\t\t});\n\n\t\tthis.simUI.blessingsPicker = new BlessingsPicker(contentBlock.bodyElement, this.simUI);\n\t\tthis.simUI.blessingsPicker.changeEmitter.on(eventID => this.simUI.changeEmitter.emit(eventID));\n\t}\n\n\tprivate buildSavedDataPickers() {\n\t\tconst savedEncounterManager = new SavedDataManager<Encounter, SavedEncounter>(this.rightPanel, this.simUI.sim.encounter, {\n\t\t\tlabel: 'Encounter',\n\t\t\theader: { title: 'Saved Encounters' },\n\t\t\tstorageKey: this.simUI.getSavedEncounterStorageKey(),\n\t\t\tgetData: (encounter: Encounter) => SavedEncounter.create({ encounter: encounter.toProto() }),\n\t\t\tsetData: (eventID: EventID, encounter: Encounter, newEncounter: SavedEncounter) => encounter.fromProto(eventID, newEncounter.encounter!),\n\t\t\tchangeEmitters: [this.simUI.sim.encounter.changeEmitter],\n\t\t\tequals: (a: SavedEncounter, b: SavedEncounter) => SavedEncounter.equals(a, b),\n\t\t\ttoJson: (a: SavedEncounter) => SavedEncounter.toJson(a),\n\t\t\tfromJson: (obj: any) => SavedEncounter.fromJson(obj),\n\t\t});\n\n\t\tthis.simUI.sim.waitForInit().then(() => {\n\t\t\tsavedEncounterManager.loadUserData();\n\t\t});\n\t}\n\n\tprivate makeBooleanRaidIconBuffInput(parent: HTMLElement, actionId: ActionId, field: keyof RaidBuffs): IconPicker<Raid, boolean> {\n\t\tconst raid = this.simUI.sim.raid;\n\n\t\treturn new IconPicker<Raid, boolean>(parent, raid, {\n\t\t\tactionId: actionId,\n\t\t\tstates: 2,\n\t\t\tchangedEvent: (raid: Raid) => raid.buffsChangeEmitter,\n\t\t\tgetValue: (raid: Raid) => raid.getBuffs()[field] as unknown as boolean,\n\t\t\tsetValue: (eventID: EventID, raid: Raid, newValue: boolean) => {\n\t\t\t\tconst newBuffs = raid.getBuffs();\n\t\t\t\t(newBuffs[field] as unknown as boolean) = newValue;\n\t\t\t\traid.setBuffs(eventID, newBuffs);\n\t\t\t},\n\t\t});\n\t}\n}\n","import { default as pako } from 'pako';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { element } from 'tsx-vanilla';\n\nimport { EmbeddedDetailedResults } from '../core/components/detailed_results';\nimport { addRaidSimAction, RaidSimResultsManager, ReferenceData } from '../core/components/raid_sim_action';\nimport { raidSimStatus } from '../core/launched_sims';\nimport { Player } from '../core/player';\nimport { Raid as RaidProto } from '../core/proto/api';\nimport { Class, Encounter as EncounterProto } from '../core/proto/common';\nimport { Blessings } from '../core/proto/paladin';\nimport { BlessingsAssignments, RaidSimSettings } from '../core/proto/ui';\nimport { getPlayerSpecFromPlayer, makeDefaultBlessings } from '../core/proto_utils/utils';\nimport { Sim } from '../core/sim';\nimport { SimUI } from '../core/sim_ui';\nimport { EventID, TypedEvent } from '../core/typed_event';\nimport { BlessingsPicker } from './blessings_picker';\nimport * as ImportExport from './import_export';\nimport { implementedSpecs } from './presets';\nimport { RaidPicker } from './raid_picker';\nimport { RaidTab } from './raid_tab';\nimport { SettingsTab } from './settings_tab';\nexport interface RaidSimConfig {\n\tknownIssues?: Array<string>;\n}\n\nconst extraKnownIssues: Array<string> = [\n\t//'We\\'re still missing implementations for many specs. If you\\'d like to help us out, check out our <a href=\"https://github.com/wowsims/cata\">Github project</a> or <a href=\"https://discord.gg/jJMPr9JWwx\">join our discord</a>!',\n];\n\nexport class RaidSimUI extends SimUI {\n\tprivate readonly config: RaidSimConfig;\n\tprivate raidSimResultsManager: RaidSimResultsManager | null = null;\n\tpublic raidPicker: RaidPicker | null = null;\n\tpublic blessingsPicker: BlessingsPicker | null = null;\n\n\t// Emits when the raid comp changes. Includes changes to buff bots.\n\treadonly compChangeEmitter = new TypedEvent<void>();\n\treadonly changeEmitter = new TypedEvent<void>();\n\n\treadonly referenceChangeEmitter = new TypedEvent<void>();\n\n\tconstructor(parentElem: HTMLElement, config: RaidSimConfig) {\n\t\tsuper(parentElem, new Sim(), {\n\t\t\tcssClass: 'raid-sim-ui',\n\t\t\tcssScheme: 'raid',\n\t\t\tspec: null,\n\t\t\tsimStatus: raidSimStatus,\n\t\t\tknownIssues: (config.knownIssues || []).concat(extraKnownIssues),\n\t\t});\n\n\t\tthis.config = config;\n\n\t\tthis.sim.raid.compChangeEmitter.on(eventID => this.compChangeEmitter.emit(eventID));\n\t\t[this.compChangeEmitter, this.sim.changeEmitter].forEach(emitter => emitter.on(eventID => this.changeEmitter.emit(eventID)));\n\t\tthis.changeEmitter.on(() => this.recomputeSettingsLayout());\n\n\t\tthis.sim.setModifyRaidProto(raidProto => this.modifyRaidProto(raidProto));\n\t\tthis.sim.waitForInit().then(() => this.loadSettings());\n\n\t\tthis.addSidebarComponents();\n\t\tthis.addTopbarComponents();\n\t\tthis.addRaidTab();\n\t\tthis.addSettingsTab();\n\t\tthis.addDetailedResultsTab();\n\t}\n\n\tprivate loadSettings() {\n\t\tconst initEventID = TypedEvent.nextEventID();\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tlet loadedSettings = false;\n\n\t\t\tconst savedSettings = window.localStorage.getItem(this.getSettingsStorageKey());\n\t\t\tif (savedSettings != null) {\n\t\t\t\ttry {\n\t\t\t\t\tconst settings = RaidSimSettings.fromJsonString(savedSettings);\n\t\t\t\t\tthis.fromProto(initEventID, settings);\n\t\t\t\t\tloadedSettings = true;\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn('Failed to parse saved settings: ' + e);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!loadedSettings) {\n\t\t\t\tthis.applyDefaults(initEventID);\n\t\t\t}\n\n\t\t\t// This needs to go last so it doesn't re-store things as they are initialized.\n\t\t\tthis.changeEmitter.on(_eventID => {\n\t\t\t\tconst jsonStr = RaidSimSettings.toJsonString(this.toProto());\n\t\t\t\twindow.localStorage.setItem(this.getSettingsStorageKey(), jsonStr);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate addSidebarComponents() {\n\t\tthis.raidSimResultsManager = addRaidSimAction(this);\n\t\tthis.raidSimResultsManager.changeEmitter.on(eventID => this.referenceChangeEmitter.emit(eventID));\n\t}\n\n\tprivate addTopbarComponents() {\n\t\tthis.simHeader.addImportLink('JSON', new ImportExport.RaidJsonImporter(this.rootElem, this));\n\t\tthis.simHeader.addImportLink('WCL', new ImportExport.RaidWCLImporter(this.rootElem, this));\n\n\t\tthis.simHeader.addExportLink('JSON', new ImportExport.RaidJsonExporter(this.rootElem, this));\n\t}\n\n\tprivate addRaidTab() {\n\t\tnew RaidTab(this.simTabContentsContainer, this);\n\t}\n\n\tprivate addSettingsTab() {\n\t\tnew SettingsTab(this.simTabContentsContainer, this);\n\t}\n\n\tprivate addDetailedResultsTab() {\n\t\tconst detailedResults = (<div className=\"detailed-results\"></div>) as HTMLElement;\n\t\tthis.addTab('Results', 'detailed-results-tab', detailedResults);\n\n\t\tnew EmbeddedDetailedResults(detailedResults, this, this.raidSimResultsManager!);\n\t}\n\n\tprivate recomputeSettingsLayout() {\n\t\twindow.dispatchEvent(new Event('resize'));\n\t}\n\n\tprivate modifyRaidProto(raidProto: RaidProto) {\n\t\t// Apply blessings.\n\t\tconst numPaladins = this.getClassCount(Class.ClassPaladin);\n\t\tconst blessingsAssignments = this.blessingsPicker!.getAssignments();\n\t\timplementedSpecs.forEach(spec => {\n\t\t\tconst playerProtos = raidProto.parties\n\t\t\t\t.map(party => party.players.filter(player => player.class != Class.ClassUnknown && getPlayerSpecFromPlayer(player) == spec))\n\t\t\t\t.flat();\n\n\t\t\tblessingsAssignments.paladins.forEach((paladin, i) => {\n\t\t\t\tif (i >= numPaladins) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// TODO: No longer needed per-player\n\t\t\t\tif (paladin.blessings[spec] == Blessings.BlessingOfKings) {\n\t\t\t\t\tplayerProtos.forEach(() => (raidProto.buffs!.blessingOfKings = true));\n\t\t\t\t} else if (paladin.blessings[spec] == Blessings.BlessingOfMight) {\n\t\t\t\t\tplayerProtos.forEach(() => (raidProto.buffs!.blessingOfMight = true));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tgetCurrentData(): ReferenceData | null {\n\t\tif (this.raidSimResultsManager) {\n\t\t\treturn this.raidSimResultsManager.getCurrentData();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetReferenceData(): ReferenceData | null {\n\t\tif (this.raidSimResultsManager) {\n\t\t\treturn this.raidSimResultsManager.getReferenceData();\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetActivePlayers(): Array<Player<any>> {\n\t\treturn this.sim.raid.getActivePlayers();\n\t}\n\n\tgetClassCount(playerClass: Class): number {\n\t\treturn this.getActivePlayers().filter(player => player.isClass(playerClass)).length;\n\t}\n\n\tapplyDefaults(eventID: EventID) {\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tthis.sim.raid.fromProto(\n\t\t\t\teventID,\n\t\t\t\tRaidProto.create({\n\t\t\t\t\tnumActiveParties: 5,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tthis.sim.setPhase(eventID, 1);\n\t\t\tthis.sim.encounter.applyDefaults(eventID);\n\t\t\tthis.sim.applyDefaults(eventID, true, true);\n\t\t\tthis.sim.setShowDamageMetrics(eventID, true);\n\t\t});\n\t}\n\n\ttoProto(): RaidSimSettings {\n\t\tconst numPaladins = this.sim.raid.getPlayers().filter(player => player?.getClass() === Class.ClassPaladin).length;\n\t\treturn RaidSimSettings.create({\n\t\t\tsettings: this.sim.toProto(),\n\t\t\traid: this.sim.raid.toProto(true),\n\t\t\tblessings: this.blessingsPicker?.getAssignments() ?? makeDefaultBlessings(numPaladins),\n\t\t\tencounter: this.sim.encounter.toProto(),\n\t\t});\n\t}\n\n\ttoLink(): string {\n\t\tconst proto = this.toProto();\n\t\t// When sharing links, people generally don't intend to share settings.\n\t\tproto.settings = undefined;\n\n\t\tconst protoBytes = RaidSimSettings.toBinary(proto);\n\t\t// @ts-ignore Pako did some weird stuff between versions and the @types package doesn't correctly support this syntax for version 2.0.4 but it's completely valid\n\t\t// The syntax was removed in 2.1.0 and there were several complaints but the project seems to be largely abandoned now\n\t\tconst deflated = pako.deflate(protoBytes, { to: 'string' });\n\t\tconst encoded = btoa(String.fromCharCode(...deflated));\n\n\t\tconst linkUrl = new URL(window.location.href);\n\t\tlinkUrl.hash = encoded;\n\t\treturn linkUrl.toString();\n\t}\n\n\tfromProto(eventID: EventID, settings: RaidSimSettings) {\n\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\tif (settings.settings) {\n\t\t\t\tthis.sim.fromProto(eventID, settings.settings);\n\t\t\t}\n\t\t\tthis.sim.raid.fromProto(eventID, settings.raid || RaidProto.create());\n\t\t\tthis.sim.encounter.fromProto(eventID, settings.encounter || EncounterProto.create());\n\t\t\tthis.blessingsPicker?.setAssignments(eventID, settings.blessings || BlessingsAssignments.create());\n\t\t});\n\t}\n\n\tclearRaid(eventID: EventID) {\n\t\tthis.sim.raid.clear(eventID);\n\t}\n\n\t// Returns the actual key to use for local storage, based on the given key part and the site context.\n\tgetStorageKey(keyPart: string): string {\n\t\treturn '__cata_raid__' + keyPart;\n\t}\n\n\tgetSavedRaidStorageKey(): string {\n\t\treturn this.getStorageKey('__savedRaid__');\n\t}\n}\n","import { RaidSimUI } from '../raid_sim_ui.js';\n\nnew RaidSimUI(document.body, {});\n"],"names":["specSimFactories","Spec","SpecBloodDeathKnight","parentElem","player","BloodDeathKnightSimUI","SpecFrostDeathKnight","FrostDeathKnightSimUI","SpecUnholyDeathKnight","UnholyDeathKnightSimUI","SpecBalanceDruid","BalanceDruidSimUI","SpecFeralDruid","FeralDruidSimUI","SpecRestorationDruid","RestorationDruidSimUI","SpecBeastMasteryHunter","BeastMasteryHunterSimUI","SpecMarksmanshipHunter","MarksmanshipHunterSimUI","SpecSurvivalHunter","SurvivalHunterSimUI","SpecArcaneMage","ArcaneMageSimUI","SpecFireMage","FireMageSimUI","SpecFrostMage","FrostMageSimUI","SpecHolyPaladin","HolyPaladinSimUI","SpecProtectionPaladin","ProtectionPaladinSimUI","SpecRetributionPaladin","RetributionPaladinSimUI","SpecDisciplinePriest","DisciplinePriestSimUI","SpecHolyPriest","HolyPriestSimUI","SpecShadowPriest","ShadowPriestSimUI","SpecAssassinationRogue","AssassinationRogueSimUI","SpecCombatRogue","CombatRogueSimUI","SpecSubtletyRogue","SubtletyRogueSimUI","SpecElementalShaman","ElementalShamanSimUI","SpecEnhancementShaman","EnhancementShamanSimUI","SpecRestorationShaman","RestorationShamanSimUI","SpecAfflictionWarlock","AfflictionWarlockSimUI","SpecDemonologyWarlock","DemonologyWarlockSimUI","SpecDestructionWarlock","DestructionWarlockSimUI","SpecArmsWarrior","ArmsWarriorSimUI","SpecFuryWarrior","FuryWarriorSimUI","SpecProtectionWarrior","ProtectionWarriorSimUI","playerPresets","PlayerClasses","naturalOrder","map","Object","values","playerClass","specs","flat","playerSpec","getSpecConfig","specID","config","raidSimPresets","implementedSpecs","Set","preset","spec","RaidJsonImporter","Importer","constructor","parent","simUI","super","this","descriptionElem","innerHTML","onImport","data","settings","RaidSimSettings","fromJsonString","ignoreUnknownFields","fromProto","TypedEvent","nextEventID","close","RaidJsonExporter","Exporter","title","allowDownload","init","getData","JSON","stringify","toJson","toProto","RaidWCLImporter","queryCounter","token","textElem","classList","add","getWCLBearerToken","response","fetch","method","headers","Authorization","btoa","body","URLSearchParams","grant_type","json","access_token","queryWCL","query","Accept","queryURL","res","encodeURI","result","errors","length","errorStr","e","message","join","Error","console","debug","parseURL","url","match","urlData","reportID","fightID","fightDataQuery","fights","reportData","report","String","id","getRateLimit","importLink","importButton","disabled","rootElem","style","cursor","doImport","error","alert","removeProperty","reportDataQuery","racialSpells","professionSpells","spell","externalCDSpells","samePartyHealingSpells","otherPartyHealingSpells","wclData","playerData","playerDetails","entries","freezeAllAndDo","eventID","wclPlayers","wclPlayer","WCLSimPlayer","inferRace","inferProfessions","inferAssignments","inferPartyComposition","numPaladins","filter","getClass","Class","ClassPaladin","create","encounter","getEncounterProto","raid","getRaidProto","blessings","makeDefaultBlessings","clearRaid","forEach","p","setRace","Race","RaceUnknown","faction","guild","raidPicker","getCurrentFaction","Faction","Horde","combatantInfoEvents","combatantInfo","auras","aura","ability","sourcePlayer","find","source","getRace","RaceDraenei","log","name","raceNames","get","Alliance","castEventsBySpellId","bucket","reportCastEvents","event","abilityGameID","sourceID","race","raceToFaction","defaultFactionRaces","inferredProfessions","includes","profession","professionNames","push","professions","distinct","concat","getGear","getProfessionRequirements","Profession","Engineering","Jewelcrafting","setProfessions","fightCastEvents","targetPlayer","targetID","class","specOptions","applyFunc","toUnitReference","setSpecOptions","setPlayersInParty","player1","player2","reason","addPlayerInParty","healEventsBySpellId","fightHealEvents","spellEvents","spellEventsByTimestamp","timestamp","_timestamp","eventsAtTime","spellTargets","i","j","inferredPlayers","playersInParty","nextEmptyPartyIdx","partyMembers","numMembers","member","partyIdx","raidIndex","allRaidIndexes","Array","keys","nextIdx","idx","some","fight","EncounterProto","duration","endTime","startTime","targets","closestEncounterPreset","sim","db","getAllPresetEncounters","enc","path","mob","target","Encounter","defaultTargetProto","RaidProto","parties","MAX_NUM_PARTIES","_party","PartyProto","players","_player","PlayerProto","positionInParty","playerProto","getPlayerSpecFromPlayer","isTankSpec","tanks","type","wclSpec","icon","split","fullType","foundSpec","fullTypeToSpec","Player","PlayerSpecs","getMatchingPreset","talents","toString","applySharedDefaults","setTalentsString","talentsString","setGlyphs","glyphs","setConsumes","consumes","setName","setGear","lookupEquipmentSpec","EquipmentSpec","items","gear","ItemSpec","enchant","permanentEnchant","gems","gemInfo","matchingPresets","presetIdx","distance","presetTalents","getTalentTreePoints","newDistance","reduce","acc","v","Math","abs","guid","UnitReference","UnitReference_Type","index","other","DeathKnightBlood","DeathKnightFrost","DeathKnightUnholy","DruidBalance","DruidFeral","DruidRestoration","HunterBeastMastery","HunterMarksmanship","HunterSurvival","MageArcane","MageFire","MageFrost","PaladinHoly","PaladinJusticar","PaladinProtection","PaladinRetribution","PriestHoly","PriestDiscipline","PriestShadow","RogueAssassination","RogueCombat","RogueSubtlety","ShamanElemental","ShamanEnhancement","ShamanRestoration","WarlockDestruction","WarlockAffliction","WarlockDemonology","WarriorArms","WarriorFury","WarriorProtection","RaceBloodElf","RaceTroll","RaceOrc","RaceGnome","RaceDwarf","RaceTauren","RaceUndead","RaceHuman","Herbalism","Skinning","ClassDruid","raidTarget","options","getSpecOptions","classOptions","innervateTarget","ClassPriest","powerInfusionTarget","ClassRogue","tricksOfTheTradeTarget","ClassDeathKnight","unholyFrenzyTarget","NEW_PLAYER","LATEST_PHASE_WITH_ALL_PRESETS","min","max","defaultGear","parseInt","k","RaidPicker","Component","raidSimUI","currentDragPlayer","currentDragPlayerFromIndex","currentDragType","currentDragParty","raidControls","document","createElement","appendChild","newPlayerPicker","NewPlayerPicker","playerEditorModal","PlayerEditorModal","EnumPicker","label","labelTooltip","value","changedEvent","numActivePartiesChangeEmitter","getValue","getNumActiveParties","setValue","newValue","setNumActiveParties","_picker","factionChangeEmitter","getFaction","picker","setFaction","val","phase","phaseChangeEmitter","getPhase","setPhase","partiesContainer","partyPickers","getParties","party","PartyPicker","updateActiveParties","remove","partyPicker","on","ondragend","_event","clearDragPlayer","clearDragParty","getCurrentPhase","getPlayerPicker","floor","MAX_PARTY_SIZE","playerPickers","getPlayerPickers","setDragPlayer","fromIndex","setDragParty","setAttribute","playersContainer","getElementsByClassName","PlayerPicker","dpsResultElem","referenceDeltaElem","referenceChangeEmitter","currentData","getCurrentData","referenceData","getReferenceData","partyDps","simResult","raidMetrics","dps","avg","referenceDps","textContent","toFixed","formatDeltaTextElem","ondragstart","dataTransfer","dropEffect","effectAllowed","dragEnterCounter","ondragenter","preventDefault","ondragleave","ondragover","ondrop","srcPartyPicker","srcPlayerPicker","dstPlayerPicker","srcPlayer","dstPlayer","setPlayer","getClosestEmptyIndex","closestEmptyIndex","findIndex","pp","labelElem","iconElem","nameElem","resultsElem","compChangeEmitter","newPlayer","getPlayer","playerDps","getPlayerWithRaidIndex","dropData","dragType","fromPlayerPicker","binary","atob","bytes","Uint8Array","charCodeAt","fromBinary","localPlayer","clone","update","closestEmptySlot","placementIndex","getPlayerSpec","getTanks","emptyIdx","tank","getPlayerFromUnitReference","setTanks","makeUnitReference","getSpec","newOptions","newUnitReference","getRaidIndex","focusMagicTarget","applyNewPlayerAssignments","slice","emit","className","classCssClass","getCssClass","getPlayerClass","getSpecIcon","getName","querySelector","bindPlayerEvents","onNameSetHandler","addEventListener","onNameMouseDownHandler","onNameMouseUpHandler","onNameFocusOutHandler","dragStart","playerDataProto","setData","fromCharCode","toBinary","editElem","copyElem","deleteElem","editTooltip","tippy","copyTooltip","deleteTooltip","onIconDragStartHandler","setDragImage","onEditClickHandler","openEditor","onCopyDragStartHandler","onDeleteClickHandler","dispose","addOnDisposeCallback","removeEventListener","destroy","BaseModal","closeButton","fixed","header","disposeOnClose","playerEditorElemRef","ref","playerEditorElem","playerEditorRoot","open","getEnumValues","wowClass","ClassUnknown","classID","classPresetsContainer","matchingPreset","presetElemFragment","tooltip","getFullSpecName","getIcon","presetElem","children","dragImage","Image","src","iconUrl","Glyphs","defaultName","friendlyName","setProfession1","otherDefaults","profession1","setProfession2","profession2","setDistanceFromTarget","distanceFromTarget","waitForInit","then","gearSet","RaidStats","categories","RAID_STATS_OPTIONS","sections","section","contentElemRef","sectionElem","element","contentElem","categoryOptions","RaidStatsCategory","changeEmitter","_eventID","c","counterElemRef","categoryElemRef","href","attributes","role","counterElem","tooltipElem","effects","opt","RaidStatsEffect","statsLink","theme","placement","content","effect","total","sum","count","curPlayers","labelElemRef","iconElemRef","fragment","playerCssClass","textCssClassForClass","actionId","fill","getActivePlayers","condition","raidData","negateIf","cond","clazz","extraCondition","isClass","playerClassAndTalent","talentName","negateTalent","Boolean","getTalents","playerClassAndTalentInternal","isHealingSpec","isMeleeDpsSpec","isRangedDpsSpec","ActionId","fromSpellId","ClassShaman","ClassMage","fromItemId","buffName","getBuffs","totems","earth","EarthTotem","StrengthOfEarthTotem","ClassWarrior","StoneskinTotem","ClassHunter","ClassWarlock","fire","FireTotem","FlametongueTotem","air","AirTotem","WindfuryTotem","WrathOfAirTotem","water","WaterTotem","ManaSpringTotem","ElementalResistanceTotem","petType","HunterPetType","Serpent","Worm","isSpec","Rhino","playerSpecAndTalentInternal","Dragonhawk","WindSerpent","Tallstrider","RaidTab","SimTab","identifier","leftPanel","rightPanel","contentContainer","buildTabContent","savedRaidManager","SavedDataManager","storageKey","getSavedRaidStorageKey","SavedRaid","blessingsPicker","getAssignments","_","newRaid","setAssignments","BlessingsAssignments","changeEmitters","equals","a","b","fromJson","obj","loadUserData","UnitReferencePicker","Input","modObj","curPlayer","curUnitReference","getInputValue","buttonElem","dropdownElem","currentOptions","updateOptions","makeTargetOptions","isDropdown","getPlayers","option","makeOption","prevUnitReference","setInputValue","inputChanged","makeOptionElem","getInputElem","emptyUnitReference","optionData","outerHTML","playerFragment","AssignmentsPicker","innervatesPicker","InnervatesPicker","powerInfusionsPicker","PowerInfusionsPicker","tricksOfTheTradesPicker","TricksOfTheTradesPicker","unholyFrenzyPicker","UnholyFrenzyPicker","focusMagicsPicker","FocusMagicsPicker","AssignedBuffPicker","targetPickers","getTitle","sourcePlayers","getSourcePlayers","_sourcePlayerIndex","row","sourceElem","arrow","raidTargetPicker","extraCssClasses","noTargetLabel","specOptionsChangeEmitter","getPlayerValue","setPlayerValue","targetPickerData","targetPicker","powerInfusion","unholyFrenzy","BlessingsPicker","pickers","assignments","playerSpecs","paladinIndexes","append","buildSpecIcon","container","paladinIdx","blessingPicker","IconEnumPicker","numColumns","color","Paladin","hexColor","Blessings","BlessingUnknown","BlessingOfKings","BlessingOfMight","zeroValue","enableWhen","getClassCount","ClassProto","paladins","updatePickers","newAssignments","TanksPicker","tanksChangeEmitter","raid2","SettingsTab","column1","buildColumn","column2","column3","buildEncounterSettings","buildConsumesSettings","buildTankSettings","buildAssignmentSettings","buildOtherSettings","buildBlessingsPicker","buildSavedDataPickers","contentBlock","ContentBlock","EncounterPicker","bodyElement","showExecuteProportion","Tooltips.BLESSINGS_SECTION","savedEncounterManager","getSavedEncounterStorageKey","SavedEncounter","newEncounter","makeBooleanRaidIconBuffInput","field","IconPicker","states","buffsChangeEmitter","newBuffs","setBuffs","extraKnownIssues","SimUI","Sim","cssClass","cssScheme","simStatus","raidSimStatus","knownIssues","raidSimResultsManager","emitter","recomputeSettingsLayout","setModifyRaidProto","raidProto","modifyRaidProto","loadSettings","addSidebarComponents","addTopbarComponents","addRaidTab","addSettingsTab","addDetailedResultsTab","initEventID","loadedSettings","savedSettings","window","localStorage","getItem","getSettingsStorageKey","warn","applyDefaults","jsonStr","toJsonString","setItem","addRaidSimAction","simHeader","addImportLink","ImportExport.RaidJsonImporter","ImportExport.RaidWCLImporter","addExportLink","ImportExport.RaidJsonExporter","simTabContentsContainer","detailedResults","addTab","EmbeddedDetailedResults","dispatchEvent","Event","blessingsAssignments","playerProtos","paladin","buffs","blessingOfKings","blessingOfMight","numActiveParties","setShowDamageMetrics","toLink","proto","protoBytes","deflated","pako","deflate","to","encoded","linkUrl","URL","location","hash","clear","getStorageKey","keyPart"],"mappings":"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"}