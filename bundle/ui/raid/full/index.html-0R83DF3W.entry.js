import{t}from"../../../index-C5Z0f6dO.chunk.js";/* empty css                           */import{g as e,I as a,E as s,a as i,M as r,P as n,b as l,c as o,B as c,d,e as p,f as m,C as h,h as u,i as g,j as f,k as y,S,r as I,p as P}from"../../../preset_utils-Cf2AMUmT.chunk.js";import{S as E,a as b,R as D,b as k,C,c as v,T as w,m as T,F as R,r as U,d as O,e as x,p as L,f as A,E as F,g as M,h as B,i as W,j as H,P as j,k as $,I as N,l as V,U as K,n as z,o as q,q as J,s as G,G as _,t as X,u as Q,v as Z,A as Y,w as tt,x as et,y as at,W as st,H as it,z as rt,B as nt,D as lt,J as ot,K as ct,L as dt,M as pt,N as mt,O as ht,Q as ut,V as gt,X as ft}from"../../../detailed_results-Bq3U1zBE.chunk.js";import{B as yt}from"../../../sim-VooX1d6X.chunk.js";import{F as St}from"../../../sim-2X80RMeg.chunk.js";import{U as It}from"../../../sim-BS54dsGT.chunk.js";import{B as Pt}from"../../../sim-DvgechBU.chunk.js";import{F as Et}from"../../../sim-DROzCM-E.chunk.js";import{R as bt}from"../../../sim-tMMbSwPJ.chunk.js";import{B as Dt}from"../../../sim-DK64Fk0r.chunk.js";import{M as kt}from"../../../sim-C08mr7kM.chunk.js";import{S as Ct}from"../../../sim-DnAlWaJN.chunk.js";import{A as vt}from"../../../sim-B0UCk-nU.chunk.js";import{F as wt}from"../../../sim-QN4jzPld.chunk.js";import{F as Tt}from"../../../sim-Cc4dwTl8.chunk.js";import{H as Rt}from"../../../sim-BcL5DGkI.chunk.js";import{P as Ut}from"../../../sim-kjjuTjjM.chunk.js";import{R as Ot}from"../../../sim-ClxAUC9U.chunk.js";import{D as xt}from"../../../sim-pMKrdkV-.chunk.js";import{H as Lt}from"../../../sim-DaK5wL5z.chunk.js";import{S as At}from"../../../sim-MJGlexNK.chunk.js";import{A as Ft}from"../../../sim-CXSN3aPd.chunk.js";import{C as Mt}from"../../../sim-BZGSZWMr.chunk.js";import{S as Bt}from"../../../sim-B0awEHt-.chunk.js";import{E as Wt}from"../../../sim-D7Nx6bI2.chunk.js";import{E as Ht}from"../../../sim-CtPT6g4F.chunk.js";import{R as jt}from"../../../sim-P-Wfpvje.chunk.js";import{A as $t}from"../../../sim-BQrrJI39.chunk.js";import{D as Nt}from"../../../sim-C70osQyT.chunk.js";import{D as Vt}from"../../../sim-CCP_c6AX.chunk.js";import{A as Kt}from"../../../sim-C5P9maH9.chunk.js";import{F as zt}from"../../../sim-GXXWjZ9y.chunk.js";import{P as qt}from"../../../sim-DJ2eZXM7.chunk.js";import"../../../inputs-DwMxuJEx.chunk.js";import"../../../apl_utils-CBIL9LBW.chunk.js";import"../../../inputs-H9tdHUFC.chunk.js";import"../../../inputs-DKS8583v.chunk.js";import"../../../inputs-CCC0bg2S.chunk.js";import"../../../inputs-C_5ef6q0.chunk.js";import"../../../inputs-B4jqlMuo.chunk.js";import"../../../inputs-CxtZSSYN.chunk.js";import"../../../inputs-BOP9d071.chunk.js";const Jt={[E.SpecBloodDeathKnight]:(t,e)=>new yt(t,e),[E.SpecFrostDeathKnight]:(t,e)=>new St(t,e),[E.SpecUnholyDeathKnight]:(t,e)=>new It(t,e),[E.SpecBalanceDruid]:(t,e)=>new Pt(t,e),[E.SpecFeralDruid]:(t,e)=>new Et(t,e),[E.SpecRestorationDruid]:(t,e)=>new bt(t,e),[E.SpecBeastMasteryHunter]:(t,e)=>new Dt(t,e),[E.SpecMarksmanshipHunter]:(t,e)=>new kt(t,e),[E.SpecSurvivalHunter]:(t,e)=>new Ct(t,e),[E.SpecArcaneMage]:(t,e)=>new vt(t,e),[E.SpecFireMage]:(t,e)=>new wt(t,e),[E.SpecFrostMage]:(t,e)=>new Tt(t,e),[E.SpecHolyPaladin]:(t,e)=>new Rt(t,e),[E.SpecProtectionPaladin]:(t,e)=>new Ut(t,e),[E.SpecRetributionPaladin]:(t,e)=>new Ot(t,e),[E.SpecDisciplinePriest]:(t,e)=>new xt(t,e),[E.SpecHolyPriest]:(t,e)=>new Lt(t,e),[E.SpecShadowPriest]:(t,e)=>new At(t,e),[E.SpecAssassinationRogue]:(t,e)=>new Ft(t,e),[E.SpecCombatRogue]:(t,e)=>new Mt(t,e),[E.SpecSubtletyRogue]:(t,e)=>new Bt(t,e),[E.SpecElementalShaman]:(t,e)=>new Wt(t,e),[E.SpecEnhancementShaman]:(t,e)=>new Ht(t,e),[E.SpecRestorationShaman]:(t,e)=>new jt(t,e),[E.SpecAfflictionWarlock]:(t,e)=>new $t(t,e),[E.SpecDemonologyWarlock]:(t,e)=>new Nt(t,e),[E.SpecDestructionWarlock]:(t,e)=>new Vt(t,e),[E.SpecArmsWarrior]:(t,e)=>new Kt(t,e),[E.SpecFuryWarrior]:(t,e)=>new zt(t,e),[E.SpecProtectionWarrior]:(t,e)=>new qt(t,e)},Gt=b.naturalOrder.map((t=>Object.values(t.specs))).flat().map((t=>e(t.specID))).map((t=>t.raidSimPresets)).flat(),_t=[...new Set(Gt.map((t=>t.spec)))];class Xt extends a{constructor(t,e){super(t,e,"JSON Import",!0),this.simUI=e,this.descriptionElem.innerHTML="\n\t\t\t<p>\n\t\t\t\tImport settings from a JSON text file, which can be created using the JSON Export feature of this site.\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the JSON text below and click, 'Import'.\n\t\t\t</p>\n\t\t"}async onImport(t){const e=v.fromJsonString(t,{ignoreUnknownFields:!0});this.simUI.fromProto(w.nextEventID(),e),this.close()}}class Qt extends s{constructor(t,e){super(t,e,{title:"JSON Export",allowDownload:!0}),this.simUI=e,this.init()}getData(){return JSON.stringify(v.toJson(this.simUI.toProto()),null,2)}}class Zt extends a{constructor(t,e){super(t,e,"WCL Import",!1),this.queryCounter=0,this.token="",this.simUI=e,this.textElem.classList.add("small-textarea"),this.descriptionElem.innerHTML="\n\t\t\t<p>\n\t\t\t\tImports the entire raid from a WCL report.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tTo import, paste the WCL report and fight link (https://classic.warcraftlogs.com/reports/REPORTID#fight=FIGHTID).<br>\n\t\t\t\tInclude the fight ID or else the first fight in the report will be used.<br>\n\t\t\t</p>\n\t\t\t<p>\n\t\t\t\tThe following are imported directly from the report:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Player Name</li>\n\t\t\t\t\t<li>Equipment (items, enchants, and gems)</li>\n\t\t\t\t\t<li>Faction (Alliance / Horde)</li>\n\t\t\t\t\t<li>Encounter: If the import link has a fight ID we try to match with a preset Encounter. Note that many Encounters are still unimplemented.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not available directly from the report data, but we try to infer them:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Talents: Log data only gives us the tree summary (e.g. '51/20/0') so we match this with the closest preset talent build.</li>\n\t\t\t\t\t<li>Glyphs: Glyphs are absent from log data, but we pair them with the inferred Talents.</li>\n\t\t\t\t\t<li>Race: Inferred from Race-specific abilties used in any fight if possible, or defaults to Spec-specific Race.</li>\n\t\t\t\t\t<li>Professions: Inferred from profession-locked items/enchants/gems.</li>\n\t\t\t\t\t<li>Buff assignments (Innervate, Unholy Frenzy, etc): Inferred from casts.</li>\n\t\t\t\t\t<li>Party Composition: Inferred from party-only effects, such as Prayer of Healing, or Vampiric Touch.</li>\n\t\t\t\t</ul>\n\n\t\t\t\tThe following are not imported, and instead use spec-specific defaults:\n\t\t\t\t<ul>\n\t\t\t\t\t<li>Rotation / Spec-specific options</li>\n\t\t\t\t\t<li>Consumes</li>\n\t\t\t\t\t<li>Paladin Blessings</li>\n\t\t\t\t</ul>\n\t\t\t</p>\n\t\t"}async getWCLBearerToken(){if(""==this.token){const t=await fetch("https://classic.warcraftlogs.com/oauth/token",{method:"POST",headers:{Authorization:"Basic "+btoa("963d31c8-7efa-4dde-87cf-1b254a8a2f8c:lRJVhujEEnF96xfUoxVHSpnqKN9v8bTqGEjutsO3")},body:new URLSearchParams({grant_type:"client_credentials"})}),e=await t.json();this.token=e.access_token}return this.token}async queryWCL(t){const e={"Content-Type":"application/json",Authorization:`Bearer ${await this.getWCLBearerToken()}`,Accept:"application/json"},a=`https://classic.warcraftlogs.com/api/v2/client?query=${t}`;this.queryCounter++;const s=await fetch(encodeURI(a),{method:"GET",headers:e}),i=await s.json();if(i?.errors?.length){const e=i.errors.map((t=>t.message)).join("\n");throw new Error(`GraphQL error: ${e}\n\nQuery: ${t}`)}return console.debug(`WCL query: ${t}\n\nResult: ${JSON.stringify(i)}`),i}async parseURL(t){const e=t.match(/classic\.warcraftlogs\.com\/reports\/([a-zA-Z0-9:]+)\/?(#.*fight=((\d+)|(last)))?/);if(!e)throw new Error(`Invalid WCL URL ${t}, must look like "classic.warcraftlogs.com/reports/XXXX"`);const a={reportID:e[1],fightID:""};if(e[2]&&e[3]&&"last"!=e[3])a.fightID=e[3];else{const t=`{\n\t\t\t\treportData {\n\t\t\t\t\treport(code: "${a.reportID}") {\n\t\t\t\t\t\tfights(killType: Kills, translate: true) {\n\t\t\t\t\t\t\tid, name\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}`,s=(await this.queryWCL(t)).data.reportData.report.fights;"last"==e[3]?a.fightID=String(s[s.length-1].id):a.fightID=String(s[0].id)}return console.debug(`Importing WCL report: ${JSON.stringify(a)}`),a}async getRateLimit(){return(await this.queryWCL("{\n\t    rateLimitData {\n\t      limitPerHour, pointsSpentThisHour, pointsResetIn\n\t    }\n\t  }")).data.rateLimitData}async onImport(t){this.importButton.disabled=!0,this.rootElem.style.cursor="wait";try{await this.doImport(t)}catch(e){console.error(e),alert("Failed import from WCL: "+e)}this.importButton.disabled=!1,this.rootElem.style.removeProperty("cursor")}async doImport(t){if(!t.length)throw new Error("No import link provided!");const e=await this.parseURL(t);await this.getRateLimit();const a=`{\n\t\t\treportData {\n\t\t\t\treport(code: "${e.reportID}") {\n\t\t\t\t\tguild {\n\t\t\t\t\t\tname faction {id}\n\t\t\t\t\t}\n\t\t\t\t\tplayerDetails: table(fightIDs: [${e.fightID}], dataType: Casts, killType: All, viewBy: Default)\n\t\t\t\t\tcombatantInfoEvents: events(fightIDs: [${e.fightID}], dataType:CombatantInfo, limit: 50) { data }\n\t\t\t\t\tfights(fightIDs: [${e.fightID}]) {\n\t\t\t\t\t\tstartTime, endTime, id, name\n\t\t\t\t\t}\n\n\t\t\t\t\treportCastEvents: events(dataType:Casts, endTime: 99999999, filterExpression: "${[ee,ae].flat().map((t=>t.id)).map((t=>`ability.id = ${t}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tfightCastEvents: events(fightIDs: [${e.fightID}], dataType:Casts, filterExpression: "${[se].flat().map((t=>t.id)).map((t=>`ability.id = ${t}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tfightHealEvents: events(fightIDs: [${e.fightID}], dataType:Healing, filterExpression: "${[ie,re].flat().map((t=>t.id)).map((t=>`ability.id = ${t}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tmanaTideTotem: events(fightIDs: [${e.fightID}], dataType:Resources, filterExpression: "ability.id = 39609", limit: 100) { data }\n\t\t\t\t}\n\t\t\t}\n\t\t}`,s=(await this.queryWCL(a)).data.reportData.report,i=s.playerDetails.data.entries;w.freezeAllAndDo((()=>{const t=w.nextEventID(),e=i.map((e=>new Yt(e,this.simUI,t)));this.inferRace(t,s,e),this.inferProfessions(t,s,e),this.inferAssignments(t,s,e),this.inferPartyComposition(t,s,e);const a=e.filter((t=>t.player.getClass()==C.ClassPaladin)).length,r=v.create({encounter:this.getEncounterProto(s),raid:this.getRaidProto(e),blessings:T(a)});this.simUI.clearRaid(t),this.simUI.fromProto(t,r)})),this.close()}inferRace(t,e,a){a.forEach((e=>e.player.setRace(t,D.RaceUnknown)));let s=e.guild?.faction?.id||this.simUI.raidPicker?.getCurrentFaction()||R.Horde;e.combatantInfoEvents.data.forEach((e=>{e.auras.filter((t=>28878==t.ability)).forEach((e=>{const i=a.find((t=>t.id==e.source));i&&i.player.getRace()!=D.RaceDraenei&&(console.log(`Inferring player ${i.name} has race ${U.get(D.RaceDraenei)} from Heroic Presence aura event`),i.player.setRace(t,D.RaceDraenei),s=R.Alliance)}))}));const i=O(e.reportCastEvents.data,(t=>String(t.abilityGameID)));ee.forEach((e=>{(i[e.id]||[]).forEach((i=>{const r=a.find((t=>t.id==i.sourceID));r&&(console.log(`Inferring player ${r.name} has race ${U.get(e.race)} from ${e.name} event`),r.player.setRace(t,e.race),s=x[e.race])}))})),a.forEach((e=>{e.player.getRace()==D.RaceUnknown&&e.player.setRace(t,e.preset.defaultFactionRaces[s])}))}inferProfessions(t,e,a){const s=O(e.reportCastEvents.data,(t=>String(t.abilityGameID)));ae.forEach((t=>{(s[t.id]||[]).forEach((e=>{const s=a.find((t=>t.id==e.sourceID));s&&!s.inferredProfessions.includes(t.profession)&&(console.log(`Inferring player ${s.name} has profession ${L.get(t.profession)} from ${t.name} event`),s.inferredProfessions.push(t.profession))}))})),a.forEach((e=>{let a=A(e.inferredProfessions.concat(e.player.getGear().getProfessionRequirements()));0==a.length?a=[k.Engineering,k.Jewelcrafting]:1==a.length&&(a[0]!=k.Engineering?a.push(k.Engineering):a.push(k.Jewelcrafting)),e.player.setProfessions(t,a)}))}inferAssignments(t,e,a){const s=O(e.fightCastEvents.data,(t=>String(t.abilityGameID)));se.forEach((e=>{(s[e.id]||[]).forEach((s=>{const i=a.find((t=>t.id==s.sourceID)),r=a.find((t=>t.id==s.targetID));if(i&&r&&i.player.getClass()==e.class){const a=e.applyFunc(i.player,r.toUnitReference());i.player.setSpecOptions(t,a),console.log(`Inferring player ${i.name} is targeting ${r.name} with ${e.name} from cast event`)}}))}))}inferPartyComposition(t,e,a){const s=(t,e,a)=>{(t.addPlayerInParty(e)||e.addPlayerInParty(t))&&console.log(`Inferring players ${t.name} and ${e.name} in same party from ${a} event`)},i=O(e.fightHealEvents.data,(t=>String(t.abilityGameID)));ie.forEach((t=>{(i[t.id]||[]).forEach((e=>{const i=a.find((t=>t.id==e.sourceID)),r=a.find((t=>t.id==e.targetID));i&&r&&s(i,r,t.name)}))})),re.forEach((t=>{const e=i[t.id]||[],r=O(e,(t=>String(t.timestamp)+String(t.sourceID)));for(const[i,n]of Object.entries(r)){const e=n.map((t=>a.find((e=>e.id==t.targetID))));for(let a=0;a<e.length;a++)for(let i=0;i<e.length;i++)a!=i&&e[a]&&e[i]&&s(e[a],e[i],t.name)}})),e.combatantInfoEvents.data.forEach((t=>{const e=a.find((e=>e.id==t.sourceID));t.auras.filter((t=>28878==t.ability)).forEach((t=>{const i=a.find((e=>e.id==t.source));i&&e&&s(i,e,"Heroic Presence")}))}));let r=a.filter((t=>t.playersInParty.length>0)),n=0;for(;r.length>0;){let t=[r[0]].concat(r[0].playersInParty),e=0;for(;t.length!=e;)e=t.length,t=A(t.map((t=>[t].concat(t.playersInParty))).flat());const a=n;n++,t.forEach(((t,e)=>{t.raidIndex=5*a+e})),r=r.filter((e=>!t.includes(e)))}const l=[...Array(40).keys()];a.filter((t=>-1==t.raidIndex)).forEach((t=>{const e=l.find((t=>!a.some((e=>e.raidIndex==t))))??-1;if(-1==e)throw new Error("Invalid next idx");t.raidIndex=e}))}getEncounterProto(t){const e=t.fights[0],a=F.create({duration:(e.endTime-e.startTime)/1e3,targets:[]}),s=this.simUI.sim.db.getAllPresetEncounters().find((t=>t.path.includes(e.name)));return s&&s.targets.length&&s.targets.map((t=>t.target)).filter((t=>void 0!==t)).forEach((t=>a.targets.push(t))),0===a.targets.length&&a.targets.push(i.defaultTargetProto()),a}getRaidProto(t){const e=M.create({parties:[...new Array(r).keys()].map((t=>B.create({players:[...new Array(5).keys()].map((t=>W.create()))})))});return t.forEach((t=>{const a=t.raidIndex%5,s=(t.raidIndex-a)/5,i=t.player.toProto();e.parties[s].players[a]=i,H(i).isTankSpec&&e.tanks.push(t.toUnitReference())})),e}}class Yt{constructor(t,e,a){this.raidIndex=-1,this.inferredProfessions=[],this.playersInParty=[],this.simUI=e,this.data=t,this.name=t.name,this.id=t.id,this.type=t.type;const s=t.icon.split("-")[1];this.fullType=this.type+s,console.log(`WCL spec: ${this.fullType}`);const i=te[this.fullType]??null;if(null==i)throw new Error("Player type not implemented: "+this.fullType);if(this.spec=i,this.player=new n(j.fromProto(this.spec),e.sim),this.preset=Yt.getMatchingPreset(i,t.talents),void 0===this.preset)throw new Error("Could not find matching preset: "+JSON.stringify({name:this.name,type:this.fullType,talents:t.talents}).toString());this.player.applySharedDefaults(a),this.player.setTalentsString(a,this.preset.talents.talentsString),this.player.setGlyphs(a,this.preset.talents.glyphs),this.player.setConsumes(a,this.preset.consumes),this.player.setSpecOptions(a,this.preset.specOptions),this.player.setProfessions(a,[k.Engineering,k.Jewelcrafting]),this.player.setName(a,t.name),this.player.setGear(a,e.sim.db.lookupEquipmentSpec($.create({items:t.gear.map((t=>N.create({id:t.id,enchant:t.permanentEnchant,gems:t.gems?t.gems.map((t=>t.id)):[]})))})))}static getMatchingPreset(t,e){const a=Gt.filter((e=>e.spec==t));let s=0;if(a&&a.length>1){let t=999;a.forEach(((a,i)=>{const r=V(a.talents.talentsString),n=r.reduce(((t,a,s)=>t+Math.abs(e[s]?.guid-r[s])),0);n<t&&(s=i,t=n)}))}return a[s]}toUnitReference(){return K.create({type:z.Player,index:this.raidIndex})}addPlayerInParty(t){return t!=this&&!this.playersInParty.includes(t)&&(this.playersInParty.push(t),!0)}}const te={DeathKnightBlood:E.SpecBloodDeathKnight,DeathKnightFrost:E.SpecFrostDeathKnight,DeathKnightUnholy:E.SpecUnholyDeathKnight,DruidBalance:E.SpecBalanceDruid,DruidFeral:E.SpecFeralDruid,DruidRestoration:E.SpecRestorationDruid,HunterBeastMastery:E.SpecBeastMasteryHunter,HunterMarksmanship:E.SpecMarksmanshipHunter,HunterSurvival:E.SpecSurvivalHunter,MageArcane:E.SpecArcaneMage,MageFire:E.SpecFireMage,MageFrost:E.SpecFrostMage,PaladinHoly:E.SpecHolyPaladin,PaladinJusticar:E.SpecProtectionPaladin,PaladinProtection:E.SpecProtectionPaladin,PaladinRetribution:E.SpecRetributionPaladin,PriestHoly:E.SpecHolyPriest,PriestDiscipline:E.SpecDisciplinePriest,PriestShadow:E.SpecShadowPriest,RogueAssassination:E.SpecAssassinationRogue,RogueCombat:E.SpecCombatRogue,RogueSubtlety:E.SpecSubtletyRogue,ShamanElemental:E.SpecElementalShaman,ShamanEnhancement:E.SpecEnhancementShaman,ShamanRestoration:E.SpecRestorationShaman,WarlockDestruction:E.SpecDestructionWarlock,WarlockAffliction:E.SpecAfflictionWarlock,WarlockDemonology:E.SpecDemonologyWarlock,WarriorArms:E.SpecArmsWarrior,WarriorFury:E.SpecFuryWarrior,WarriorProtection:E.SpecProtectionWarrior},ee=[{id:25046,name:"Arcane Torrent (Energy)",race:D.RaceBloodElf},{id:28730,name:"Arcane Torrent (Mana)",race:D.RaceBloodElf},{id:50613,name:"Arcane Torrent (Runic Power)",race:D.RaceBloodElf},{id:26297,name:"Berserking",race:D.RaceTroll},{id:20572,name:"Blood Fury (AP)",race:D.RaceOrc},{id:33697,name:"Blood Fury (AP+SP)",race:D.RaceOrc},{id:33702,name:"Blood Fury (SP)",race:D.RaceOrc},{id:20589,name:"Escape Artist",race:D.RaceGnome},{id:20594,name:"Stoneform",race:D.RaceDwarf},{id:20549,name:"War Stomp",race:D.RaceTauren},{id:7744,name:"Will of the Forsaken",race:D.RaceUndead},{id:59752,name:"Will to Survive",race:D.RaceHuman}],ae=[{id:55503,name:"Lifeblood",profession:k.Herbalism},{id:50305,name:"Skinning",profession:k.Skinning}],se=[{id:29166,name:"Innervate",class:C.ClassDruid,applyFunc:(t,e)=>{const a=t.getSpecOptions();return a.classOptions.innervateTarget=e,a}},{id:10060,name:"Power Infusion",class:C.ClassPriest,applyFunc:(t,e)=>{const a=t.getSpecOptions();return a.powerInfusionTarget=e,a}},{id:57933,name:"Tricks of the Trade",class:C.ClassRogue,applyFunc:(t,e)=>{const a=t.getSpecOptions();return a.classOptions.tricksOfTheTradeTarget=e,a}},{id:49016,name:"Unholy Frenzy",class:C.ClassDeathKnight,applyFunc:(t,e)=>{const a=t.getSpecOptions();return a.unholyFrenzyTarget=e,a}}],ie=[{id:52042,name:"Healing Stream Totem"},{id:48076,name:"Holy Nova"},{id:48445,name:"Tranquility"},{id:15290,name:"Vampiric Embrace"}],re=[{id:48072,name:"Prayer of Healing"}],ne=-1,le=Math.min(...Gt.map((t=>Math.max(...Object.keys(t.defaultGear[R.Alliance]).map((t=>parseInt(t)))))));class oe extends q{constructor(t,e){super(t,"raid-picker-root"),this.currentDragPlayer=null,this.currentDragPlayerFromIndex=ne,this.currentDragType=1,this.currentDragParty=null,this.raidSimUI=e,this.raid=e.sim.raid;const a=document.createElement("div");a.classList.add("raid-controls"),this.rootElem.appendChild(a),this.newPlayerPicker=new me(this.rootElem,this),this.playerEditorModal=new pe,new l(a,this.raidSimUI.sim.raid,{label:"Raid Size",labelTooltip:"Number of players participating in the sim.",values:[{name:"5",value:1},{name:"10",value:2},{name:"25",value:5}],changedEvent:t=>t.numActivePartiesChangeEmitter,getValue:t=>t.getNumActiveParties(),setValue:(t,e,a)=>{e.setNumActiveParties(t,a)}}),new l(a,this.newPlayerPicker,{label:"Default Faction",labelTooltip:"Default faction for newly-created players.",values:[{name:"Alliance",value:R.Alliance},{name:"Horde",value:R.Horde}],changedEvent:t=>this.raid.sim.factionChangeEmitter,getValue:t=>this.raid.sim.getFaction(),setValue:(t,e,a)=>{this.raid.sim.setFaction(t,a)}}),new l(a,this.newPlayerPicker,{label:"Default Gear",labelTooltip:"Newly-created players will start with approximate BIS gear from this phase.",values:[...Array(le).keys()].map((t=>{const e=t+1;return{name:"Phase "+e,value:e}})),changedEvent:t=>this.raid.sim.phaseChangeEmitter,getValue:t=>this.raid.sim.getPhase(),setValue:(t,e,a)=>{this.raid.sim.setPhase(t,a)}});const s=document.createElement("div");s.classList.add("parties-container"),this.rootElem.appendChild(s),this.partyPickers=this.raid.getParties().map(((t,e)=>new ce(s,t,e,this)));const i=()=>{1==this.raidSimUI.sim.raid.getNumActiveParties()?(s.classList.remove("parties-container-small"),s.classList.remove("parties-container-full")):this.raidSimUI.sim.raid.getNumActiveParties()<=2?(s.classList.add("parties-container-small"),s.classList.remove("parties-container-full")):(s.classList.remove("parties-container-small"),s.classList.add("parties-container-full")),this.partyPickers.forEach((t=>{t.index<this.raidSimUI.sim.raid.getNumActiveParties()?(t.rootElem.classList.add("active"),t.rootElem.classList.remove("hide")):(t.rootElem.classList.remove("active"),t.rootElem.classList.add("hide"))}))};this.raidSimUI.sim.raid.numActivePartiesChangeEmitter.on(i),i(),this.rootElem.ondragend=t=>{this.clearDragPlayer(),this.clearDragParty()}}getCurrentFaction(){return this.raid.sim.getFaction()}getCurrentPhase(){return this.raid.sim.getPhase()}getPlayerPicker(t){return this.partyPickers[Math.floor(t/o)].playerPickers[t%o]}getPlayerPickers(){return[...new Array(25).keys()].map((t=>this.getPlayerPicker(t)))}setDragPlayer(t,e,a){if(this.clearDragPlayer(),this.currentDragPlayer=t,this.currentDragPlayerFromIndex=e,this.currentDragType=a,e!=ne){this.getPlayerPicker(e).rootElem.classList.add("dragfrom")}}clearDragPlayer(){if(this.currentDragPlayerFromIndex!=ne){this.getPlayerPicker(this.currentDragPlayerFromIndex).rootElem.classList.remove("dragfrom")}this.currentDragPlayer=null,this.currentDragPlayerFromIndex=ne,this.currentDragType=1}setDragParty(t){this.currentDragParty=t,t.rootElem.classList.add("dragfrom")}clearDragParty(){this.currentDragParty&&(this.currentDragParty.rootElem.classList.remove("dragfrom"),this.currentDragParty=null)}}class ce extends q{constructor(t,e,a,s){super(t,"party-picker-root"),this.party=e,this.index=a,this.raidPicker=s,this.rootElem.setAttribute("draggable","true"),this.rootElem.innerHTML=`\n\t\t\t<div class="party-header">\n\t\t\t\t<label class="party-label form-label">Group ${a+1}</label>\n\t\t\t\t<div class="party-results">\n\t\t\t\t\t<span class="party-results-dps"></span>\n\t\t\t\t\t<span class="party-results-reference-delta"></span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="players-container">\n\t\t\t</div>\n\t\t`;const i=this.rootElem.getElementsByClassName("players-container")[0];this.playerPickers=[...Array(o).keys()].map((t=>new de(i,this,t)));const r=this.rootElem.getElementsByClassName("party-results-dps")[0],n=this.rootElem.getElementsByClassName("party-results-reference-delta")[0];this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const t=this.raidPicker.raidSimUI.getCurrentData(),e=this.raidPicker.raidSimUI.getReferenceData(),a=t?.simResult.raidMetrics.parties[this.index]?.dps.avg||0,s=e?.simResult.raidMetrics.parties[this.index]?.dps.avg||0;if(0==a&&0==s)return r.textContent="",void(n.textContent="");r.textContent=`${a.toFixed(1)} DPS`,e?J(n,s,a,1):n.textContent=""})),this.rootElem.ondragstart=t=>{t.target==this.rootElem&&(t.dataTransfer.dropEffect="move",t.dataTransfer.effectAllowed="all",this.raidPicker.setDragParty(this))};let l=0;this.rootElem.ondragenter=t=>{t.preventDefault(),this.raidPicker.currentDragParty&&(l++,this.rootElem.classList.add("dragto"))},this.rootElem.ondragleave=t=>{t.preventDefault(),this.raidPicker.currentDragParty&&(l--,l<=0&&this.rootElem.classList.remove("dragto"))},this.rootElem.ondragover=t=>{t.preventDefault()},this.rootElem.ondrop=t=>{if(!this.raidPicker.currentDragParty)return;t.preventDefault(),l=0,this.rootElem.classList.remove("dragto");const e=w.nextEventID();w.freezeAllAndDo((()=>{const t=this.raidPicker.currentDragParty;for(let a=0;a<o;a++){const s=t.playerPickers[a],i=this.playerPickers[a],r=s.player,n=i.player;s.setPlayer(e,n,3),i.setPlayer(e,r,3)}})),this.raidPicker.clearDragParty()}}getClosestEmptyIndex(){const t=this.playerPickers.findIndex((t=>!t.player));return-1!==t?t:null}}class de extends q{constructor(t,e,a){super(t,"player-picker-root"),this.index=a,this.raidIndex=e.index*o+a,this.player=null,this.partyPicker=e,this.raidPicker=e.raidPicker,this.labelElem=null,this.iconElem=null,this.nameElem=null,this.resultsElem=null,this.dpsResultElem=null,this.referenceDeltaElem=null,this.rootElem.classList.add("player"),this.partyPicker.party.compChangeEmitter.on((t=>{const e=this.partyPicker.party.getPlayer(this.index);e!=this.player&&this.setPlayer(t,e,0)})),this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const t=this.raidPicker.raidSimUI.getCurrentData(),e=this.raidPicker.raidSimUI.getReferenceData(),a=t?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0,s=e?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0;this.player&&(this.resultsElem?.classList.remove("hide"),this.dpsResultElem.textContent=`${a.toFixed(1)} DPS`,e&&J(this.referenceDeltaElem,s,a,1))}));let s=0;this.rootElem.ondragenter=t=>{t.preventDefault(),this.raidPicker.currentDragParty||(s++,this.rootElem.classList.add("dragto"))},this.rootElem.ondragleave=t=>{t.preventDefault(),this.raidPicker.currentDragParty||(s--,s<=0&&this.rootElem.classList.remove("dragto"))},this.rootElem.ondragover=t=>t.preventDefault(),this.rootElem.ondrop=t=>{if(this.raidPicker.currentDragParty)return;const e=t.dataTransfer.getData("text/plain");t.preventDefault(),s=0,this.rootElem.classList.remove("dragto");const a=w.nextEventID();w.freezeAllAndDo((()=>{if(null==this.raidPicker.currentDragPlayer&&0==e.length)return;if(this.raidPicker.currentDragPlayerFromIndex==this.raidIndex)return void this.raidPicker.clearDragPlayer();const t=this.raidPicker.currentDragType;if(this.raidPicker.currentDragPlayerFromIndex!=ne){const e=this.raidPicker.getPlayerPicker(this.raidPicker.currentDragPlayerFromIndex);3==t?e.setPlayer(a,this.player,t):2==t&&e.setPlayer(a,null,t)}else if(null==this.raidPicker.currentDragPlayer){const t=atob(e),s=new Uint8Array(t.length);for(let e=0;e<s.length;e++)s[e]=t.charCodeAt(e);const i=W.fromBinary(s),r=new n(H(i),this.raidPicker.raidSimUI.sim);r.fromProto(a,i),this.raidPicker.currentDragPlayer=r}4==t?this.setPlayer(a,this.raidPicker.currentDragPlayer.clone(a),t):this.setPlayer(a,this.raidPicker.currentDragPlayer,t),this.raidPicker.clearDragPlayer()}))},this.update()}setPlayer(t,e,a){e!=this.player&&(w.freezeAllAndDo((()=>{const s=this.partyPicker.getClosestEmptyIndex(),i=s&&s<this.index?s:this.index;if(this.player=e,e)this.partyPicker.party.setPlayer(t,i,e),1==a&&function(t,e,a){if(e.getPlayerSpec().isTankSpec){const s=a.getTanks(),i=s.findIndex((t=>null==a.getPlayerFromUnitReference(t)));-1==i?s.length<3&&a.setTanks(t,s.concat([e.makeUnitReference()])):(s[i]=e.makeUnitReference(),a.setTanks(t,s))}if(e.getSpec()==E.SpecBalanceDruid){const a=e.getSpecOptions();a.classOptions.innervateTarget=X(e.getRaidIndex()),e.setSpecOptions(t,a)}else if(e.getSpec()==E.SpecArcaneMage){const a=e.getSpecOptions();a.focusMagicTarget=X(e.getRaidIndex()),e.setSpecOptions(t,a)}else if(e.getSpec()==E.SpecUnholyDeathKnight){const a=e.getSpecOptions();a.unholyFrenzyTarget=X(e.getRaidIndex()),e.setSpecOptions(t,a)}}(t,e,this.raidPicker.raid);else{this.partyPicker.party.setPlayer(t,i,e);this.partyPicker.playerPickers.slice(this.index,5).filter((t=>t.player)).forEach(((e,a)=>{i<e.index&&this.partyPicker.party.setPlayer(t,i+a,e.player)})),this.partyPicker.party.compChangeEmitter.emit(t)}})),this.update())}update(){if(null==this.player)this.rootElem.className="player-picker-root player",this.rootElem.innerHTML="",this.labelElem=null,this.iconElem=null,this.nameElem=null,this.resultsElem=null,this.dpsResultElem=null,this.referenceDeltaElem=null;else{const t=b.getCssClass(this.player.getPlayerClass());this.rootElem.className=`player-picker-root player bg-${t}-dampened`,this.rootElem.innerHTML=`\n\t\t\t\t<div class="player-label">\n\t\t\t\t\t<img class="player-icon" src="${this.player.getSpecIcon()}" draggable="true" />\n\t\t\t\t\t<div class="player-details">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclass="player-name text-${t}"\n\t\t\t\t\t\t\ttype="text"\n\t\t\t\t\t\t\tvalue="${this.player.getName()}"\n\t\t\t\t\t\t\tspellcheck="false"\n\t\t\t\t\t\t\tmaxlength="15"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div class="player-results hide">\n\t\t\t\t\t\t\t<span class="player-results-dps"></span>\n\t\t\t\t\t\t\t<span class="player-results-reference-delta"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="player-options">\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-edit"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdata-tippy-content="Click to Edit"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-edit fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-copy link-warning"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdraggable="true"\n\t\t\t\t\t\tdata-tippy-content="Drag to Copy"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-copy fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\tclass="player-delete link-danger"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdata-tippy-content="Click to Delete"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class="fa fa-times fa-lg"></i>\n\t\t\t\t\t</a>\n\t\t\t\t</div>\n\t\t\t`,this.labelElem=this.rootElem.querySelector(".player-label"),this.iconElem=this.rootElem.querySelector(".player-icon"),this.nameElem=this.rootElem.querySelector(".player-name"),this.resultsElem=this.rootElem.querySelector(".player-results"),this.dpsResultElem=this.rootElem.querySelector(".player-results-dps"),this.referenceDeltaElem=this.rootElem.querySelector(".player-results-reference-delta"),this.bindPlayerEvents()}}bindPlayerEvents(){const e=()=>{this.player?.setName(w.nextEventID(),this.nameElem?.value||"")};this.nameElem?.addEventListener("input",e);const a=()=>{this.partyPicker.rootElem.setAttribute("draggable","false")};this.nameElem?.addEventListener("mousedown",a);const s=()=>{this.partyPicker.rootElem.setAttribute("draggable","true")};this.nameElem?.addEventListener("mouseup",s);const i=()=>{this.nameElem&&!this.nameElem.value&&(this.nameElem.value="Unnamed",this.player?.setName(w.nextEventID(),this.nameElem.value))};this.nameElem?.addEventListener("focusout",i);const r=(t,e)=>{if(null!=this.player){if(t.dataTransfer.dropEffect="move",t.dataTransfer.effectAllowed="all",this.player){const e=this.player.toProto(!0);t.dataTransfer.setData("text/plain",btoa(String.fromCharCode(...W.toBinary(e))))}this.raidPicker.setDragPlayer(this.player,this.raidIndex,e)}else t.preventDefault()},n=this.rootElem.querySelector(".player-edit"),l=this.rootElem.querySelector(".player-copy"),o=this.rootElem.querySelector(".player-delete"),c=t(n),d=t(l),p=t(o),m=t=>{t.dataTransfer.setDragImage(this.rootElem,20,20),r(t,3)};this.iconElem?.addEventListener("dragstart",m);const h=()=>{this.player&&this.raidPicker.playerEditorModal.openEditor(this.player)};n.addEventListener("click",h);const u=t=>{t.dataTransfer.setDragImage(this.rootElem,20,20),r(t,4)};l.addEventListener("dragstart",u);const g=()=>{this.setPlayer(w.nextEventID(),null,0),this.dispose()};o.addEventListener("click",g),this.addOnDisposeCallback((()=>{this.nameElem?.removeEventListener("input",e),this.nameElem?.removeEventListener("mousedown",a),this.nameElem?.removeEventListener("mouseup",s),this.nameElem?.removeEventListener("focusout",i),this.iconElem?.removeEventListener("dragstart",m),n?.removeEventListener("click",h),l?.removeEventListener("dragstart",u),o?.removeEventListener("click",g),c?.destroy(),d?.destroy(),p?.destroy()}))}}class pe extends c{constructor(){super(document.body,"player-editor-modal",{closeButton:{fixed:!0},header:!1,disposeOnClose:!1});const t=Q(),e=Z("div",{ref:t,className:"player-editor within-raid-sim"});this.rootElem.id="playerEditorModal",this.body.appendChild(e),this.playerEditorRoot=t.value}openEditor(t){this.setData(t),super.open()}setData(t){this.playerEditorRoot.innerHTML="",Jt[t.getSpec()]?.(this.playerEditorRoot,t)}}class me extends q{constructor(e,a){super(e,"new-player-picker-root"),this.raidPicker=a,G(C).forEach((e=>{if(e==C.ClassUnknown)return;const a=Gt.filter((t=>j.fromProto(t.spec).classID==e));if(0==a.length)return;const s=document.createElement("div");s.classList.add("class-presets-container",`bg-${b.getCssClass(b.fromProto(e))}-dampened`),this.rootElem.appendChild(s),a.forEach((e=>{const a=j.fromProto(e.spec),i=document.createElement("fragment");i.innerHTML=`\n\t\t\t\t\t<a\n\t\t\t\t\t\thref="javascript:void(0)"\n\t\t\t\t\t\trole="button"\n\t\t\t\t\t\tdraggable="true"\n\t\t\t\t\t\tdata-tippy-content="${e.tooltip??j.getFullSpecName(a)}"\n\t\t\t\t\t>\n\t\t\t\t\t\t<img class="preset-picker-icon player-icon" src="${a.getIcon("medium")}"/>\n\t\t\t\t\t</a>\n\t\t\t\t`;const r=i.children[0];s.appendChild(r),t(r),r.ondragstart=t=>{const s=w.nextEventID();w.freezeAllAndDo((()=>{const i=new Image;i.src=e.iconUrl??a.getIcon("medium"),t.dataTransfer.setDragImage(i,30,30),t.dataTransfer.setData("text/plain",""),t.dataTransfer.dropEffect="copy";const r=new n(a,this.raidPicker.raid.sim);r.applySharedDefaults(s),r.setRace(s,e.defaultFactionRaces[this.raidPicker.getCurrentFaction()]),r.setTalentsString(s,e.talents.talentsString),r.setGlyphs(s,e.talents.glyphs||_.create()),r.setSpecOptions(s,e.specOptions),r.setConsumes(s,e.consumes),r.setName(s,e.defaultName??a.friendlyName),r.setProfession1(s,e.otherDefaults?.profession1||k.Engineering),r.setProfession2(s,e.otherDefaults?.profession2||k.Jewelcrafting),r.setDistanceFromTarget(s,e.otherDefaults?.distanceFromTarget||0),this.raidPicker.raid.sim.waitForInit().then((()=>{const t=Math.min(this.raidPicker.getCurrentPhase(),le),a=e.defaultGear[this.raidPicker.getCurrentFaction()][t];r.setGear(s,this.raidPicker.raid.sim.db.lookupEquipmentSpec(a))})),this.raidPicker.setDragPlayer(r,ne,1)}))}}))}))}}class he extends q{constructor(t,e){super(t,"raid-stats");const a=[];Ie.sections.forEach((t=>{const s=Q(),i=Z("div",{className:"raid-stats-section"},Z("div",{className:"raid-stats-section-header"},Z("label",{className:"raid-stats-section-label form-label"},t.label)),Z("div",{ref:s,className:"raid-stats-section-content"}));this.rootElem.appendChild(i);const r=s.value;t.categories.forEach((t=>{a.push(new ue(r,e,t))}))})),this.categories=a,e.changeEmitter.on((t=>this.categories.forEach((t=>t.update()))))}}class ue extends q{constructor(e,a,s){super(e,"raid-stats-category-root"),this.raidSimUI=a,this.options=s;const i=Q(),r=Q();if(this.rootElem.appendChild(Z("a",{ref:r,href:"javascript:void(0)",className:"raid-stats-category",attributes:{role:"button"}},Z("span",{ref:i,className:"raid-stats-category-counter"}),Z("span",{className:"raid-stats-category-label"},s.label))),this.counterElem=i.value,this.tooltipElem=Z("div",null,Z("label",{className:"raid-stats-category-label"},s.label)),this.effects=s.effects.map((t=>new ge(this.tooltipElem,a,t))),1!=s.effects.length||s.effects[0].playerData?.class){const e=r.value;t(e,{theme:"raid-stats-category-tooltip",placement:"right",content:this.tooltipElem})}}update(){this.effects.forEach((t=>t.update()));const t=rt(this.effects.map((t=>t.count)));this.counterElem.textContent=String(t);const e=this.rootElem.querySelector(".raid-stats-category");0==t?e?.classList.remove("active"):e?.classList.add("active")}}class ge extends q{constructor(t,e,a){super(t,"raid-stats-effect"),this.raidSimUI=e,this.options=a,this.curPlayers=[],this.count=0;const s=Q(),i=Q(),r=Q();if(this.rootElem.appendChild(Z(nt,null,Z("span",{ref:s,className:"raid-stats-effect-counter"}),Z("img",{ref:r,className:"raid-stats-effect-icon"}),Z("span",{ref:i,className:"raid-stats-effect-label"},a.label))),this.counterElem=s.value,this.options.playerData?.class){const t=lt(b.fromProto(this.options.playerData.class));i.value.classList.add(t)}a.actionId?a.actionId.fill().then((t=>r.value.src=t.iconUrl)):r.value.remove()}update(){this.options.playerData&&(this.curPlayers=this.raidSimUI.getActivePlayers().filter((t=>this.options.playerData.condition(t))));const t=this.options.raidData&&this.options.raidData(this.raidSimUI.sim.raid);this.count=this.curPlayers.length+(t?1:0),this.counterElem.textContent=String(this.count),0==this.count?this.rootElem.classList.remove("active"):this.rootElem.classList.add("active")}}function fe(t,e){return e?!t:t}function ye(t,e){return{class:t,condition:a=>a.isClass(t)&&(!e||e(a))}}function Se(t,e,a){return function(t,e,a,s){return{class:t,condition:i=>i.isClass(t)&&fe(Boolean(i.getTalents()[e]),a)&&(!s||s(i))}}(t,e,!1,a)}const Ie={sections:[{label:"Roles",categories:[{label:"Tanks",effects:[{label:"Tanks",playerData:{condition:t=>t.getPlayerSpec().isTankSpec}}]},{label:"Healers",effects:[{label:"Healers",playerData:{condition:t=>t.getPlayerSpec().isHealingSpec}}]},{label:"Melee",effects:[{label:"Melee",playerData:{condition:t=>t.getPlayerSpec().isMeleeDpsSpec}}]},{label:"Ranged",effects:[{label:"Ranged",playerData:{condition:t=>t.getPlayerSpec().isRangedDpsSpec}}]}]},{label:"Buffs",categories:[{label:"Bloodlust",effects:[{label:"Bloodlust",actionId:Y.fromSpellId(2825),playerData:ye(C.ClassShaman)},{label:"Time Warp",actionId:Y.fromSpellId(80353),playerData:ye(C.ClassMage)}]},{label:"Stats %",effects:[{label:"Mark of the Wild",actionId:Y.fromSpellId(1126),playerData:ye(C.ClassDruid)},{label:"Blessing of Kings",actionId:Y.fromSpellId(20217),playerData:ye(C.ClassPaladin)},{label:"Drums of the Burning Wild",actionId:Y.fromItemId(63140),raidData:(De="drumsOfTheBurningWild",t=>Boolean(t.getBuffs()[De]))}]},{label:"Strength/Agility",effects:[{label:"Strength of Earth Totem",actionId:Y.fromSpellId(8075),playerData:ye(C.ClassShaman,(t=>t.getSpecOptions().classOptions?.totems?.earth==tt.StrengthOfEarthTotem))},{label:"Horn of Winter",actionId:Y.fromSpellId(57330),playerData:ye(C.ClassDeathKnight)},{label:"Battle Shout",actionId:Y.fromSpellId(6673),playerData:ye(C.ClassWarrior)}]},{label:"Armor",effects:[{label:"Devotion Aura",actionId:Y.fromSpellId(465),playerData:ye(C.ClassPaladin)},{label:"Stoneskin Totem",actionId:Y.fromSpellId(8071),playerData:ye(C.ClassShaman,(t=>t.getSpecOptions().classOptions?.totems?.earth==tt.StoneskinTotem))}]},{label:"Attack Power %",effects:[{label:"Blessing of Might",actionId:Y.fromSpellId(19740),playerData:ye(C.ClassPaladin)},{label:"Abominations Might",actionId:Y.fromSpellId(53138),playerData:Se(C.ClassDeathKnight,"abominationsMight")},{label:"Unleashed Rage",actionId:Y.fromSpellId(30808),playerData:Se(C.ClassShaman,"unleashedRage")},{label:"Trueshot Aura",actionId:Y.fromSpellId(19506),playerData:Se(C.ClassHunter,"trueshotAura")}]},{label:"Spell Power",effects:[{label:"Demonic Pact",actionId:Y.fromSpellId(47236),playerData:Se(C.ClassWarlock,"demonicPact")},{label:"Totemic Wrath",actionId:Y.fromSpellId(77746),playerData:Se(C.ClassShaman,"totemicWrath")},{label:"Arcane Brilliance",actionId:Y.fromSpellId(1459),playerData:ye(C.ClassMage)},{label:"Flametongue Totem",actionId:Y.fromSpellId(8227),playerData:ye(C.ClassShaman,(t=>t.getSpecOptions().classOptions?.totems?.fire==et.FlametongueTotem))}]},{label:"+3% Damage",effects:[{label:"Communion",actionId:Y.fromSpellId(31876),playerData:Se(C.ClassPaladin,"communion")},{label:"Arcane Tactics",actionId:Y.fromSpellId(82930),playerData:Se(C.ClassMage,"arcaneTactics")},{label:"Ferocious Inspiration",actionId:Y.fromSpellId(34460),playerData:Se(C.ClassHunter,"ferociousInspiration")}]},{label:"Melee Haste",effects:[{label:"Icy Talons",actionId:Y.fromSpellId(55610),playerData:Se(C.ClassDeathKnight,"improvedIcyTalons")},{label:"Hunting Party",actionId:Y.fromSpellId(53290),playerData:Se(C.ClassHunter,"huntingParty")},{label:"Windfury Totem",actionId:Y.fromSpellId(8512),playerData:ye(C.ClassShaman,(t=>t.getSpecOptions().classOptions?.totems?.air==at.WindfuryTotem))}]},{label:"Spell Haste",effects:[{label:"Shadow Form",actionId:Y.fromSpellId(15473),playerData:Se(C.ClassPriest,"shadowform")},{label:"Moonkin Form",actionId:Y.fromSpellId(24858),playerData:Se(C.ClassDruid,"moonkinForm")},{label:"Wrath of Air Totem",actionId:Y.fromSpellId(3738),playerData:ye(C.ClassShaman,(t=>t.getSpecOptions().classOptions?.totems?.air==at.WrathOfAirTotem))}]},{label:"+5% Crit",effects:[{label:"Leader of the Pack",actionId:Y.fromSpellId(17007),playerData:Se(C.ClassDruid,"leaderOfThePack")},{label:"Elemental Oath",actionId:Y.fromSpellId(51470),playerData:Se(C.ClassShaman,"elementalOath")},{label:"Honor Among Thieves",actionId:Y.fromSpellId(51701),playerData:Se(C.ClassRogue,"honorAmongThieves")},{label:"Rampage",actionId:Y.fromSpellId(29801),playerData:Se(C.ClassWarrior,"rampage")}]},{label:"Mana",effects:[{label:"Arcane Brilliance",actionId:Y.fromSpellId(1459),playerData:ye(C.ClassMage)},{label:"Fel Intelligence",actionId:Y.fromSpellId(54424),playerData:ye(C.ClassWarlock)}]},{label:"MP5",effects:[{label:"Blessing of Might",actionId:Y.fromSpellId(19740),playerData:ye(C.ClassPaladin)},{label:"Fel Intelligence",actionId:Y.fromSpellId(54424),playerData:ye(C.ClassWarlock)},{label:"Mana Spring Totem",actionId:Y.fromSpellId(5675),playerData:ye(C.ClassShaman,(t=>t.getSpecOptions().classOptions?.totems?.water==st.ManaSpringTotem))}]},{label:"Replenishment",effects:[{label:"Vampiric Touch",actionId:Y.fromSpellId(34914),playerData:Se(C.ClassPriest,"vampiricTouch")},{label:"Communion",actionId:Y.fromSpellId(31876),playerData:Se(C.ClassPaladin,"communion")},{label:"Revitalize",actionId:Y.fromSpellId(48544),playerData:Se(C.ClassDruid,"revitalize")},{label:"Soul Leach",actionId:Y.fromSpellId(30295),playerData:Se(C.ClassWarlock,"soulLeech")},{label:"Enduring Winter",actionId:Y.fromSpellId(86508),playerData:Se(C.ClassMage,"enduringWinter")}]},{label:"Stamina",effects:[{label:"Power Word Fortitude",actionId:Y.fromSpellId(21562),playerData:ye(C.ClassPriest)},{label:"Blood Pact",actionId:Y.fromSpellId(6307),playerData:ye(C.ClassWarlock)},{label:"Commanding Shout",actionId:Y.fromSpellId(469),playerData:ye(C.ClassWarrior)}]},{label:"Resistances",effects:[{label:"Resistance Aura",actionId:Y.fromSpellId(19891),playerData:ye(C.ClassPaladin)},{label:"Elemental Resistance Totem",actionId:Y.fromSpellId(8184),playerData:ye(C.ClassShaman,(t=>t.getSpecOptions().classOptions?.totems?.water==st.ElementalResistanceTotem))},{label:"Aspect of the Wild",actionId:Y.fromSpellId(20043),playerData:ye(C.ClassHunter)},{label:"Shadow Protection",actionId:Y.fromSpellId(27683),playerData:ye(C.ClassPriest)},{label:"Blessing of Kings",actionId:Y.fromSpellId(20217),playerData:ye(C.ClassPaladin)},{label:"Mark of the Wild",actionId:Y.fromSpellId(1126),playerData:ye(C.ClassDruid)}]}]},{label:"External Buffs",categories:[{label:"Innervate",effects:[{label:"Innervate",actionId:Y.fromSpellId(29166),playerData:ye(C.ClassDruid)}]},{label:"Power Infusion",effects:[{label:"Power Infusion",actionId:Y.fromSpellId(10060),playerData:Se(C.ClassPriest,"powerInfusion")}]},{label:"Focus Magic",effects:[{label:"Focus Magic",actionId:Y.fromSpellId(54648),playerData:Se(C.ClassMage,"focusMagic")}]},{label:"Tricks of the Trade",effects:[{label:"Tricks of the Trade",actionId:Y.fromSpellId(57933),playerData:ye(C.ClassRogue)}]},{label:"Dark Intent",effects:[{label:"Dark Intent",actionId:Y.fromSpellId(85759),playerData:ye(C.ClassWarlock)}]},{label:"Unholy Frenzy",effects:[{label:"Unholy Frenzy",actionId:Y.fromSpellId(49016),playerData:Se(C.ClassDeathKnight,"unholyFrenzy")}]},{label:"Pain Suppression",effects:[{label:"Pain Suppression",actionId:Y.fromSpellId(33206),playerData:Se(C.ClassPriest,"painSuppression")}]},{label:"Divine Guardian",effects:[{label:"Divine Guardian",actionId:Y.fromSpellId(70940),playerData:Se(C.ClassPaladin,"divineGuardian")}]},{label:"Mana Tide",effects:[{label:"Mana Tide Totem",actionId:Y.fromSpellId(16190),playerData:Se(C.ClassShaman,"manaTideTotem")}]}]},{label:"DPS Debuffs",categories:[{label:"-Armor %",effects:[{label:"Sunder Armor",actionId:Y.fromSpellId(7386),playerData:ye(C.ClassWarrior)},{label:"Expose Armor",actionId:Y.fromSpellId(8647),playerData:ye(C.ClassRogue)},{label:"Faerie Fire",actionId:Y.fromSpellId(770),playerData:ye(C.ClassDruid)},{label:"Corosive Spit",actionId:Y.fromSpellId(35387),playerData:ye(C.ClassHunter,(t=>t.getSpecOptions().classOptions?.petType==it.Serpent))}]},{label:"Phys Vuln",effects:[{label:"Blood Frenzy",actionId:Y.fromSpellId(29859),playerData:Se(C.ClassWarrior,"bloodFrenzy")},{label:"Savage Combat",actionId:Y.fromSpellId(58413),playerData:Se(C.ClassRogue,"savageCombat")},{label:"Brittle Bones",actionId:Y.fromSpellId(81328),playerData:Se(C.ClassDeathKnight,"brittleBones")},{label:"Acid Spit",actionId:Y.fromSpellId(55749),playerData:ye(C.ClassHunter,(t=>t.getSpecOptions().classOptions?.petType==it.Worm))}]},{label:"+Bleed %",effects:[{label:"Blood Frenzy",actionId:Y.fromSpellId(29859),playerData:Se(C.ClassWarrior,"bloodFrenzy")},{label:"Mangle",actionId:Y.fromSpellId(33878),playerData:ye(C.ClassDruid,(t=>t.isSpec(E.SpecFeralDruid)))},{label:"Hemorrhage",actionId:Y.fromSpellId(16511),playerData:Se(C.ClassRogue,"hemorrhage")},{label:"Stampede",actionId:Y.fromSpellId(57386),playerData:ye(C.ClassHunter,(t=>t.getSpecOptions().classOptions?.petType==it.Rhino))}]},{label:"Spell Crit",effects:[{label:"Critical Mass",actionId:Y.fromSpellId(12873),playerData:Se(C.ClassMage,"criticalMass")},{label:"Shadow and Flame",actionId:Y.fromSpellId(17801),playerData:Se(C.ClassWarlock,"shadowAndFlame")}]},{label:"Spell Dmg",effects:[{label:"Ebon Plaguebringer",actionId:Y.fromSpellId(51160),playerData:Se(C.ClassDeathKnight,"ebonPlaguebringer")},{label:"Earth and Moon",actionId:Y.fromSpellId(60433),playerData:(Pe=E.SpecBalanceDruid,Ee="earthAndMoon",function(t,e,a,s){return{class:j.fromProto(t).classID,condition:i=>i.isSpec(t)&&fe(Boolean(i.getTalents()[e]),a)&&(!s||s(i))}}(Pe,Ee,!1,be))},{label:"Curse of Elements",actionId:Y.fromSpellId(1490),playerData:ye(C.ClassWarlock)},{label:"Master Poisoner",actionId:Y.fromSpellId(58410),playerData:Se(C.ClassRogue,"masterPoisoner")},{label:"Fire Breath",actionId:Y.fromSpellId(34889),playerData:ye(C.ClassHunter,(t=>t.getSpecOptions().classOptions?.petType==it.Dragonhawk))},{label:"Lightning Breath",actionId:Y.fromSpellId(24844),playerData:ye(C.ClassHunter,(t=>t.getSpecOptions().classOptions?.petType==it.WindSerpent))}]}]},{label:"Mitigation Debuffs",categories:[{label:"-Dmg %",effects:[{label:"Vindication",actionId:Y.fromSpellId(26016),playerData:Se(C.ClassPaladin,"vindication",(t=>[E.SpecRetributionPaladin,E.SpecProtectionPaladin].includes(t.getSpec())))},{label:"Curse of Weakness",actionId:Y.fromSpellId(702),playerData:ye(C.ClassWarlock)},{label:"Demoralizing Roar",actionId:Y.fromSpellId(99),playerData:ye(C.ClassDruid,(t=>t.isSpec(E.SpecFeralDruid)))},{label:"Scarlet Fever",actionId:Y.fromSpellId(81130),playerData:Se(C.ClassDeathKnight,"scarletFever")},{label:"Demoralizing Shout",actionId:Y.fromSpellId(1160),playerData:ye(C.ClassWarrior)}]},{label:"Atk Speed",effects:[{label:"Thunder Clap",actionId:Y.fromSpellId(6343),playerData:ye(C.ClassWarrior)},{label:"Frost Fever",actionId:Y.fromSpellId(59921),playerData:ye(C.ClassDeathKnight)},{label:"Judgements of the Just",actionId:Y.fromSpellId(53696),playerData:Se(C.ClassPaladin,"judgementsOfTheJust")},{label:"Infected Wounds",actionId:Y.fromSpellId(48484),playerData:Se(C.ClassDruid,"infectedWounds",(t=>[E.SpecFeralDruid,E.SpecFeralDruid].includes(t.getSpec())))},{label:"Earth Shock",actionId:Y.fromSpellId(8042),playerData:ye(C.ClassShaman)},{label:"Dust Cloud",actionId:Y.fromSpellId(50285),playerData:ye(C.ClassHunter,(t=>t.getSpecOptions().classOptions?.petType==it.Tallstrider))}]}]}]};var Pe,Ee,be,De;class ke extends d{constructor(t,e){super(t,e,{identifier:"raid-tab",title:"Raid"}),this.simUI=e,this.rootElem.classList.add("active","show"),this.leftPanel=document.createElement("div"),this.leftPanel.classList.add("raid-tab-left","tab-panel-left"),this.rightPanel=document.createElement("div"),this.rightPanel.classList.add("raid-tab-right","tab-panel-right"),this.contentContainer.appendChild(this.leftPanel),this.contentContainer.appendChild(this.rightPanel),this.buildTabContent()}buildTabContent(){this.simUI.raidPicker=new oe(this.leftPanel,this.simUI),new he(this.leftPanel,this.simUI);const t=new p(this.rightPanel,this.simUI,{label:"Raid",header:{title:"Saved Raid Groups"},storageKey:this.simUI.getSavedRaidStorageKey(),getData:()=>ot.create({raid:this.simUI.sim.raid.toProto(),blessings:this.simUI.blessingsPicker?.getAssignments(),faction:this.simUI.sim.getFaction(),phase:this.simUI.sim.getPhase()}),setData:(t,e,a)=>{w.freezeAllAndDo((()=>{this.simUI.sim.raid.fromProto(t,a.raid||M.create()),this.simUI.blessingsPicker?.setAssignments(t,a.blessings||ct.create()),a.faction&&this.simUI.sim.setFaction(t,a.faction),a.phase&&this.simUI.sim.setPhase(t,a.phase)}))},changeEmitters:[this.simUI.changeEmitter,this.simUI.sim.changeEmitter],equals:(t,e)=>ot.equals(t,e),toJson:t=>ot.toJson(t),fromJson:t=>ot.fromJson(t)});this.simUI.sim.waitForInit().then((()=>{t.loadUserData()}))}}class Ce extends dt{constructor(t,e,a,s){super(t,"raid-target-picker-root",a,s),this.rootElem.classList.add("dropdown"),this.config=s,this.raid=e,this.curPlayer=this.raid.getPlayerFromUnitReference(s.getValue(a)),this.curUnitReference=this.getInputValue(),this.rootElem.innerHTML='\n\t\t\t<a\n\t\t\t\tclass="raid-target-picker-button"\n\t\t\t\thref="javascript:void(0)"\n\t\t\t\trole="button"\n\t\t\t\tdata-bs-toggle="dropdown"\n\t\t\t></a>\n\t\t\t<div class="dropdown-menu"></div>\n    ',this.buttonElem=this.rootElem.querySelector(".raid-target-picker-button"),this.dropdownElem=this.rootElem.querySelector(".dropdown-menu"),this.buttonElem.addEventListener("click",(t=>t.preventDefault())),this.currentOptions=[],this.updateOptions(w.nextEventID()),s.compChangeEmitter.on((t=>this.updateOptions(t))),this.init()}makeTargetOptions(){return[{player:null,isDropdown:!0},...this.raid.getPlayers().filter((t=>null!=t)).map((t=>({player:t,isDropdown:!0})))]}updateOptions(t){this.currentOptions=this.makeTargetOptions(),this.dropdownElem.innerHTML="",this.currentOptions.forEach((t=>this.dropdownElem.appendChild(this.makeOption(t))));const e=this.curUnitReference;this.curUnitReference=this.getInputValue(),K.equals(e,this.curUnitReference)?this.setInputValue(this.curUnitReference):this.inputChanged(t)}makeOption(t){const e=Ce.makeOptionElem(t);return e.addEventListener("click",(e=>{e.preventDefault(),this.curPlayer=t.player,this.curUnitReference=this.getInputValue(),this.inputChanged(w.nextEventID())})),e}getInputElem(){return this.buttonElem}getInputValue(){return this.curPlayer?this.curPlayer.makeUnitReference():pt()}setInputValue(t){this.curUnitReference=K.clone(t),this.curPlayer=this.raid.getPlayerFromUnitReference(this.curUnitReference);const e=this.currentOptions.find((t=>t.player==this.curPlayer));e&&(this.buttonElem.innerHTML=Ce.makeOptionElem({player:e.player}).outerHTML)}static makeOptionElem(t){const e=t.player?b.getCssClass(t.player.getPlayerClass()):"",a=document.createElement("fragment");return a.innerHTML=`\n\t\t\t<div class="player ${e?`bg-${e}-dampened`:""}">\n\t\t\t\t<div class="player-label">\n\t\t\t\t\t${t.player?`<img class="player-icon" src="${t.player.getSpecIcon()}" draggable="false"/>`:""}\n\t\t\t\t\t<div class="player-details">\n\t\t\t\t\t\t<span class="player-name ${e?`text-${e}`:""}">\n\t\t\t\t\t\t\t${t.player?t.player.getName():"Unassigned"}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`,t.isDropdown&&(a.innerHTML=`\n\t\t\t\t<a class="dropdown-option" href="javascript:void(0) role="button">${a.innerHTML}</a>\n\t\t\t`),a.children[0]}}class ve extends q{constructor(t,e){super(t,"assignments-picker-root"),this.changeEmitter=new w,this.raidSimUI=e,this.innervatesPicker=new Te(this.rootElem,e),this.powerInfusionsPicker=new Re(this.rootElem,e),this.tricksOfTheTradesPicker=new Ue(this.rootElem,e),this.unholyFrenzyPicker=new Oe(this.rootElem,e),this.focusMagicsPicker=new xe(this.rootElem,e)}}class we extends q{constructor(t,e){super(t,"assigned-buff-picker-root"),this.changeEmitter=new w,this.raidSimUI=e,this.targetPickers=[],this.playersContainer=document.createElement("div"),this.playersContainer.classList.add("assigned-buff-container"),this.rootElem.appendChild(this.playersContainer),this.raidSimUI.changeEmitter.on((t=>this.update())),this.update()}update(){this.playersContainer.innerHTML=`\n\t\t\t<label class="assignmented-buff-label form-label">${this.getTitle()}</label>\n\t\t`;const t=this.getSourcePlayers();0==t.length?this.rootElem.classList.add("hide"):this.rootElem.classList.remove("hide"),this.targetPickers=t.map(((t,e)=>{const a=document.createElement("div");a.classList.add("assigned-buff-player","input-inline"),this.playersContainer.appendChild(a);const s=document.createElement("div");s.classList.add("raid-target-picker-root"),s.appendChild(Ce.makeOptionElem({player:t,isDropdown:!1})),a.appendChild(s);const i=document.createElement("i");i.classList.add("assigned-buff-arrow","fa","fa-arrow-right"),a.appendChild(i);const r=new Ce(a,this.raidSimUI.sim.raid,t,{extraCssClasses:["assigned-buff-target-picker"],noTargetLabel:"Unassigned",compChangeEmitter:this.raidSimUI.sim.raid.compChangeEmitter,changedEvent:t=>t.specOptionsChangeEmitter,getValue:t=>this.getPlayerValue(t),setValue:(t,e,a)=>this.setPlayerValue(t,e,a)}),n={player:t,targetPicker:r,targetPlayer:this.raidSimUI.sim.raid.getPlayerFromUnitReference(r.getInputValue())};return r.changeEmitter.on((t=>{n.targetPlayer=this.raidSimUI.sim.raid.getPlayerFromUnitReference(r.getInputValue())})),n}))}}class Te extends we{getTitle(){return"Innervate"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((t=>t.isClass(C.ClassDruid)))}getPlayerValue(t){return t.getSpecOptions().classOptions?.innervateTarget||pt()}setPlayerValue(t,e,a){const s=e.getSpecOptions();s.classOptions.innervateTarget=a,e.setSpecOptions(t,s)}}class Re extends we{getTitle(){return"Power Infusion"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((t=>t.isSpec(E.SpecDisciplinePriest)&&t.getTalents().powerInfusion))}getPlayerValue(t){return t.getSpecOptions().powerInfusionTarget||pt()}setPlayerValue(t,e,a){const s=e.getSpecOptions();s.powerInfusionTarget=a,e.setSpecOptions(t,s)}}class Ue extends we{getTitle(){return"Tricks of the Trade"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((t=>t.isClass(C.ClassRogue)))}getPlayerValue(t){return t.getSpecOptions().classOptions.tricksOfTheTradeTarget||pt()}setPlayerValue(t,e,a){const s=e.getSpecOptions();s.classOptions.tricksOfTheTradeTarget=a,e.setSpecOptions(t,s)}}class Oe extends we{getTitle(){return"Unholy Frenzy"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((t=>t.isSpec(E.SpecUnholyDeathKnight)&&t.getTalents().unholyFrenzy))}getPlayerValue(t){return t.getSpecOptions().unholyFrenzyTarget||pt()}setPlayerValue(t,e,a){const s=e.getSpecOptions();s.unholyFrenzyTarget=a,e.setSpecOptions(t,s)}}class xe extends we{getTitle(){return"Focus Magic"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((t=>t.isSpec(E.SpecArcaneMage)))}getPlayerValue(t){return t.getSpecOptions().focusMagicTarget||pt()}setPlayerValue(t,e,a){const s=e.getSpecOptions();s.focusMagicTarget=a,e.setSpecOptions(t,s)}}class Le extends q{constructor(t,e){super(t,"blessings-picker-root"),this.changeEmitter=new w,this.pickers=[],this.simUI=e,this.assignments=ct.clone(T(4));const a=b.naturalOrder.map((t=>Object.values(t.specs))).flat().filter((t=>_t.includes(t.specID))),s=[...Array(4).keys()];a.map((t=>{const e=document.createElement("div");e.classList.add("blessings-picker-row"),this.rootElem.appendChild(e),e.append(this.buildSpecIcon(t));const a=document.createElement("div");return a.classList.add("blessings-picker-container"),e.appendChild(a),s.forEach((e=>{this.pickers[e]||this.pickers.push([]);const s=new m(a,this,{extraCssClasses:["blessing-picker"],numColumns:1,values:[{color:mt.hexColor,value:ht.BlessingUnknown},{actionId:Y.fromSpellId(20217),value:ht.BlessingOfKings},{actionId:Y.fromSpellId(19740),value:ht.BlessingOfMight}],equals:(t,e)=>t==e,zeroValue:ht.BlessingUnknown,enableWhen:t=>{const a=Math.min(this.simUI.getClassCount(C.ClassPaladin),4);return e<a},changedEvent:t=>t.changeEmitter,getValue:a=>a.assignments.paladins[e]?.blessings[t.specID]||ht.BlessingUnknown,setValue:(a,s,i)=>{s.assignments.paladins[e].blessings[t.specID]!=i&&(s.assignments.paladins[e].blessings[t.specID]=i,this.changeEmitter.emit(a))}});this.pickers[e].push(s)})),e})),this.updatePickers(),this.simUI.compChangeEmitter.on((t=>this.updatePickers()))}updatePickers(){for(let t=0;t<4;t++)this.pickers[t].forEach((t=>t.update()))}buildSpecIcon(e){const a=document.createElement("fragment");a.innerHTML=`\n\t\t\t<div class="blessings-picker-spec">\n\t\t\t\t<img\n\t\t\t\t\tsrc="${e.getIcon("medium")}"\n\t\t\t\t\tclass="blessings-spec-icon"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t`;const s=a.querySelector(".blessings-spec-icon");return t(s,{content:e.friendlyName}),a.children[0]}getAssignments(){return ct.clone(this.assignments)}setAssignments(t,e){this.assignments=ct.clone(e),this.changeEmitter.emit(t)}}class Ae extends q{constructor(t,e){super(t,"tanks-picker-root"),this.raidSimUI=e;const a=this.raidSimUI.sim.raid;for(let s=0;s<4;s++){const t=document.createElement("div");t.classList.add("tank-picker-row","input-inline"),this.rootElem.appendChild(t);const e=document.createElement("label");e.textContent=0==s?"Main Tank":`Tank ${s+1}`,e.classList.add("tank-picker-label","form-label"),t.appendChild(e),new Ce(t,a,a,{extraCssClasses:["tank-picker"],noTargetLabel:"Unassigned",compChangeEmitter:a.compChangeEmitter,changedEvent:t=>t.tanksChangeEmitter,getValue:t=>t.getTanks()[s]||pt(),setValue:(t,e,a)=>{const i=e.getTanks();for(let r=0;r<s;r++)i[r]||i.push(pt());i[s]=a,e.setTanks(t,i)}})}}}class Fe extends d{constructor(t,e){super(t,e,{identifier:"raid-settings-tab",title:"Settings"}),this.column1=this.buildColumn(1,"raid-settings-col"),this.column2=this.buildColumn(2,"raid-settings-col"),this.column3=this.buildColumn(3,"raid-settings-col"),this.simUI=e,this.leftPanel=document.createElement("div"),this.leftPanel.classList.add("raid-settings-tab-left","tab-panel-left"),this.leftPanel.appendChild(this.column1),this.leftPanel.appendChild(this.column2),this.leftPanel.appendChild(this.column3),this.rightPanel=document.createElement("div"),this.rightPanel.classList.add("raid-settings-tab-right","tab-panel-right","within-raid-sim-hide"),this.contentContainer.appendChild(this.leftPanel),this.contentContainer.appendChild(this.rightPanel),this.buildTabContent()}buildTabContent(){this.buildEncounterSettings(),this.buildConsumesSettings(),this.buildTankSettings(),this.buildAssignmentSettings(),this.buildOtherSettings(),this.buildBlessingsPicker(),this.buildSavedDataPickers()}buildEncounterSettings(){const t=new h(this.column1,"encounter-settings",{header:{title:"Encounter"}});new u(t.bodyElement,this.simUI.sim.encounter,{showExecuteProportion:!0},this.simUI)}buildConsumesSettings(){const t=new h(this.column1,"consumes-settings",{header:{title:"Consumables"}}),e=document.createElement("div");e.classList.add("consumes-container"),t.bodyElement.appendChild(e)}buildOtherSettings(){new h(this.column2,"other-settings",{header:{title:"Other"}})}buildTankSettings(){const t=new h(this.column2,"tanks-settings",{header:{title:"Tanks"}});new Ae(t.bodyElement,this.simUI)}buildAssignmentSettings(){const t=new h(this.column2,"assignments-settings",{header:{title:"External Buffs"}});new ve(t.bodyElement,this.simUI)}buildBlessingsPicker(){const t=new h(this.column3,"blessings-settings",{header:{title:"Blessings",tooltip:g}});this.simUI.blessingsPicker=new Le(t.bodyElement,this.simUI),this.simUI.blessingsPicker.changeEmitter.on((t=>this.simUI.changeEmitter.emit(t)))}buildSavedDataPickers(){const t=new p(this.rightPanel,this.simUI.sim.encounter,{label:"Encounter",header:{title:"Saved Encounters"},storageKey:this.simUI.getSavedEncounterStorageKey(),getData:t=>ut.create({encounter:t.toProto()}),setData:(t,e,a)=>e.fromProto(t,a.encounter),changeEmitters:[this.simUI.sim.encounter.changeEmitter],equals:(t,e)=>ut.equals(t,e),toJson:t=>ut.toJson(t),fromJson:t=>ut.fromJson(t)});this.simUI.sim.waitForInit().then((()=>{t.loadUserData()}))}makeBooleanRaidIconBuffInput(t,e,a){const s=this.simUI.sim.raid;return new f(t,s,{actionId:e,states:2,changedEvent:t=>t.buffsChangeEmitter,getValue:t=>t.getBuffs()[a],setValue:(t,e,s)=>{const i=e.getBuffs();i[a]=s,e.setBuffs(t,i)}})}}const Me=[];new class extends y{constructor(t,e){super(t,new S,{cssClass:"raid-sim-ui",cssScheme:"raid",spec:null,simStatus:I,knownIssues:(e.knownIssues||[]).concat(Me)}),this.raidSimResultsManager=null,this.raidPicker=null,this.blessingsPicker=null,this.compChangeEmitter=new w,this.changeEmitter=new w,this.referenceChangeEmitter=new w,this.config=e,this.sim.raid.compChangeEmitter.on((t=>this.compChangeEmitter.emit(t))),[this.compChangeEmitter,this.sim.changeEmitter].forEach((t=>t.on((t=>this.changeEmitter.emit(t))))),this.changeEmitter.on((()=>this.recomputeSettingsLayout())),this.sim.setModifyRaidProto((t=>this.modifyRaidProto(t))),this.sim.waitForInit().then((()=>this.loadSettings())),this.addSidebarComponents(),this.addTopbarComponents(),this.addRaidTab(),this.addSettingsTab(),this.addDetailedResultsTab()}loadSettings(){const t=w.nextEventID();w.freezeAllAndDo((()=>{let e=!1;const a=window.localStorage.getItem(this.getSettingsStorageKey());if(null!=a)try{const s=v.fromJsonString(a);this.fromProto(t,s),e=!0}catch(s){console.warn("Failed to parse saved settings: "+s)}e||this.applyDefaults(t),this.changeEmitter.on((t=>{const e=v.toJsonString(this.toProto());window.localStorage.setItem(this.getSettingsStorageKey(),e)}))}))}addSidebarComponents(){this.raidSimResultsManager=gt(this),this.raidSimResultsManager.changeEmitter.on((t=>this.referenceChangeEmitter.emit(t)))}addTopbarComponents(){this.simHeader.addImportLink("JSON",new Xt(this.rootElem,this)),this.simHeader.addImportLink("WCL",new Zt(this.rootElem,this)),this.simHeader.addExportLink("JSON",new Qt(this.rootElem,this))}addRaidTab(){new ke(this.simTabContentsContainer,this)}addSettingsTab(){new Fe(this.simTabContentsContainer,this)}addDetailedResultsTab(){const t=Z("div",{className:"detailed-results"});this.addTab("Results","detailed-results-tab",t),new ft(t,this,this.raidSimResultsManager)}recomputeSettingsLayout(){window.dispatchEvent(new Event("resize"))}modifyRaidProto(t){const e=this.getClassCount(C.ClassPaladin),a=this.blessingsPicker.getAssignments();_t.forEach((s=>{const i=t.parties.map((t=>t.players.filter((t=>t.class!=C.ClassUnknown&&H(t)==s)))).flat();a.paladins.forEach(((a,r)=>{r>=e||(a.blessings[s]==ht.BlessingOfKings?i.forEach((()=>t.buffs.blessingOfKings=!0)):a.blessings[s]==ht.BlessingOfMight&&i.forEach((()=>t.buffs.blessingOfMight=!0)))}))}))}getCurrentData(){return this.raidSimResultsManager?this.raidSimResultsManager.getCurrentData():null}getReferenceData(){return this.raidSimResultsManager?this.raidSimResultsManager.getReferenceData():null}getActivePlayers(){return this.sim.raid.getActivePlayers()}getClassCount(t){return this.getActivePlayers().filter((e=>e.isClass(t))).length}applyDefaults(t){w.freezeAllAndDo((()=>{this.sim.raid.fromProto(t,M.create({numActiveParties:5})),this.sim.setPhase(t,1),this.sim.encounter.applyDefaults(t),this.sim.applyDefaults(t,!0,!0),this.sim.setShowDamageMetrics(t,!0)}))}toProto(){const t=this.sim.raid.getPlayers().filter((t=>t?.getClass()===C.ClassPaladin)).length;return v.create({settings:this.sim.toProto(),raid:this.sim.raid.toProto(!0),blessings:this.blessingsPicker?.getAssignments()??T(t),encounter:this.sim.encounter.toProto()})}toLink(){const t=this.toProto();t.settings=void 0;const e=v.toBinary(t),a=P.deflate(e,{to:"string"}),s=btoa(String.fromCharCode(...a)),i=new URL(window.location.href);return i.hash=s,i.toString()}fromProto(t,e){w.freezeAllAndDo((()=>{e.settings&&this.sim.fromProto(t,e.settings),this.sim.raid.fromProto(t,e.raid||M.create()),this.sim.encounter.fromProto(t,e.encounter||F.create()),this.blessingsPicker?.setAssignments(t,e.blessings||ct.create())}))}clearRaid(t){this.sim.raid.clear(t)}getStorageKey(t){return"__cata_raid__"+t}getSavedRaidStorageKey(){return this.getStorageKey("__savedRaid__")}}(document.body,{});
//# sourceMappingURL=index.html-0R83DF3W.entry.js.map
