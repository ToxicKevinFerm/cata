{"version":3,"file":"detailed_results-Bq3U1zBE.chunk.js","sources":["../../../node_modules/tsx-vanilla/lib/index.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/json-typings.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/base64.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/binary-format-contract.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/goog-varint.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/pb-long.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/binary-reader.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/assert.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/binary-writer.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/json-format-contract.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/message-type-contract.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/lower-camel-case.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-info.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/oneof.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-type-check.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-long-convert.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-reader.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-writer.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-scalar-default.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-reader.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-writer.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-merge-partial.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-equals.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/message-type.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-create.js","../../../ui/core/proto/common.ts","../../../ui/core/constants/mechanics.ts","../../../ui/core/proto/shaman.ts","../../../ui/core/proto/druid.ts","../../../ui/core/proto/apl.ts","../../../ui/core/proto/warrior.ts","../../../ui/core/proto/warlock.ts","../../../ui/core/proto/rogue.ts","../../../ui/core/proto/priest.ts","../../../ui/core/proto/paladin.ts","../../../ui/core/proto/mage.ts","../../../ui/core/proto/hunter.ts","../../../ui/core/proto/death_knight.ts","../../../ui/core/proto/api.ts","../../../ui/core/constants/other.ts","../../../ui/core/player_class.ts","../../../ui/core/player_spec.ts","../../../ui/core/player_specs/death_knight.ts","../../../ui/core/player_classes/death_knight.ts","../../../ui/core/player_specs/druid.ts","../../../ui/core/player_classes/druid.ts","../../../ui/core/player_specs/hunter.ts","../../../ui/core/player_classes/hunter.ts","../../../ui/core/player_specs/mage.ts","../../../ui/core/player_classes/mage.ts","../../../ui/core/player_specs/paladin.ts","../../../ui/core/player_classes/paladin.ts","../../../ui/core/player_specs/priest.ts","../../../ui/core/player_classes/priest.ts","../../../ui/core/player_specs/rogue.ts","../../../ui/core/player_classes/rogue.ts","../../../ui/core/player_specs/shaman.ts","../../../ui/core/player_classes/shaman.ts","../../../ui/core/player_specs/warlock.ts","../../../ui/core/player_classes/warlock.ts","../../../ui/core/player_specs/warrior.ts","../../../ui/core/player_classes/warrior.ts","../../../ui/core/player_classes/index.ts","../../../ui/core/player_specs/index.ts","../../../ui/core/proto/ui.ts","../../../ui/core/utils.ts","../../../ui/core/proto_utils/utils.ts","../../../ui/core/typed_event.ts","../../../ui/core/constants/lang.ts","../../../ui/core/proto_utils/gems.ts","../../../ui/core/proto_utils/names.ts","../../../ui/core/proto_utils/stats.ts","../../../ui/core/proto_utils/equipped_item.ts","../../../ui/core/proto_utils/gear.ts","../../../ui/core/proto_utils/database.ts","../../../ui/core/wowhead.ts","../../../ui/core/proto_utils/action_id.ts","../../../ui/core/proto_utils/logs_parser.tsx","../../../ui/core/proto_utils/sim_result.ts","../../../ui/core/components/component.ts","../../../ui/core/components/input.tsx","../../../ui/core/components/boolean_picker.ts","../../../ui/core/components/detailed_results/result_component.ts","../../../ui/core/components/detailed_results/metrics_table.tsx","../../../ui/core/components/detailed_results/aura_metrics.ts","../../../ui/core/components/detailed_results/cast_metrics.ts","../../../ui/core/components/detailed_results/dps_histogram.ts","../../../ui/core/components/detailed_results/dtps_melee_metrics.ts","../../../ui/core/components/detailed_results/dtps_spell_metrics.ts","../../../ui/core/components/detailed_results/healing_metrics.ts","../../../node_modules/lodash/isObject.js","../../../node_modules/lodash/_root.js","../../../node_modules/lodash/_freeGlobal.js","../../../node_modules/lodash/now.js","../../../node_modules/lodash/_trimmedEndIndex.js","../../../node_modules/lodash/_baseTrim.js","../../../node_modules/lodash/_Symbol.js","../../../node_modules/lodash/_getRawTag.js","../../../node_modules/lodash/_objectToString.js","../../../node_modules/lodash/_baseGetTag.js","../../../node_modules/lodash/isObjectLike.js","../../../node_modules/lodash/isSymbol.js","../../../node_modules/lodash/toNumber.js","../../../node_modules/lodash/debounce.js","../../../ui/core/components/detailed_results/log_runner.tsx","../../../ui/core/components/detailed_results/melee_metrics.ts","../../../ui/core/components/detailed_results/color_settings.ts","../../../ui/core/components/detailed_results/source_chart.ts","../../../ui/core/components/detailed_results/player_damage.ts","../../../ui/core/components/detailed_results/player_damage_taken.ts","../../../ui/core/components/detailed_results/resource_metrics.ts","../../../ui/core/components/dropdown_picker.ts","../../../ui/core/components/unit_picker.ts","../../../ui/core/components/detailed_results/results_filter.ts","../../../ui/core/components/detailed_results/spell_metrics.ts","../../../ui/core/components/detailed_results/timeline.tsx","../../../ui/core/components/raid_sim_action.tsx","../../../ui/core/components/detailed_results/topline_results.tsx","../../../ui/core/components/detailed_results.tsx"],"sourcesContent":["function element(tagName, props, ...children) {\n    if (typeof tagName == \"string\") {\n        const el = tagMap[tagName]?.(tagName) || document.createElement(tagName);\n        appendChildren(props?.children != null ? [props.children] : children, props?.shadowRootOptions ? el.attachShadow(props.shadowRootOptions) : el);\n        if (props) {\n            const { attributes, style, dataset, ref } = props;\n            for (let prop in props) {\n                if (!specialProps.has(prop))\n                    el[prop] = props[prop];\n            }\n            if (attributes)\n                for (let attr in attributes)\n                    el.setAttribute(attr, attributes[attr]);\n            if (dataset)\n                Object.assign(el.dataset, dataset);\n            if (style) // @ts-ignore\n                typeof style == \"string\" ? el.style = style : addStyles(el.style, style);\n            if (ref)\n                typeof ref == \"function\" ? ref(el) : ref.value = el;\n        }\n        return el;\n    }\n    let l = children.length;\n    // If there are children they need to be passed to the component\n    // If there\"s only 1 child, children should not be an array\n    return tagName(l ? { children: l > 1 ? children : children[0], ...props } : props || {});\n}\nconst fragment = ({ children }) => {\n    const fragment = new DocumentFragment;\n    if (children)\n        appendChildren([children], fragment);\n    return fragment;\n};\nconst ref = (value) => ({ value });\nconst addStyles = (style, styles) => {\n    for (let name in styles) {\n        if (name.indexOf(\"--\"))\n            style[name] = styles[name];\n        else\n            style.setProperty(name, styles[name]);\n    }\n};\nconst appendChildren = (children, parent) => {\n    for (let child of children) {\n        if (child == null || typeof child == \"boolean\")\n            continue;\n        if (Array.isArray(child))\n            appendChildren(child, parent);\n        // Letting javascript convert numbers automatically\n        else\n            parent.append(child);\n    }\n};\n// SVG elements with the same name as an HTML element such as `a`, `script`, `style` and `title` are removed\n/** Adds SVG support. Must be called before creating any SVG elements with JSX. */\nconst addSVGSupport = () => {\n    let fn = (tagName) => document.createElementNS(\"http://www.w3.org/2000/svg\", tagName);\n    [\n        \"animate\", \"animateMotion\", \"animateTransform\", \"circle\", \"clipPath\", \"defs\", \"desc\",\n        \"ellipse\", \"feBlend\", \"feColorMatrix\", \"feComponentTransfer\", \"feDiffuseLighting\",\n        \"feDisplacementMap\", \"feDistanceLight\", \"feDropShadow\", \"feFlood\", \"feFuncA\", \"feFuncB\",\n        \"feFuncG\", \"feFuncR\", \"feGaussianBlur\", \"feImage\", \"feMerge\", \"feMergeNode\", \"feMorphology\",\n        \"feOffset\", \"fePointLight\", \"feSpecularLighting\", \"feSpotLight\", \"feTile\", \"feTurbulence\",\n        \"filter\", \"foreignObject\", \"g\", \"image\", \"line\", \"linearGradient\", \"marker\", \"mask\",\n        \"metadata\", \"mpath\", \"path\", \"pattern\", \"polygon\", \"polyline\", \"radialGradient\", \"rect\",\n        \"set\", \"stop\", \"svg\", \"switch\", \"symbol\", \"text\", \"textPath\", \"tspan\", \"use\", \"view\"\n    ].forEach(tag => tagMap[tag] = fn);\n};\n/** Adds MathML support. Must be called before creating any MathML elements with JSX. */\nconst addMathMLSupport = () => {\n    let fn = (tagName) => document.createElementNS(\"http://www.w3.org/1998/Math/MathML\", tagName);\n    [\n        \"annotation\", \"annotation-xml\", \"maction\", \"math\", \"merror\", \"mfrac\", \"mi\",\n        \"mmultiscripts\", \"mn\", \"mo\", \"mover\", \"mpadded\", \"mphantom\", \"mprescripts\",\n        \"mroot\", \"mrow\", \"ms\", \"mspace\", \"msqrt\", \"mstyle\", \"msub\", \"msubsup\", \"msup\",\n        \"mtable\", \"mtd\", \"mtext\", \"mtr\", \"munder\", \"munderover\", \"semantics\"\n    ].forEach(tag => tagMap[tag] = fn);\n};\nconst tagMap = {};\nconst specialProps = new Set([\"dataset\", \"style\", \"attributes\", \"ref\", \"children\"]);\nexport { element, fragment, ref, element as createElement, fragment as Fragment, element as h, appendChildren, addSVGSupport, addMathMLSupport };\n//# sourceMappingURL=index.js.map","/**\n * Get the type of a JSON value.\n * Distinguishes between array, null and object.\n */\nexport function typeofJsonValue(value) {\n    let t = typeof value;\n    if (t == \"object\") {\n        if (Array.isArray(value))\n            return \"array\";\n        if (value === null)\n            return \"null\";\n    }\n    return t;\n}\n/**\n * Is this a JSON object (instead of an array or null)?\n */\nexport function isJsonObject(value) {\n    return value !== null && typeof value == \"object\" && !Array.isArray(value);\n}\n","// lookup table from base64 character to byte\nlet encTable = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n// lookup table from base64 character *code* to byte because lookup by number is fast\nlet decTable = [];\nfor (let i = 0; i < encTable.length; i++)\n    decTable[encTable[i].charCodeAt(0)] = i;\n// support base64url variants\ndecTable[\"-\".charCodeAt(0)] = encTable.indexOf(\"+\");\ndecTable[\"_\".charCodeAt(0)] = encTable.indexOf(\"/\");\n/**\n * Decodes a base64 string to a byte array.\n *\n * - ignores white-space, including line breaks and tabs\n * - allows inner padding (can decode concatenated base64 strings)\n * - does not require padding\n * - understands base64url encoding:\n *   \"-\" instead of \"+\",\n *   \"_\" instead of \"/\",\n *   no padding\n */\nexport function base64decode(base64Str) {\n    // estimate byte size, not accounting for inner padding and whitespace\n    let es = base64Str.length * 3 / 4;\n    // if (es % 3 !== 0)\n    // throw new Error('invalid base64 string');\n    if (base64Str[base64Str.length - 2] == '=')\n        es -= 2;\n    else if (base64Str[base64Str.length - 1] == '=')\n        es -= 1;\n    let bytes = new Uint8Array(es), bytePos = 0, // position in byte array\n    groupPos = 0, // position in base64 group\n    b, // current byte\n    p = 0 // previous byte\n    ;\n    for (let i = 0; i < base64Str.length; i++) {\n        b = decTable[base64Str.charCodeAt(i)];\n        if (b === undefined) {\n            // noinspection FallThroughInSwitchStatementJS\n            switch (base64Str[i]) {\n                case '=':\n                    groupPos = 0; // reset state when padding found\n                case '\\n':\n                case '\\r':\n                case '\\t':\n                case ' ':\n                    continue; // skip white-space, and padding\n                default:\n                    throw Error(`invalid base64 string.`);\n            }\n        }\n        switch (groupPos) {\n            case 0:\n                p = b;\n                groupPos = 1;\n                break;\n            case 1:\n                bytes[bytePos++] = p << 2 | (b & 48) >> 4;\n                p = b;\n                groupPos = 2;\n                break;\n            case 2:\n                bytes[bytePos++] = (p & 15) << 4 | (b & 60) >> 2;\n                p = b;\n                groupPos = 3;\n                break;\n            case 3:\n                bytes[bytePos++] = (p & 3) << 6 | b;\n                groupPos = 0;\n                break;\n        }\n    }\n    if (groupPos == 1)\n        throw Error(`invalid base64 string.`);\n    return bytes.subarray(0, bytePos);\n}\n/**\n * Encodes a byte array to a base64 string.\n * Adds padding at the end.\n * Does not insert newlines.\n */\nexport function base64encode(bytes) {\n    let base64 = '', groupPos = 0, // position in base64 group\n    b, // current byte\n    p = 0; // carry over from previous byte\n    for (let i = 0; i < bytes.length; i++) {\n        b = bytes[i];\n        switch (groupPos) {\n            case 0:\n                base64 += encTable[b >> 2];\n                p = (b & 3) << 4;\n                groupPos = 1;\n                break;\n            case 1:\n                base64 += encTable[p | b >> 4];\n                p = (b & 15) << 2;\n                groupPos = 2;\n                break;\n            case 2:\n                base64 += encTable[p | b >> 6];\n                base64 += encTable[b & 63];\n                groupPos = 0;\n                break;\n        }\n    }\n    // padding required?\n    if (groupPos) {\n        base64 += encTable[p];\n        base64 += '=';\n        if (groupPos == 1)\n            base64 += '=';\n    }\n    return base64;\n}\n","/**\n * This handler implements the default behaviour for unknown fields.\n * When reading data, unknown fields are stored on the message, in a\n * symbol property.\n * When writing data, the symbol property is queried and unknown fields\n * are serialized into the output again.\n */\nexport var UnknownFieldHandler;\n(function (UnknownFieldHandler) {\n    /**\n     * The symbol used to store unknown fields for a message.\n     * The property must conform to `UnknownFieldContainer`.\n     */\n    UnknownFieldHandler.symbol = Symbol.for(\"protobuf-ts/unknown\");\n    /**\n     * Store an unknown field during binary read directly on the message.\n     * This method is compatible with `BinaryReadOptions.readUnknownField`.\n     */\n    UnknownFieldHandler.onRead = (typeName, message, fieldNo, wireType, data) => {\n        let container = is(message) ? message[UnknownFieldHandler.symbol] : message[UnknownFieldHandler.symbol] = [];\n        container.push({ no: fieldNo, wireType, data });\n    };\n    /**\n     * Write unknown fields stored for the message to the writer.\n     * This method is compatible with `BinaryWriteOptions.writeUnknownFields`.\n     */\n    UnknownFieldHandler.onWrite = (typeName, message, writer) => {\n        for (let { no, wireType, data } of UnknownFieldHandler.list(message))\n            writer.tag(no, wireType).raw(data);\n    };\n    /**\n     * List unknown fields stored for the message.\n     * Note that there may be multiples fields with the same number.\n     */\n    UnknownFieldHandler.list = (message, fieldNo) => {\n        if (is(message)) {\n            let all = message[UnknownFieldHandler.symbol];\n            return fieldNo ? all.filter(uf => uf.no == fieldNo) : all;\n        }\n        return [];\n    };\n    /**\n     * Returns the last unknown field by field number.\n     */\n    UnknownFieldHandler.last = (message, fieldNo) => UnknownFieldHandler.list(message, fieldNo).slice(-1)[0];\n    const is = (message) => message && Array.isArray(message[UnknownFieldHandler.symbol]);\n})(UnknownFieldHandler || (UnknownFieldHandler = {}));\n/**\n * Merges binary write or read options. Later values override earlier values.\n */\nexport function mergeBinaryOptions(a, b) {\n    return Object.assign(Object.assign({}, a), b);\n}\n/**\n * Protobuf binary format wire types.\n *\n * A wire type provides just enough information to find the length of the\n * following value.\n *\n * See https://developers.google.com/protocol-buffers/docs/encoding#structure\n */\nexport var WireType;\n(function (WireType) {\n    /**\n     * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum\n     */\n    WireType[WireType[\"Varint\"] = 0] = \"Varint\";\n    /**\n     * Used for fixed64, sfixed64, double.\n     * Always 8 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit64\"] = 1] = \"Bit64\";\n    /**\n     * Used for string, bytes, embedded messages, packed repeated fields\n     *\n     * Only repeated numeric types (types which use the varint, 32-bit,\n     * or 64-bit wire types) can be packed. In proto3, such fields are\n     * packed by default.\n     */\n    WireType[WireType[\"LengthDelimited\"] = 2] = \"LengthDelimited\";\n    /**\n     * Used for groups\n     * @deprecated\n     */\n    WireType[WireType[\"StartGroup\"] = 3] = \"StartGroup\";\n    /**\n     * Used for groups\n     * @deprecated\n     */\n    WireType[WireType[\"EndGroup\"] = 4] = \"EndGroup\";\n    /**\n     * Used for fixed32, sfixed32, float.\n     * Always 4 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit32\"] = 5] = \"Bit32\";\n})(WireType || (WireType = {}));\n","// Copyright 2008 Google Inc.  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Code generated by the Protocol Buffer compiler is owned by the owner\n// of the input file used when generating it.  This code is not\n// standalone and requires a support library to be linked with it.  This\n// support library is itself covered by the above license.\n/**\n * Read a 64 bit varint as two JS numbers.\n *\n * Returns tuple:\n * [0]: low bits\n * [0]: high bits\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\n */\nexport function varint64read() {\n    let lowBits = 0;\n    let highBits = 0;\n    for (let shift = 0; shift < 28; shift += 7) {\n        let b = this.buf[this.pos++];\n        lowBits |= (b & 0x7F) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    let middleByte = this.buf[this.pos++];\n    // last four bits of the first 32 bit number\n    lowBits |= (middleByte & 0x0F) << 28;\n    // 3 upper bits are part of the next 32 bit number\n    highBits = (middleByte & 0x70) >> 4;\n    if ((middleByte & 0x80) == 0) {\n        this.assertBounds();\n        return [lowBits, highBits];\n    }\n    for (let shift = 3; shift <= 31; shift += 7) {\n        let b = this.buf[this.pos++];\n        highBits |= (b & 0x7F) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    throw new Error('invalid varint');\n}\n/**\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\n */\nexport function varint64write(lo, hi, bytes) {\n    for (let i = 0; i < 28; i = i + 7) {\n        const shift = lo >>> i;\n        const hasNext = !((shift >>> 7) == 0 && hi == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xFF;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    const splitBits = ((lo >>> 28) & 0x0F) | ((hi & 0x07) << 4);\n    const hasMoreBits = !((hi >> 3) == 0);\n    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xFF);\n    if (!hasMoreBits) {\n        return;\n    }\n    for (let i = 3; i < 31; i = i + 7) {\n        const shift = hi >>> i;\n        const hasNext = !((shift >>> 7) == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xFF;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    bytes.push((hi >>> 31) & 0x01);\n}\n// constants for binary math\nconst TWO_PWR_32_DBL = (1 << 16) * (1 << 16);\n/**\n * Parse decimal string of 64 bit integer value as two JS numbers.\n *\n * Returns tuple:\n * [0]: minus sign?\n * [1]: low bits\n * [2]: high bits\n *\n * Copyright 2008 Google Inc.\n */\nexport function int64fromString(dec) {\n    // Check for minus sign.\n    let minus = dec[0] == '-';\n    if (minus)\n        dec = dec.slice(1);\n    // Work 6 decimal digits at a time, acting like we're converting base 1e6\n    // digits to binary. This is safe to do with floating point math because\n    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\n    const base = 1e6;\n    let lowBits = 0;\n    let highBits = 0;\n    function add1e6digit(begin, end) {\n        // Note: Number('') is 0.\n        const digit1e6 = Number(dec.slice(begin, end));\n        highBits *= base;\n        lowBits = lowBits * base + digit1e6;\n        // Carry bits from lowBits to highBits\n        if (lowBits >= TWO_PWR_32_DBL) {\n            highBits = highBits + ((lowBits / TWO_PWR_32_DBL) | 0);\n            lowBits = lowBits % TWO_PWR_32_DBL;\n        }\n    }\n    add1e6digit(-24, -18);\n    add1e6digit(-18, -12);\n    add1e6digit(-12, -6);\n    add1e6digit(-6);\n    return [minus, lowBits, highBits];\n}\n/**\n * Format 64 bit integer value (as two JS numbers) to decimal string.\n *\n * Copyright 2008 Google Inc.\n */\nexport function int64toString(bitsLow, bitsHigh) {\n    // Skip the expensive conversion if the number is small enough to use the\n    // built-in conversions.\n    if ((bitsHigh >>> 0) <= 0x1FFFFF) {\n        return '' + (TWO_PWR_32_DBL * bitsHigh + (bitsLow >>> 0));\n    }\n    // What this code is doing is essentially converting the input number from\n    // base-2 to base-1e7, which allows us to represent the 64-bit range with\n    // only 3 (very large) digits. Those digits are then trivial to convert to\n    // a base-10 string.\n    // The magic numbers used here are -\n    // 2^24 = 16777216 = (1,6777216) in base-1e7.\n    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\n    // Split 32:32 representation into 16:24:24 representation so our\n    // intermediate digits don't overflow.\n    let low = bitsLow & 0xFFFFFF;\n    let mid = (((bitsLow >>> 24) | (bitsHigh << 8)) >>> 0) & 0xFFFFFF;\n    let high = (bitsHigh >> 16) & 0xFFFF;\n    // Assemble our three base-1e7 digits, ignoring carries. The maximum\n    // value in a digit at this step is representable as a 48-bit integer, which\n    // can be stored in a 64-bit floating point number.\n    let digitA = low + (mid * 6777216) + (high * 6710656);\n    let digitB = mid + (high * 8147497);\n    let digitC = (high * 2);\n    // Apply carries from A to B and from B to C.\n    let base = 10000000;\n    if (digitA >= base) {\n        digitB += Math.floor(digitA / base);\n        digitA %= base;\n    }\n    if (digitB >= base) {\n        digitC += Math.floor(digitB / base);\n        digitB %= base;\n    }\n    // Convert base-1e7 digits to base-10, with optional leading zeroes.\n    function decimalFrom1e7(digit1e7, needLeadingZeros) {\n        let partial = digit1e7 ? String(digit1e7) : '';\n        if (needLeadingZeros) {\n            return '0000000'.slice(partial.length) + partial;\n        }\n        return partial;\n    }\n    return decimalFrom1e7(digitC, /*needLeadingZeros=*/ 0) +\n        decimalFrom1e7(digitB, /*needLeadingZeros=*/ digitC) +\n        // If the final 1e7 digit didn't need leading zeros, we would have\n        // returned via the trivial code path at the top.\n        decimalFrom1e7(digitA, /*needLeadingZeros=*/ 1);\n}\n/**\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\n */\nexport function varint32write(value, bytes) {\n    if (value >= 0) {\n        // write value as varint 32\n        while (value > 0x7f) {\n            bytes.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        bytes.push(value);\n    }\n    else {\n        for (let i = 0; i < 9; i++) {\n            bytes.push(value & 127 | 128);\n            value = value >> 7;\n        }\n        bytes.push(1);\n    }\n}\n/**\n * Read an unsigned 32 bit varint.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\n */\nexport function varint32read() {\n    let b = this.buf[this.pos++];\n    let result = b & 0x7F;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 7;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 14;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 21;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    // Extract only last 4 bits\n    b = this.buf[this.pos++];\n    result |= (b & 0x0F) << 28;\n    for (let readBytes = 5; ((b & 0x80) !== 0) && readBytes < 10; readBytes++)\n        b = this.buf[this.pos++];\n    if ((b & 0x80) != 0)\n        throw new Error('invalid varint');\n    this.assertBounds();\n    // Result can have 32 bits, convert it to unsigned\n    return result >>> 0;\n}\n","import { int64fromString, int64toString } from \"./goog-varint\";\nlet BI;\nexport function detectBi() {\n    const dv = new DataView(new ArrayBuffer(8));\n    const ok = globalThis.BigInt !== undefined\n        && typeof dv.getBigInt64 === \"function\"\n        && typeof dv.getBigUint64 === \"function\"\n        && typeof dv.setBigInt64 === \"function\"\n        && typeof dv.setBigUint64 === \"function\";\n    BI = ok ? {\n        MIN: BigInt(\"-9223372036854775808\"),\n        MAX: BigInt(\"9223372036854775807\"),\n        UMIN: BigInt(\"0\"),\n        UMAX: BigInt(\"18446744073709551615\"),\n        C: BigInt,\n        V: dv,\n    } : undefined;\n}\ndetectBi();\nfunction assertBi(bi) {\n    if (!bi)\n        throw new Error(\"BigInt unavailable, see https://github.com/timostamm/protobuf-ts/blob/v1.0.8/MANUAL.md#bigint-support\");\n}\n// used to validate from(string) input (when bigint is unavailable)\nconst RE_DECIMAL_STR = /^-?[0-9]+$/;\n// constants for binary math\nconst TWO_PWR_32_DBL = 0x100000000;\nconst HALF_2_PWR_32 = 0x080000000;\n// base class for PbLong and PbULong provides shared code\nclass SharedPbLong {\n    /**\n     * Create a new instance with the given bits.\n     */\n    constructor(lo, hi) {\n        this.lo = lo | 0;\n        this.hi = hi | 0;\n    }\n    /**\n     * Is this instance equal to 0?\n     */\n    isZero() {\n        return this.lo == 0 && this.hi == 0;\n    }\n    /**\n     * Convert to a native number.\n     */\n    toNumber() {\n        let result = this.hi * TWO_PWR_32_DBL + (this.lo >>> 0);\n        if (!Number.isSafeInteger(result))\n            throw new Error(\"cannot convert to safe number\");\n        return result;\n    }\n}\n/**\n * 64-bit unsigned integer as two 32-bit values.\n * Converts between `string`, `number` and `bigint` representations.\n */\nexport class PbULong extends SharedPbLong {\n    /**\n     * Create instance from a `string`, `number` or `bigint`.\n     */\n    static from(value) {\n        if (BI)\n            // noinspection FallThroughInSwitchStatementJS\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    if (value == \"\")\n                        throw new Error('string is no integer');\n                    value = BI.C(value);\n                case \"number\":\n                    if (value === 0)\n                        return this.ZERO;\n                    value = BI.C(value);\n                case \"bigint\":\n                    if (!value)\n                        return this.ZERO;\n                    if (value < BI.UMIN)\n                        throw new Error('signed value for ulong');\n                    if (value > BI.UMAX)\n                        throw new Error('ulong too large');\n                    BI.V.setBigUint64(0, value, true);\n                    return new PbULong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));\n            }\n        else\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    value = value.trim();\n                    if (!RE_DECIMAL_STR.test(value))\n                        throw new Error('string is no integer');\n                    let [minus, lo, hi] = int64fromString(value);\n                    if (minus)\n                        throw new Error('signed value for ulong');\n                    return new PbULong(lo, hi);\n                case \"number\":\n                    if (value == 0)\n                        return this.ZERO;\n                    if (!Number.isSafeInteger(value))\n                        throw new Error('number is no integer');\n                    if (value < 0)\n                        throw new Error('signed value for ulong');\n                    return new PbULong(value, value / TWO_PWR_32_DBL);\n            }\n        throw new Error('unknown value ' + typeof value);\n    }\n    /**\n     * Convert to decimal string.\n     */\n    toString() {\n        return BI ? this.toBigInt().toString() : int64toString(this.lo, this.hi);\n    }\n    /**\n     * Convert to native bigint.\n     */\n    toBigInt() {\n        assertBi(BI);\n        BI.V.setInt32(0, this.lo, true);\n        BI.V.setInt32(4, this.hi, true);\n        return BI.V.getBigUint64(0, true);\n    }\n}\n/**\n * ulong 0 singleton.\n */\nPbULong.ZERO = new PbULong(0, 0);\n/**\n * 64-bit signed integer as two 32-bit values.\n * Converts between `string`, `number` and `bigint` representations.\n */\nexport class PbLong extends SharedPbLong {\n    /**\n     * Create instance from a `string`, `number` or `bigint`.\n     */\n    static from(value) {\n        if (BI)\n            // noinspection FallThroughInSwitchStatementJS\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    if (value == \"\")\n                        throw new Error('string is no integer');\n                    value = BI.C(value);\n                case \"number\":\n                    if (value === 0)\n                        return this.ZERO;\n                    value = BI.C(value);\n                case \"bigint\":\n                    if (!value)\n                        return this.ZERO;\n                    if (value < BI.MIN)\n                        throw new Error('signed long too small');\n                    if (value > BI.MAX)\n                        throw new Error('signed long too large');\n                    BI.V.setBigInt64(0, value, true);\n                    return new PbLong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));\n            }\n        else\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    value = value.trim();\n                    if (!RE_DECIMAL_STR.test(value))\n                        throw new Error('string is no integer');\n                    let [minus, lo, hi] = int64fromString(value);\n                    if (minus) {\n                        if (hi > HALF_2_PWR_32 || (hi == HALF_2_PWR_32 && lo != 0))\n                            throw new Error('signed long too small');\n                    }\n                    else if (hi >= HALF_2_PWR_32)\n                        throw new Error('signed long too large');\n                    let pbl = new PbLong(lo, hi);\n                    return minus ? pbl.negate() : pbl;\n                case \"number\":\n                    if (value == 0)\n                        return this.ZERO;\n                    if (!Number.isSafeInteger(value))\n                        throw new Error('number is no integer');\n                    return value > 0\n                        ? new PbLong(value, value / TWO_PWR_32_DBL)\n                        : new PbLong(-value, -value / TWO_PWR_32_DBL).negate();\n            }\n        throw new Error('unknown value ' + typeof value);\n    }\n    /**\n     * Do we have a minus sign?\n     */\n    isNegative() {\n        return (this.hi & HALF_2_PWR_32) !== 0;\n    }\n    /**\n     * Negate two's complement.\n     * Invert all the bits and add one to the result.\n     */\n    negate() {\n        let hi = ~this.hi, lo = this.lo;\n        if (lo)\n            lo = ~lo + 1;\n        else\n            hi += 1;\n        return new PbLong(lo, hi);\n    }\n    /**\n     * Convert to decimal string.\n     */\n    toString() {\n        if (BI)\n            return this.toBigInt().toString();\n        if (this.isNegative()) {\n            let n = this.negate();\n            return '-' + int64toString(n.lo, n.hi);\n        }\n        return int64toString(this.lo, this.hi);\n    }\n    /**\n     * Convert to native bigint.\n     */\n    toBigInt() {\n        assertBi(BI);\n        BI.V.setInt32(0, this.lo, true);\n        BI.V.setInt32(4, this.hi, true);\n        return BI.V.getBigInt64(0, true);\n    }\n}\n/**\n * long 0 singleton.\n */\nPbLong.ZERO = new PbLong(0, 0);\n","import { WireType } from \"./binary-format-contract\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { varint32read, varint64read } from \"./goog-varint\";\nconst defaultsRead = {\n    readUnknownField: true,\n    readerFactory: bytes => new BinaryReader(bytes),\n};\n/**\n * Make options for reading binary data form partial options.\n */\nexport function binaryReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;\n}\nexport class BinaryReader {\n    constructor(buf, textDecoder) {\n        this.varint64 = varint64read; // dirty cast for `this`\n        /**\n         * Read a `uint32` field, an unsigned 32 bit varint.\n         */\n        this.uint32 = varint32read; // dirty cast for `this` and access to protected `buf`\n        this.buf = buf;\n        this.len = buf.length;\n        this.pos = 0;\n        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder(\"utf-8\", {\n            fatal: true,\n            ignoreBOM: true,\n        });\n    }\n    /**\n     * Reads a tag - field number and wire type.\n     */\n    tag() {\n        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;\n        if (fieldNo <= 0 || wireType < 0 || wireType > 5)\n            throw new Error(\"illegal tag: field no \" + fieldNo + \" wire type \" + wireType);\n        return [fieldNo, wireType];\n    }\n    /**\n     * Skip one element on the wire and return the skipped data.\n     * Supports WireType.StartGroup since v2.0.0-alpha.23.\n     */\n    skip(wireType) {\n        let start = this.pos;\n        // noinspection FallThroughInSwitchStatementJS\n        switch (wireType) {\n            case WireType.Varint:\n                while (this.buf[this.pos++] & 0x80) {\n                    // ignore\n                }\n                break;\n            case WireType.Bit64:\n                this.pos += 4;\n            case WireType.Bit32:\n                this.pos += 4;\n                break;\n            case WireType.LengthDelimited:\n                let len = this.uint32();\n                this.pos += len;\n                break;\n            case WireType.StartGroup:\n                // From descriptor.proto: Group type is deprecated, not supported in proto3.\n                // But we must still be able to parse and treat as unknown.\n                let t;\n                while ((t = this.tag()[1]) !== WireType.EndGroup) {\n                    this.skip(t);\n                }\n                break;\n            default:\n                throw new Error(\"cant skip wire type \" + wireType);\n        }\n        this.assertBounds();\n        return this.buf.subarray(start, this.pos);\n    }\n    /**\n     * Throws error if position in byte array is out of range.\n     */\n    assertBounds() {\n        if (this.pos > this.len)\n            throw new RangeError(\"premature EOF\");\n    }\n    /**\n     * Read a `int32` field, a signed 32 bit varint.\n     */\n    int32() {\n        return this.uint32() | 0;\n    }\n    /**\n     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32() {\n        let zze = this.uint32();\n        // decode zigzag\n        return (zze >>> 1) ^ -(zze & 1);\n    }\n    /**\n     * Read a `int64` field, a signed 64-bit varint.\n     */\n    int64() {\n        return new PbLong(...this.varint64());\n    }\n    /**\n     * Read a `uint64` field, an unsigned 64-bit varint.\n     */\n    uint64() {\n        return new PbULong(...this.varint64());\n    }\n    /**\n     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64() {\n        let [lo, hi] = this.varint64();\n        // decode zig zag\n        let s = -(lo & 1);\n        lo = ((lo >>> 1 | (hi & 1) << 31) ^ s);\n        hi = (hi >>> 1 ^ s);\n        return new PbLong(lo, hi);\n    }\n    /**\n     * Read a `bool` field, a variant.\n     */\n    bool() {\n        let [lo, hi] = this.varint64();\n        return lo !== 0 || hi !== 0;\n    }\n    /**\n     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32() {\n        return this.view.getUint32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32() {\n        return this.view.getInt32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64() {\n        return new PbULong(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64() {\n        return new PbLong(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `float` field, 32-bit floating point number.\n     */\n    float() {\n        return this.view.getFloat32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `double` field, a 64-bit floating point number.\n     */\n    double() {\n        return this.view.getFloat64((this.pos += 8) - 8, true);\n    }\n    /**\n     * Read a `bytes` field, length-delimited arbitrary data.\n     */\n    bytes() {\n        let len = this.uint32();\n        let start = this.pos;\n        this.pos += len;\n        this.assertBounds();\n        return this.buf.subarray(start, start + len);\n    }\n    /**\n     * Read a `string` field, length-delimited data converted to UTF-8 text.\n     */\n    string() {\n        return this.textDecoder.decode(this.bytes());\n    }\n}\n","/**\n * assert that condition is true or throw error (with message)\n */\nexport function assert(condition, msg) {\n    if (!condition) {\n        throw new Error(msg);\n    }\n}\n/**\n * assert that value cannot exist = type `never`. throw runtime error if it does.\n */\nexport function assertNever(value, msg) {\n    throw new Error(msg !== null && msg !== void 0 ? msg : 'Unexpected object: ' + value);\n}\nconst FLOAT32_MAX = 3.4028234663852886e+38, FLOAT32_MIN = -3.4028234663852886e+38, UINT32_MAX = 0xFFFFFFFF, INT32_MAX = 0X7FFFFFFF, INT32_MIN = -0X80000000;\nexport function assertInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid int 32: ' + typeof arg);\n    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)\n        throw new Error('invalid int 32: ' + arg);\n}\nexport function assertUInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid uint 32: ' + typeof arg);\n    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)\n        throw new Error('invalid uint 32: ' + arg);\n}\nexport function assertFloat32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid float 32: ' + typeof arg);\n    if (!Number.isFinite(arg))\n        return;\n    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)\n        throw new Error('invalid float 32: ' + arg);\n}\n","import { PbLong, PbULong } from \"./pb-long\";\nimport { varint32write, varint64write } from \"./goog-varint\";\nimport { assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\nconst defaultsWrite = {\n    writeUnknownFields: true,\n    writerFactory: () => new BinaryWriter(),\n};\n/**\n * Make options for writing binary data form partial options.\n */\nexport function binaryWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;\n}\nexport class BinaryWriter {\n    constructor(textEncoder) {\n        /**\n         * Previous fork states.\n         */\n        this.stack = [];\n        this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();\n        this.chunks = [];\n        this.buf = [];\n    }\n    /**\n     * Return all bytes written and reset this writer.\n     */\n    finish() {\n        this.chunks.push(new Uint8Array(this.buf)); // flush the buffer\n        let len = 0;\n        for (let i = 0; i < this.chunks.length; i++)\n            len += this.chunks[i].length;\n        let bytes = new Uint8Array(len);\n        let offset = 0;\n        for (let i = 0; i < this.chunks.length; i++) {\n            bytes.set(this.chunks[i], offset);\n            offset += this.chunks[i].length;\n        }\n        this.chunks = [];\n        return bytes;\n    }\n    /**\n     * Start a new fork for length-delimited data like a message\n     * or a packed repeated field.\n     *\n     * Must be joined later with `join()`.\n     */\n    fork() {\n        this.stack.push({ chunks: this.chunks, buf: this.buf });\n        this.chunks = [];\n        this.buf = [];\n        return this;\n    }\n    /**\n     * Join the last fork. Write its length and bytes, then\n     * return to the previous state.\n     */\n    join() {\n        // get chunk of fork\n        let chunk = this.finish();\n        // restore previous state\n        let prev = this.stack.pop();\n        if (!prev)\n            throw new Error('invalid state, fork stack empty');\n        this.chunks = prev.chunks;\n        this.buf = prev.buf;\n        // write length of chunk as varint\n        this.uint32(chunk.byteLength);\n        return this.raw(chunk);\n    }\n    /**\n     * Writes a tag (field number and wire type).\n     *\n     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.\n     *\n     * Generated code should compute the tag ahead of time and call `uint32()`.\n     */\n    tag(fieldNo, type) {\n        return this.uint32((fieldNo << 3 | type) >>> 0);\n    }\n    /**\n     * Write a chunk of raw bytes.\n     */\n    raw(chunk) {\n        if (this.buf.length) {\n            this.chunks.push(new Uint8Array(this.buf));\n            this.buf = [];\n        }\n        this.chunks.push(chunk);\n        return this;\n    }\n    /**\n     * Write a `uint32` value, an unsigned 32 bit varint.\n     */\n    uint32(value) {\n        assertUInt32(value);\n        // write value as varint 32, inlined for speed\n        while (value > 0x7f) {\n            this.buf.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        this.buf.push(value);\n        return this;\n    }\n    /**\n     * Write a `int32` value, a signed 32 bit varint.\n     */\n    int32(value) {\n        assertInt32(value);\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `bool` value, a variant.\n     */\n    bool(value) {\n        this.buf.push(value ? 1 : 0);\n        return this;\n    }\n    /**\n     * Write a `bytes` value, length-delimited arbitrary data.\n     */\n    bytes(value) {\n        this.uint32(value.byteLength); // write length of chunk as varint\n        return this.raw(value);\n    }\n    /**\n     * Write a `string` value, length-delimited data converted to UTF-8 text.\n     */\n    string(value) {\n        let chunk = this.textEncoder.encode(value);\n        this.uint32(chunk.byteLength); // write length of chunk as varint\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `float` value, 32-bit floating point number.\n     */\n    float(value) {\n        assertFloat32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setFloat32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `double` value, a 64-bit floating point number.\n     */\n    double(value) {\n        let chunk = new Uint8Array(8);\n        new DataView(chunk.buffer).setFloat64(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32(value) {\n        assertUInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setUint32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32(value) {\n        assertInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setInt32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32(value) {\n        assertInt32(value);\n        // zigzag encode\n        value = ((value << 1) ^ (value >> 31)) >>> 0;\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64(value) {\n        let chunk = new Uint8Array(8);\n        let view = new DataView(chunk.buffer);\n        let long = PbLong.from(value);\n        view.setInt32(0, long.lo, true);\n        view.setInt32(4, long.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64(value) {\n        let chunk = new Uint8Array(8);\n        let view = new DataView(chunk.buffer);\n        let long = PbULong.from(value);\n        view.setInt32(0, long.lo, true);\n        view.setInt32(4, long.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `int64` value, a signed 64-bit varint.\n     */\n    int64(value) {\n        let long = PbLong.from(value);\n        varint64write(long.lo, long.hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64(value) {\n        let long = PbLong.from(value), \n        // zigzag encode\n        sign = long.hi >> 31, lo = (long.lo << 1) ^ sign, hi = ((long.hi << 1) | (long.lo >>> 31)) ^ sign;\n        varint64write(lo, hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `uint64` value, an unsigned 64-bit varint.\n     */\n    uint64(value) {\n        let long = PbULong.from(value);\n        varint64write(long.lo, long.hi, this.buf);\n        return this;\n    }\n}\n","const defaultsWrite = {\n    emitDefaultValues: false,\n    enumAsInteger: false,\n    useProtoFieldName: false,\n    prettySpaces: 0,\n}, defaultsRead = {\n    ignoreUnknownFields: false,\n};\n/**\n * Make options for reading JSON data from partial options.\n */\nexport function jsonReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;\n}\n/**\n * Make options for writing JSON data from partial options.\n */\nexport function jsonWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;\n}\n/**\n * Merges JSON write or read options. Later values override earlier values. Type registries are merged.\n */\nexport function mergeJsonOptions(a, b) {\n    var _a, _b;\n    let c = Object.assign(Object.assign({}, a), b);\n    c.typeRegistry = [...((_a = a === null || a === void 0 ? void 0 : a.typeRegistry) !== null && _a !== void 0 ? _a : []), ...((_b = b === null || b === void 0 ? void 0 : b.typeRegistry) !== null && _b !== void 0 ? _b : [])];\n    return c;\n}\n","/**\n * The symbol used as a key on message objects to store the message type.\n *\n * Note that this is an experimental feature - it is here to stay, but\n * implementation details may change without notice.\n */\nexport const MESSAGE_TYPE = Symbol.for(\"protobuf-ts/message-type\");\n","/**\n * Converts snake_case to lowerCamelCase.\n *\n * Should behave like protoc:\n * https://github.com/protocolbuffers/protobuf/blob/e8ae137c96444ea313485ed1118c5e43b2099cf1/src/google/protobuf/compiler/java/java_helpers.cc#L118\n */\nexport function lowerCamelCase(snakeCase) {\n    let capNext = false;\n    const sb = [];\n    for (let i = 0; i < snakeCase.length; i++) {\n        let next = snakeCase.charAt(i);\n        if (next == '_') {\n            capNext = true;\n        }\n        else if (/\\d/.test(next)) {\n            sb.push(next);\n            capNext = true;\n        }\n        else if (capNext) {\n            sb.push(next.toUpperCase());\n            capNext = false;\n        }\n        else if (i == 0) {\n            sb.push(next.toLowerCase());\n        }\n        else {\n            sb.push(next);\n        }\n    }\n    return sb.join('');\n}\n","import { lowerCamelCase } from \"./lower-camel-case\";\n/**\n * Scalar value types. This is a subset of field types declared by protobuf\n * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE\n * are omitted, but the numerical values are identical.\n */\nexport var ScalarType;\n(function (ScalarType) {\n    // 0 is reserved for errors.\n    // Order is weird for historical reasons.\n    ScalarType[ScalarType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n    ScalarType[ScalarType[\"FLOAT\"] = 2] = \"FLOAT\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT64\"] = 3] = \"INT64\";\n    ScalarType[ScalarType[\"UINT64\"] = 4] = \"UINT64\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT32\"] = 5] = \"INT32\";\n    ScalarType[ScalarType[\"FIXED64\"] = 6] = \"FIXED64\";\n    ScalarType[ScalarType[\"FIXED32\"] = 7] = \"FIXED32\";\n    ScalarType[ScalarType[\"BOOL\"] = 8] = \"BOOL\";\n    ScalarType[ScalarType[\"STRING\"] = 9] = \"STRING\";\n    // Tag-delimited aggregate.\n    // Group type is deprecated and not supported in proto3. However, Proto3\n    // implementations should still be able to parse the group wire format and\n    // treat group fields as unknown fields.\n    // TYPE_GROUP = 10,\n    // TYPE_MESSAGE = 11,  // Length-delimited aggregate.\n    // New in version 2.\n    ScalarType[ScalarType[\"BYTES\"] = 12] = \"BYTES\";\n    ScalarType[ScalarType[\"UINT32\"] = 13] = \"UINT32\";\n    // TYPE_ENUM = 14,\n    ScalarType[ScalarType[\"SFIXED32\"] = 15] = \"SFIXED32\";\n    ScalarType[ScalarType[\"SFIXED64\"] = 16] = \"SFIXED64\";\n    ScalarType[ScalarType[\"SINT32\"] = 17] = \"SINT32\";\n    ScalarType[ScalarType[\"SINT64\"] = 18] = \"SINT64\";\n})(ScalarType || (ScalarType = {}));\n/**\n * JavaScript representation of 64 bit integral types. Equivalent to the\n * field option \"jstype\".\n *\n * By default, protobuf-ts represents 64 bit types as `bigint`.\n *\n * You can change the default behaviour by enabling the plugin parameter\n * `long_type_string`, which will represent 64 bit types as `string`.\n *\n * Alternatively, you can change the behaviour for individual fields\n * with the field option \"jstype\":\n *\n * ```protobuf\n * uint64 my_field = 1 [jstype = JS_STRING];\n * uint64 other_field = 2 [jstype = JS_NUMBER];\n * ```\n */\nexport var LongType;\n(function (LongType) {\n    /**\n     * Use JavaScript `bigint`.\n     *\n     * Field option `[jstype = JS_NORMAL]`.\n     */\n    LongType[LongType[\"BIGINT\"] = 0] = \"BIGINT\";\n    /**\n     * Use JavaScript `string`.\n     *\n     * Field option `[jstype = JS_STRING]`.\n     */\n    LongType[LongType[\"STRING\"] = 1] = \"STRING\";\n    /**\n     * Use JavaScript `number`.\n     *\n     * Large values will loose precision.\n     *\n     * Field option `[jstype = JS_NUMBER]`.\n     */\n    LongType[LongType[\"NUMBER\"] = 2] = \"NUMBER\";\n})(LongType || (LongType = {}));\n/**\n * Protobuf 2.1.0 introduced packed repeated fields.\n * Setting the field option `[packed = true]` enables packing.\n *\n * In proto3, all repeated fields are packed by default.\n * Setting the field option `[packed = false]` disables packing.\n *\n * Packed repeated fields are encoded with a single tag,\n * then a length-delimiter, then the element values.\n *\n * Unpacked repeated fields are encoded with a tag and\n * value for each element.\n *\n * `bytes` and `string` cannot be packed.\n */\nexport var RepeatType;\n(function (RepeatType) {\n    /**\n     * The field is not repeated.\n     */\n    RepeatType[RepeatType[\"NO\"] = 0] = \"NO\";\n    /**\n     * The field is repeated and should be packed.\n     * Invalid for `bytes` and `string`, they cannot be packed.\n     */\n    RepeatType[RepeatType[\"PACKED\"] = 1] = \"PACKED\";\n    /**\n     * The field is repeated but should not be packed.\n     * The only valid repeat type for repeated `bytes` and `string`.\n     */\n    RepeatType[RepeatType[\"UNPACKED\"] = 2] = \"UNPACKED\";\n})(RepeatType || (RepeatType = {}));\n/**\n * Turns PartialFieldInfo into FieldInfo.\n */\nexport function normalizeFieldInfo(field) {\n    var _a, _b, _c, _d;\n    field.localName = (_a = field.localName) !== null && _a !== void 0 ? _a : lowerCamelCase(field.name);\n    field.jsonName = (_b = field.jsonName) !== null && _b !== void 0 ? _b : lowerCamelCase(field.name);\n    field.repeat = (_c = field.repeat) !== null && _c !== void 0 ? _c : RepeatType.NO;\n    field.opt = (_d = field.opt) !== null && _d !== void 0 ? _d : (field.repeat ? false : field.oneof ? false : field.kind == \"message\");\n    return field;\n}\n/**\n * Read custom field options from a generated message type.\n *\n * @deprecated use readFieldOption()\n */\nexport function readFieldOptions(messageType, fieldName, extensionName, extensionType) {\n    var _a;\n    const options = (_a = messageType.fields.find((m, i) => m.localName == fieldName || i == fieldName)) === null || _a === void 0 ? void 0 : _a.options;\n    return options && options[extensionName] ? extensionType.fromJson(options[extensionName]) : undefined;\n}\nexport function readFieldOption(messageType, fieldName, extensionName, extensionType) {\n    var _a;\n    const options = (_a = messageType.fields.find((m, i) => m.localName == fieldName || i == fieldName)) === null || _a === void 0 ? void 0 : _a.options;\n    if (!options) {\n        return undefined;\n    }\n    const optionVal = options[extensionName];\n    if (optionVal === undefined) {\n        return optionVal;\n    }\n    return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}\nexport function readMessageOption(messageType, extensionName, extensionType) {\n    const options = messageType.options;\n    const optionVal = options[extensionName];\n    if (optionVal === undefined) {\n        return optionVal;\n    }\n    return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}\n","/**\n * Is the given value a valid oneof group?\n *\n * We represent protobuf `oneof` as algebraic data types (ADT) in generated\n * code. But when working with messages of unknown type, the ADT does not\n * help us.\n *\n * This type guard checks if the given object adheres to the ADT rules, which\n * are as follows:\n *\n * 1) Must be an object.\n *\n * 2) Must have a \"oneofKind\" discriminator property.\n *\n * 3) If \"oneofKind\" is `undefined`, no member field is selected. The object\n * must not have any other properties.\n *\n * 4) If \"oneofKind\" is a `string`, the member field with this name is\n * selected.\n *\n * 5) If a member field is selected, the object must have a second property\n * with this name. The property must not be `undefined`.\n *\n * 6) No extra properties are allowed. The object has either one property\n * (no selection) or two properties (selection).\n *\n */\nexport function isOneofGroup(any) {\n    if (typeof any != 'object' || any === null || !any.hasOwnProperty('oneofKind')) {\n        return false;\n    }\n    switch (typeof any.oneofKind) {\n        case \"string\":\n            if (any[any.oneofKind] === undefined)\n                return false;\n            return Object.keys(any).length == 2;\n        case \"undefined\":\n            return Object.keys(any).length == 1;\n        default:\n            return false;\n    }\n}\n/**\n * Returns the value of the given field in a oneof group.\n */\nexport function getOneofValue(oneof, kind) {\n    return oneof[kind];\n}\nexport function setOneofValue(oneof, kind, value) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = kind;\n    if (value !== undefined) {\n        oneof[kind] = value;\n    }\n}\nexport function setUnknownOneofValue(oneof, kind, value) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = kind;\n    if (value !== undefined && kind !== undefined) {\n        oneof[kind] = value;\n    }\n}\n/**\n * Removes the selected field in a oneof group.\n *\n * Note that the recommended way to modify a oneof group is to set\n * a new object:\n *\n * ```ts\n * message.result = { oneofKind: undefined };\n * ```\n */\nexport function clearOneofValue(oneof) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = undefined;\n}\n/**\n * Returns the selected value of the given oneof group.\n *\n * Not that the recommended way to access a oneof group is to check\n * the \"oneofKind\" property and let TypeScript narrow down the union\n * type for you:\n *\n * ```ts\n * if (message.result.oneofKind === \"error\") {\n *   message.result.error; // string\n * }\n * ```\n *\n * In the rare case you just need the value, and do not care about\n * which protobuf field is selected, you can use this function\n * for convenience.\n */\nexport function getSelectedOneofValue(oneof) {\n    if (oneof.oneofKind === undefined) {\n        return undefined;\n    }\n    return oneof[oneof.oneofKind];\n}\n","import { LongType, ScalarType } from \"./reflection-info\";\nimport { isOneofGroup } from \"./oneof\";\n// noinspection JSMethodCanBeStatic\nexport class ReflectionTypeCheck {\n    constructor(info) {\n        var _a;\n        this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];\n    }\n    prepare() {\n        if (this.data)\n            return;\n        const req = [], known = [], oneofs = [];\n        for (let field of this.fields) {\n            if (field.oneof) {\n                if (!oneofs.includes(field.oneof)) {\n                    oneofs.push(field.oneof);\n                    req.push(field.oneof);\n                    known.push(field.oneof);\n                }\n            }\n            else {\n                known.push(field.localName);\n                switch (field.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        if (!field.opt || field.repeat)\n                            req.push(field.localName);\n                        break;\n                    case \"message\":\n                        if (field.repeat)\n                            req.push(field.localName);\n                        break;\n                    case \"map\":\n                        req.push(field.localName);\n                        break;\n                }\n            }\n        }\n        this.data = { req, known, oneofs: Object.values(oneofs) };\n    }\n    /**\n     * Is the argument a valid message as specified by the\n     * reflection information?\n     *\n     * Checks all field types recursively. The `depth`\n     * specifies how deep into the structure the check will be.\n     *\n     * With a depth of 0, only the presence of fields\n     * is checked.\n     *\n     * With a depth of 1 or more, the field types are checked.\n     *\n     * With a depth of 2 or more, the members of map, repeated\n     * and message fields are checked.\n     *\n     * Message fields will be checked recursively with depth - 1.\n     *\n     * The number of map entries / repeated values being checked\n     * is < depth.\n     */\n    is(message, depth, allowExcessProperties = false) {\n        if (depth < 0)\n            return true;\n        if (message === null || message === undefined || typeof message != 'object')\n            return false;\n        this.prepare();\n        let keys = Object.keys(message), data = this.data;\n        // if a required field is missing in arg, this cannot be a T\n        if (keys.length < data.req.length || data.req.some(n => !keys.includes(n)))\n            return false;\n        if (!allowExcessProperties) {\n            // if the arg contains a key we dont know, this is not a literal T\n            if (keys.some(k => !data.known.includes(k)))\n                return false;\n        }\n        // \"With a depth of 0, only the presence and absence of fields is checked.\"\n        // \"With a depth of 1 or more, the field types are checked.\"\n        if (depth < 1) {\n            return true;\n        }\n        // check oneof group\n        for (const name of data.oneofs) {\n            const group = message[name];\n            if (!isOneofGroup(group))\n                return false;\n            if (group.oneofKind === undefined)\n                continue;\n            const field = this.fields.find(f => f.localName === group.oneofKind);\n            if (!field)\n                return false; // we found no field, but have a kind, something is wrong\n            if (!this.field(group[group.oneofKind], field, allowExcessProperties, depth))\n                return false;\n        }\n        // check types\n        for (const field of this.fields) {\n            if (field.oneof !== undefined)\n                continue;\n            if (!this.field(message[field.localName], field, allowExcessProperties, depth))\n                return false;\n        }\n        return true;\n    }\n    field(arg, field, allowExcessProperties, depth) {\n        let repeated = field.repeat;\n        switch (field.kind) {\n            case \"scalar\":\n                if (arg === undefined)\n                    return field.opt;\n                if (repeated)\n                    return this.scalars(arg, field.T, depth, field.L);\n                return this.scalar(arg, field.T, field.L);\n            case \"enum\":\n                if (arg === undefined)\n                    return field.opt;\n                if (repeated)\n                    return this.scalars(arg, ScalarType.INT32, depth);\n                return this.scalar(arg, ScalarType.INT32);\n            case \"message\":\n                if (arg === undefined)\n                    return true;\n                if (repeated)\n                    return this.messages(arg, field.T(), allowExcessProperties, depth);\n                return this.message(arg, field.T(), allowExcessProperties, depth);\n            case \"map\":\n                if (typeof arg != 'object' || arg === null)\n                    return false;\n                if (depth < 2)\n                    return true;\n                if (!this.mapKeys(arg, field.K, depth))\n                    return false;\n                switch (field.V.kind) {\n                    case \"scalar\":\n                        return this.scalars(Object.values(arg), field.V.T, depth, field.V.L);\n                    case \"enum\":\n                        return this.scalars(Object.values(arg), ScalarType.INT32, depth);\n                    case \"message\":\n                        return this.messages(Object.values(arg), field.V.T(), allowExcessProperties, depth);\n                }\n                break;\n        }\n        return true;\n    }\n    message(arg, type, allowExcessProperties, depth) {\n        if (allowExcessProperties) {\n            return type.isAssignable(arg, depth);\n        }\n        return type.is(arg, depth);\n    }\n    messages(arg, type, allowExcessProperties, depth) {\n        if (!Array.isArray(arg))\n            return false;\n        if (depth < 2)\n            return true;\n        if (allowExcessProperties) {\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!type.isAssignable(arg[i], depth - 1))\n                    return false;\n        }\n        else {\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!type.is(arg[i], depth - 1))\n                    return false;\n        }\n        return true;\n    }\n    scalar(arg, type, longType) {\n        let argType = typeof arg;\n        switch (type) {\n            case ScalarType.UINT64:\n            case ScalarType.FIXED64:\n            case ScalarType.INT64:\n            case ScalarType.SFIXED64:\n            case ScalarType.SINT64:\n                switch (longType) {\n                    case LongType.BIGINT:\n                        return argType == \"bigint\";\n                    case LongType.NUMBER:\n                        return argType == \"number\" && !isNaN(arg);\n                    default:\n                        return argType == \"string\";\n                }\n            case ScalarType.BOOL:\n                return argType == 'boolean';\n            case ScalarType.STRING:\n                return argType == 'string';\n            case ScalarType.BYTES:\n                return arg instanceof Uint8Array;\n            case ScalarType.DOUBLE:\n            case ScalarType.FLOAT:\n                return argType == 'number' && !isNaN(arg);\n            default:\n                // case ScalarType.UINT32:\n                // case ScalarType.FIXED32:\n                // case ScalarType.INT32:\n                // case ScalarType.SINT32:\n                // case ScalarType.SFIXED32:\n                return argType == 'number' && Number.isInteger(arg);\n        }\n    }\n    scalars(arg, type, depth, longType) {\n        if (!Array.isArray(arg))\n            return false;\n        if (depth < 2)\n            return true;\n        if (Array.isArray(arg))\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!this.scalar(arg[i], type, longType))\n                    return false;\n        return true;\n    }\n    mapKeys(map, type, depth) {\n        let keys = Object.keys(map);\n        switch (type) {\n            case ScalarType.INT32:\n            case ScalarType.FIXED32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n            case ScalarType.UINT32:\n                return this.scalars(keys.slice(0, depth).map(k => parseInt(k)), type, depth);\n            case ScalarType.BOOL:\n                return this.scalars(keys.slice(0, depth).map(k => k == 'true' ? true : k == 'false' ? false : k), type, depth);\n            default:\n                return this.scalars(keys, type, depth, LongType.STRING);\n        }\n    }\n}\n","import { LongType } from \"./reflection-info\";\n/**\n * Utility method to convert a PbLong or PbUlong to a JavaScript\n * representation during runtime.\n *\n * Works with generated field information, `undefined` is equivalent\n * to `STRING`.\n */\nexport function reflectionLongConvert(long, type) {\n    switch (type) {\n        case LongType.BIGINT:\n            return long.toBigInt();\n        case LongType.NUMBER:\n            return long.toNumber();\n        default:\n            // case undefined:\n            // case LongType.STRING:\n            return long.toString();\n    }\n}\n","import { isJsonObject, typeofJsonValue } from \"./json-typings\";\nimport { base64decode } from \"./base64\";\nimport { LongType, ScalarType } from \"./reflection-info\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\n/**\n * Reads proto3 messages in canonical JSON format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n */\nexport class ReflectionJsonReader {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        var _a;\n        if (this.fMap === undefined) {\n            this.fMap = {};\n            const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];\n            for (const field of fieldsInput) {\n                this.fMap[field.name] = field;\n                this.fMap[field.jsonName] = field;\n                this.fMap[field.localName] = field;\n            }\n        }\n    }\n    // Cannot parse JSON <type of jsonValue> for <type name>#<fieldName>.\n    assert(condition, fieldName, jsonValue) {\n        if (!condition) {\n            let what = typeofJsonValue(jsonValue);\n            if (what == \"number\" || what == \"boolean\")\n                what = jsonValue.toString();\n            throw new Error(`Cannot parse JSON ${what} for ${this.info.typeName}#${fieldName}`);\n        }\n    }\n    /**\n     * Reads a message from canonical JSON format into the target message.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    read(input, message, options) {\n        this.prepare();\n        const oneofsHandled = [];\n        for (const [jsonKey, jsonValue] of Object.entries(input)) {\n            const field = this.fMap[jsonKey];\n            if (!field) {\n                if (!options.ignoreUnknownFields)\n                    throw new Error(`Found unknown field while reading ${this.info.typeName} from JSON format. JSON key: ${jsonKey}`);\n                continue;\n            }\n            const localName = field.localName;\n            // handle oneof ADT\n            let target; // this will be the target for the field value, whether it is member of a oneof or not\n            if (field.oneof) {\n                if (jsonValue === null && (field.kind !== 'enum' || field.T()[0] !== 'google.protobuf.NullValue')) {\n                    continue;\n                }\n                // since json objects are unordered by specification, it is not possible to take the last of multiple oneofs\n                if (oneofsHandled.includes(field.oneof))\n                    throw new Error(`Multiple members of the oneof group \"${field.oneof}\" of ${this.info.typeName} are present in JSON.`);\n                oneofsHandled.push(field.oneof);\n                target = message[field.oneof] = {\n                    oneofKind: localName\n                };\n            }\n            else {\n                target = message;\n            }\n            // we have handled oneof above. we just have read the value into `target`.\n            if (field.kind == 'map') {\n                if (jsonValue === null) {\n                    continue;\n                }\n                // check input\n                this.assert(isJsonObject(jsonValue), field.name, jsonValue);\n                // our target to put map entries into\n                const fieldObj = target[localName];\n                // read entries\n                for (const [jsonObjKey, jsonObjValue] of Object.entries(jsonValue)) {\n                    this.assert(jsonObjValue !== null, field.name + \" map value\", null);\n                    // read value\n                    let val;\n                    switch (field.V.kind) {\n                        case \"message\":\n                            val = field.V.T().internalJsonRead(jsonObjValue, options);\n                            break;\n                        case \"enum\":\n                            val = this.enum(field.V.T(), jsonObjValue, field.name, options.ignoreUnknownFields);\n                            if (val === false)\n                                continue;\n                            break;\n                        case \"scalar\":\n                            val = this.scalar(jsonObjValue, field.V.T, field.V.L, field.name);\n                            break;\n                    }\n                    this.assert(val !== undefined, field.name + \" map value\", jsonObjValue);\n                    // read key\n                    let key = jsonObjKey;\n                    if (field.K == ScalarType.BOOL)\n                        key = key == \"true\" ? true : key == \"false\" ? false : key;\n                    key = this.scalar(key, field.K, LongType.STRING, field.name).toString();\n                    fieldObj[key] = val;\n                }\n            }\n            else if (field.repeat) {\n                if (jsonValue === null)\n                    continue;\n                // check input\n                this.assert(Array.isArray(jsonValue), field.name, jsonValue);\n                // our target to put array entries into\n                const fieldArr = target[localName];\n                // read array entries\n                for (const jsonItem of jsonValue) {\n                    this.assert(jsonItem !== null, field.name, null);\n                    let val;\n                    switch (field.kind) {\n                        case \"message\":\n                            val = field.T().internalJsonRead(jsonItem, options);\n                            break;\n                        case \"enum\":\n                            val = this.enum(field.T(), jsonItem, field.name, options.ignoreUnknownFields);\n                            if (val === false)\n                                continue;\n                            break;\n                        case \"scalar\":\n                            val = this.scalar(jsonItem, field.T, field.L, field.name);\n                            break;\n                    }\n                    this.assert(val !== undefined, field.name, jsonValue);\n                    fieldArr.push(val);\n                }\n            }\n            else {\n                switch (field.kind) {\n                    case \"message\":\n                        if (jsonValue === null && field.T().typeName != 'google.protobuf.Value') {\n                            this.assert(field.oneof === undefined, field.name + \" (oneof member)\", null);\n                            continue;\n                        }\n                        target[localName] = field.T().internalJsonRead(jsonValue, options, target[localName]);\n                        break;\n                    case \"enum\":\n                        let val = this.enum(field.T(), jsonValue, field.name, options.ignoreUnknownFields);\n                        if (val === false)\n                            continue;\n                        target[localName] = val;\n                        break;\n                    case \"scalar\":\n                        target[localName] = this.scalar(jsonValue, field.T, field.L, field.name);\n                        break;\n                }\n            }\n        }\n    }\n    /**\n     * Returns `false` for unrecognized string representations.\n     *\n     * google.protobuf.NullValue accepts only JSON `null` (or the old `\"NULL_VALUE\"`).\n     */\n    enum(type, json, fieldName, ignoreUnknownFields) {\n        if (type[0] == 'google.protobuf.NullValue')\n            assert(json === null || json === \"NULL_VALUE\", `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} only accepts null.`);\n        if (json === null)\n            // we require 0 to be default value for all enums\n            return 0;\n        switch (typeof json) {\n            case \"number\":\n                assert(Number.isInteger(json), `Unable to parse field ${this.info.typeName}#${fieldName}, enum can only be integral number, got ${json}.`);\n                return json;\n            case \"string\":\n                let localEnumName = json;\n                if (type[2] && json.substring(0, type[2].length) === type[2])\n                    // lookup without the shared prefix\n                    localEnumName = json.substring(type[2].length);\n                let enumNumber = type[1][localEnumName];\n                if (typeof enumNumber === 'undefined' && ignoreUnknownFields) {\n                    return false;\n                }\n                assert(typeof enumNumber == \"number\", `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} has no value for \"${json}\".`);\n                return enumNumber;\n        }\n        assert(false, `Unable to parse field ${this.info.typeName}#${fieldName}, cannot parse enum value from ${typeof json}\".`);\n    }\n    scalar(json, type, longType, fieldName) {\n        let e;\n        try {\n            switch (type) {\n                // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n                // Either numbers or strings are accepted. Exponent notation is also accepted.\n                case ScalarType.DOUBLE:\n                case ScalarType.FLOAT:\n                    if (json === null)\n                        return .0;\n                    if (json === \"NaN\")\n                        return Number.NaN;\n                    if (json === \"Infinity\")\n                        return Number.POSITIVE_INFINITY;\n                    if (json === \"-Infinity\")\n                        return Number.NEGATIVE_INFINITY;\n                    if (json === \"\") {\n                        e = \"empty string\";\n                        break;\n                    }\n                    if (typeof json == \"string\" && json.trim().length !== json.length) {\n                        e = \"extra whitespace\";\n                        break;\n                    }\n                    if (typeof json != \"string\" && typeof json != \"number\") {\n                        break;\n                    }\n                    let float = Number(json);\n                    if (Number.isNaN(float)) {\n                        e = \"not a number\";\n                        break;\n                    }\n                    if (!Number.isFinite(float)) {\n                        // infinity and -infinity are handled by string representation above, so this is an error\n                        e = \"too large or small\";\n                        break;\n                    }\n                    if (type == ScalarType.FLOAT)\n                        assertFloat32(float);\n                    return float;\n                // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n                case ScalarType.INT32:\n                case ScalarType.FIXED32:\n                case ScalarType.SFIXED32:\n                case ScalarType.SINT32:\n                case ScalarType.UINT32:\n                    if (json === null)\n                        return 0;\n                    let int32;\n                    if (typeof json == \"number\")\n                        int32 = json;\n                    else if (json === \"\")\n                        e = \"empty string\";\n                    else if (typeof json == \"string\") {\n                        if (json.trim().length !== json.length)\n                            e = \"extra whitespace\";\n                        else\n                            int32 = Number(json);\n                    }\n                    if (int32 === undefined)\n                        break;\n                    if (type == ScalarType.UINT32)\n                        assertUInt32(int32);\n                    else\n                        assertInt32(int32);\n                    return int32;\n                // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.\n                case ScalarType.INT64:\n                case ScalarType.SFIXED64:\n                case ScalarType.SINT64:\n                    if (json === null)\n                        return reflectionLongConvert(PbLong.ZERO, longType);\n                    if (typeof json != \"number\" && typeof json != \"string\")\n                        break;\n                    return reflectionLongConvert(PbLong.from(json), longType);\n                case ScalarType.FIXED64:\n                case ScalarType.UINT64:\n                    if (json === null)\n                        return reflectionLongConvert(PbULong.ZERO, longType);\n                    if (typeof json != \"number\" && typeof json != \"string\")\n                        break;\n                    return reflectionLongConvert(PbULong.from(json), longType);\n                // bool:\n                case ScalarType.BOOL:\n                    if (json === null)\n                        return false;\n                    if (typeof json !== \"boolean\")\n                        break;\n                    return json;\n                // string:\n                case ScalarType.STRING:\n                    if (json === null)\n                        return \"\";\n                    if (typeof json !== \"string\") {\n                        e = \"extra whitespace\";\n                        break;\n                    }\n                    try {\n                        encodeURIComponent(json);\n                    }\n                    catch (e) {\n                        e = \"invalid UTF8\";\n                        break;\n                    }\n                    return json;\n                // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n                // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n                case ScalarType.BYTES:\n                    if (json === null || json === \"\")\n                        return new Uint8Array(0);\n                    if (typeof json !== 'string')\n                        break;\n                    return base64decode(json);\n            }\n        }\n        catch (error) {\n            e = error.message;\n        }\n        this.assert(false, fieldName + (e ? \" - \" + e : \"\"), json);\n    }\n}\n","import { base64encode } from \"./base64\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { ScalarType } from \"./reflection-info\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\n/**\n * Writes proto3 messages in canonical JSON format using reflection\n * information.\n *\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n */\nexport class ReflectionJsonWriter {\n    constructor(info) {\n        var _a;\n        this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];\n    }\n    /**\n     * Converts the message to a JSON object, based on the field descriptors.\n     */\n    write(message, options) {\n        const json = {}, source = message;\n        for (const field of this.fields) {\n            // field is not part of a oneof, simply write as is\n            if (!field.oneof) {\n                let jsonValue = this.field(field, source[field.localName], options);\n                if (jsonValue !== undefined)\n                    json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\n                continue;\n            }\n            // field is part of a oneof\n            const group = source[field.oneof];\n            if (group.oneofKind !== field.localName)\n                continue; // not selected, skip\n            const opt = field.kind == 'scalar' || field.kind == 'enum'\n                ? Object.assign(Object.assign({}, options), { emitDefaultValues: true }) : options;\n            let jsonValue = this.field(field, group[field.localName], opt);\n            assert(jsonValue !== undefined);\n            json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\n        }\n        return json;\n    }\n    field(field, value, options) {\n        let jsonValue = undefined;\n        if (field.kind == 'map') {\n            assert(typeof value == \"object\" && value !== null);\n            const jsonObj = {};\n            switch (field.V.kind) {\n                case \"scalar\":\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        const val = this.scalar(field.V.T, entryValue, field.name, false, true);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n                case \"message\":\n                    const messageType = field.V.T();\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        const val = this.message(messageType, entryValue, field.name, options);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n                case \"enum\":\n                    const enumInfo = field.V.T();\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        assert(entryValue === undefined || typeof entryValue == 'number');\n                        const val = this.enum(enumInfo, entryValue, field.name, false, true, options.enumAsInteger);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n            }\n            if (options.emitDefaultValues || Object.keys(jsonObj).length > 0)\n                jsonValue = jsonObj;\n        }\n        else if (field.repeat) {\n            assert(Array.isArray(value));\n            const jsonArr = [];\n            switch (field.kind) {\n                case \"scalar\":\n                    for (let i = 0; i < value.length; i++) {\n                        const val = this.scalar(field.T, value[i], field.name, field.opt, true);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n                case \"enum\":\n                    const enumInfo = field.T();\n                    for (let i = 0; i < value.length; i++) {\n                        assert(value[i] === undefined || typeof value[i] == 'number');\n                        const val = this.enum(enumInfo, value[i], field.name, field.opt, true, options.enumAsInteger);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n                case \"message\":\n                    const messageType = field.T();\n                    for (let i = 0; i < value.length; i++) {\n                        const val = this.message(messageType, value[i], field.name, options);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n            }\n            // add converted array to json output\n            if (options.emitDefaultValues || jsonArr.length > 0 || options.emitDefaultValues)\n                jsonValue = jsonArr;\n        }\n        else {\n            switch (field.kind) {\n                case \"scalar\":\n                    jsonValue = this.scalar(field.T, value, field.name, field.opt, options.emitDefaultValues);\n                    break;\n                case \"enum\":\n                    jsonValue = this.enum(field.T(), value, field.name, field.opt, options.emitDefaultValues, options.enumAsInteger);\n                    break;\n                case \"message\":\n                    jsonValue = this.message(field.T(), value, field.name, options);\n                    break;\n            }\n        }\n        return jsonValue;\n    }\n    /**\n     * Returns `null` as the default for google.protobuf.NullValue.\n     */\n    enum(type, value, fieldName, optional, emitDefaultValues, enumAsInteger) {\n        if (type[0] == 'google.protobuf.NullValue')\n            return !emitDefaultValues && !optional ? undefined : null;\n        if (value === undefined) {\n            assert(optional);\n            return undefined;\n        }\n        if (value === 0 && !emitDefaultValues && !optional)\n            // we require 0 to be default value for all enums\n            return undefined;\n        assert(typeof value == 'number');\n        assert(Number.isInteger(value));\n        if (enumAsInteger || !type[1].hasOwnProperty(value))\n            // if we don't now the enum value, just return the number\n            return value;\n        if (type[2])\n            // restore the dropped prefix\n            return type[2] + type[1][value];\n        return type[1][value];\n    }\n    message(type, value, fieldName, options) {\n        if (value === undefined)\n            return options.emitDefaultValues ? null : undefined;\n        return type.internalJsonWrite(value, options);\n    }\n    scalar(type, value, fieldName, optional, emitDefaultValues) {\n        if (value === undefined) {\n            assert(optional);\n            return undefined;\n        }\n        const ed = emitDefaultValues || optional;\n        // noinspection FallThroughInSwitchStatementJS\n        switch (type) {\n            // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n            case ScalarType.INT32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assertInt32(value);\n                return value;\n            case ScalarType.FIXED32:\n            case ScalarType.UINT32:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assertUInt32(value);\n                return value;\n            // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n            // Either numbers or strings are accepted. Exponent notation is also accepted.\n            case ScalarType.FLOAT:\n                assertFloat32(value);\n            case ScalarType.DOUBLE:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assert(typeof value == 'number');\n                if (Number.isNaN(value))\n                    return 'NaN';\n                if (value === Number.POSITIVE_INFINITY)\n                    return 'Infinity';\n                if (value === Number.NEGATIVE_INFINITY)\n                    return '-Infinity';\n                return value;\n            // string:\n            case ScalarType.STRING:\n                if (value === \"\")\n                    return ed ? '' : undefined;\n                assert(typeof value == 'string');\n                return value;\n            // bool:\n            case ScalarType.BOOL:\n                if (value === false)\n                    return ed ? false : undefined;\n                assert(typeof value == 'boolean');\n                return value;\n            // JSON value will be a decimal string. Either numbers or strings are accepted.\n            case ScalarType.UINT64:\n            case ScalarType.FIXED64:\n                assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');\n                let ulong = PbULong.from(value);\n                if (ulong.isZero() && !ed)\n                    return undefined;\n                return ulong.toString();\n            // JSON value will be a decimal string. Either numbers or strings are accepted.\n            case ScalarType.INT64:\n            case ScalarType.SFIXED64:\n            case ScalarType.SINT64:\n                assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');\n                let long = PbLong.from(value);\n                if (long.isZero() && !ed)\n                    return undefined;\n                return long.toString();\n            // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n            // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n            case ScalarType.BYTES:\n                assert(value instanceof Uint8Array);\n                if (!value.byteLength)\n                    return ed ? \"\" : undefined;\n                return base64encode(value);\n        }\n    }\n}\n","import { LongType, ScalarType } from \"./reflection-info\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\nimport { PbLong, PbULong } from \"./pb-long\";\n/**\n * Creates the default value for a scalar type.\n */\nexport function reflectionScalarDefault(type, longType = LongType.STRING) {\n    switch (type) {\n        case ScalarType.BOOL:\n            return false;\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n            return reflectionLongConvert(PbULong.ZERO, longType);\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            return reflectionLongConvert(PbLong.ZERO, longType);\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            return 0.0;\n        case ScalarType.BYTES:\n            return new Uint8Array(0);\n        case ScalarType.STRING:\n            return \"\";\n        default:\n            // case ScalarType.INT32:\n            // case ScalarType.UINT32:\n            // case ScalarType.SINT32:\n            // case ScalarType.FIXED32:\n            // case ScalarType.SFIXED32:\n            return 0;\n    }\n}\n","import { UnknownFieldHandler, WireType } from \"./binary-format-contract\";\nimport { LongType, ScalarType } from \"./reflection-info\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\nimport { reflectionScalarDefault } from \"./reflection-scalar-default\";\n/**\n * Reads proto3 messages in binary format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/encoding\n */\nexport class ReflectionBinaryReader {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        var _a;\n        if (!this.fieldNoToField) {\n            const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];\n            this.fieldNoToField = new Map(fieldsInput.map(field => [field.no, field]));\n        }\n    }\n    /**\n     * Reads a message from binary format into the target message.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    read(reader, message, options, length) {\n        this.prepare();\n        const end = length === undefined ? reader.len : reader.pos + length;\n        while (reader.pos < end) {\n            // read the tag and find the field\n            const [fieldNo, wireType] = reader.tag(), field = this.fieldNoToField.get(fieldNo);\n            if (!field) {\n                let u = options.readUnknownField;\n                if (u == \"throw\")\n                    throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.info.typeName}`);\n                let d = reader.skip(wireType);\n                if (u !== false)\n                    (u === true ? UnknownFieldHandler.onRead : u)(this.info.typeName, message, fieldNo, wireType, d);\n                continue;\n            }\n            // target object for the field we are reading\n            let target = message, repeated = field.repeat, localName = field.localName;\n            // if field is member of oneof ADT, use ADT as target\n            if (field.oneof) {\n                target = target[field.oneof];\n                // if other oneof member selected, set new ADT\n                if (target.oneofKind !== localName)\n                    target = message[field.oneof] = {\n                        oneofKind: localName\n                    };\n            }\n            // we have handled oneof above, we just have read the value into `target[localName]`\n            switch (field.kind) {\n                case \"scalar\":\n                case \"enum\":\n                    let T = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                    let L = field.kind == \"scalar\" ? field.L : undefined;\n                    if (repeated) {\n                        let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                        if (wireType == WireType.LengthDelimited && T != ScalarType.STRING && T != ScalarType.BYTES) {\n                            let e = reader.uint32() + reader.pos;\n                            while (reader.pos < e)\n                                arr.push(this.scalar(reader, T, L));\n                        }\n                        else\n                            arr.push(this.scalar(reader, T, L));\n                    }\n                    else\n                        target[localName] = this.scalar(reader, T, L);\n                    break;\n                case \"message\":\n                    if (repeated) {\n                        let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                        let msg = field.T().internalBinaryRead(reader, reader.uint32(), options);\n                        arr.push(msg);\n                    }\n                    else\n                        target[localName] = field.T().internalBinaryRead(reader, reader.uint32(), options, target[localName]);\n                    break;\n                case \"map\":\n                    let [mapKey, mapVal] = this.mapEntry(field, reader, options);\n                    // safe to assume presence of map object, oneof cannot contain repeated values\n                    target[localName][mapKey] = mapVal;\n                    break;\n            }\n        }\n    }\n    /**\n     * Read a map field, expecting key field = 1, value field = 2\n     */\n    mapEntry(field, reader, options) {\n        let length = reader.uint32();\n        let end = reader.pos + length;\n        let key = undefined; // javascript only allows number or string for object properties\n        let val = undefined;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case 1:\n                    if (field.K == ScalarType.BOOL)\n                        key = reader.bool().toString();\n                    else\n                        // long types are read as string, number types are okay as number\n                        key = this.scalar(reader, field.K, LongType.STRING);\n                    break;\n                case 2:\n                    switch (field.V.kind) {\n                        case \"scalar\":\n                            val = this.scalar(reader, field.V.T, field.V.L);\n                            break;\n                        case \"enum\":\n                            val = reader.int32();\n                            break;\n                        case \"message\":\n                            val = field.V.T().internalBinaryRead(reader, reader.uint32(), options);\n                            break;\n                    }\n                    break;\n                default:\n                    throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) in map entry for ${this.info.typeName}#${field.name}`);\n            }\n        }\n        if (key === undefined) {\n            let keyRaw = reflectionScalarDefault(field.K);\n            key = field.K == ScalarType.BOOL ? keyRaw.toString() : keyRaw;\n        }\n        if (val === undefined)\n            switch (field.V.kind) {\n                case \"scalar\":\n                    val = reflectionScalarDefault(field.V.T, field.V.L);\n                    break;\n                case \"enum\":\n                    val = 0;\n                    break;\n                case \"message\":\n                    val = field.V.T().create();\n                    break;\n            }\n        return [key, val];\n    }\n    scalar(reader, type, longType) {\n        switch (type) {\n            case ScalarType.INT32:\n                return reader.int32();\n            case ScalarType.STRING:\n                return reader.string();\n            case ScalarType.BOOL:\n                return reader.bool();\n            case ScalarType.DOUBLE:\n                return reader.double();\n            case ScalarType.FLOAT:\n                return reader.float();\n            case ScalarType.INT64:\n                return reflectionLongConvert(reader.int64(), longType);\n            case ScalarType.UINT64:\n                return reflectionLongConvert(reader.uint64(), longType);\n            case ScalarType.FIXED64:\n                return reflectionLongConvert(reader.fixed64(), longType);\n            case ScalarType.FIXED32:\n                return reader.fixed32();\n            case ScalarType.BYTES:\n                return reader.bytes();\n            case ScalarType.UINT32:\n                return reader.uint32();\n            case ScalarType.SFIXED32:\n                return reader.sfixed32();\n            case ScalarType.SFIXED64:\n                return reflectionLongConvert(reader.sfixed64(), longType);\n            case ScalarType.SINT32:\n                return reader.sint32();\n            case ScalarType.SINT64:\n                return reflectionLongConvert(reader.sint64(), longType);\n        }\n    }\n}\n","import { UnknownFieldHandler, WireType } from \"./binary-format-contract\";\nimport { RepeatType, ScalarType } from \"./reflection-info\";\nimport { assert } from \"./assert\";\nimport { PbLong, PbULong } from \"./pb-long\";\n/**\n * Writes proto3 messages in binary format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/encoding\n */\nexport class ReflectionBinaryWriter {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        if (!this.fields) {\n            const fieldsInput = this.info.fields ? this.info.fields.concat() : [];\n            this.fields = fieldsInput.sort((a, b) => a.no - b.no);\n        }\n    }\n    /**\n     * Writes the message to binary format.\n     */\n    write(message, writer, options) {\n        this.prepare();\n        for (const field of this.fields) {\n            let value, // this will be our field value, whether it is member of a oneof or not\n            emitDefault, // whether we emit the default value (only true for oneof members)\n            repeated = field.repeat, localName = field.localName;\n            // handle oneof ADT\n            if (field.oneof) {\n                const group = message[field.oneof];\n                if (group.oneofKind !== localName)\n                    continue; // if field is not selected, skip\n                value = group[localName];\n                emitDefault = true;\n            }\n            else {\n                value = message[localName];\n                emitDefault = false;\n            }\n            // we have handled oneof above. we just have to honor `emitDefault`.\n            switch (field.kind) {\n                case \"scalar\":\n                case \"enum\":\n                    let T = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                    if (repeated) {\n                        assert(Array.isArray(value));\n                        if (repeated == RepeatType.PACKED)\n                            this.packed(writer, T, field.no, value);\n                        else\n                            for (const item of value)\n                                this.scalar(writer, T, field.no, item, true);\n                    }\n                    else if (value === undefined)\n                        assert(field.opt);\n                    else\n                        this.scalar(writer, T, field.no, value, emitDefault || field.opt);\n                    break;\n                case \"message\":\n                    if (repeated) {\n                        assert(Array.isArray(value));\n                        for (const item of value)\n                            this.message(writer, options, field.T(), field.no, item);\n                    }\n                    else {\n                        this.message(writer, options, field.T(), field.no, value);\n                    }\n                    break;\n                case \"map\":\n                    assert(typeof value == 'object' && value !== null);\n                    for (const [key, val] of Object.entries(value))\n                        this.mapEntry(writer, options, field, key, val);\n                    break;\n            }\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u === true ? UnknownFieldHandler.onWrite : u)(this.info.typeName, message, writer);\n    }\n    mapEntry(writer, options, field, key, value) {\n        writer.tag(field.no, WireType.LengthDelimited);\n        writer.fork();\n        // javascript only allows number or string for object properties\n        // we convert from our representation to the protobuf type\n        let keyValue = key;\n        switch (field.K) {\n            case ScalarType.INT32:\n            case ScalarType.FIXED32:\n            case ScalarType.UINT32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n                keyValue = Number.parseInt(key);\n                break;\n            case ScalarType.BOOL:\n                assert(key == 'true' || key == 'false');\n                keyValue = key == 'true';\n                break;\n        }\n        // write key, expecting key field number = 1\n        this.scalar(writer, field.K, 1, keyValue, true);\n        // write value, expecting value field number = 2\n        switch (field.V.kind) {\n            case 'scalar':\n                this.scalar(writer, field.V.T, 2, value, true);\n                break;\n            case 'enum':\n                this.scalar(writer, ScalarType.INT32, 2, value, true);\n                break;\n            case 'message':\n                this.message(writer, options, field.V.T(), 2, value);\n                break;\n        }\n        writer.join();\n    }\n    message(writer, options, handler, fieldNo, value) {\n        if (value === undefined)\n            return;\n        handler.internalBinaryWrite(value, writer.tag(fieldNo, WireType.LengthDelimited).fork(), options);\n        writer.join();\n    }\n    /**\n     * Write a single scalar value.\n     */\n    scalar(writer, type, fieldNo, value, emitDefault) {\n        let [wireType, method, isDefault] = this.scalarInfo(type, value);\n        if (!isDefault || emitDefault) {\n            writer.tag(fieldNo, wireType);\n            writer[method](value);\n        }\n    }\n    /**\n     * Write an array of scalar values in packed format.\n     */\n    packed(writer, type, fieldNo, value) {\n        if (!value.length)\n            return;\n        assert(type !== ScalarType.BYTES && type !== ScalarType.STRING);\n        // write tag\n        writer.tag(fieldNo, WireType.LengthDelimited);\n        // begin length-delimited\n        writer.fork();\n        // write values without tags\n        let [, method,] = this.scalarInfo(type);\n        for (let i = 0; i < value.length; i++)\n            writer[method](value[i]);\n        // end length delimited\n        writer.join();\n    }\n    /**\n     * Get information for writing a scalar value.\n     *\n     * Returns tuple:\n     * [0]: appropriate WireType\n     * [1]: name of the appropriate method of IBinaryWriter\n     * [2]: whether the given value is a default value\n     *\n     * If argument `value` is omitted, [2] is always false.\n     */\n    scalarInfo(type, value) {\n        let t = WireType.Varint;\n        let m;\n        let i = value === undefined;\n        let d = value === 0;\n        switch (type) {\n            case ScalarType.INT32:\n                m = \"int32\";\n                break;\n            case ScalarType.STRING:\n                d = i || !value.length;\n                t = WireType.LengthDelimited;\n                m = \"string\";\n                break;\n            case ScalarType.BOOL:\n                d = value === false;\n                m = \"bool\";\n                break;\n            case ScalarType.UINT32:\n                m = \"uint32\";\n                break;\n            case ScalarType.DOUBLE:\n                t = WireType.Bit64;\n                m = \"double\";\n                break;\n            case ScalarType.FLOAT:\n                t = WireType.Bit32;\n                m = \"float\";\n                break;\n            case ScalarType.INT64:\n                d = i || PbLong.from(value).isZero();\n                m = \"int64\";\n                break;\n            case ScalarType.UINT64:\n                d = i || PbULong.from(value).isZero();\n                m = \"uint64\";\n                break;\n            case ScalarType.FIXED64:\n                d = i || PbULong.from(value).isZero();\n                t = WireType.Bit64;\n                m = \"fixed64\";\n                break;\n            case ScalarType.BYTES:\n                d = i || !value.byteLength;\n                t = WireType.LengthDelimited;\n                m = \"bytes\";\n                break;\n            case ScalarType.FIXED32:\n                t = WireType.Bit32;\n                m = \"fixed32\";\n                break;\n            case ScalarType.SFIXED32:\n                t = WireType.Bit32;\n                m = \"sfixed32\";\n                break;\n            case ScalarType.SFIXED64:\n                d = i || PbLong.from(value).isZero();\n                t = WireType.Bit64;\n                m = \"sfixed64\";\n                break;\n            case ScalarType.SINT32:\n                m = \"sint32\";\n                break;\n            case ScalarType.SINT64:\n                d = i || PbLong.from(value).isZero();\n                m = \"sint64\";\n                break;\n        }\n        return [t, m, i || d];\n    }\n}\n","/**\n * Copy partial data into the target message.\n *\n * If a singular scalar or enum field is present in the source, it\n * replaces the field in the target.\n *\n * If a singular message field is present in the source, it is merged\n * with the target field by calling mergePartial() of the responsible\n * message type.\n *\n * If a repeated field is present in the source, its values replace\n * all values in the target array, removing extraneous values.\n * Repeated message fields are copied, not merged.\n *\n * If a map field is present in the source, entries are added to the\n * target map, replacing entries with the same key. Entries that only\n * exist in the target remain. Entries with message values are copied,\n * not merged.\n *\n * Note that this function differs from protobuf merge semantics,\n * which appends repeated fields.\n */\nexport function reflectionMergePartial(info, target, source) {\n    let fieldValue, // the field value we are working with\n    input = source, output; // where we want our field value to go\n    for (let field of info.fields) {\n        let name = field.localName;\n        if (field.oneof) {\n            const group = input[field.oneof]; // this is the oneof`s group in the source\n            if ((group === null || group === void 0 ? void 0 : group.oneofKind) == undefined) { // the user is free to omit\n                continue; // we skip this field, and all other members too\n            }\n            fieldValue = group[name]; // our value comes from the the oneof group of the source\n            output = target[field.oneof]; // and our output is the oneof group of the target\n            output.oneofKind = group.oneofKind; // always update discriminator\n            if (fieldValue == undefined) {\n                delete output[name]; // remove any existing value\n                continue; // skip further work on field\n            }\n        }\n        else {\n            fieldValue = input[name]; // we are using the source directly\n            output = target; // we want our field value to go directly into the target\n            if (fieldValue == undefined) {\n                continue; // skip further work on field, existing value is used as is\n            }\n        }\n        if (field.repeat)\n            output[name].length = fieldValue.length; // resize target array to match source array\n        // now we just work with `fieldValue` and `output` to merge the value\n        switch (field.kind) {\n            case \"scalar\":\n            case \"enum\":\n                if (field.repeat)\n                    for (let i = 0; i < fieldValue.length; i++)\n                        output[name][i] = fieldValue[i]; // not a reference type\n                else\n                    output[name] = fieldValue; // not a reference type\n                break;\n            case \"message\":\n                let T = field.T();\n                if (field.repeat)\n                    for (let i = 0; i < fieldValue.length; i++)\n                        output[name][i] = T.create(fieldValue[i]);\n                else if (output[name] === undefined)\n                    output[name] = T.create(fieldValue); // nothing to merge with\n                else\n                    T.mergePartial(output[name], fieldValue);\n                break;\n            case \"map\":\n                // Map and repeated fields are simply overwritten, not appended or merged\n                switch (field.V.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        Object.assign(output[name], fieldValue); // elements are not reference types\n                        break;\n                    case \"message\":\n                        let T = field.V.T();\n                        for (let k of Object.keys(fieldValue))\n                            output[name][k] = T.create(fieldValue[k]);\n                        break;\n                }\n                break;\n        }\n    }\n}\n","import { ScalarType } from \"./reflection-info\";\n/**\n * Determines whether two message of the same type have the same field values.\n * Checks for deep equality, traversing repeated fields, oneof groups, maps\n * and messages recursively.\n * Will also return true if both messages are `undefined`.\n */\nexport function reflectionEquals(info, a, b) {\n    if (a === b)\n        return true;\n    if (!a || !b)\n        return false;\n    for (let field of info.fields) {\n        let localName = field.localName;\n        let val_a = field.oneof ? a[field.oneof][localName] : a[localName];\n        let val_b = field.oneof ? b[field.oneof][localName] : b[localName];\n        switch (field.kind) {\n            case \"enum\":\n            case \"scalar\":\n                let t = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                if (!(field.repeat\n                    ? repeatedPrimitiveEq(t, val_a, val_b)\n                    : primitiveEq(t, val_a, val_b)))\n                    return false;\n                break;\n            case \"map\":\n                if (!(field.V.kind == \"message\"\n                    ? repeatedMsgEq(field.V.T(), objectValues(val_a), objectValues(val_b))\n                    : repeatedPrimitiveEq(field.V.kind == \"enum\" ? ScalarType.INT32 : field.V.T, objectValues(val_a), objectValues(val_b))))\n                    return false;\n                break;\n            case \"message\":\n                let T = field.T();\n                if (!(field.repeat\n                    ? repeatedMsgEq(T, val_a, val_b)\n                    : T.equals(val_a, val_b)))\n                    return false;\n                break;\n        }\n    }\n    return true;\n}\nconst objectValues = Object.values;\nfunction primitiveEq(type, a, b) {\n    if (a === b)\n        return true;\n    if (type !== ScalarType.BYTES)\n        return false;\n    let ba = a;\n    let bb = b;\n    if (ba.length !== bb.length)\n        return false;\n    for (let i = 0; i < ba.length; i++)\n        if (ba[i] != bb[i])\n            return false;\n    return true;\n}\nfunction repeatedPrimitiveEq(type, a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!primitiveEq(type, a[i], b[i]))\n            return false;\n    return true;\n}\nfunction repeatedMsgEq(type, a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!type.equals(a[i], b[i]))\n            return false;\n    return true;\n}\n","import { normalizeFieldInfo } from \"./reflection-info\";\nimport { ReflectionTypeCheck } from \"./reflection-type-check\";\nimport { ReflectionJsonReader } from \"./reflection-json-reader\";\nimport { ReflectionJsonWriter } from \"./reflection-json-writer\";\nimport { ReflectionBinaryReader } from \"./reflection-binary-reader\";\nimport { ReflectionBinaryWriter } from \"./reflection-binary-writer\";\nimport { reflectionCreate } from \"./reflection-create\";\nimport { reflectionMergePartial } from \"./reflection-merge-partial\";\nimport { typeofJsonValue } from \"./json-typings\";\nimport { jsonReadOptions, jsonWriteOptions, } from \"./json-format-contract\";\nimport { reflectionEquals } from \"./reflection-equals\";\nimport { binaryWriteOptions } from \"./binary-writer\";\nimport { binaryReadOptions } from \"./binary-reader\";\n/**\n * This standard message type provides reflection-based\n * operations to work with a message.\n */\nexport class MessageType {\n    constructor(name, fields, options) {\n        this.defaultCheckDepth = 16;\n        this.typeName = name;\n        this.fields = fields.map(normalizeFieldInfo);\n        this.options = options !== null && options !== void 0 ? options : {};\n        this.refTypeCheck = new ReflectionTypeCheck(this);\n        this.refJsonReader = new ReflectionJsonReader(this);\n        this.refJsonWriter = new ReflectionJsonWriter(this);\n        this.refBinReader = new ReflectionBinaryReader(this);\n        this.refBinWriter = new ReflectionBinaryWriter(this);\n    }\n    create(value) {\n        let message = reflectionCreate(this);\n        if (value !== undefined) {\n            reflectionMergePartial(this, message, value);\n        }\n        return message;\n    }\n    /**\n     * Clone the message.\n     *\n     * Unknown fields are discarded.\n     */\n    clone(message) {\n        let copy = this.create();\n        reflectionMergePartial(this, copy, message);\n        return copy;\n    }\n    /**\n     * Determines whether two message of the same type have the same field values.\n     * Checks for deep equality, traversing repeated fields, oneof groups, maps\n     * and messages recursively.\n     * Will also return true if both messages are `undefined`.\n     */\n    equals(a, b) {\n        return reflectionEquals(this, a, b);\n    }\n    /**\n     * Is the given value assignable to our message type\n     * and contains no [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?\n     */\n    is(arg, depth = this.defaultCheckDepth) {\n        return this.refTypeCheck.is(arg, depth, false);\n    }\n    /**\n     * Is the given value assignable to our message type,\n     * regardless of [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?\n     */\n    isAssignable(arg, depth = this.defaultCheckDepth) {\n        return this.refTypeCheck.is(arg, depth, true);\n    }\n    /**\n     * Copy partial data into the target message.\n     */\n    mergePartial(target, source) {\n        reflectionMergePartial(this, target, source);\n    }\n    /**\n     * Create a new message from binary format.\n     */\n    fromBinary(data, options) {\n        let opt = binaryReadOptions(options);\n        return this.internalBinaryRead(opt.readerFactory(data), data.byteLength, opt);\n    }\n    /**\n     * Read a new message from a JSON value.\n     */\n    fromJson(json, options) {\n        return this.internalJsonRead(json, jsonReadOptions(options));\n    }\n    /**\n     * Read a new message from a JSON string.\n     * This is equivalent to `T.fromJson(JSON.parse(json))`.\n     */\n    fromJsonString(json, options) {\n        let value = JSON.parse(json);\n        return this.fromJson(value, options);\n    }\n    /**\n     * Write the message to canonical JSON value.\n     */\n    toJson(message, options) {\n        return this.internalJsonWrite(message, jsonWriteOptions(options));\n    }\n    /**\n     * Convert the message to canonical JSON string.\n     * This is equivalent to `JSON.stringify(T.toJson(t))`\n     */\n    toJsonString(message, options) {\n        var _a;\n        let value = this.toJson(message, options);\n        return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);\n    }\n    /**\n     * Write the message to binary format.\n     */\n    toBinary(message, options) {\n        let opt = binaryWriteOptions(options);\n        return this.internalBinaryWrite(message, opt.writerFactory(), opt).finish();\n    }\n    /**\n     * This is an internal method. If you just want to read a message from\n     * JSON, use `fromJson()` or `fromJsonString()`.\n     *\n     * Reads JSON value and merges the fields into the target\n     * according to protobuf rules. If the target is omitted,\n     * a new instance is created first.\n     */\n    internalJsonRead(json, options, target) {\n        if (json !== null && typeof json == \"object\" && !Array.isArray(json)) {\n            let message = target !== null && target !== void 0 ? target : this.create();\n            this.refJsonReader.read(json, message, options);\n            return message;\n        }\n        throw new Error(`Unable to parse message ${this.typeName} from JSON ${typeofJsonValue(json)}.`);\n    }\n    /**\n     * This is an internal method. If you just want to write a message\n     * to JSON, use `toJson()` or `toJsonString().\n     *\n     * Writes JSON value and returns it.\n     */\n    internalJsonWrite(message, options) {\n        return this.refJsonWriter.write(message, options);\n    }\n    /**\n     * This is an internal method. If you just want to write a message\n     * in binary format, use `toBinary()`.\n     *\n     * Serializes the message in binary format and appends it to the given\n     * writer. Returns passed writer.\n     */\n    internalBinaryWrite(message, writer, options) {\n        this.refBinWriter.write(message, writer, options);\n        return writer;\n    }\n    /**\n     * This is an internal method. If you just want to read a message from\n     * binary data, use `fromBinary()`.\n     *\n     * Reads data from binary format and merges the fields into\n     * the target according to protobuf rules. If the target is\n     * omitted, a new instance is created first.\n     */\n    internalBinaryRead(reader, length, options, target) {\n        let message = target !== null && target !== void 0 ? target : this.create();\n        this.refBinReader.read(reader, message, options, length);\n        return message;\n    }\n}\n","import { reflectionScalarDefault } from \"./reflection-scalar-default\";\nimport { MESSAGE_TYPE } from './message-type-contract';\n/**\n * Creates an instance of the generic message, using the field\n * information.\n */\nexport function reflectionCreate(type) {\n    const msg = {};\n    Object.defineProperty(msg, MESSAGE_TYPE, { enumerable: false, value: type });\n    for (let field of type.fields) {\n        let name = field.localName;\n        if (field.opt)\n            continue;\n        if (field.oneof)\n            msg[field.oneof] = { oneofKind: undefined };\n        else if (field.repeat)\n            msg[name] = [];\n        else\n            switch (field.kind) {\n                case \"scalar\":\n                    msg[name] = reflectionScalarDefault(field.T, field.L);\n                    break;\n                case \"enum\":\n                    // we require 0 to be default value for all enums\n                    msg[name] = 0;\n                    break;\n                case \"map\":\n                    msg[name] = {};\n                    break;\n            }\n    }\n    return msg;\n}\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"common.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message proto.UnitStats\n */\nexport interface UnitStats {\n    /**\n     * @generated from protobuf field: repeated double stats = 1;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: repeated double pseudo_stats = 2;\n     */\n    pseudoStats: number[];\n}\n/**\n * @generated from protobuf message proto.ReforgeStat\n */\nexport interface ReforgeStat {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: repeated proto.Stat fromStat = 2;\n     */\n    fromStat: Stat[];\n    /**\n     * @generated from protobuf field: repeated proto.Stat toStat = 3;\n     */\n    toStat: Stat[];\n    /**\n     * @generated from protobuf field: double multiplier = 4;\n     */\n    multiplier: number;\n}\n/**\n * Buffs that affect the entire raid.\n * TODO: Reindex\n * next index: 46\n *\n * @generated from protobuf message proto.RaidBuffs\n */\nexport interface RaidBuffs {\n    /**\n     * +5% Base Stats and Spell Resistances\n     *\n     * @generated from protobuf field: bool mark_of_the_wild = 1;\n     */\n    markOfTheWild: boolean;\n    /**\n     * @generated from protobuf field: bool blessing_of_kings = 2;\n     */\n    blessingOfKings: boolean;\n    /**\n     * @generated from protobuf field: bool drums_of_the_burning_wild = 3;\n     */\n    drumsOfTheBurningWild: boolean;\n    /**\n     * +Spell Resistances\n     *\n     * @generated from protobuf field: bool elemental_resistance_totem = 4;\n     */\n    elementalResistanceTotem: boolean;\n    /**\n     * @generated from protobuf field: bool resistance_aura = 5;\n     */\n    resistanceAura: boolean;\n    /**\n     * @generated from protobuf field: bool shadow_protection = 6;\n     */\n    shadowProtection: boolean;\n    /**\n     * @generated from protobuf field: bool aspect_of_the_wild = 7;\n     */\n    aspectOfTheWild: boolean;\n    /**\n     * +Stamina\n     *\n     * @generated from protobuf field: bool power_word_fortitude = 8;\n     */\n    powerWordFortitude: boolean;\n    /**\n     * @generated from protobuf field: bool commanding_shout = 9;\n     */\n    commandingShout: boolean;\n    /**\n     * @generated from protobuf field: bool blood_pact = 10;\n     */\n    bloodPact: boolean;\n    /**\n     * +Stength and Agility\n     *\n     * @generated from protobuf field: bool battle_shout = 11;\n     */\n    battleShout: boolean;\n    /**\n     * @generated from protobuf field: bool horn_of_winter = 12;\n     */\n    hornOfWinter: boolean;\n    /**\n     * @generated from protobuf field: bool strength_of_earth_totem = 13;\n     */\n    strengthOfEarthTotem: boolean;\n    /**\n     * +10% Attack Power\n     *\n     * @generated from protobuf field: bool trueshot_aura = 14;\n     */\n    trueshotAura: boolean;\n    /**\n     * @generated from protobuf field: bool unleashed_rage = 15;\n     */\n    unleashedRage: boolean;\n    /**\n     * @generated from protobuf field: bool abominations_might = 16;\n     */\n    abominationsMight: boolean;\n    /**\n     * @generated from protobuf field: bool blessing_of_might = 17;\n     */\n    blessingOfMight: boolean;\n    /**\n     * +10% Melee Speed\n     *\n     * @generated from protobuf field: bool windfury_totem = 18;\n     */\n    windfuryTotem: boolean;\n    /**\n     * @generated from protobuf field: bool icy_talons = 19;\n     */\n    icyTalons: boolean;\n    /**\n     * @generated from protobuf field: bool hunting_party = 20;\n     */\n    huntingParty: boolean;\n    /**\n     * +Mana\n     *\n     * @generated from protobuf field: bool arcane_brilliance = 21;\n     */\n    arcaneBrilliance: boolean; // Also +Mp5\n    /**\n     * @generated from protobuf field: bool fel_intelligence = 22;\n     */\n    felIntelligence: boolean; // Also +6% SP\n    /**\n     * +Mana Regen\n     *\n     * @generated from protobuf field: bool mana_spring_totem = 23;\n     */\n    manaSpringTotem: boolean;\n    /**\n     * +Spell Power\n     *\n     * @generated from protobuf field: bool demonic_pact = 24;\n     */\n    demonicPact: boolean;\n    /**\n     * @generated from protobuf field: bool totemic_wrath = 25;\n     */\n    totemicWrath: boolean;\n    /**\n     * @generated from protobuf field: bool flametongue_totem = 26;\n     */\n    flametongueTotem: boolean; // 6% SP\n    /**\n     * +5% Spell haste\n     *\n     * @generated from protobuf field: bool moonkin_form = 27;\n     */\n    moonkinForm: boolean;\n    /**\n     * @generated from protobuf field: bool shadow_form = 28;\n     */\n    shadowForm: boolean;\n    /**\n     * @generated from protobuf field: bool wrath_of_air_totem = 29;\n     */\n    wrathOfAirTotem: boolean;\n    /**\n     * +3% All Damage\n     *\n     * @generated from protobuf field: bool arcane_tactics = 30;\n     */\n    arcaneTactics: boolean;\n    /**\n     * @generated from protobuf field: bool ferocious_inspiration = 31;\n     */\n    ferociousInspiration: boolean;\n    /**\n     * @generated from protobuf field: bool communion = 32;\n     */\n    communion: boolean;\n    /**\n     * +5% All Crit\n     *\n     * @generated from protobuf field: bool leader_of_the_pack = 33;\n     */\n    leaderOfThePack: boolean;\n    /**\n     * @generated from protobuf field: bool elemental_oath = 34;\n     */\n    elementalOath: boolean;\n    /**\n     * @generated from protobuf field: bool honor_among_thieves = 35;\n     */\n    honorAmongThieves: boolean;\n    /**\n     * @generated from protobuf field: bool rampage = 36;\n     */\n    rampage: boolean;\n    /**\n     * @generated from protobuf field: bool terrifying_roar = 37;\n     */\n    terrifyingRoar: boolean;\n    /**\n     * @generated from protobuf field: bool furious_howl = 45;\n     */\n    furiousHowl: boolean;\n    /**\n     * Major Haste\n     *\n     * @generated from protobuf field: bool bloodlust = 38;\n     */\n    bloodlust: boolean;\n    /**\n     * @generated from protobuf field: bool heroism = 39;\n     */\n    heroism: boolean;\n    /**\n     * @generated from protobuf field: bool time_warp = 40;\n     */\n    timeWarp: boolean;\n    /**\n     * Major Mana Replenishment\n     *\n     * @generated from protobuf field: int32 mana_tide_totem_count = 41;\n     */\n    manaTideTotemCount: number;\n    /**\n     * +Armor\n     *\n     * @generated from protobuf field: bool devotion_aura = 42;\n     */\n    devotionAura: boolean;\n    /**\n     * @generated from protobuf field: bool stoneskin_totem = 43;\n     */\n    stoneskinTotem: boolean;\n    /**\n     * Miscellaneous\n     *\n     * @generated from protobuf field: bool retribution_aura = 44;\n     */\n    retributionAura: boolean;\n}\n/**\n * Buffs that affect a single party.\n *\n * @generated from protobuf message proto.PartyBuffs\n */\nexport interface PartyBuffs {\n}\n/**\n * These are usually individual actions taken by other Characters.\n *\n * Only used in individual sims\n * as the class that provides these would cast them in raid sim\n *\n * @generated from protobuf message proto.IndividualBuffs\n */\nexport interface IndividualBuffs {\n    /**\n     * Major Mana Replenishment\n     * How many of each of these buffs the player will be receiving.\n     *\n     * @generated from protobuf field: int32 innervate_count = 10;\n     */\n    innervateCount: number;\n    /**\n     * @generated from protobuf field: int32 hymn_of_hope_count = 7;\n     */\n    hymnOfHopeCount: number;\n    /**\n     * Minor Mana Replenishment\n     *\n     * @generated from protobuf field: bool vampiric_touch = 14;\n     */\n    vampiricTouch: boolean;\n    /**\n     * @generated from protobuf field: bool enduring_winter = 18;\n     */\n    enduringWinter: boolean;\n    /**\n     * @generated from protobuf field: bool soul_leach = 16;\n     */\n    soulLeach: boolean;\n    /**\n     * @generated from protobuf field: bool revitalize = 17;\n     */\n    revitalize: boolean;\n    /**\n     * @generated from protobuf field: bool communion = 100;\n     */\n    communion: boolean;\n    /**\n     * Other Buffs\n     *\n     * @generated from protobuf field: int32 power_infusion_count = 11;\n     */\n    powerInfusionCount: number;\n    /**\n     * @generated from protobuf field: int32 unholy_frenzy_count = 12;\n     */\n    unholyFrenzyCount: number;\n    /**\n     * @generated from protobuf field: int32 tricks_of_the_trade_count = 19;\n     */\n    tricksOfTheTradeCount: number;\n    /**\n     * @generated from protobuf field: int32 divine_guardian_count = 23;\n     */\n    divineGuardianCount: number;\n    /**\n     * @generated from protobuf field: int32 pain_suppression_count = 24;\n     */\n    painSuppressionCount: number;\n    /**\n     * @generated from protobuf field: int32 hand_of_sacrifice_count = 25;\n     */\n    handOfSacrificeCount: number;\n    /**\n     * @generated from protobuf field: int32 guardian_spirit_count = 26;\n     */\n    guardianSpiritCount: number;\n    /**\n     * @generated from protobuf field: bool focus_magic = 22;\n     */\n    focusMagic: boolean;\n    /**\n     * @generated from protobuf field: bool dark_intent = 27;\n     */\n    darkIntent: boolean;\n}\n/**\n * @generated from protobuf message proto.Debuffs\n */\nexport interface Debuffs {\n    /**\n     * 8% spell damage\n     *\n     * @generated from protobuf field: bool curse_of_elements = 1;\n     */\n    curseOfElements: boolean;\n    /**\n     * @generated from protobuf field: bool ebon_plaguebringer = 2;\n     */\n    ebonPlaguebringer: boolean;\n    /**\n     * @generated from protobuf field: bool earth_and_moon = 3;\n     */\n    earthAndMoon: boolean;\n    /**\n     * @generated from protobuf field: bool master_poisoner = 4;\n     */\n    masterPoisoner: boolean;\n    /**\n     * @generated from protobuf field: bool fire_breath = 5;\n     */\n    fireBreath: boolean;\n    /**\n     * @generated from protobuf field: bool lightning_breath = 6;\n     */\n    lightningBreath: boolean;\n    /**\n     * 5% spell crit\n     *\n     * @generated from protobuf field: bool critical_mass = 7;\n     */\n    criticalMass: boolean;\n    /**\n     * @generated from protobuf field: bool shadow_and_flame = 8;\n     */\n    shadowAndFlame: boolean;\n    /**\n     * 30% bleed damage\n     *\n     * @generated from protobuf field: bool blood_frenzy = 9;\n     */\n    bloodFrenzy: boolean;\n    /**\n     * @generated from protobuf field: bool hemorrhage = 10;\n     */\n    hemorrhage: boolean;\n    /**\n     * @generated from protobuf field: bool mangle = 11;\n     */\n    mangle: boolean;\n    /**\n     * @generated from protobuf field: bool stampede = 12;\n     */\n    stampede: boolean;\n    /**\n     * Major armor\n     *\n     * @generated from protobuf field: bool expose_armor = 13;\n     */\n    exposeArmor: boolean;\n    /**\n     * @generated from protobuf field: bool sunder_armor = 14;\n     */\n    sunderArmor: boolean;\n    /**\n     * @generated from protobuf field: bool faerie_fire = 15;\n     */\n    faerieFire: boolean;\n    /**\n     * @generated from protobuf field: bool corrosive_spit = 16;\n     */\n    corrosiveSpit: boolean;\n    /**\n     * 4% physical dmg\n     *\n     * @generated from protobuf field: bool savage_combat = 17;\n     */\n    savageCombat: boolean;\n    /**\n     * @generated from protobuf field: bool brittle_bones = 18;\n     */\n    brittleBones: boolean;\n    /**\n     * @generated from protobuf field: bool acid_spit = 19;\n     */\n    acidSpit: boolean;\n    /**\n     * -dmg %\n     *\n     * @generated from protobuf field: bool curse_of_weakness = 20;\n     */\n    curseOfWeakness: boolean;\n    /**\n     * @generated from protobuf field: bool demoralizing_roar = 21;\n     */\n    demoralizingRoar: boolean;\n    /**\n     * @generated from protobuf field: bool demoralizing_shout = 22;\n     */\n    demoralizingShout: boolean;\n    /**\n     * @generated from protobuf field: bool vindication = 23;\n     */\n    vindication: boolean;\n    /**\n     * @generated from protobuf field: bool scarlet_fever = 24;\n     */\n    scarletFever: boolean;\n    /**\n     * @generated from protobuf field: bool demoralizing_screech = 25;\n     */\n    demoralizingScreech: boolean;\n    /**\n     * -attack speed\n     *\n     * @generated from protobuf field: bool thunder_clap = 26;\n     */\n    thunderClap: boolean;\n    /**\n     * @generated from protobuf field: bool frost_fever = 27;\n     */\n    frostFever: boolean;\n    /**\n     * @generated from protobuf field: bool infected_wounds = 28;\n     */\n    infectedWounds: boolean;\n    /**\n     * @generated from protobuf field: bool judgements_of_the_just = 29;\n     */\n    judgementsOfTheJust: boolean;\n    /**\n     * @generated from protobuf field: bool dust_cloud = 30;\n     */\n    dustCloud: boolean;\n    /**\n     * @generated from protobuf field: bool earth_shock = 31;\n     */\n    earthShock: boolean;\n    /**\n     * health on hit\n     *\n     * @generated from protobuf field: bool judgement = 32;\n     */\n    judgement: boolean;\n}\n/**\n * @generated from protobuf message proto.Consumes\n */\nexport interface Consumes {\n    /**\n     * @generated from protobuf field: proto.Flask flask = 1;\n     */\n    flask: Flask;\n    /**\n     * @generated from protobuf field: proto.BattleElixir battle_elixir = 2;\n     */\n    battleElixir: BattleElixir;\n    /**\n     * @generated from protobuf field: proto.GuardianElixir guardian_elixir = 3;\n     */\n    guardianElixir: GuardianElixir;\n    /**\n     * @generated from protobuf field: proto.Food food = 6;\n     */\n    food: Food;\n    /**\n     * @generated from protobuf field: int32 pet_scroll_of_agility = 8;\n     */\n    petScrollOfAgility: number;\n    /**\n     * @generated from protobuf field: int32 pet_scroll_of_strength = 9;\n     */\n    petScrollOfStrength: number;\n    /**\n     * @generated from protobuf field: proto.Potions default_potion = 10;\n     */\n    defaultPotion: Potions;\n    /**\n     * @generated from protobuf field: proto.Potions prepop_potion = 11;\n     */\n    prepopPotion: Potions;\n    /**\n     * @generated from protobuf field: proto.Conjured default_conjured = 12;\n     */\n    defaultConjured: Conjured;\n    /**\n     * @generated from protobuf field: bool explosive_big_daddy = 15;\n     */\n    explosiveBigDaddy: boolean;\n    /**\n     * @generated from protobuf field: bool highpowered_bolt_gun = 16;\n     */\n    highpoweredBoltGun: boolean;\n    /**\n     * @generated from protobuf field: proto.TinkerHands tinker_hands = 18;\n     */\n    tinkerHands: TinkerHands;\n}\n/**\n * @generated from protobuf message proto.TargetInput\n */\nexport interface TargetInput {\n    /**\n     * @generated from protobuf field: proto.InputType input_type = 1;\n     */\n    inputType: InputType;\n    /**\n     * @generated from protobuf field: string label = 2;\n     */\n    label: string;\n    /**\n     * @generated from protobuf field: string tooltip = 5;\n     */\n    tooltip: string;\n    /**\n     * @generated from protobuf field: bool bool_value = 3;\n     */\n    boolValue: boolean;\n    /**\n     * @generated from protobuf field: double number_value = 4;\n     */\n    numberValue: number;\n    /**\n     * @generated from protobuf field: int32 enum_value = 6;\n     */\n    enumValue: number;\n    /**\n     * @generated from protobuf field: repeated string enum_options = 7;\n     */\n    enumOptions: string[];\n}\n/**\n * @generated from protobuf message proto.Target\n */\nexport interface Target {\n    /**\n     * The in-game NPC ID.\n     *\n     * @generated from protobuf field: int32 id = 14;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 15;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: int32 level = 4;\n     */\n    level: number;\n    /**\n     * @generated from protobuf field: proto.MobType mob_type = 3;\n     */\n    mobType: MobType;\n    /**\n     * @generated from protobuf field: repeated double stats = 5;\n     */\n    stats: number[];\n    /**\n     * Auto attack parameters.\n     *\n     * @generated from protobuf field: double min_base_damage = 7;\n     */\n    minBaseDamage: number;\n    /**\n     * @generated from protobuf field: double damage_spread = 19;\n     */\n    damageSpread: number; // replaces tight_enemy_damage\n    /**\n     * @generated from protobuf field: double swing_speed = 8;\n     */\n    swingSpeed: number;\n    /**\n     * @generated from protobuf field: bool dual_wield = 9;\n     */\n    dualWield: boolean;\n    /**\n     * @generated from protobuf field: bool dual_wield_penalty = 10;\n     */\n    dualWieldPenalty: boolean;\n    /**\n     * @generated from protobuf field: bool parry_haste = 12;\n     */\n    parryHaste: boolean;\n    /**\n     * @generated from protobuf field: bool suppress_dodge = 16;\n     */\n    suppressDodge: boolean; // Sunwell Radiance\n    /**\n     * @generated from protobuf field: proto.SpellSchool spell_school = 13;\n     */\n    spellSchool: SpellSchool; // Allows elemental attacks.\n    /**\n     * Index in Raid.tanks indicating the player tanking this mob.\n     * -1 or invalid index indicates not being tanked.\n     *\n     * @generated from protobuf field: int32 tank_index = 6;\n     */\n    tankIndex: number;\n    /**\n     * Custom Target AI parameters\n     *\n     * @generated from protobuf field: repeated proto.TargetInput target_inputs = 18;\n     */\n    targetInputs: TargetInput[];\n}\n/**\n * @generated from protobuf message proto.Encounter\n */\nexport interface Encounter {\n    /**\n     * @generated from protobuf field: double duration = 1;\n     */\n    duration: number;\n    /**\n     * Variation in the duration\n     *\n     * @generated from protobuf field: double duration_variation = 2;\n     */\n    durationVariation: number;\n    /**\n     * The ratio of the encounter duration, between 0 and 1, for which the targets\n     * will be in execute range (<= 20%) for the purposes of Warrior Execute, Mage Molten\n     * Fury, etc.\n     *\n     * @generated from protobuf field: double execute_proportion_20 = 3;\n     */\n    executeProportion20: number;\n    /**\n     * Key for Affliction warlock Drain Soul\n     *\n     * @generated from protobuf field: double execute_proportion_25 = 7;\n     */\n    executeProportion25: number;\n    /**\n     * Same as execute_proportion but for 35%.\n     *\n     * @generated from protobuf field: double execute_proportion_35 = 4;\n     */\n    executeProportion35: number;\n    /**\n     * Same as execute_proportion but for > 90%.\n     *\n     * @generated from protobuf field: double execute_proportion_90 = 8;\n     */\n    executeProportion90: number;\n    /**\n     * If set, will use the targets health value instead of a duration for fight length.\n     *\n     * @generated from protobuf field: bool use_health = 5;\n     */\n    useHealth: boolean;\n    /**\n     * If type != Simple or Custom, then this may be empty.\n     *\n     * @generated from protobuf field: repeated proto.Target targets = 6;\n     */\n    targets: Target[];\n}\n/**\n * @generated from protobuf message proto.PresetTarget\n */\nexport interface PresetTarget {\n    /**\n     * @generated from protobuf field: string path = 1;\n     */\n    path: string;\n    /**\n     * @generated from protobuf field: proto.Target target = 2;\n     */\n    target?: Target;\n}\n/**\n * @generated from protobuf message proto.PresetEncounter\n */\nexport interface PresetEncounter {\n    /**\n     * @generated from protobuf field: string path = 1;\n     */\n    path: string;\n    /**\n     * @generated from protobuf field: repeated proto.PresetTarget targets = 2;\n     */\n    targets: PresetTarget[];\n}\n/**\n * @generated from protobuf message proto.ItemRandomSuffix\n */\nexport interface ItemRandomSuffix {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: repeated double stats = 3;\n     */\n    stats: number[];\n}\n/**\n * @generated from protobuf message proto.ItemSpec\n */\nexport interface ItemSpec {\n    /**\n     * @generated from protobuf field: int32 id = 2;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: int32 random_suffix = 6;\n     */\n    randomSuffix: number;\n    /**\n     * @generated from protobuf field: int32 enchant = 3;\n     */\n    enchant: number;\n    /**\n     * @generated from protobuf field: repeated int32 gems = 4;\n     */\n    gems: number[];\n    /**\n     * @generated from protobuf field: int32 reforging = 5;\n     */\n    reforging: number; // reforging id\n}\n/**\n * @generated from protobuf message proto.EquipmentSpec\n */\nexport interface EquipmentSpec {\n    /**\n     * @generated from protobuf field: repeated proto.ItemSpec items = 1;\n     */\n    items: ItemSpec[];\n}\n/**\n * @generated from protobuf message proto.SimDatabase\n */\nexport interface SimDatabase {\n    /**\n     * @generated from protobuf field: repeated proto.SimItem items = 1;\n     */\n    items: SimItem[];\n    /**\n     * @generated from protobuf field: repeated proto.ItemRandomSuffix random_suffixes = 5;\n     */\n    randomSuffixes: ItemRandomSuffix[];\n    /**\n     * @generated from protobuf field: repeated proto.SimEnchant enchants = 2;\n     */\n    enchants: SimEnchant[];\n    /**\n     * @generated from protobuf field: repeated proto.SimGem gems = 3;\n     */\n    gems: SimGem[];\n    /**\n     * @generated from protobuf field: repeated proto.ReforgeStat reforge_stats = 6;\n     */\n    reforgeStats: ReforgeStat[];\n}\n/**\n * Contains only the Item info needed by the sim.\n *\n * @generated from protobuf message proto.SimItem\n */\nexport interface SimItem {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: proto.ItemType type = 3;\n     */\n    type: ItemType;\n    /**\n     * @generated from protobuf field: proto.ArmorType armor_type = 4;\n     */\n    armorType: ArmorType;\n    /**\n     * @generated from protobuf field: proto.WeaponType weapon_type = 5;\n     */\n    weaponType: WeaponType;\n    /**\n     * @generated from protobuf field: proto.HandType hand_type = 6;\n     */\n    handType: HandType;\n    /**\n     * @generated from protobuf field: proto.RangedWeaponType ranged_weapon_type = 7;\n     */\n    rangedWeaponType: RangedWeaponType;\n    /**\n     * @generated from protobuf field: repeated double stats = 8;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: repeated proto.GemColor gem_sockets = 9;\n     */\n    gemSockets: GemColor[];\n    /**\n     * @generated from protobuf field: repeated double socketBonus = 10;\n     */\n    socketBonus: number[];\n    /**\n     * @generated from protobuf field: double weapon_damage_min = 11;\n     */\n    weaponDamageMin: number;\n    /**\n     * @generated from protobuf field: double weapon_damage_max = 12;\n     */\n    weaponDamageMax: number;\n    /**\n     * @generated from protobuf field: double weapon_speed = 13;\n     */\n    weaponSpeed: number;\n    /**\n     * @generated from protobuf field: string set_name = 14;\n     */\n    setName: string;\n    /**\n     * @generated from protobuf field: int32 rand_prop_points = 15;\n     */\n    randPropPoints: number;\n}\n/**\n * Contains only the Enchant info needed by the sim.\n *\n * @generated from protobuf message proto.SimEnchant\n */\nexport interface SimEnchant {\n    /**\n     * @generated from protobuf field: int32 effect_id = 1;\n     */\n    effectId: number;\n    /**\n     * @generated from protobuf field: repeated double stats = 2;\n     */\n    stats: number[];\n}\n/**\n * Contains only the Gem info needed by the sim.\n *\n * @generated from protobuf message proto.SimGem\n */\nexport interface SimGem {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: proto.GemColor color = 3;\n     */\n    color: GemColor;\n    /**\n     * @generated from protobuf field: repeated double stats = 4;\n     */\n    stats: number[];\n}\n/**\n * @generated from protobuf message proto.UnitReference\n */\nexport interface UnitReference {\n    /**\n     * The type of unit being referenced.\n     *\n     * @generated from protobuf field: proto.UnitReference.Type type = 2;\n     */\n    type: UnitReference_Type;\n    /**\n     * Index of the player/target/pet/etc depending on value of type.\n     *\n     * @generated from protobuf field: int32 index = 3;\n     */\n    index: number;\n    /**\n     * Reference to the owner, only used iff this is a pet.\n     *\n     * @generated from protobuf field: proto.UnitReference owner = 4;\n     */\n    owner?: UnitReference;\n}\n/**\n * @generated from protobuf enum proto.UnitReference.Type\n */\nexport enum UnitReference_Type {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Player = 1;\n     */\n    Player = 1,\n    /**\n     * @generated from protobuf enum value: Target = 2;\n     */\n    Target = 2,\n    /**\n     * @generated from protobuf enum value: Pet = 3;\n     */\n    Pet = 3,\n    /**\n     * @generated from protobuf enum value: Self = 4;\n     */\n    Self = 4,\n    /**\n     * @generated from protobuf enum value: CurrentTarget = 5;\n     */\n    CurrentTarget = 5,\n    /**\n     * @generated from protobuf enum value: AllPlayers = 6;\n     */\n    AllPlayers = 6,\n    /**\n     * @generated from protobuf enum value: AllTargets = 7;\n     */\n    AllTargets = 7\n}\n/**\n * @generated from protobuf message proto.ActionID\n */\nexport interface ActionID {\n    /**\n     * @generated from protobuf oneof: raw_id\n     */\n    rawId: {\n        oneofKind: \"spellId\";\n        /**\n         * @generated from protobuf field: int32 spell_id = 1;\n         */\n        spellId: number;\n    } | {\n        oneofKind: \"itemId\";\n        /**\n         * @generated from protobuf field: int32 item_id = 2;\n         */\n        itemId: number;\n    } | {\n        oneofKind: \"otherId\";\n        /**\n         * @generated from protobuf field: proto.OtherAction other_id = 3;\n         */\n        otherId: OtherAction;\n    } | {\n        oneofKind: undefined;\n    };\n    /**\n     * Distinguishes between different versions of the same action.\n     * Currently the only use for this is Shaman Lightning Overload.\n     *\n     * @generated from protobuf field: int32 tag = 4;\n     */\n    tag: number;\n}\n/**\n * @generated from protobuf message proto.Glyphs\n */\nexport interface Glyphs {\n    /**\n     * @generated from protobuf field: int32 prime1 = 1;\n     */\n    prime1: number;\n    /**\n     * @generated from protobuf field: int32 prime2 = 2;\n     */\n    prime2: number;\n    /**\n     * @generated from protobuf field: int32 prime3 = 3;\n     */\n    prime3: number;\n    /**\n     * @generated from protobuf field: int32 major1 = 4;\n     */\n    major1: number;\n    /**\n     * @generated from protobuf field: int32 major2 = 5;\n     */\n    major2: number;\n    /**\n     * @generated from protobuf field: int32 major3 = 6;\n     */\n    major3: number;\n    /**\n     * @generated from protobuf field: int32 minor1 = 7;\n     */\n    minor1: number;\n    /**\n     * @generated from protobuf field: int32 minor2 = 8;\n     */\n    minor2: number;\n    /**\n     * @generated from protobuf field: int32 minor3 = 9;\n     */\n    minor3: number;\n}\n/**\n * Custom options for a particular cooldown.\n *\n * @generated from protobuf message proto.Cooldown\n */\nexport interface Cooldown {\n    /**\n     * Identifies the cooldown to which these settings will apply.\n     *\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * Fixed times at which to use this cooldown. Each value corresponds to a usage,\n     * e.g. first value is the first usage, second value is the second usage.\n     * Any usages after the specified timings will occur as soon as possible, subject\n     * to the ShouldActivate() condition.\n     *\n     * @generated from protobuf field: repeated double timings = 2;\n     */\n    timings: number[];\n}\n/**\n * @generated from protobuf message proto.Cooldowns\n */\nexport interface Cooldowns {\n    /**\n     * @generated from protobuf field: repeated proto.Cooldown cooldowns = 1;\n     */\n    cooldowns: Cooldown[];\n    /**\n     * % HP threshold, below which defensive cooldowns can be used.\n     *\n     * @generated from protobuf field: double hp_percent_for_defensives = 2;\n     */\n    hpPercentForDefensives: number;\n}\n/**\n * @generated from protobuf message proto.HealingModel\n */\nexport interface HealingModel {\n    /**\n     * Healing per second to apply.\n     *\n     * @generated from protobuf field: double hps = 1;\n     */\n    hps: number;\n    /**\n     * How often healing is applied.\n     *\n     * @generated from protobuf field: double cadence_seconds = 2;\n     */\n    cadenceSeconds: number;\n    /**\n     * Variation in the cadence.\n     *\n     * @generated from protobuf field: double cadence_variation = 5;\n     */\n    cadenceVariation: number;\n    /**\n     * % Inspiration buff uptime\n     *\n     * @generated from protobuf field: double inspiration_uptime = 3;\n     */\n    inspirationUptime: number;\n    /**\n     * TMI burst window bin size\n     *\n     * @generated from protobuf field: int32 burst_window = 4;\n     */\n    burstWindow: number;\n}\n/**\n * @generated from protobuf message proto.CustomRotation\n */\nexport interface CustomRotation {\n    /**\n     * @generated from protobuf field: repeated proto.CustomSpell spells = 1;\n     */\n    spells: CustomSpell[];\n}\n/**\n * @generated from protobuf message proto.CustomSpell\n */\nexport interface CustomSpell {\n    /**\n     * This should usually be a spec-specific enum value.\n     *\n     * @generated from protobuf field: int32 spell = 1;\n     */\n    spell: number;\n    /**\n     * Desired cast rate for this spell. Not used by most custom rotations, this is\n     * primarily for healers.\n     *\n     * @generated from protobuf field: double casts_per_minute = 2;\n     */\n    castsPerMinute: number;\n}\n/**\n * @generated from protobuf message proto.ItemSwap\n */\nexport interface ItemSwap {\n    /**\n     * @generated from protobuf field: proto.ItemSpec mh_item = 1;\n     */\n    mhItem?: ItemSpec;\n    /**\n     * @generated from protobuf field: proto.ItemSpec oh_item = 2;\n     */\n    ohItem?: ItemSpec;\n    /**\n     * @generated from protobuf field: proto.ItemSpec ranged_item = 3;\n     */\n    rangedItem?: ItemSpec;\n}\n/**\n * @generated from protobuf message proto.Duration\n */\nexport interface Duration {\n    /**\n     * @generated from protobuf field: double ms = 1;\n     */\n    ms: number;\n}\n/**\n * @generated from protobuf enum proto.Spec\n */\nexport enum Spec {\n    /**\n     * @generated from protobuf enum value: SpecUnknown = 0;\n     */\n    SpecUnknown = 0,\n    /**\n     * @generated from protobuf enum value: SpecBloodDeathKnight = 1;\n     */\n    SpecBloodDeathKnight = 1,\n    /**\n     * @generated from protobuf enum value: SpecFrostDeathKnight = 2;\n     */\n    SpecFrostDeathKnight = 2,\n    /**\n     * @generated from protobuf enum value: SpecUnholyDeathKnight = 3;\n     */\n    SpecUnholyDeathKnight = 3,\n    /**\n     * @generated from protobuf enum value: SpecBalanceDruid = 4;\n     */\n    SpecBalanceDruid = 4,\n    /**\n     * @generated from protobuf enum value: SpecFeralDruid = 5;\n     */\n    SpecFeralDruid = 5,\n    /**\n     * @generated from protobuf enum value: SpecRestorationDruid = 6;\n     */\n    SpecRestorationDruid = 6,\n    /**\n     * @generated from protobuf enum value: SpecBeastMasteryHunter = 7;\n     */\n    SpecBeastMasteryHunter = 7,\n    /**\n     * @generated from protobuf enum value: SpecMarksmanshipHunter = 8;\n     */\n    SpecMarksmanshipHunter = 8,\n    /**\n     * @generated from protobuf enum value: SpecSurvivalHunter = 9;\n     */\n    SpecSurvivalHunter = 9,\n    /**\n     * @generated from protobuf enum value: SpecArcaneMage = 10;\n     */\n    SpecArcaneMage = 10,\n    /**\n     * @generated from protobuf enum value: SpecFireMage = 11;\n     */\n    SpecFireMage = 11,\n    /**\n     * @generated from protobuf enum value: SpecFrostMage = 12;\n     */\n    SpecFrostMage = 12,\n    /**\n     * @generated from protobuf enum value: SpecHolyPaladin = 13;\n     */\n    SpecHolyPaladin = 13,\n    /**\n     * @generated from protobuf enum value: SpecProtectionPaladin = 14;\n     */\n    SpecProtectionPaladin = 14,\n    /**\n     * @generated from protobuf enum value: SpecRetributionPaladin = 15;\n     */\n    SpecRetributionPaladin = 15,\n    /**\n     * @generated from protobuf enum value: SpecDisciplinePriest = 16;\n     */\n    SpecDisciplinePriest = 16,\n    /**\n     * @generated from protobuf enum value: SpecHolyPriest = 17;\n     */\n    SpecHolyPriest = 17,\n    /**\n     * @generated from protobuf enum value: SpecShadowPriest = 18;\n     */\n    SpecShadowPriest = 18,\n    /**\n     * @generated from protobuf enum value: SpecAssassinationRogue = 19;\n     */\n    SpecAssassinationRogue = 19,\n    /**\n     * @generated from protobuf enum value: SpecCombatRogue = 20;\n     */\n    SpecCombatRogue = 20,\n    /**\n     * @generated from protobuf enum value: SpecSubtletyRogue = 21;\n     */\n    SpecSubtletyRogue = 21,\n    /**\n     * @generated from protobuf enum value: SpecElementalShaman = 22;\n     */\n    SpecElementalShaman = 22,\n    /**\n     * @generated from protobuf enum value: SpecEnhancementShaman = 23;\n     */\n    SpecEnhancementShaman = 23,\n    /**\n     * @generated from protobuf enum value: SpecRestorationShaman = 24;\n     */\n    SpecRestorationShaman = 24,\n    /**\n     * @generated from protobuf enum value: SpecAfflictionWarlock = 25;\n     */\n    SpecAfflictionWarlock = 25,\n    /**\n     * @generated from protobuf enum value: SpecDemonologyWarlock = 26;\n     */\n    SpecDemonologyWarlock = 26,\n    /**\n     * @generated from protobuf enum value: SpecDestructionWarlock = 27;\n     */\n    SpecDestructionWarlock = 27,\n    /**\n     * @generated from protobuf enum value: SpecArmsWarrior = 28;\n     */\n    SpecArmsWarrior = 28,\n    /**\n     * @generated from protobuf enum value: SpecFuryWarrior = 29;\n     */\n    SpecFuryWarrior = 29,\n    /**\n     * @generated from protobuf enum value: SpecProtectionWarrior = 30;\n     */\n    SpecProtectionWarrior = 30\n}\n/**\n * @generated from protobuf enum proto.Race\n */\nexport enum Race {\n    /**\n     * @generated from protobuf enum value: RaceUnknown = 0;\n     */\n    RaceUnknown = 0,\n    /**\n     * @generated from protobuf enum value: RaceBloodElf = 1;\n     */\n    RaceBloodElf = 1,\n    /**\n     * @generated from protobuf enum value: RaceDraenei = 2;\n     */\n    RaceDraenei = 2,\n    /**\n     * @generated from protobuf enum value: RaceDwarf = 3;\n     */\n    RaceDwarf = 3,\n    /**\n     * @generated from protobuf enum value: RaceGnome = 4;\n     */\n    RaceGnome = 4,\n    /**\n     * @generated from protobuf enum value: RaceHuman = 5;\n     */\n    RaceHuman = 5,\n    /**\n     * @generated from protobuf enum value: RaceNightElf = 6;\n     */\n    RaceNightElf = 6,\n    /**\n     * @generated from protobuf enum value: RaceOrc = 7;\n     */\n    RaceOrc = 7,\n    /**\n     * @generated from protobuf enum value: RaceTauren = 8;\n     */\n    RaceTauren = 8,\n    /**\n     * @generated from protobuf enum value: RaceTroll = 9;\n     */\n    RaceTroll = 9,\n    /**\n     * @generated from protobuf enum value: RaceUndead = 10;\n     */\n    RaceUndead = 10,\n    /**\n     * @generated from protobuf enum value: RaceWorgen = 11;\n     */\n    RaceWorgen = 11,\n    /**\n     * @generated from protobuf enum value: RaceGoblin = 12;\n     */\n    RaceGoblin = 12\n}\n/**\n * @generated from protobuf enum proto.Faction\n */\nexport enum Faction {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Alliance = 1;\n     */\n    Alliance = 1,\n    /**\n     * @generated from protobuf enum value: Horde = 2;\n     */\n    Horde = 2\n}\n/**\n * @generated from protobuf enum proto.Class\n */\nexport enum Class {\n    /**\n     * @generated from protobuf enum value: ClassUnknown = 0;\n     */\n    ClassUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ClassDruid = 1;\n     */\n    ClassDruid = 1,\n    /**\n     * @generated from protobuf enum value: ClassHunter = 2;\n     */\n    ClassHunter = 2,\n    /**\n     * @generated from protobuf enum value: ClassMage = 3;\n     */\n    ClassMage = 3,\n    /**\n     * @generated from protobuf enum value: ClassPaladin = 4;\n     */\n    ClassPaladin = 4,\n    /**\n     * @generated from protobuf enum value: ClassPriest = 5;\n     */\n    ClassPriest = 5,\n    /**\n     * @generated from protobuf enum value: ClassRogue = 6;\n     */\n    ClassRogue = 6,\n    /**\n     * @generated from protobuf enum value: ClassShaman = 7;\n     */\n    ClassShaman = 7,\n    /**\n     * @generated from protobuf enum value: ClassWarlock = 8;\n     */\n    ClassWarlock = 8,\n    /**\n     * @generated from protobuf enum value: ClassWarrior = 9;\n     */\n    ClassWarrior = 9,\n    /**\n     * @generated from protobuf enum value: ClassDeathKnight = 10;\n     */\n    ClassDeathKnight = 10\n}\n/**\n * @generated from protobuf enum proto.Profession\n */\nexport enum Profession {\n    /**\n     * @generated from protobuf enum value: ProfessionUnknown = 0;\n     */\n    ProfessionUnknown = 0,\n    /**\n     * @generated from protobuf enum value: Alchemy = 1;\n     */\n    Alchemy = 1,\n    /**\n     * @generated from protobuf enum value: Blacksmithing = 2;\n     */\n    Blacksmithing = 2,\n    /**\n     * @generated from protobuf enum value: Enchanting = 3;\n     */\n    Enchanting = 3,\n    /**\n     * @generated from protobuf enum value: Engineering = 4;\n     */\n    Engineering = 4,\n    /**\n     * @generated from protobuf enum value: Herbalism = 5;\n     */\n    Herbalism = 5,\n    /**\n     * @generated from protobuf enum value: Inscription = 6;\n     */\n    Inscription = 6,\n    /**\n     * @generated from protobuf enum value: Jewelcrafting = 7;\n     */\n    Jewelcrafting = 7,\n    /**\n     * @generated from protobuf enum value: Leatherworking = 8;\n     */\n    Leatherworking = 8,\n    /**\n     * @generated from protobuf enum value: Mining = 9;\n     */\n    Mining = 9,\n    /**\n     * @generated from protobuf enum value: Skinning = 10;\n     */\n    Skinning = 10,\n    /**\n     * @generated from protobuf enum value: Tailoring = 11;\n     */\n    Tailoring = 11,\n    /**\n     * @generated from protobuf enum value: Archeology = 12;\n     */\n    Archeology = 12\n}\n/**\n * Keep in sync with sim/core/stats/stats.go.\n * NextIndex: 33;\n *\n * @generated from protobuf enum proto.Stat\n */\nexport enum Stat {\n    /**\n     * @generated from protobuf enum value: StatStrength = 0;\n     */\n    StatStrength = 0,\n    /**\n     * @generated from protobuf enum value: StatAgility = 1;\n     */\n    StatAgility = 1,\n    /**\n     * @generated from protobuf enum value: StatStamina = 2;\n     */\n    StatStamina = 2,\n    /**\n     * @generated from protobuf enum value: StatIntellect = 3;\n     */\n    StatIntellect = 3,\n    /**\n     * @generated from protobuf enum value: StatSpirit = 4;\n     */\n    StatSpirit = 4,\n    /**\n     * @generated from protobuf enum value: StatSpellPower = 5;\n     */\n    StatSpellPower = 5,\n    /**\n     * @generated from protobuf enum value: StatMP5 = 6;\n     */\n    StatMP5 = 6,\n    /**\n     * @generated from protobuf enum value: StatSpellHit = 7;\n     */\n    StatSpellHit = 7,\n    /**\n     * @generated from protobuf enum value: StatSpellCrit = 8;\n     */\n    StatSpellCrit = 8,\n    /**\n     * @generated from protobuf enum value: StatSpellHaste = 9;\n     */\n    StatSpellHaste = 9,\n    /**\n     * @generated from protobuf enum value: StatSpellPenetration = 10;\n     */\n    StatSpellPenetration = 10,\n    /**\n     * @generated from protobuf enum value: StatAttackPower = 11;\n     */\n    StatAttackPower = 11,\n    /**\n     * @generated from protobuf enum value: StatMeleeHit = 12;\n     */\n    StatMeleeHit = 12,\n    /**\n     * @generated from protobuf enum value: StatMeleeCrit = 13;\n     */\n    StatMeleeCrit = 13,\n    /**\n     * @generated from protobuf enum value: StatMeleeHaste = 14;\n     */\n    StatMeleeHaste = 14,\n    /**\n     * @generated from protobuf enum value: StatArmorPenetration = 15;\n     */\n    StatArmorPenetration = 15,\n    /**\n     * @generated from protobuf enum value: StatExpertise = 16;\n     */\n    StatExpertise = 16,\n    /**\n     * @generated from protobuf enum value: StatMana = 17;\n     */\n    StatMana = 17,\n    /**\n     * @generated from protobuf enum value: StatArmor = 18;\n     */\n    StatArmor = 18,\n    /**\n     * @generated from protobuf enum value: StatRangedAttackPower = 19;\n     */\n    StatRangedAttackPower = 19,\n    /**\n     * @generated from protobuf enum value: StatDefense = 20;\n     */\n    StatDefense = 20,\n    /**\n     * @generated from protobuf enum value: StatBlock = 21;\n     */\n    StatBlock = 21,\n    /**\n     * @generated from protobuf enum value: StatDodge = 22;\n     */\n    StatDodge = 22,\n    /**\n     * @generated from protobuf enum value: StatParry = 23;\n     */\n    StatParry = 23,\n    /**\n     * @generated from protobuf enum value: StatResilience = 24;\n     */\n    StatResilience = 24,\n    /**\n     * @generated from protobuf enum value: StatHealth = 25;\n     */\n    StatHealth = 25,\n    /**\n     * @generated from protobuf enum value: StatArcaneResistance = 26;\n     */\n    StatArcaneResistance = 26,\n    /**\n     * @generated from protobuf enum value: StatFireResistance = 27;\n     */\n    StatFireResistance = 27,\n    /**\n     * @generated from protobuf enum value: StatFrostResistance = 28;\n     */\n    StatFrostResistance = 28,\n    /**\n     * @generated from protobuf enum value: StatNatureResistance = 29;\n     */\n    StatNatureResistance = 29,\n    /**\n     * @generated from protobuf enum value: StatShadowResistance = 30;\n     */\n    StatShadowResistance = 30,\n    /**\n     * @generated from protobuf enum value: StatBonusArmor = 31;\n     */\n    StatBonusArmor = 31,\n    /**\n     * @generated from protobuf enum value: StatMastery = 32;\n     */\n    StatMastery = 32\n}\n/**\n * Not all pseudostats are included here; just the ones we want to pass\n * between the UI and backend.\n *\n * It's also OK to include things here which aren't in the PseudoStats struct.\n *\n * @generated from protobuf enum proto.PseudoStat\n */\nexport enum PseudoStat {\n    /**\n     * @generated from protobuf enum value: PseudoStatMainHandDps = 0;\n     */\n    PseudoStatMainHandDps = 0,\n    /**\n     * @generated from protobuf enum value: PseudoStatOffHandDps = 1;\n     */\n    PseudoStatOffHandDps = 1,\n    /**\n     * @generated from protobuf enum value: PseudoStatRangedDps = 2;\n     */\n    PseudoStatRangedDps = 2,\n    /**\n     * @generated from protobuf enum value: PseudoStatBlockDamageReduction = 3;\n     */\n    PseudoStatBlockDamageReduction = 3,\n    /**\n     * @generated from protobuf enum value: PseudoStatDodge = 4;\n     */\n    PseudoStatDodge = 4,\n    /**\n     * @generated from protobuf enum value: PseudoStatParry = 5;\n     */\n    PseudoStatParry = 5\n}\n/**\n * @generated from protobuf enum proto.ItemType\n */\nexport enum ItemType {\n    /**\n     * @generated from protobuf enum value: ItemTypeUnknown = 0;\n     */\n    ItemTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ItemTypeHead = 1;\n     */\n    ItemTypeHead = 1,\n    /**\n     * @generated from protobuf enum value: ItemTypeNeck = 2;\n     */\n    ItemTypeNeck = 2,\n    /**\n     * @generated from protobuf enum value: ItemTypeShoulder = 3;\n     */\n    ItemTypeShoulder = 3,\n    /**\n     * @generated from protobuf enum value: ItemTypeBack = 4;\n     */\n    ItemTypeBack = 4,\n    /**\n     * @generated from protobuf enum value: ItemTypeChest = 5;\n     */\n    ItemTypeChest = 5,\n    /**\n     * @generated from protobuf enum value: ItemTypeWrist = 6;\n     */\n    ItemTypeWrist = 6,\n    /**\n     * @generated from protobuf enum value: ItemTypeHands = 7;\n     */\n    ItemTypeHands = 7,\n    /**\n     * @generated from protobuf enum value: ItemTypeWaist = 8;\n     */\n    ItemTypeWaist = 8,\n    /**\n     * @generated from protobuf enum value: ItemTypeLegs = 9;\n     */\n    ItemTypeLegs = 9,\n    /**\n     * @generated from protobuf enum value: ItemTypeFeet = 10;\n     */\n    ItemTypeFeet = 10,\n    /**\n     * @generated from protobuf enum value: ItemTypeFinger = 11;\n     */\n    ItemTypeFinger = 11,\n    /**\n     * @generated from protobuf enum value: ItemTypeTrinket = 12;\n     */\n    ItemTypeTrinket = 12,\n    /**\n     * @generated from protobuf enum value: ItemTypeWeapon = 13;\n     */\n    ItemTypeWeapon = 13,\n    /**\n     * @generated from protobuf enum value: ItemTypeRanged = 14;\n     */\n    ItemTypeRanged = 14\n}\n/**\n * @generated from protobuf enum proto.ArmorType\n */\nexport enum ArmorType {\n    /**\n     * @generated from protobuf enum value: ArmorTypeUnknown = 0;\n     */\n    ArmorTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ArmorTypeCloth = 1;\n     */\n    ArmorTypeCloth = 1,\n    /**\n     * @generated from protobuf enum value: ArmorTypeLeather = 2;\n     */\n    ArmorTypeLeather = 2,\n    /**\n     * @generated from protobuf enum value: ArmorTypeMail = 3;\n     */\n    ArmorTypeMail = 3,\n    /**\n     * @generated from protobuf enum value: ArmorTypePlate = 4;\n     */\n    ArmorTypePlate = 4\n}\n/**\n * @generated from protobuf enum proto.WeaponType\n */\nexport enum WeaponType {\n    /**\n     * @generated from protobuf enum value: WeaponTypeUnknown = 0;\n     */\n    WeaponTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: WeaponTypeAxe = 1;\n     */\n    WeaponTypeAxe = 1,\n    /**\n     * @generated from protobuf enum value: WeaponTypeDagger = 2;\n     */\n    WeaponTypeDagger = 2,\n    /**\n     * @generated from protobuf enum value: WeaponTypeFist = 3;\n     */\n    WeaponTypeFist = 3,\n    /**\n     * @generated from protobuf enum value: WeaponTypeMace = 4;\n     */\n    WeaponTypeMace = 4,\n    /**\n     * @generated from protobuf enum value: WeaponTypeOffHand = 5;\n     */\n    WeaponTypeOffHand = 5,\n    /**\n     * @generated from protobuf enum value: WeaponTypePolearm = 6;\n     */\n    WeaponTypePolearm = 6,\n    /**\n     * @generated from protobuf enum value: WeaponTypeShield = 7;\n     */\n    WeaponTypeShield = 7,\n    /**\n     * @generated from protobuf enum value: WeaponTypeStaff = 8;\n     */\n    WeaponTypeStaff = 8,\n    /**\n     * @generated from protobuf enum value: WeaponTypeSword = 9;\n     */\n    WeaponTypeSword = 9\n}\n/**\n * @generated from protobuf enum proto.HandType\n */\nexport enum HandType {\n    /**\n     * @generated from protobuf enum value: HandTypeUnknown = 0;\n     */\n    HandTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: HandTypeMainHand = 1;\n     */\n    HandTypeMainHand = 1,\n    /**\n     * @generated from protobuf enum value: HandTypeOneHand = 2;\n     */\n    HandTypeOneHand = 2,\n    /**\n     * @generated from protobuf enum value: HandTypeOffHand = 3;\n     */\n    HandTypeOffHand = 3,\n    /**\n     * @generated from protobuf enum value: HandTypeTwoHand = 4;\n     */\n    HandTypeTwoHand = 4\n}\n/**\n * @generated from protobuf enum proto.RangedWeaponType\n */\nexport enum RangedWeaponType {\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeUnknown = 0;\n     */\n    RangedWeaponTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeBow = 1;\n     */\n    RangedWeaponTypeBow = 1,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeCrossbow = 2;\n     */\n    RangedWeaponTypeCrossbow = 2,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeGun = 3;\n     */\n    RangedWeaponTypeGun = 3,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeRelic = 4;\n     */\n    RangedWeaponTypeRelic = 4,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeThrown = 5;\n     */\n    RangedWeaponTypeThrown = 5,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeWand = 6;\n     */\n    RangedWeaponTypeWand = 6\n}\n/**\n * All slots on the gear menu where a single item can be worn.\n *\n * @generated from protobuf enum proto.ItemSlot\n */\nexport enum ItemSlot {\n    /**\n     * @generated from protobuf enum value: ItemSlotHead = 0;\n     */\n    ItemSlotHead = 0,\n    /**\n     * @generated from protobuf enum value: ItemSlotNeck = 1;\n     */\n    ItemSlotNeck = 1,\n    /**\n     * @generated from protobuf enum value: ItemSlotShoulder = 2;\n     */\n    ItemSlotShoulder = 2,\n    /**\n     * @generated from protobuf enum value: ItemSlotBack = 3;\n     */\n    ItemSlotBack = 3,\n    /**\n     * @generated from protobuf enum value: ItemSlotChest = 4;\n     */\n    ItemSlotChest = 4,\n    /**\n     * @generated from protobuf enum value: ItemSlotWrist = 5;\n     */\n    ItemSlotWrist = 5,\n    /**\n     * @generated from protobuf enum value: ItemSlotHands = 6;\n     */\n    ItemSlotHands = 6,\n    /**\n     * @generated from protobuf enum value: ItemSlotWaist = 7;\n     */\n    ItemSlotWaist = 7,\n    /**\n     * @generated from protobuf enum value: ItemSlotLegs = 8;\n     */\n    ItemSlotLegs = 8,\n    /**\n     * @generated from protobuf enum value: ItemSlotFeet = 9;\n     */\n    ItemSlotFeet = 9,\n    /**\n     * @generated from protobuf enum value: ItemSlotFinger1 = 10;\n     */\n    ItemSlotFinger1 = 10,\n    /**\n     * @generated from protobuf enum value: ItemSlotFinger2 = 11;\n     */\n    ItemSlotFinger2 = 11,\n    /**\n     * @generated from protobuf enum value: ItemSlotTrinket1 = 12;\n     */\n    ItemSlotTrinket1 = 12,\n    /**\n     * @generated from protobuf enum value: ItemSlotTrinket2 = 13;\n     */\n    ItemSlotTrinket2 = 13,\n    /**\n     * can be 1h or 2h\n     *\n     * @generated from protobuf enum value: ItemSlotMainHand = 14;\n     */\n    ItemSlotMainHand = 14,\n    /**\n     * @generated from protobuf enum value: ItemSlotOffHand = 15;\n     */\n    ItemSlotOffHand = 15,\n    /**\n     * @generated from protobuf enum value: ItemSlotRanged = 16;\n     */\n    ItemSlotRanged = 16\n}\n/**\n * @generated from protobuf enum proto.ItemQuality\n */\nexport enum ItemQuality {\n    /**\n     * @generated from protobuf enum value: ItemQualityJunk = 0;\n     */\n    ItemQualityJunk = 0,\n    /**\n     * @generated from protobuf enum value: ItemQualityCommon = 1;\n     */\n    ItemQualityCommon = 1,\n    /**\n     * @generated from protobuf enum value: ItemQualityUncommon = 2;\n     */\n    ItemQualityUncommon = 2,\n    /**\n     * @generated from protobuf enum value: ItemQualityRare = 3;\n     */\n    ItemQualityRare = 3,\n    /**\n     * @generated from protobuf enum value: ItemQualityEpic = 4;\n     */\n    ItemQualityEpic = 4,\n    /**\n     * @generated from protobuf enum value: ItemQualityLegendary = 5;\n     */\n    ItemQualityLegendary = 5,\n    /**\n     * @generated from protobuf enum value: ItemQualityArtifact = 6;\n     */\n    ItemQualityArtifact = 6,\n    /**\n     * @generated from protobuf enum value: ItemQualityHeirloom = 7;\n     */\n    ItemQualityHeirloom = 7\n}\n/**\n * @generated from protobuf enum proto.GemColor\n */\nexport enum GemColor {\n    /**\n     * @generated from protobuf enum value: GemColorUnknown = 0;\n     */\n    GemColorUnknown = 0,\n    /**\n     * @generated from protobuf enum value: GemColorMeta = 1;\n     */\n    GemColorMeta = 1,\n    /**\n     * @generated from protobuf enum value: GemColorRed = 2;\n     */\n    GemColorRed = 2,\n    /**\n     * @generated from protobuf enum value: GemColorBlue = 3;\n     */\n    GemColorBlue = 3,\n    /**\n     * @generated from protobuf enum value: GemColorYellow = 4;\n     */\n    GemColorYellow = 4,\n    /**\n     * @generated from protobuf enum value: GemColorGreen = 5;\n     */\n    GemColorGreen = 5,\n    /**\n     * @generated from protobuf enum value: GemColorOrange = 6;\n     */\n    GemColorOrange = 6,\n    /**\n     * @generated from protobuf enum value: GemColorPurple = 7;\n     */\n    GemColorPurple = 7,\n    /**\n     * @generated from protobuf enum value: GemColorPrismatic = 8;\n     */\n    GemColorPrismatic = 8,\n    /**\n     * @generated from protobuf enum value: GemColorCogwheel = 9;\n     */\n    GemColorCogwheel = 9\n}\n/**\n * @generated from protobuf enum proto.SpellSchool\n */\nexport enum SpellSchool {\n    /**\n     * @generated from protobuf enum value: SpellSchoolPhysical = 0;\n     */\n    SpellSchoolPhysical = 0,\n    /**\n     * @generated from protobuf enum value: SpellSchoolArcane = 1;\n     */\n    SpellSchoolArcane = 1,\n    /**\n     * @generated from protobuf enum value: SpellSchoolFire = 2;\n     */\n    SpellSchoolFire = 2,\n    /**\n     * @generated from protobuf enum value: SpellSchoolFrost = 3;\n     */\n    SpellSchoolFrost = 3,\n    /**\n     * @generated from protobuf enum value: SpellSchoolHoly = 4;\n     */\n    SpellSchoolHoly = 4,\n    /**\n     * @generated from protobuf enum value: SpellSchoolNature = 5;\n     */\n    SpellSchoolNature = 5,\n    /**\n     * @generated from protobuf enum value: SpellSchoolShadow = 6;\n     */\n    SpellSchoolShadow = 6\n}\n/**\n * @generated from protobuf enum proto.TristateEffect\n */\nexport enum TristateEffect {\n    /**\n     * @generated from protobuf enum value: TristateEffectMissing = 0;\n     */\n    TristateEffectMissing = 0,\n    /**\n     * @generated from protobuf enum value: TristateEffectRegular = 1;\n     */\n    TristateEffectRegular = 1,\n    /**\n     * @generated from protobuf enum value: TristateEffectImproved = 2;\n     */\n    TristateEffectImproved = 2\n}\n/**\n * @generated from protobuf enum proto.Explosive\n */\nexport enum Explosive {\n    /**\n     * @generated from protobuf enum value: ExplosiveUnknown = 0;\n     */\n    ExplosiveUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ExplosiveSaroniteBomb = 1;\n     */\n    ExplosiveSaroniteBomb = 1,\n    /**\n     * @generated from protobuf enum value: ExplosiveCobaltFragBomb = 2;\n     */\n    ExplosiveCobaltFragBomb = 2\n}\n/**\n * @generated from protobuf enum proto.TinkerHands\n */\nexport enum TinkerHands {\n    /**\n     * @generated from protobuf enum value: TinkerHandsNone = 0;\n     */\n    TinkerHandsNone = 0,\n    /**\n     * @generated from protobuf enum value: TinkerHandsSynapseSprings = 1;\n     */\n    TinkerHandsSynapseSprings = 1,\n    /**\n     * @generated from protobuf enum value: TinkerHandsTazikShocker = 2;\n     */\n    TinkerHandsTazikShocker = 2,\n    /**\n     * @generated from protobuf enum value: TinkerHandsQuickflipDeflectionPlates = 3;\n     */\n    TinkerHandsQuickflipDeflectionPlates = 3,\n    /**\n     * @generated from protobuf enum value: TinkerHandsSpinalHealingInjector = 4;\n     */\n    TinkerHandsSpinalHealingInjector = 4,\n    /**\n     * @generated from protobuf enum value: TinkerHandsZ50ManaGulper = 8;\n     */\n    TinkerHandsZ50ManaGulper = 8\n}\n/**\n * @generated from protobuf enum proto.Potions\n */\nexport enum Potions {\n    /**\n     * @generated from protobuf enum value: UnknownPotion = 0;\n     */\n    UnknownPotion = 0,\n    /**\n     * 58146\n     *\n     * @generated from protobuf enum value: GolembloodPotion = 1;\n     */\n    GolembloodPotion = 1,\n    /**\n     * 58145\n     *\n     * @generated from protobuf enum value: PotionOfTheTolvir = 2;\n     */\n    PotionOfTheTolvir = 2,\n    /**\n     * 57194\n     *\n     * @generated from protobuf enum value: PotionOfConcentration = 3;\n     */\n    PotionOfConcentration = 3,\n    /**\n     * 58091\n     *\n     * @generated from protobuf enum value: VolcanicPotion = 4;\n     */\n    VolcanicPotion = 4,\n    /**\n     * 58090\n     *\n     * @generated from protobuf enum value: EarthenPotion = 5;\n     */\n    EarthenPotion = 5,\n    /**\n     * 57193\n     *\n     * @generated from protobuf enum value: MightyRejuvenationPotion = 6;\n     */\n    MightyRejuvenationPotion = 6,\n    /**\n     * 57191\n     *\n     * @generated from protobuf enum value: MythicalHealingPotion = 7;\n     */\n    MythicalHealingPotion = 7,\n    /**\n     * 57192\n     *\n     * @generated from protobuf enum value: MythicalManaPotion = 8;\n     */\n    MythicalManaPotion = 8,\n    /**\n     * @generated from protobuf enum value: PotionOfSpeed = 9;\n     */\n    PotionOfSpeed = 9,\n    /**\n     * @generated from protobuf enum value: HastePotion = 10;\n     */\n    HastePotion = 10,\n    /**\n     * @generated from protobuf enum value: MightyRagePotion = 11;\n     */\n    MightyRagePotion = 11,\n    /**\n     * @generated from protobuf enum value: RunicManaInjector = 12;\n     */\n    RunicManaInjector = 12,\n    /**\n     * @generated from protobuf enum value: RunicHealingInjector = 13;\n     */\n    RunicHealingInjector = 13,\n    /**\n     * @generated from protobuf enum value: FlameCap = 14;\n     */\n    FlameCap = 14\n}\n/**\n * @generated from protobuf enum proto.Conjured\n */\nexport enum Conjured {\n    /**\n     * @generated from protobuf enum value: ConjuredUnknown = 0;\n     */\n    ConjuredUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ConjuredDarkRune = 1;\n     */\n    ConjuredDarkRune = 1,\n    /**\n     * @generated from protobuf enum value: ConjuredHealthstone = 5;\n     */\n    ConjuredHealthstone = 5,\n    /**\n     * @generated from protobuf enum value: ConjuredRogueThistleTea = 4;\n     */\n    ConjuredRogueThistleTea = 4\n}\n/**\n * @generated from protobuf enum proto.Flask\n */\nexport enum Flask {\n    /**\n     * @generated from protobuf enum value: FlaskUnknown = 0;\n     */\n    FlaskUnknown = 0,\n    /**\n     * @generated from protobuf enum value: FlaskOfTitanicStrength = 1;\n     */\n    FlaskOfTitanicStrength = 1,\n    /**\n     * @generated from protobuf enum value: FlaskOfTheWinds = 2;\n     */\n    FlaskOfTheWinds = 2,\n    /**\n     * @generated from protobuf enum value: FlaskOfSteelskin = 3;\n     */\n    FlaskOfSteelskin = 3,\n    /**\n     * @generated from protobuf enum value: FlaskOfFlowingWater = 4;\n     */\n    FlaskOfFlowingWater = 4,\n    /**\n     * @generated from protobuf enum value: FlaskOfTheDraconicMind = 5;\n     */\n    FlaskOfTheDraconicMind = 5,\n    /**\n     * Wotlk\n     *\n     * @generated from protobuf enum value: FlaskOfTheFrostWyrm = 6;\n     */\n    FlaskOfTheFrostWyrm = 6,\n    /**\n     * @generated from protobuf enum value: FlaskOfEndlessRage = 7;\n     */\n    FlaskOfEndlessRage = 7,\n    /**\n     * @generated from protobuf enum value: FlaskOfPureMojo = 8;\n     */\n    FlaskOfPureMojo = 8,\n    /**\n     * @generated from protobuf enum value: FlaskOfStoneblood = 9;\n     */\n    FlaskOfStoneblood = 9,\n    /**\n     * @generated from protobuf enum value: LesserFlaskOfToughness = 10;\n     */\n    LesserFlaskOfToughness = 10,\n    /**\n     * @generated from protobuf enum value: LesserFlaskOfResistance = 11;\n     */\n    LesserFlaskOfResistance = 11\n}\n/**\n * @generated from protobuf enum proto.BattleElixir\n */\nexport enum BattleElixir {\n    /**\n     * @generated from protobuf enum value: BattleElixirUnknown = 0;\n     */\n    BattleElixirUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ElixirOfTheMaster = 1;\n     */\n    ElixirOfTheMaster = 1,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightySpeed = 2;\n     */\n    ElixirOfMightySpeed = 2,\n    /**\n     * @generated from protobuf enum value: ElixirOfImpossibleAccuracy = 3;\n     */\n    ElixirOfImpossibleAccuracy = 3,\n    /**\n     * @generated from protobuf enum value: ElixirOfTheCobra = 4;\n     */\n    ElixirOfTheCobra = 4,\n    /**\n     * @generated from protobuf enum value: ElixirOfTheNaga = 5;\n     */\n    ElixirOfTheNaga = 5,\n    /**\n     * @generated from protobuf enum value: GhostElixir = 6;\n     */\n    GhostElixir = 6,\n    /**\n     * Wotlk\n     *\n     * @generated from protobuf enum value: ElixirOfAccuracy = 7;\n     */\n    ElixirOfAccuracy = 7,\n    /**\n     * @generated from protobuf enum value: ElixirOfArmorPiercing = 8;\n     */\n    ElixirOfArmorPiercing = 8,\n    /**\n     * @generated from protobuf enum value: ElixirOfDeadlyStrikes = 9;\n     */\n    ElixirOfDeadlyStrikes = 9,\n    /**\n     * @generated from protobuf enum value: ElixirOfExpertise = 10;\n     */\n    ElixirOfExpertise = 10,\n    /**\n     * @generated from protobuf enum value: ElixirOfLightningSpeed = 11;\n     */\n    ElixirOfLightningSpeed = 11,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyAgility = 12;\n     */\n    ElixirOfMightyAgility = 12,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyStrength = 13;\n     */\n    ElixirOfMightyStrength = 13,\n    /**\n     * @generated from protobuf enum value: GurusElixir = 14;\n     */\n    GurusElixir = 14,\n    /**\n     * @generated from protobuf enum value: SpellpowerElixir = 15;\n     */\n    SpellpowerElixir = 15,\n    /**\n     * @generated from protobuf enum value: WrathElixir = 16;\n     */\n    WrathElixir = 16,\n    /**\n     * TBC\n     *\n     * @generated from protobuf enum value: ElixirOfDemonslaying = 17;\n     */\n    ElixirOfDemonslaying = 17\n}\n/**\n * @generated from protobuf enum proto.GuardianElixir\n */\nexport enum GuardianElixir {\n    /**\n     * @generated from protobuf enum value: GuardianElixirUnknown = 0;\n     */\n    GuardianElixirUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ElixirOfDeepEarth = 1;\n     */\n    ElixirOfDeepEarth = 1,\n    /**\n     * @generated from protobuf enum value: PrismaticElixir = 2;\n     */\n    PrismaticElixir = 2,\n    /**\n     * Wotlk\n     *\n     * @generated from protobuf enum value: ElixirOfMightyDefense = 3;\n     */\n    ElixirOfMightyDefense = 3,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyFortitude = 4;\n     */\n    ElixirOfMightyFortitude = 4,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyMageblood = 5;\n     */\n    ElixirOfMightyMageblood = 5,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyThoughts = 6;\n     */\n    ElixirOfMightyThoughts = 6,\n    /**\n     * @generated from protobuf enum value: ElixirOfProtection = 7;\n     */\n    ElixirOfProtection = 7,\n    /**\n     * @generated from protobuf enum value: ElixirOfSpirit = 8;\n     */\n    ElixirOfSpirit = 8\n}\n/**\n * @generated from protobuf enum proto.Food\n */\nexport enum Food {\n    /**\n     * @generated from protobuf enum value: FoodUnknown = 0;\n     */\n    FoodUnknown = 0,\n    /**\n     * @generated from protobuf enum value: FoodFishFeast = 1;\n     */\n    FoodFishFeast = 1,\n    /**\n     * @generated from protobuf enum value: FoodGreatFeast = 2;\n     */\n    FoodGreatFeast = 2,\n    /**\n     * @generated from protobuf enum value: FoodBlackenedDragonfin = 3;\n     */\n    FoodBlackenedDragonfin = 3,\n    /**\n     * @generated from protobuf enum value: FoodHeartyRhino = 4;\n     */\n    FoodHeartyRhino = 4,\n    /**\n     * @generated from protobuf enum value: FoodMegaMammothMeal = 5;\n     */\n    FoodMegaMammothMeal = 5,\n    /**\n     * @generated from protobuf enum value: FoodSpicedWormBurger = 6;\n     */\n    FoodSpicedWormBurger = 6,\n    /**\n     * @generated from protobuf enum value: FoodRhinoliciousWormsteak = 7;\n     */\n    FoodRhinoliciousWormsteak = 7,\n    /**\n     * @generated from protobuf enum value: FoodImperialMantaSteak = 8;\n     */\n    FoodImperialMantaSteak = 8,\n    /**\n     * @generated from protobuf enum value: FoodSnapperExtreme = 9;\n     */\n    FoodSnapperExtreme = 9,\n    /**\n     * @generated from protobuf enum value: FoodMightyRhinoDogs = 10;\n     */\n    FoodMightyRhinoDogs = 10,\n    /**\n     * @generated from protobuf enum value: FoodFirecrackerSalmon = 11;\n     */\n    FoodFirecrackerSalmon = 11,\n    /**\n     * @generated from protobuf enum value: FoodCuttlesteak = 12;\n     */\n    FoodCuttlesteak = 12,\n    /**\n     * @generated from protobuf enum value: FoodDragonfinFilet = 13;\n     */\n    FoodDragonfinFilet = 13,\n    /**\n     * TBC Foods\n     *\n     * @generated from protobuf enum value: FoodBlackenedBasilisk = 14;\n     */\n    FoodBlackenedBasilisk = 14,\n    /**\n     * @generated from protobuf enum value: FoodGrilledMudfish = 15;\n     */\n    FoodGrilledMudfish = 15,\n    /**\n     * @generated from protobuf enum value: FoodRavagerDog = 16;\n     */\n    FoodRavagerDog = 16,\n    /**\n     * @generated from protobuf enum value: FoodRoastedClefthoof = 17;\n     */\n    FoodRoastedClefthoof = 17,\n    /**\n     * @generated from protobuf enum value: FoodSkullfishSoup = 18;\n     */\n    FoodSkullfishSoup = 18,\n    /**\n     * @generated from protobuf enum value: FoodSpicyHotTalbuk = 19;\n     */\n    FoodSpicyHotTalbuk = 19,\n    /**\n     * @generated from protobuf enum value: FoodFishermansFeast = 20;\n     */\n    FoodFishermansFeast = 20,\n    /**\n     * Cata\n     *\n     * @generated from protobuf enum value: FoodSeafoodFeast = 21;\n     */\n    FoodSeafoodFeast = 21,\n    /**\n     * @generated from protobuf enum value: FoodFortuneCookie = 22;\n     */\n    FoodFortuneCookie = 22,\n    /**\n     * @generated from protobuf enum value: FoodSeveredSagefish = 23;\n     */\n    FoodSeveredSagefish = 23,\n    /**\n     * @generated from protobuf enum value: FoodBeerBasedCrocolisk = 24;\n     */\n    FoodBeerBasedCrocolisk = 24,\n    /**\n     * @generated from protobuf enum value: FoodSkeweredEel = 25;\n     */\n    FoodSkeweredEel = 25,\n    /**\n     * @generated from protobuf enum value: FoodDeliciousSagefishTail = 26;\n     */\n    FoodDeliciousSagefishTail = 26,\n    /**\n     * @generated from protobuf enum value: FoodBasiliskLiverdog = 27;\n     */\n    FoodBasiliskLiverdog = 27,\n    /**\n     * @generated from protobuf enum value: FoodBakedRockfish = 28;\n     */\n    FoodBakedRockfish = 28,\n    /**\n     * @generated from protobuf enum value: FoodCrocoliskAuGratin = 29;\n     */\n    FoodCrocoliskAuGratin = 29,\n    /**\n     * @generated from protobuf enum value: FoodGrilledDragon = 30;\n     */\n    FoodGrilledDragon = 30,\n    /**\n     * @generated from protobuf enum value: FoodLavascaleMinestrone = 31;\n     */\n    FoodLavascaleMinestrone = 31,\n    /**\n     * @generated from protobuf enum value: FoodBlackbellySushi = 32;\n     */\n    FoodBlackbellySushi = 32,\n    /**\n     * @generated from protobuf enum value: FoodMushroomSauceMudfish = 33;\n     */\n    FoodMushroomSauceMudfish = 33\n}\n/**\n * @generated from protobuf enum proto.MobType\n */\nexport enum MobType {\n    /**\n     * @generated from protobuf enum value: MobTypeUnknown = 0;\n     */\n    MobTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: MobTypeBeast = 1;\n     */\n    MobTypeBeast = 1,\n    /**\n     * @generated from protobuf enum value: MobTypeDemon = 2;\n     */\n    MobTypeDemon = 2,\n    /**\n     * @generated from protobuf enum value: MobTypeDragonkin = 3;\n     */\n    MobTypeDragonkin = 3,\n    /**\n     * @generated from protobuf enum value: MobTypeElemental = 4;\n     */\n    MobTypeElemental = 4,\n    /**\n     * @generated from protobuf enum value: MobTypeGiant = 5;\n     */\n    MobTypeGiant = 5,\n    /**\n     * @generated from protobuf enum value: MobTypeHumanoid = 6;\n     */\n    MobTypeHumanoid = 6,\n    /**\n     * @generated from protobuf enum value: MobTypeMechanical = 7;\n     */\n    MobTypeMechanical = 7,\n    /**\n     * @generated from protobuf enum value: MobTypeUndead = 8;\n     */\n    MobTypeUndead = 8\n}\n/**\n * @generated from protobuf enum proto.InputType\n */\nexport enum InputType {\n    /**\n     * @generated from protobuf enum value: Bool = 0;\n     */\n    Bool = 0,\n    /**\n     * @generated from protobuf enum value: Number = 1;\n     */\n    Number = 1,\n    /**\n     * @generated from protobuf enum value: Enum = 2;\n     */\n    Enum = 2\n}\n/**\n * Extra enum for describing which items are eligible for an enchant, when\n * ItemType alone is not enough.\n *\n * @generated from protobuf enum proto.EnchantType\n */\nexport enum EnchantType {\n    /**\n     * @generated from protobuf enum value: EnchantTypeNormal = 0;\n     */\n    EnchantTypeNormal = 0,\n    /**\n     * @generated from protobuf enum value: EnchantTypeTwoHand = 1;\n     */\n    EnchantTypeTwoHand = 1,\n    /**\n     * @generated from protobuf enum value: EnchantTypeShield = 2;\n     */\n    EnchantTypeShield = 2,\n    /**\n     * @generated from protobuf enum value: EnchantTypeKit = 3;\n     */\n    EnchantTypeKit = 3,\n    /**\n     * @generated from protobuf enum value: EnchantTypeStaff = 4;\n     */\n    EnchantTypeStaff = 4,\n    /**\n     * @generated from protobuf enum value: EnchantTypeOffHand = 5;\n     */\n    EnchantTypeOffHand = 5\n}\n/**\n * ID for actions that aren't spells or items.\n *\n * @generated from protobuf enum proto.OtherAction\n */\nexport enum OtherAction {\n    /**\n     * @generated from protobuf enum value: OtherActionNone = 0;\n     */\n    OtherActionNone = 0,\n    /**\n     * @generated from protobuf enum value: OtherActionWait = 1;\n     */\n    OtherActionWait = 1,\n    /**\n     * @generated from protobuf enum value: OtherActionManaRegen = 2;\n     */\n    OtherActionManaRegen = 2,\n    /**\n     * @generated from protobuf enum value: OtherActionEnergyRegen = 5;\n     */\n    OtherActionEnergyRegen = 5,\n    /**\n     * @generated from protobuf enum value: OtherActionFocusRegen = 6;\n     */\n    OtherActionFocusRegen = 6,\n    /**\n     * For threat generated from mana gains.\n     *\n     * @generated from protobuf enum value: OtherActionManaGain = 10;\n     */\n    OtherActionManaGain = 10,\n    /**\n     * For threat generated from rage gains.\n     *\n     * @generated from protobuf enum value: OtherActionRageGain = 11;\n     */\n    OtherActionRageGain = 11,\n    /**\n     * A white hit, can be main hand or off hand.\n     *\n     * @generated from protobuf enum value: OtherActionAttack = 3;\n     */\n    OtherActionAttack = 3,\n    /**\n     * Default shoot action using a wand/bow/gun.\n     *\n     * @generated from protobuf enum value: OtherActionShoot = 4;\n     */\n    OtherActionShoot = 4,\n    /**\n     * Represents a grouping of all pet actions. Only used by the UI.\n     *\n     * @generated from protobuf enum value: OtherActionPet = 7;\n     */\n    OtherActionPet = 7,\n    /**\n     * Refund of a resource like Energy or Rage, when the ability didn't land.\n     *\n     * @generated from protobuf enum value: OtherActionRefund = 8;\n     */\n    OtherActionRefund = 8,\n    /**\n     * Indicates damage taken; used for rage gen.\n     *\n     * @generated from protobuf enum value: OtherActionDamageTaken = 9;\n     */\n    OtherActionDamageTaken = 9,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionHealingModel = 12;\n     */\n    OtherActionHealingModel = 12,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionBloodRuneGain = 13;\n     */\n    OtherActionBloodRuneGain = 13,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionFrostRuneGain = 14;\n     */\n    OtherActionFrostRuneGain = 14,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionUnholyRuneGain = 15;\n     */\n    OtherActionUnholyRuneGain = 15,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionDeathRuneGain = 16;\n     */\n    OtherActionDeathRuneGain = 16,\n    /**\n     * Used by APL to generically refer to either the prepull or combat potion.\n     *\n     * @generated from protobuf enum value: OtherActionPotion = 17;\n     */\n    OtherActionPotion = 17,\n    /**\n     * For balance druid solar energy\n     *\n     * @generated from protobuf enum value: OtherActionSolarEnergyGain = 18;\n     */\n    OtherActionSolarEnergyGain = 18,\n    /**\n     * For balance druid lunar energy\n     *\n     * @generated from protobuf enum value: OtherActionLunarEnergyGain = 19;\n     */\n    OtherActionLunarEnergyGain = 19,\n    /**\n     * Used by movement to be able to show it in timeline\n     *\n     * @generated from protobuf enum value: OtherActionMove = 20;\n     */\n    OtherActionMove = 20\n}\n/**\n * @generated from protobuf enum proto.RotationType\n */\nexport enum RotationType {\n    /**\n     * @generated from protobuf enum value: UnknownType = 0;\n     */\n    UnknownType = 0,\n    /**\n     * @generated from protobuf enum value: SingleTarget = 1;\n     */\n    SingleTarget = 1,\n    /**\n     * @generated from protobuf enum value: Aoe = 3;\n     */\n    Aoe = 3,\n    /**\n     * @generated from protobuf enum value: Custom = 2;\n     */\n    Custom = 2\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass UnitStats$Type extends MessageType<UnitStats> {\n    constructor() {\n        super(\"proto.UnitStats\", [\n            { no: 1, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"pseudo_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<UnitStats>): UnitStats {\n        const message = { stats: [], pseudoStats: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UnitStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnitStats): UnitStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated double stats */ 1:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* repeated double pseudo_stats */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.pseudoStats.push(reader.double());\n                    else\n                        message.pseudoStats.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UnitStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated double stats = 1; */\n        if (message.stats.length) {\n            writer.tag(1, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* repeated double pseudo_stats = 2; */\n        if (message.pseudoStats.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.pseudoStats.length; i++)\n                writer.double(message.pseudoStats[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UnitStats\n */\nexport const UnitStats = new UnitStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ReforgeStat$Type extends MessageType<ReforgeStat> {\n    constructor() {\n        super(\"proto.ReforgeStat\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"fromStat\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Stat\", Stat] },\n            { no: 3, name: \"toStat\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Stat\", Stat] },\n            { no: 4, name: \"multiplier\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ReforgeStat>): ReforgeStat {\n        const message = { id: 0, fromStat: [], toStat: [], multiplier: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ReforgeStat>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReforgeStat): ReforgeStat {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* repeated proto.Stat fromStat */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.fromStat.push(reader.int32());\n                    else\n                        message.fromStat.push(reader.int32());\n                    break;\n                case /* repeated proto.Stat toStat */ 3:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.toStat.push(reader.int32());\n                    else\n                        message.toStat.push(reader.int32());\n                    break;\n                case /* double multiplier */ 4:\n                    message.multiplier = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ReforgeStat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* repeated proto.Stat fromStat = 2; */\n        if (message.fromStat.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.fromStat.length; i++)\n                writer.int32(message.fromStat[i]);\n            writer.join();\n        }\n        /* repeated proto.Stat toStat = 3; */\n        if (message.toStat.length) {\n            writer.tag(3, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.toStat.length; i++)\n                writer.int32(message.toStat[i]);\n            writer.join();\n        }\n        /* double multiplier = 4; */\n        if (message.multiplier !== 0)\n            writer.tag(4, WireType.Bit64).double(message.multiplier);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ReforgeStat\n */\nexport const ReforgeStat = new ReforgeStat$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidBuffs$Type extends MessageType<RaidBuffs> {\n    constructor() {\n        super(\"proto.RaidBuffs\", [\n            { no: 1, name: \"mark_of_the_wild\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"blessing_of_kings\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"drums_of_the_burning_wild\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"elemental_resistance_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"resistance_aura\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"shadow_protection\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"aspect_of_the_wild\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"power_word_fortitude\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"commanding_shout\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"blood_pact\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"battle_shout\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"horn_of_winter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"strength_of_earth_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"trueshot_aura\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"unleashed_rage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"abominations_might\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"blessing_of_might\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"windfury_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"icy_talons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"hunting_party\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 21, name: \"arcane_brilliance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"fel_intelligence\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"mana_spring_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"demonic_pact\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"totemic_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"flametongue_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"moonkin_form\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 28, name: \"shadow_form\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"wrath_of_air_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"arcane_tactics\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 31, name: \"ferocious_inspiration\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 32, name: \"communion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"leader_of_the_pack\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"elemental_oath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"honor_among_thieves\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"rampage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"terrifying_roar\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 45, name: \"furious_howl\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 38, name: \"bloodlust\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"heroism\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 40, name: \"time_warp\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 41, name: \"mana_tide_totem_count\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"devotion_aura\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 43, name: \"stoneskin_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 44, name: \"retribution_aura\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RaidBuffs>): RaidBuffs {\n        const message = { markOfTheWild: false, blessingOfKings: false, drumsOfTheBurningWild: false, elementalResistanceTotem: false, resistanceAura: false, shadowProtection: false, aspectOfTheWild: false, powerWordFortitude: false, commandingShout: false, bloodPact: false, battleShout: false, hornOfWinter: false, strengthOfEarthTotem: false, trueshotAura: false, unleashedRage: false, abominationsMight: false, blessingOfMight: false, windfuryTotem: false, icyTalons: false, huntingParty: false, arcaneBrilliance: false, felIntelligence: false, manaSpringTotem: false, demonicPact: false, totemicWrath: false, flametongueTotem: false, moonkinForm: false, shadowForm: false, wrathOfAirTotem: false, arcaneTactics: false, ferociousInspiration: false, communion: false, leaderOfThePack: false, elementalOath: false, honorAmongThieves: false, rampage: false, terrifyingRoar: false, furiousHowl: false, bloodlust: false, heroism: false, timeWarp: false, manaTideTotemCount: 0, devotionAura: false, stoneskinTotem: false, retributionAura: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidBuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidBuffs): RaidBuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool mark_of_the_wild */ 1:\n                    message.markOfTheWild = reader.bool();\n                    break;\n                case /* bool blessing_of_kings */ 2:\n                    message.blessingOfKings = reader.bool();\n                    break;\n                case /* bool drums_of_the_burning_wild */ 3:\n                    message.drumsOfTheBurningWild = reader.bool();\n                    break;\n                case /* bool elemental_resistance_totem */ 4:\n                    message.elementalResistanceTotem = reader.bool();\n                    break;\n                case /* bool resistance_aura */ 5:\n                    message.resistanceAura = reader.bool();\n                    break;\n                case /* bool shadow_protection */ 6:\n                    message.shadowProtection = reader.bool();\n                    break;\n                case /* bool aspect_of_the_wild */ 7:\n                    message.aspectOfTheWild = reader.bool();\n                    break;\n                case /* bool power_word_fortitude */ 8:\n                    message.powerWordFortitude = reader.bool();\n                    break;\n                case /* bool commanding_shout */ 9:\n                    message.commandingShout = reader.bool();\n                    break;\n                case /* bool blood_pact */ 10:\n                    message.bloodPact = reader.bool();\n                    break;\n                case /* bool battle_shout */ 11:\n                    message.battleShout = reader.bool();\n                    break;\n                case /* bool horn_of_winter */ 12:\n                    message.hornOfWinter = reader.bool();\n                    break;\n                case /* bool strength_of_earth_totem */ 13:\n                    message.strengthOfEarthTotem = reader.bool();\n                    break;\n                case /* bool trueshot_aura */ 14:\n                    message.trueshotAura = reader.bool();\n                    break;\n                case /* bool unleashed_rage */ 15:\n                    message.unleashedRage = reader.bool();\n                    break;\n                case /* bool abominations_might */ 16:\n                    message.abominationsMight = reader.bool();\n                    break;\n                case /* bool blessing_of_might */ 17:\n                    message.blessingOfMight = reader.bool();\n                    break;\n                case /* bool windfury_totem */ 18:\n                    message.windfuryTotem = reader.bool();\n                    break;\n                case /* bool icy_talons */ 19:\n                    message.icyTalons = reader.bool();\n                    break;\n                case /* bool hunting_party */ 20:\n                    message.huntingParty = reader.bool();\n                    break;\n                case /* bool arcane_brilliance */ 21:\n                    message.arcaneBrilliance = reader.bool();\n                    break;\n                case /* bool fel_intelligence */ 22:\n                    message.felIntelligence = reader.bool();\n                    break;\n                case /* bool mana_spring_totem */ 23:\n                    message.manaSpringTotem = reader.bool();\n                    break;\n                case /* bool demonic_pact */ 24:\n                    message.demonicPact = reader.bool();\n                    break;\n                case /* bool totemic_wrath */ 25:\n                    message.totemicWrath = reader.bool();\n                    break;\n                case /* bool flametongue_totem */ 26:\n                    message.flametongueTotem = reader.bool();\n                    break;\n                case /* bool moonkin_form */ 27:\n                    message.moonkinForm = reader.bool();\n                    break;\n                case /* bool shadow_form */ 28:\n                    message.shadowForm = reader.bool();\n                    break;\n                case /* bool wrath_of_air_totem */ 29:\n                    message.wrathOfAirTotem = reader.bool();\n                    break;\n                case /* bool arcane_tactics */ 30:\n                    message.arcaneTactics = reader.bool();\n                    break;\n                case /* bool ferocious_inspiration */ 31:\n                    message.ferociousInspiration = reader.bool();\n                    break;\n                case /* bool communion */ 32:\n                    message.communion = reader.bool();\n                    break;\n                case /* bool leader_of_the_pack */ 33:\n                    message.leaderOfThePack = reader.bool();\n                    break;\n                case /* bool elemental_oath */ 34:\n                    message.elementalOath = reader.bool();\n                    break;\n                case /* bool honor_among_thieves */ 35:\n                    message.honorAmongThieves = reader.bool();\n                    break;\n                case /* bool rampage */ 36:\n                    message.rampage = reader.bool();\n                    break;\n                case /* bool terrifying_roar */ 37:\n                    message.terrifyingRoar = reader.bool();\n                    break;\n                case /* bool furious_howl */ 45:\n                    message.furiousHowl = reader.bool();\n                    break;\n                case /* bool bloodlust */ 38:\n                    message.bloodlust = reader.bool();\n                    break;\n                case /* bool heroism */ 39:\n                    message.heroism = reader.bool();\n                    break;\n                case /* bool time_warp */ 40:\n                    message.timeWarp = reader.bool();\n                    break;\n                case /* int32 mana_tide_totem_count */ 41:\n                    message.manaTideTotemCount = reader.int32();\n                    break;\n                case /* bool devotion_aura */ 42:\n                    message.devotionAura = reader.bool();\n                    break;\n                case /* bool stoneskin_totem */ 43:\n                    message.stoneskinTotem = reader.bool();\n                    break;\n                case /* bool retribution_aura */ 44:\n                    message.retributionAura = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidBuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool mark_of_the_wild = 1; */\n        if (message.markOfTheWild !== false)\n            writer.tag(1, WireType.Varint).bool(message.markOfTheWild);\n        /* bool blessing_of_kings = 2; */\n        if (message.blessingOfKings !== false)\n            writer.tag(2, WireType.Varint).bool(message.blessingOfKings);\n        /* bool drums_of_the_burning_wild = 3; */\n        if (message.drumsOfTheBurningWild !== false)\n            writer.tag(3, WireType.Varint).bool(message.drumsOfTheBurningWild);\n        /* bool elemental_resistance_totem = 4; */\n        if (message.elementalResistanceTotem !== false)\n            writer.tag(4, WireType.Varint).bool(message.elementalResistanceTotem);\n        /* bool resistance_aura = 5; */\n        if (message.resistanceAura !== false)\n            writer.tag(5, WireType.Varint).bool(message.resistanceAura);\n        /* bool shadow_protection = 6; */\n        if (message.shadowProtection !== false)\n            writer.tag(6, WireType.Varint).bool(message.shadowProtection);\n        /* bool aspect_of_the_wild = 7; */\n        if (message.aspectOfTheWild !== false)\n            writer.tag(7, WireType.Varint).bool(message.aspectOfTheWild);\n        /* bool power_word_fortitude = 8; */\n        if (message.powerWordFortitude !== false)\n            writer.tag(8, WireType.Varint).bool(message.powerWordFortitude);\n        /* bool commanding_shout = 9; */\n        if (message.commandingShout !== false)\n            writer.tag(9, WireType.Varint).bool(message.commandingShout);\n        /* bool blood_pact = 10; */\n        if (message.bloodPact !== false)\n            writer.tag(10, WireType.Varint).bool(message.bloodPact);\n        /* bool battle_shout = 11; */\n        if (message.battleShout !== false)\n            writer.tag(11, WireType.Varint).bool(message.battleShout);\n        /* bool horn_of_winter = 12; */\n        if (message.hornOfWinter !== false)\n            writer.tag(12, WireType.Varint).bool(message.hornOfWinter);\n        /* bool strength_of_earth_totem = 13; */\n        if (message.strengthOfEarthTotem !== false)\n            writer.tag(13, WireType.Varint).bool(message.strengthOfEarthTotem);\n        /* bool trueshot_aura = 14; */\n        if (message.trueshotAura !== false)\n            writer.tag(14, WireType.Varint).bool(message.trueshotAura);\n        /* bool unleashed_rage = 15; */\n        if (message.unleashedRage !== false)\n            writer.tag(15, WireType.Varint).bool(message.unleashedRage);\n        /* bool abominations_might = 16; */\n        if (message.abominationsMight !== false)\n            writer.tag(16, WireType.Varint).bool(message.abominationsMight);\n        /* bool blessing_of_might = 17; */\n        if (message.blessingOfMight !== false)\n            writer.tag(17, WireType.Varint).bool(message.blessingOfMight);\n        /* bool windfury_totem = 18; */\n        if (message.windfuryTotem !== false)\n            writer.tag(18, WireType.Varint).bool(message.windfuryTotem);\n        /* bool icy_talons = 19; */\n        if (message.icyTalons !== false)\n            writer.tag(19, WireType.Varint).bool(message.icyTalons);\n        /* bool hunting_party = 20; */\n        if (message.huntingParty !== false)\n            writer.tag(20, WireType.Varint).bool(message.huntingParty);\n        /* bool arcane_brilliance = 21; */\n        if (message.arcaneBrilliance !== false)\n            writer.tag(21, WireType.Varint).bool(message.arcaneBrilliance);\n        /* bool fel_intelligence = 22; */\n        if (message.felIntelligence !== false)\n            writer.tag(22, WireType.Varint).bool(message.felIntelligence);\n        /* bool mana_spring_totem = 23; */\n        if (message.manaSpringTotem !== false)\n            writer.tag(23, WireType.Varint).bool(message.manaSpringTotem);\n        /* bool demonic_pact = 24; */\n        if (message.demonicPact !== false)\n            writer.tag(24, WireType.Varint).bool(message.demonicPact);\n        /* bool totemic_wrath = 25; */\n        if (message.totemicWrath !== false)\n            writer.tag(25, WireType.Varint).bool(message.totemicWrath);\n        /* bool flametongue_totem = 26; */\n        if (message.flametongueTotem !== false)\n            writer.tag(26, WireType.Varint).bool(message.flametongueTotem);\n        /* bool moonkin_form = 27; */\n        if (message.moonkinForm !== false)\n            writer.tag(27, WireType.Varint).bool(message.moonkinForm);\n        /* bool shadow_form = 28; */\n        if (message.shadowForm !== false)\n            writer.tag(28, WireType.Varint).bool(message.shadowForm);\n        /* bool wrath_of_air_totem = 29; */\n        if (message.wrathOfAirTotem !== false)\n            writer.tag(29, WireType.Varint).bool(message.wrathOfAirTotem);\n        /* bool arcane_tactics = 30; */\n        if (message.arcaneTactics !== false)\n            writer.tag(30, WireType.Varint).bool(message.arcaneTactics);\n        /* bool ferocious_inspiration = 31; */\n        if (message.ferociousInspiration !== false)\n            writer.tag(31, WireType.Varint).bool(message.ferociousInspiration);\n        /* bool communion = 32; */\n        if (message.communion !== false)\n            writer.tag(32, WireType.Varint).bool(message.communion);\n        /* bool leader_of_the_pack = 33; */\n        if (message.leaderOfThePack !== false)\n            writer.tag(33, WireType.Varint).bool(message.leaderOfThePack);\n        /* bool elemental_oath = 34; */\n        if (message.elementalOath !== false)\n            writer.tag(34, WireType.Varint).bool(message.elementalOath);\n        /* bool honor_among_thieves = 35; */\n        if (message.honorAmongThieves !== false)\n            writer.tag(35, WireType.Varint).bool(message.honorAmongThieves);\n        /* bool rampage = 36; */\n        if (message.rampage !== false)\n            writer.tag(36, WireType.Varint).bool(message.rampage);\n        /* bool terrifying_roar = 37; */\n        if (message.terrifyingRoar !== false)\n            writer.tag(37, WireType.Varint).bool(message.terrifyingRoar);\n        /* bool furious_howl = 45; */\n        if (message.furiousHowl !== false)\n            writer.tag(45, WireType.Varint).bool(message.furiousHowl);\n        /* bool bloodlust = 38; */\n        if (message.bloodlust !== false)\n            writer.tag(38, WireType.Varint).bool(message.bloodlust);\n        /* bool heroism = 39; */\n        if (message.heroism !== false)\n            writer.tag(39, WireType.Varint).bool(message.heroism);\n        /* bool time_warp = 40; */\n        if (message.timeWarp !== false)\n            writer.tag(40, WireType.Varint).bool(message.timeWarp);\n        /* int32 mana_tide_totem_count = 41; */\n        if (message.manaTideTotemCount !== 0)\n            writer.tag(41, WireType.Varint).int32(message.manaTideTotemCount);\n        /* bool devotion_aura = 42; */\n        if (message.devotionAura !== false)\n            writer.tag(42, WireType.Varint).bool(message.devotionAura);\n        /* bool stoneskin_totem = 43; */\n        if (message.stoneskinTotem !== false)\n            writer.tag(43, WireType.Varint).bool(message.stoneskinTotem);\n        /* bool retribution_aura = 44; */\n        if (message.retributionAura !== false)\n            writer.tag(44, WireType.Varint).bool(message.retributionAura);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidBuffs\n */\nexport const RaidBuffs = new RaidBuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PartyBuffs$Type extends MessageType<PartyBuffs> {\n    constructor() {\n        super(\"proto.PartyBuffs\", []);\n    }\n    create(value?: PartialMessage<PartyBuffs>): PartyBuffs {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PartyBuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PartyBuffs): PartyBuffs {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: PartyBuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PartyBuffs\n */\nexport const PartyBuffs = new PartyBuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IndividualBuffs$Type extends MessageType<IndividualBuffs> {\n    constructor() {\n        super(\"proto.IndividualBuffs\", [\n            { no: 10, name: \"innervate_count\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"hymn_of_hope_count\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"vampiric_touch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"enduring_winter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"soul_leach\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"revitalize\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 100, name: \"communion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"power_infusion_count\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"unholy_frenzy_count\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"tricks_of_the_trade_count\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"divine_guardian_count\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"pain_suppression_count\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"hand_of_sacrifice_count\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"guardian_spirit_count\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"focus_magic\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"dark_intent\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<IndividualBuffs>): IndividualBuffs {\n        const message = { innervateCount: 0, hymnOfHopeCount: 0, vampiricTouch: false, enduringWinter: false, soulLeach: false, revitalize: false, communion: false, powerInfusionCount: 0, unholyFrenzyCount: 0, tricksOfTheTradeCount: 0, divineGuardianCount: 0, painSuppressionCount: 0, handOfSacrificeCount: 0, guardianSpiritCount: 0, focusMagic: false, darkIntent: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<IndividualBuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndividualBuffs): IndividualBuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 innervate_count */ 10:\n                    message.innervateCount = reader.int32();\n                    break;\n                case /* int32 hymn_of_hope_count */ 7:\n                    message.hymnOfHopeCount = reader.int32();\n                    break;\n                case /* bool vampiric_touch */ 14:\n                    message.vampiricTouch = reader.bool();\n                    break;\n                case /* bool enduring_winter */ 18:\n                    message.enduringWinter = reader.bool();\n                    break;\n                case /* bool soul_leach */ 16:\n                    message.soulLeach = reader.bool();\n                    break;\n                case /* bool revitalize */ 17:\n                    message.revitalize = reader.bool();\n                    break;\n                case /* bool communion */ 100:\n                    message.communion = reader.bool();\n                    break;\n                case /* int32 power_infusion_count */ 11:\n                    message.powerInfusionCount = reader.int32();\n                    break;\n                case /* int32 unholy_frenzy_count */ 12:\n                    message.unholyFrenzyCount = reader.int32();\n                    break;\n                case /* int32 tricks_of_the_trade_count */ 19:\n                    message.tricksOfTheTradeCount = reader.int32();\n                    break;\n                case /* int32 divine_guardian_count */ 23:\n                    message.divineGuardianCount = reader.int32();\n                    break;\n                case /* int32 pain_suppression_count */ 24:\n                    message.painSuppressionCount = reader.int32();\n                    break;\n                case /* int32 hand_of_sacrifice_count */ 25:\n                    message.handOfSacrificeCount = reader.int32();\n                    break;\n                case /* int32 guardian_spirit_count */ 26:\n                    message.guardianSpiritCount = reader.int32();\n                    break;\n                case /* bool focus_magic */ 22:\n                    message.focusMagic = reader.bool();\n                    break;\n                case /* bool dark_intent */ 27:\n                    message.darkIntent = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: IndividualBuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 innervate_count = 10; */\n        if (message.innervateCount !== 0)\n            writer.tag(10, WireType.Varint).int32(message.innervateCount);\n        /* int32 hymn_of_hope_count = 7; */\n        if (message.hymnOfHopeCount !== 0)\n            writer.tag(7, WireType.Varint).int32(message.hymnOfHopeCount);\n        /* bool vampiric_touch = 14; */\n        if (message.vampiricTouch !== false)\n            writer.tag(14, WireType.Varint).bool(message.vampiricTouch);\n        /* bool enduring_winter = 18; */\n        if (message.enduringWinter !== false)\n            writer.tag(18, WireType.Varint).bool(message.enduringWinter);\n        /* bool soul_leach = 16; */\n        if (message.soulLeach !== false)\n            writer.tag(16, WireType.Varint).bool(message.soulLeach);\n        /* bool revitalize = 17; */\n        if (message.revitalize !== false)\n            writer.tag(17, WireType.Varint).bool(message.revitalize);\n        /* bool communion = 100; */\n        if (message.communion !== false)\n            writer.tag(100, WireType.Varint).bool(message.communion);\n        /* int32 power_infusion_count = 11; */\n        if (message.powerInfusionCount !== 0)\n            writer.tag(11, WireType.Varint).int32(message.powerInfusionCount);\n        /* int32 unholy_frenzy_count = 12; */\n        if (message.unholyFrenzyCount !== 0)\n            writer.tag(12, WireType.Varint).int32(message.unholyFrenzyCount);\n        /* int32 tricks_of_the_trade_count = 19; */\n        if (message.tricksOfTheTradeCount !== 0)\n            writer.tag(19, WireType.Varint).int32(message.tricksOfTheTradeCount);\n        /* int32 divine_guardian_count = 23; */\n        if (message.divineGuardianCount !== 0)\n            writer.tag(23, WireType.Varint).int32(message.divineGuardianCount);\n        /* int32 pain_suppression_count = 24; */\n        if (message.painSuppressionCount !== 0)\n            writer.tag(24, WireType.Varint).int32(message.painSuppressionCount);\n        /* int32 hand_of_sacrifice_count = 25; */\n        if (message.handOfSacrificeCount !== 0)\n            writer.tag(25, WireType.Varint).int32(message.handOfSacrificeCount);\n        /* int32 guardian_spirit_count = 26; */\n        if (message.guardianSpiritCount !== 0)\n            writer.tag(26, WireType.Varint).int32(message.guardianSpiritCount);\n        /* bool focus_magic = 22; */\n        if (message.focusMagic !== false)\n            writer.tag(22, WireType.Varint).bool(message.focusMagic);\n        /* bool dark_intent = 27; */\n        if (message.darkIntent !== false)\n            writer.tag(27, WireType.Varint).bool(message.darkIntent);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.IndividualBuffs\n */\nexport const IndividualBuffs = new IndividualBuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Debuffs$Type extends MessageType<Debuffs> {\n    constructor() {\n        super(\"proto.Debuffs\", [\n            { no: 1, name: \"curse_of_elements\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"ebon_plaguebringer\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"earth_and_moon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"master_poisoner\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"fire_breath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"lightning_breath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"critical_mass\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"shadow_and_flame\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"blood_frenzy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"hemorrhage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"mangle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"stampede\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"expose_armor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"sunder_armor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"faerie_fire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"corrosive_spit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"savage_combat\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"brittle_bones\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"acid_spit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"curse_of_weakness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 21, name: \"demoralizing_roar\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"demoralizing_shout\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"vindication\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"scarlet_fever\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"demoralizing_screech\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"thunder_clap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"frost_fever\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 28, name: \"infected_wounds\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"judgements_of_the_just\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"dust_cloud\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 31, name: \"earth_shock\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 32, name: \"judgement\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Debuffs>): Debuffs {\n        const message = { curseOfElements: false, ebonPlaguebringer: false, earthAndMoon: false, masterPoisoner: false, fireBreath: false, lightningBreath: false, criticalMass: false, shadowAndFlame: false, bloodFrenzy: false, hemorrhage: false, mangle: false, stampede: false, exposeArmor: false, sunderArmor: false, faerieFire: false, corrosiveSpit: false, savageCombat: false, brittleBones: false, acidSpit: false, curseOfWeakness: false, demoralizingRoar: false, demoralizingShout: false, vindication: false, scarletFever: false, demoralizingScreech: false, thunderClap: false, frostFever: false, infectedWounds: false, judgementsOfTheJust: false, dustCloud: false, earthShock: false, judgement: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Debuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Debuffs): Debuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool curse_of_elements */ 1:\n                    message.curseOfElements = reader.bool();\n                    break;\n                case /* bool ebon_plaguebringer */ 2:\n                    message.ebonPlaguebringer = reader.bool();\n                    break;\n                case /* bool earth_and_moon */ 3:\n                    message.earthAndMoon = reader.bool();\n                    break;\n                case /* bool master_poisoner */ 4:\n                    message.masterPoisoner = reader.bool();\n                    break;\n                case /* bool fire_breath */ 5:\n                    message.fireBreath = reader.bool();\n                    break;\n                case /* bool lightning_breath */ 6:\n                    message.lightningBreath = reader.bool();\n                    break;\n                case /* bool critical_mass */ 7:\n                    message.criticalMass = reader.bool();\n                    break;\n                case /* bool shadow_and_flame */ 8:\n                    message.shadowAndFlame = reader.bool();\n                    break;\n                case /* bool blood_frenzy */ 9:\n                    message.bloodFrenzy = reader.bool();\n                    break;\n                case /* bool hemorrhage */ 10:\n                    message.hemorrhage = reader.bool();\n                    break;\n                case /* bool mangle */ 11:\n                    message.mangle = reader.bool();\n                    break;\n                case /* bool stampede */ 12:\n                    message.stampede = reader.bool();\n                    break;\n                case /* bool expose_armor */ 13:\n                    message.exposeArmor = reader.bool();\n                    break;\n                case /* bool sunder_armor */ 14:\n                    message.sunderArmor = reader.bool();\n                    break;\n                case /* bool faerie_fire */ 15:\n                    message.faerieFire = reader.bool();\n                    break;\n                case /* bool corrosive_spit */ 16:\n                    message.corrosiveSpit = reader.bool();\n                    break;\n                case /* bool savage_combat */ 17:\n                    message.savageCombat = reader.bool();\n                    break;\n                case /* bool brittle_bones */ 18:\n                    message.brittleBones = reader.bool();\n                    break;\n                case /* bool acid_spit */ 19:\n                    message.acidSpit = reader.bool();\n                    break;\n                case /* bool curse_of_weakness */ 20:\n                    message.curseOfWeakness = reader.bool();\n                    break;\n                case /* bool demoralizing_roar */ 21:\n                    message.demoralizingRoar = reader.bool();\n                    break;\n                case /* bool demoralizing_shout */ 22:\n                    message.demoralizingShout = reader.bool();\n                    break;\n                case /* bool vindication */ 23:\n                    message.vindication = reader.bool();\n                    break;\n                case /* bool scarlet_fever */ 24:\n                    message.scarletFever = reader.bool();\n                    break;\n                case /* bool demoralizing_screech */ 25:\n                    message.demoralizingScreech = reader.bool();\n                    break;\n                case /* bool thunder_clap */ 26:\n                    message.thunderClap = reader.bool();\n                    break;\n                case /* bool frost_fever */ 27:\n                    message.frostFever = reader.bool();\n                    break;\n                case /* bool infected_wounds */ 28:\n                    message.infectedWounds = reader.bool();\n                    break;\n                case /* bool judgements_of_the_just */ 29:\n                    message.judgementsOfTheJust = reader.bool();\n                    break;\n                case /* bool dust_cloud */ 30:\n                    message.dustCloud = reader.bool();\n                    break;\n                case /* bool earth_shock */ 31:\n                    message.earthShock = reader.bool();\n                    break;\n                case /* bool judgement */ 32:\n                    message.judgement = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Debuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool curse_of_elements = 1; */\n        if (message.curseOfElements !== false)\n            writer.tag(1, WireType.Varint).bool(message.curseOfElements);\n        /* bool ebon_plaguebringer = 2; */\n        if (message.ebonPlaguebringer !== false)\n            writer.tag(2, WireType.Varint).bool(message.ebonPlaguebringer);\n        /* bool earth_and_moon = 3; */\n        if (message.earthAndMoon !== false)\n            writer.tag(3, WireType.Varint).bool(message.earthAndMoon);\n        /* bool master_poisoner = 4; */\n        if (message.masterPoisoner !== false)\n            writer.tag(4, WireType.Varint).bool(message.masterPoisoner);\n        /* bool fire_breath = 5; */\n        if (message.fireBreath !== false)\n            writer.tag(5, WireType.Varint).bool(message.fireBreath);\n        /* bool lightning_breath = 6; */\n        if (message.lightningBreath !== false)\n            writer.tag(6, WireType.Varint).bool(message.lightningBreath);\n        /* bool critical_mass = 7; */\n        if (message.criticalMass !== false)\n            writer.tag(7, WireType.Varint).bool(message.criticalMass);\n        /* bool shadow_and_flame = 8; */\n        if (message.shadowAndFlame !== false)\n            writer.tag(8, WireType.Varint).bool(message.shadowAndFlame);\n        /* bool blood_frenzy = 9; */\n        if (message.bloodFrenzy !== false)\n            writer.tag(9, WireType.Varint).bool(message.bloodFrenzy);\n        /* bool hemorrhage = 10; */\n        if (message.hemorrhage !== false)\n            writer.tag(10, WireType.Varint).bool(message.hemorrhage);\n        /* bool mangle = 11; */\n        if (message.mangle !== false)\n            writer.tag(11, WireType.Varint).bool(message.mangle);\n        /* bool stampede = 12; */\n        if (message.stampede !== false)\n            writer.tag(12, WireType.Varint).bool(message.stampede);\n        /* bool expose_armor = 13; */\n        if (message.exposeArmor !== false)\n            writer.tag(13, WireType.Varint).bool(message.exposeArmor);\n        /* bool sunder_armor = 14; */\n        if (message.sunderArmor !== false)\n            writer.tag(14, WireType.Varint).bool(message.sunderArmor);\n        /* bool faerie_fire = 15; */\n        if (message.faerieFire !== false)\n            writer.tag(15, WireType.Varint).bool(message.faerieFire);\n        /* bool corrosive_spit = 16; */\n        if (message.corrosiveSpit !== false)\n            writer.tag(16, WireType.Varint).bool(message.corrosiveSpit);\n        /* bool savage_combat = 17; */\n        if (message.savageCombat !== false)\n            writer.tag(17, WireType.Varint).bool(message.savageCombat);\n        /* bool brittle_bones = 18; */\n        if (message.brittleBones !== false)\n            writer.tag(18, WireType.Varint).bool(message.brittleBones);\n        /* bool acid_spit = 19; */\n        if (message.acidSpit !== false)\n            writer.tag(19, WireType.Varint).bool(message.acidSpit);\n        /* bool curse_of_weakness = 20; */\n        if (message.curseOfWeakness !== false)\n            writer.tag(20, WireType.Varint).bool(message.curseOfWeakness);\n        /* bool demoralizing_roar = 21; */\n        if (message.demoralizingRoar !== false)\n            writer.tag(21, WireType.Varint).bool(message.demoralizingRoar);\n        /* bool demoralizing_shout = 22; */\n        if (message.demoralizingShout !== false)\n            writer.tag(22, WireType.Varint).bool(message.demoralizingShout);\n        /* bool vindication = 23; */\n        if (message.vindication !== false)\n            writer.tag(23, WireType.Varint).bool(message.vindication);\n        /* bool scarlet_fever = 24; */\n        if (message.scarletFever !== false)\n            writer.tag(24, WireType.Varint).bool(message.scarletFever);\n        /* bool demoralizing_screech = 25; */\n        if (message.demoralizingScreech !== false)\n            writer.tag(25, WireType.Varint).bool(message.demoralizingScreech);\n        /* bool thunder_clap = 26; */\n        if (message.thunderClap !== false)\n            writer.tag(26, WireType.Varint).bool(message.thunderClap);\n        /* bool frost_fever = 27; */\n        if (message.frostFever !== false)\n            writer.tag(27, WireType.Varint).bool(message.frostFever);\n        /* bool infected_wounds = 28; */\n        if (message.infectedWounds !== false)\n            writer.tag(28, WireType.Varint).bool(message.infectedWounds);\n        /* bool judgements_of_the_just = 29; */\n        if (message.judgementsOfTheJust !== false)\n            writer.tag(29, WireType.Varint).bool(message.judgementsOfTheJust);\n        /* bool dust_cloud = 30; */\n        if (message.dustCloud !== false)\n            writer.tag(30, WireType.Varint).bool(message.dustCloud);\n        /* bool earth_shock = 31; */\n        if (message.earthShock !== false)\n            writer.tag(31, WireType.Varint).bool(message.earthShock);\n        /* bool judgement = 32; */\n        if (message.judgement !== false)\n            writer.tag(32, WireType.Varint).bool(message.judgement);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Debuffs\n */\nexport const Debuffs = new Debuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Consumes$Type extends MessageType<Consumes> {\n    constructor() {\n        super(\"proto.Consumes\", [\n            { no: 1, name: \"flask\", kind: \"enum\", T: () => [\"proto.Flask\", Flask] },\n            { no: 2, name: \"battle_elixir\", kind: \"enum\", T: () => [\"proto.BattleElixir\", BattleElixir] },\n            { no: 3, name: \"guardian_elixir\", kind: \"enum\", T: () => [\"proto.GuardianElixir\", GuardianElixir] },\n            { no: 6, name: \"food\", kind: \"enum\", T: () => [\"proto.Food\", Food] },\n            { no: 8, name: \"pet_scroll_of_agility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"pet_scroll_of_strength\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"default_potion\", kind: \"enum\", T: () => [\"proto.Potions\", Potions] },\n            { no: 11, name: \"prepop_potion\", kind: \"enum\", T: () => [\"proto.Potions\", Potions] },\n            { no: 12, name: \"default_conjured\", kind: \"enum\", T: () => [\"proto.Conjured\", Conjured] },\n            { no: 15, name: \"explosive_big_daddy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"highpowered_bolt_gun\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"tinker_hands\", kind: \"enum\", T: () => [\"proto.TinkerHands\", TinkerHands] }\n        ]);\n    }\n    create(value?: PartialMessage<Consumes>): Consumes {\n        const message = { flask: 0, battleElixir: 0, guardianElixir: 0, food: 0, petScrollOfAgility: 0, petScrollOfStrength: 0, defaultPotion: 0, prepopPotion: 0, defaultConjured: 0, explosiveBigDaddy: false, highpoweredBoltGun: false, tinkerHands: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Consumes>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Consumes): Consumes {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Flask flask */ 1:\n                    message.flask = reader.int32();\n                    break;\n                case /* proto.BattleElixir battle_elixir */ 2:\n                    message.battleElixir = reader.int32();\n                    break;\n                case /* proto.GuardianElixir guardian_elixir */ 3:\n                    message.guardianElixir = reader.int32();\n                    break;\n                case /* proto.Food food */ 6:\n                    message.food = reader.int32();\n                    break;\n                case /* int32 pet_scroll_of_agility */ 8:\n                    message.petScrollOfAgility = reader.int32();\n                    break;\n                case /* int32 pet_scroll_of_strength */ 9:\n                    message.petScrollOfStrength = reader.int32();\n                    break;\n                case /* proto.Potions default_potion */ 10:\n                    message.defaultPotion = reader.int32();\n                    break;\n                case /* proto.Potions prepop_potion */ 11:\n                    message.prepopPotion = reader.int32();\n                    break;\n                case /* proto.Conjured default_conjured */ 12:\n                    message.defaultConjured = reader.int32();\n                    break;\n                case /* bool explosive_big_daddy */ 15:\n                    message.explosiveBigDaddy = reader.bool();\n                    break;\n                case /* bool highpowered_bolt_gun */ 16:\n                    message.highpoweredBoltGun = reader.bool();\n                    break;\n                case /* proto.TinkerHands tinker_hands */ 18:\n                    message.tinkerHands = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Consumes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Flask flask = 1; */\n        if (message.flask !== 0)\n            writer.tag(1, WireType.Varint).int32(message.flask);\n        /* proto.BattleElixir battle_elixir = 2; */\n        if (message.battleElixir !== 0)\n            writer.tag(2, WireType.Varint).int32(message.battleElixir);\n        /* proto.GuardianElixir guardian_elixir = 3; */\n        if (message.guardianElixir !== 0)\n            writer.tag(3, WireType.Varint).int32(message.guardianElixir);\n        /* proto.Food food = 6; */\n        if (message.food !== 0)\n            writer.tag(6, WireType.Varint).int32(message.food);\n        /* int32 pet_scroll_of_agility = 8; */\n        if (message.petScrollOfAgility !== 0)\n            writer.tag(8, WireType.Varint).int32(message.petScrollOfAgility);\n        /* int32 pet_scroll_of_strength = 9; */\n        if (message.petScrollOfStrength !== 0)\n            writer.tag(9, WireType.Varint).int32(message.petScrollOfStrength);\n        /* proto.Potions default_potion = 10; */\n        if (message.defaultPotion !== 0)\n            writer.tag(10, WireType.Varint).int32(message.defaultPotion);\n        /* proto.Potions prepop_potion = 11; */\n        if (message.prepopPotion !== 0)\n            writer.tag(11, WireType.Varint).int32(message.prepopPotion);\n        /* proto.Conjured default_conjured = 12; */\n        if (message.defaultConjured !== 0)\n            writer.tag(12, WireType.Varint).int32(message.defaultConjured);\n        /* bool explosive_big_daddy = 15; */\n        if (message.explosiveBigDaddy !== false)\n            writer.tag(15, WireType.Varint).bool(message.explosiveBigDaddy);\n        /* bool highpowered_bolt_gun = 16; */\n        if (message.highpoweredBoltGun !== false)\n            writer.tag(16, WireType.Varint).bool(message.highpoweredBoltGun);\n        /* proto.TinkerHands tinker_hands = 18; */\n        if (message.tinkerHands !== 0)\n            writer.tag(18, WireType.Varint).int32(message.tinkerHands);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Consumes\n */\nexport const Consumes = new Consumes$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TargetInput$Type extends MessageType<TargetInput> {\n    constructor() {\n        super(\"proto.TargetInput\", [\n            { no: 1, name: \"input_type\", kind: \"enum\", T: () => [\"proto.InputType\", InputType] },\n            { no: 2, name: \"label\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 5, name: \"tooltip\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"bool_value\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"number_value\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"enum_value\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"enum_options\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<TargetInput>): TargetInput {\n        const message = { inputType: 0, label: \"\", tooltip: \"\", boolValue: false, numberValue: 0, enumValue: 0, enumOptions: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TargetInput>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TargetInput): TargetInput {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.InputType input_type */ 1:\n                    message.inputType = reader.int32();\n                    break;\n                case /* string label */ 2:\n                    message.label = reader.string();\n                    break;\n                case /* string tooltip */ 5:\n                    message.tooltip = reader.string();\n                    break;\n                case /* bool bool_value */ 3:\n                    message.boolValue = reader.bool();\n                    break;\n                case /* double number_value */ 4:\n                    message.numberValue = reader.double();\n                    break;\n                case /* int32 enum_value */ 6:\n                    message.enumValue = reader.int32();\n                    break;\n                case /* repeated string enum_options */ 7:\n                    message.enumOptions.push(reader.string());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TargetInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.InputType input_type = 1; */\n        if (message.inputType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.inputType);\n        /* string label = 2; */\n        if (message.label !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.label);\n        /* string tooltip = 5; */\n        if (message.tooltip !== \"\")\n            writer.tag(5, WireType.LengthDelimited).string(message.tooltip);\n        /* bool bool_value = 3; */\n        if (message.boolValue !== false)\n            writer.tag(3, WireType.Varint).bool(message.boolValue);\n        /* double number_value = 4; */\n        if (message.numberValue !== 0)\n            writer.tag(4, WireType.Bit64).double(message.numberValue);\n        /* int32 enum_value = 6; */\n        if (message.enumValue !== 0)\n            writer.tag(6, WireType.Varint).int32(message.enumValue);\n        /* repeated string enum_options = 7; */\n        for (let i = 0; i < message.enumOptions.length; i++)\n            writer.tag(7, WireType.LengthDelimited).string(message.enumOptions[i]);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TargetInput\n */\nexport const TargetInput = new TargetInput$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Target$Type extends MessageType<Target> {\n    constructor() {\n        super(\"proto.Target\", [\n            { no: 14, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"level\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"mob_type\", kind: \"enum\", T: () => [\"proto.MobType\", MobType] },\n            { no: 5, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"min_base_damage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 19, name: \"damage_spread\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 8, name: \"swing_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"dual_wield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"dual_wield_penalty\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"parry_haste\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"suppress_dodge\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"spell_school\", kind: \"enum\", T: () => [\"proto.SpellSchool\", SpellSchool] },\n            { no: 6, name: \"tank_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"target_inputs\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => TargetInput }\n        ]);\n    }\n    create(value?: PartialMessage<Target>): Target {\n        const message = { id: 0, name: \"\", level: 0, mobType: 0, stats: [], minBaseDamage: 0, damageSpread: 0, swingSpeed: 0, dualWield: false, dualWieldPenalty: false, parryHaste: false, suppressDodge: false, spellSchool: 0, tankIndex: 0, targetInputs: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Target>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Target): Target {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 14:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 15:\n                    message.name = reader.string();\n                    break;\n                case /* int32 level */ 4:\n                    message.level = reader.int32();\n                    break;\n                case /* proto.MobType mob_type */ 3:\n                    message.mobType = reader.int32();\n                    break;\n                case /* repeated double stats */ 5:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* double min_base_damage */ 7:\n                    message.minBaseDamage = reader.double();\n                    break;\n                case /* double damage_spread */ 19:\n                    message.damageSpread = reader.double();\n                    break;\n                case /* double swing_speed */ 8:\n                    message.swingSpeed = reader.double();\n                    break;\n                case /* bool dual_wield */ 9:\n                    message.dualWield = reader.bool();\n                    break;\n                case /* bool dual_wield_penalty */ 10:\n                    message.dualWieldPenalty = reader.bool();\n                    break;\n                case /* bool parry_haste */ 12:\n                    message.parryHaste = reader.bool();\n                    break;\n                case /* bool suppress_dodge */ 16:\n                    message.suppressDodge = reader.bool();\n                    break;\n                case /* proto.SpellSchool spell_school */ 13:\n                    message.spellSchool = reader.int32();\n                    break;\n                case /* int32 tank_index */ 6:\n                    message.tankIndex = reader.int32();\n                    break;\n                case /* repeated proto.TargetInput target_inputs */ 18:\n                    message.targetInputs.push(TargetInput.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Target, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 14; */\n        if (message.id !== 0)\n            writer.tag(14, WireType.Varint).int32(message.id);\n        /* string name = 15; */\n        if (message.name !== \"\")\n            writer.tag(15, WireType.LengthDelimited).string(message.name);\n        /* int32 level = 4; */\n        if (message.level !== 0)\n            writer.tag(4, WireType.Varint).int32(message.level);\n        /* proto.MobType mob_type = 3; */\n        if (message.mobType !== 0)\n            writer.tag(3, WireType.Varint).int32(message.mobType);\n        /* repeated double stats = 5; */\n        if (message.stats.length) {\n            writer.tag(5, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* double min_base_damage = 7; */\n        if (message.minBaseDamage !== 0)\n            writer.tag(7, WireType.Bit64).double(message.minBaseDamage);\n        /* double damage_spread = 19; */\n        if (message.damageSpread !== 0)\n            writer.tag(19, WireType.Bit64).double(message.damageSpread);\n        /* double swing_speed = 8; */\n        if (message.swingSpeed !== 0)\n            writer.tag(8, WireType.Bit64).double(message.swingSpeed);\n        /* bool dual_wield = 9; */\n        if (message.dualWield !== false)\n            writer.tag(9, WireType.Varint).bool(message.dualWield);\n        /* bool dual_wield_penalty = 10; */\n        if (message.dualWieldPenalty !== false)\n            writer.tag(10, WireType.Varint).bool(message.dualWieldPenalty);\n        /* bool parry_haste = 12; */\n        if (message.parryHaste !== false)\n            writer.tag(12, WireType.Varint).bool(message.parryHaste);\n        /* bool suppress_dodge = 16; */\n        if (message.suppressDodge !== false)\n            writer.tag(16, WireType.Varint).bool(message.suppressDodge);\n        /* proto.SpellSchool spell_school = 13; */\n        if (message.spellSchool !== 0)\n            writer.tag(13, WireType.Varint).int32(message.spellSchool);\n        /* int32 tank_index = 6; */\n        if (message.tankIndex !== 0)\n            writer.tag(6, WireType.Varint).int32(message.tankIndex);\n        /* repeated proto.TargetInput target_inputs = 18; */\n        for (let i = 0; i < message.targetInputs.length; i++)\n            TargetInput.internalBinaryWrite(message.targetInputs[i], writer.tag(18, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Target\n */\nexport const Target = new Target$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Encounter$Type extends MessageType<Encounter> {\n    constructor() {\n        super(\"proto.Encounter\", [\n            { no: 1, name: \"duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"duration_variation\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"execute_proportion_20\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"execute_proportion_25\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"execute_proportion_35\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 8, name: \"execute_proportion_90\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"use_health\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Target }\n        ]);\n    }\n    create(value?: PartialMessage<Encounter>): Encounter {\n        const message = { duration: 0, durationVariation: 0, executeProportion20: 0, executeProportion25: 0, executeProportion35: 0, executeProportion90: 0, useHealth: false, targets: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Encounter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Encounter): Encounter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double duration */ 1:\n                    message.duration = reader.double();\n                    break;\n                case /* double duration_variation */ 2:\n                    message.durationVariation = reader.double();\n                    break;\n                case /* double execute_proportion_20 */ 3:\n                    message.executeProportion20 = reader.double();\n                    break;\n                case /* double execute_proportion_25 */ 7:\n                    message.executeProportion25 = reader.double();\n                    break;\n                case /* double execute_proportion_35 */ 4:\n                    message.executeProportion35 = reader.double();\n                    break;\n                case /* double execute_proportion_90 */ 8:\n                    message.executeProportion90 = reader.double();\n                    break;\n                case /* bool use_health */ 5:\n                    message.useHealth = reader.bool();\n                    break;\n                case /* repeated proto.Target targets */ 6:\n                    message.targets.push(Target.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Encounter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double duration = 1; */\n        if (message.duration !== 0)\n            writer.tag(1, WireType.Bit64).double(message.duration);\n        /* double duration_variation = 2; */\n        if (message.durationVariation !== 0)\n            writer.tag(2, WireType.Bit64).double(message.durationVariation);\n        /* double execute_proportion_20 = 3; */\n        if (message.executeProportion20 !== 0)\n            writer.tag(3, WireType.Bit64).double(message.executeProportion20);\n        /* double execute_proportion_25 = 7; */\n        if (message.executeProportion25 !== 0)\n            writer.tag(7, WireType.Bit64).double(message.executeProportion25);\n        /* double execute_proportion_35 = 4; */\n        if (message.executeProportion35 !== 0)\n            writer.tag(4, WireType.Bit64).double(message.executeProportion35);\n        /* double execute_proportion_90 = 8; */\n        if (message.executeProportion90 !== 0)\n            writer.tag(8, WireType.Bit64).double(message.executeProportion90);\n        /* bool use_health = 5; */\n        if (message.useHealth !== false)\n            writer.tag(5, WireType.Varint).bool(message.useHealth);\n        /* repeated proto.Target targets = 6; */\n        for (let i = 0; i < message.targets.length; i++)\n            Target.internalBinaryWrite(message.targets[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Encounter\n */\nexport const Encounter = new Encounter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PresetTarget$Type extends MessageType<PresetTarget> {\n    constructor() {\n        super(\"proto.PresetTarget\", [\n            { no: 1, name: \"path\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"target\", kind: \"message\", T: () => Target }\n        ]);\n    }\n    create(value?: PartialMessage<PresetTarget>): PresetTarget {\n        const message = { path: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PresetTarget>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PresetTarget): PresetTarget {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string path */ 1:\n                    message.path = reader.string();\n                    break;\n                case /* proto.Target target */ 2:\n                    message.target = Target.internalBinaryRead(reader, reader.uint32(), options, message.target);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PresetTarget, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string path = 1; */\n        if (message.path !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.path);\n        /* proto.Target target = 2; */\n        if (message.target)\n            Target.internalBinaryWrite(message.target, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PresetTarget\n */\nexport const PresetTarget = new PresetTarget$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PresetEncounter$Type extends MessageType<PresetEncounter> {\n    constructor() {\n        super(\"proto.PresetEncounter\", [\n            { no: 1, name: \"path\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PresetTarget }\n        ]);\n    }\n    create(value?: PartialMessage<PresetEncounter>): PresetEncounter {\n        const message = { path: \"\", targets: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PresetEncounter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PresetEncounter): PresetEncounter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string path */ 1:\n                    message.path = reader.string();\n                    break;\n                case /* repeated proto.PresetTarget targets */ 2:\n                    message.targets.push(PresetTarget.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PresetEncounter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string path = 1; */\n        if (message.path !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.path);\n        /* repeated proto.PresetTarget targets = 2; */\n        for (let i = 0; i < message.targets.length; i++)\n            PresetTarget.internalBinaryWrite(message.targets[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PresetEncounter\n */\nexport const PresetEncounter = new PresetEncounter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ItemRandomSuffix$Type extends MessageType<ItemRandomSuffix> {\n    constructor() {\n        super(\"proto.ItemRandomSuffix\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ItemRandomSuffix>): ItemRandomSuffix {\n        const message = { id: 0, name: \"\", stats: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ItemRandomSuffix>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemRandomSuffix): ItemRandomSuffix {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* repeated double stats */ 3:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ItemRandomSuffix, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* repeated double stats = 3; */\n        if (message.stats.length) {\n            writer.tag(3, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ItemRandomSuffix\n */\nexport const ItemRandomSuffix = new ItemRandomSuffix$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ItemSpec$Type extends MessageType<ItemSpec> {\n    constructor() {\n        super(\"proto.ItemSpec\", [\n            { no: 2, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"random_suffix\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"enchant\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"gems\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"reforging\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ItemSpec>): ItemSpec {\n        const message = { id: 0, randomSuffix: 0, enchant: 0, gems: [], reforging: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ItemSpec>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemSpec): ItemSpec {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 2:\n                    message.id = reader.int32();\n                    break;\n                case /* int32 random_suffix */ 6:\n                    message.randomSuffix = reader.int32();\n                    break;\n                case /* int32 enchant */ 3:\n                    message.enchant = reader.int32();\n                    break;\n                case /* repeated int32 gems */ 4:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.gems.push(reader.int32());\n                    else\n                        message.gems.push(reader.int32());\n                    break;\n                case /* int32 reforging */ 5:\n                    message.reforging = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ItemSpec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 2; */\n        if (message.id !== 0)\n            writer.tag(2, WireType.Varint).int32(message.id);\n        /* int32 random_suffix = 6; */\n        if (message.randomSuffix !== 0)\n            writer.tag(6, WireType.Varint).int32(message.randomSuffix);\n        /* int32 enchant = 3; */\n        if (message.enchant !== 0)\n            writer.tag(3, WireType.Varint).int32(message.enchant);\n        /* repeated int32 gems = 4; */\n        if (message.gems.length) {\n            writer.tag(4, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.gems.length; i++)\n                writer.int32(message.gems[i]);\n            writer.join();\n        }\n        /* int32 reforging = 5; */\n        if (message.reforging !== 0)\n            writer.tag(5, WireType.Varint).int32(message.reforging);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ItemSpec\n */\nexport const ItemSpec = new ItemSpec$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EquipmentSpec$Type extends MessageType<EquipmentSpec> {\n    constructor() {\n        super(\"proto.EquipmentSpec\", [\n            { no: 1, name: \"items\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemSpec }\n        ]);\n    }\n    create(value?: PartialMessage<EquipmentSpec>): EquipmentSpec {\n        const message = { items: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EquipmentSpec>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EquipmentSpec): EquipmentSpec {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.ItemSpec items */ 1:\n                    message.items.push(ItemSpec.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EquipmentSpec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.ItemSpec items = 1; */\n        for (let i = 0; i < message.items.length; i++)\n            ItemSpec.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EquipmentSpec\n */\nexport const EquipmentSpec = new EquipmentSpec$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimDatabase$Type extends MessageType<SimDatabase> {\n    constructor() {\n        super(\"proto.SimDatabase\", [\n            { no: 1, name: \"items\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => SimItem },\n            { no: 5, name: \"random_suffixes\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemRandomSuffix },\n            { no: 2, name: \"enchants\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => SimEnchant },\n            { no: 3, name: \"gems\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => SimGem },\n            { no: 6, name: \"reforge_stats\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ReforgeStat }\n        ]);\n    }\n    create(value?: PartialMessage<SimDatabase>): SimDatabase {\n        const message = { items: [], randomSuffixes: [], enchants: [], gems: [], reforgeStats: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimDatabase>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimDatabase): SimDatabase {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.SimItem items */ 1:\n                    message.items.push(SimItem.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.ItemRandomSuffix random_suffixes */ 5:\n                    message.randomSuffixes.push(ItemRandomSuffix.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.SimEnchant enchants */ 2:\n                    message.enchants.push(SimEnchant.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.SimGem gems */ 3:\n                    message.gems.push(SimGem.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.ReforgeStat reforge_stats */ 6:\n                    message.reforgeStats.push(ReforgeStat.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimDatabase, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.SimItem items = 1; */\n        for (let i = 0; i < message.items.length; i++)\n            SimItem.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.ItemRandomSuffix random_suffixes = 5; */\n        for (let i = 0; i < message.randomSuffixes.length; i++)\n            ItemRandomSuffix.internalBinaryWrite(message.randomSuffixes[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.SimEnchant enchants = 2; */\n        for (let i = 0; i < message.enchants.length; i++)\n            SimEnchant.internalBinaryWrite(message.enchants[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.SimGem gems = 3; */\n        for (let i = 0; i < message.gems.length; i++)\n            SimGem.internalBinaryWrite(message.gems[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.ReforgeStat reforge_stats = 6; */\n        for (let i = 0; i < message.reforgeStats.length; i++)\n            ReforgeStat.internalBinaryWrite(message.reforgeStats[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimDatabase\n */\nexport const SimDatabase = new SimDatabase$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimItem$Type extends MessageType<SimItem> {\n    constructor() {\n        super(\"proto.SimItem\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"type\", kind: \"enum\", T: () => [\"proto.ItemType\", ItemType] },\n            { no: 4, name: \"armor_type\", kind: \"enum\", T: () => [\"proto.ArmorType\", ArmorType] },\n            { no: 5, name: \"weapon_type\", kind: \"enum\", T: () => [\"proto.WeaponType\", WeaponType] },\n            { no: 6, name: \"hand_type\", kind: \"enum\", T: () => [\"proto.HandType\", HandType] },\n            { no: 7, name: \"ranged_weapon_type\", kind: \"enum\", T: () => [\"proto.RangedWeaponType\", RangedWeaponType] },\n            { no: 8, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"gem_sockets\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.GemColor\", GemColor] },\n            { no: 10, name: \"socketBonus\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 11, name: \"weapon_damage_min\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 12, name: \"weapon_damage_max\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 14, name: \"set_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 15, name: \"rand_prop_points\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SimItem>): SimItem {\n        const message = { id: 0, name: \"\", type: 0, armorType: 0, weaponType: 0, handType: 0, rangedWeaponType: 0, stats: [], gemSockets: [], socketBonus: [], weaponDamageMin: 0, weaponDamageMax: 0, weaponSpeed: 0, setName: \"\", randPropPoints: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimItem>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimItem): SimItem {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* proto.ItemType type */ 3:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.ArmorType armor_type */ 4:\n                    message.armorType = reader.int32();\n                    break;\n                case /* proto.WeaponType weapon_type */ 5:\n                    message.weaponType = reader.int32();\n                    break;\n                case /* proto.HandType hand_type */ 6:\n                    message.handType = reader.int32();\n                    break;\n                case /* proto.RangedWeaponType ranged_weapon_type */ 7:\n                    message.rangedWeaponType = reader.int32();\n                    break;\n                case /* repeated double stats */ 8:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* repeated proto.GemColor gem_sockets */ 9:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.gemSockets.push(reader.int32());\n                    else\n                        message.gemSockets.push(reader.int32());\n                    break;\n                case /* repeated double socketBonus */ 10:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.socketBonus.push(reader.double());\n                    else\n                        message.socketBonus.push(reader.double());\n                    break;\n                case /* double weapon_damage_min */ 11:\n                    message.weaponDamageMin = reader.double();\n                    break;\n                case /* double weapon_damage_max */ 12:\n                    message.weaponDamageMax = reader.double();\n                    break;\n                case /* double weapon_speed */ 13:\n                    message.weaponSpeed = reader.double();\n                    break;\n                case /* string set_name */ 14:\n                    message.setName = reader.string();\n                    break;\n                case /* int32 rand_prop_points */ 15:\n                    message.randPropPoints = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* proto.ItemType type = 3; */\n        if (message.type !== 0)\n            writer.tag(3, WireType.Varint).int32(message.type);\n        /* proto.ArmorType armor_type = 4; */\n        if (message.armorType !== 0)\n            writer.tag(4, WireType.Varint).int32(message.armorType);\n        /* proto.WeaponType weapon_type = 5; */\n        if (message.weaponType !== 0)\n            writer.tag(5, WireType.Varint).int32(message.weaponType);\n        /* proto.HandType hand_type = 6; */\n        if (message.handType !== 0)\n            writer.tag(6, WireType.Varint).int32(message.handType);\n        /* proto.RangedWeaponType ranged_weapon_type = 7; */\n        if (message.rangedWeaponType !== 0)\n            writer.tag(7, WireType.Varint).int32(message.rangedWeaponType);\n        /* repeated double stats = 8; */\n        if (message.stats.length) {\n            writer.tag(8, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* repeated proto.GemColor gem_sockets = 9; */\n        if (message.gemSockets.length) {\n            writer.tag(9, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.gemSockets.length; i++)\n                writer.int32(message.gemSockets[i]);\n            writer.join();\n        }\n        /* repeated double socketBonus = 10; */\n        if (message.socketBonus.length) {\n            writer.tag(10, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.socketBonus.length; i++)\n                writer.double(message.socketBonus[i]);\n            writer.join();\n        }\n        /* double weapon_damage_min = 11; */\n        if (message.weaponDamageMin !== 0)\n            writer.tag(11, WireType.Bit64).double(message.weaponDamageMin);\n        /* double weapon_damage_max = 12; */\n        if (message.weaponDamageMax !== 0)\n            writer.tag(12, WireType.Bit64).double(message.weaponDamageMax);\n        /* double weapon_speed = 13; */\n        if (message.weaponSpeed !== 0)\n            writer.tag(13, WireType.Bit64).double(message.weaponSpeed);\n        /* string set_name = 14; */\n        if (message.setName !== \"\")\n            writer.tag(14, WireType.LengthDelimited).string(message.setName);\n        /* int32 rand_prop_points = 15; */\n        if (message.randPropPoints !== 0)\n            writer.tag(15, WireType.Varint).int32(message.randPropPoints);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimItem\n */\nexport const SimItem = new SimItem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimEnchant$Type extends MessageType<SimEnchant> {\n    constructor() {\n        super(\"proto.SimEnchant\", [\n            { no: 1, name: \"effect_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SimEnchant>): SimEnchant {\n        const message = { effectId: 0, stats: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimEnchant>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimEnchant): SimEnchant {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 effect_id */ 1:\n                    message.effectId = reader.int32();\n                    break;\n                case /* repeated double stats */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimEnchant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 effect_id = 1; */\n        if (message.effectId !== 0)\n            writer.tag(1, WireType.Varint).int32(message.effectId);\n        /* repeated double stats = 2; */\n        if (message.stats.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimEnchant\n */\nexport const SimEnchant = new SimEnchant$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimGem$Type extends MessageType<SimGem> {\n    constructor() {\n        super(\"proto.SimGem\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"color\", kind: \"enum\", T: () => [\"proto.GemColor\", GemColor] },\n            { no: 4, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SimGem>): SimGem {\n        const message = { id: 0, name: \"\", color: 0, stats: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimGem>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimGem): SimGem {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* proto.GemColor color */ 3:\n                    message.color = reader.int32();\n                    break;\n                case /* repeated double stats */ 4:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimGem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* proto.GemColor color = 3; */\n        if (message.color !== 0)\n            writer.tag(3, WireType.Varint).int32(message.color);\n        /* repeated double stats = 4; */\n        if (message.stats.length) {\n            writer.tag(4, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimGem\n */\nexport const SimGem = new SimGem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UnitReference$Type extends MessageType<UnitReference> {\n    constructor() {\n        super(\"proto.UnitReference\", [\n            { no: 2, name: \"type\", kind: \"enum\", T: () => [\"proto.UnitReference.Type\", UnitReference_Type] },\n            { no: 3, name: \"index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"owner\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<UnitReference>): UnitReference {\n        const message = { type: 0, index: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UnitReference>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnitReference): UnitReference {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference.Type type */ 2:\n                    message.type = reader.int32();\n                    break;\n                case /* int32 index */ 3:\n                    message.index = reader.int32();\n                    break;\n                case /* proto.UnitReference owner */ 4:\n                    message.owner = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.owner);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UnitReference, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference.Type type = 2; */\n        if (message.type !== 0)\n            writer.tag(2, WireType.Varint).int32(message.type);\n        /* int32 index = 3; */\n        if (message.index !== 0)\n            writer.tag(3, WireType.Varint).int32(message.index);\n        /* proto.UnitReference owner = 4; */\n        if (message.owner)\n            UnitReference.internalBinaryWrite(message.owner, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UnitReference\n */\nexport const UnitReference = new UnitReference$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ActionID$Type extends MessageType<ActionID> {\n    constructor() {\n        super(\"proto.ActionID\", [\n            { no: 1, name: \"spell_id\", kind: \"scalar\", oneof: \"rawId\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"item_id\", kind: \"scalar\", oneof: \"rawId\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"other_id\", kind: \"enum\", oneof: \"rawId\", T: () => [\"proto.OtherAction\", OtherAction] },\n            { no: 4, name: \"tag\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ActionID>): ActionID {\n        const message = { rawId: { oneofKind: undefined }, tag: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ActionID>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionID): ActionID {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 spell_id */ 1:\n                    message.rawId = {\n                        oneofKind: \"spellId\",\n                        spellId: reader.int32()\n                    };\n                    break;\n                case /* int32 item_id */ 2:\n                    message.rawId = {\n                        oneofKind: \"itemId\",\n                        itemId: reader.int32()\n                    };\n                    break;\n                case /* proto.OtherAction other_id */ 3:\n                    message.rawId = {\n                        oneofKind: \"otherId\",\n                        otherId: reader.int32()\n                    };\n                    break;\n                case /* int32 tag */ 4:\n                    message.tag = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ActionID, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 spell_id = 1; */\n        if (message.rawId.oneofKind === \"spellId\")\n            writer.tag(1, WireType.Varint).int32(message.rawId.spellId);\n        /* int32 item_id = 2; */\n        if (message.rawId.oneofKind === \"itemId\")\n            writer.tag(2, WireType.Varint).int32(message.rawId.itemId);\n        /* proto.OtherAction other_id = 3; */\n        if (message.rawId.oneofKind === \"otherId\")\n            writer.tag(3, WireType.Varint).int32(message.rawId.otherId);\n        /* int32 tag = 4; */\n        if (message.tag !== 0)\n            writer.tag(4, WireType.Varint).int32(message.tag);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ActionID\n */\nexport const ActionID = new ActionID$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Glyphs$Type extends MessageType<Glyphs> {\n    constructor() {\n        super(\"proto.Glyphs\", [\n            { no: 1, name: \"prime1\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"prime2\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"prime3\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"major1\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"major2\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"major3\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"minor1\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"minor2\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"minor3\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Glyphs>): Glyphs {\n        const message = { prime1: 0, prime2: 0, prime3: 0, major1: 0, major2: 0, major3: 0, minor1: 0, minor2: 0, minor3: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Glyphs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Glyphs): Glyphs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 prime1 */ 1:\n                    message.prime1 = reader.int32();\n                    break;\n                case /* int32 prime2 */ 2:\n                    message.prime2 = reader.int32();\n                    break;\n                case /* int32 prime3 */ 3:\n                    message.prime3 = reader.int32();\n                    break;\n                case /* int32 major1 */ 4:\n                    message.major1 = reader.int32();\n                    break;\n                case /* int32 major2 */ 5:\n                    message.major2 = reader.int32();\n                    break;\n                case /* int32 major3 */ 6:\n                    message.major3 = reader.int32();\n                    break;\n                case /* int32 minor1 */ 7:\n                    message.minor1 = reader.int32();\n                    break;\n                case /* int32 minor2 */ 8:\n                    message.minor2 = reader.int32();\n                    break;\n                case /* int32 minor3 */ 9:\n                    message.minor3 = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Glyphs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 prime1 = 1; */\n        if (message.prime1 !== 0)\n            writer.tag(1, WireType.Varint).int32(message.prime1);\n        /* int32 prime2 = 2; */\n        if (message.prime2 !== 0)\n            writer.tag(2, WireType.Varint).int32(message.prime2);\n        /* int32 prime3 = 3; */\n        if (message.prime3 !== 0)\n            writer.tag(3, WireType.Varint).int32(message.prime3);\n        /* int32 major1 = 4; */\n        if (message.major1 !== 0)\n            writer.tag(4, WireType.Varint).int32(message.major1);\n        /* int32 major2 = 5; */\n        if (message.major2 !== 0)\n            writer.tag(5, WireType.Varint).int32(message.major2);\n        /* int32 major3 = 6; */\n        if (message.major3 !== 0)\n            writer.tag(6, WireType.Varint).int32(message.major3);\n        /* int32 minor1 = 7; */\n        if (message.minor1 !== 0)\n            writer.tag(7, WireType.Varint).int32(message.minor1);\n        /* int32 minor2 = 8; */\n        if (message.minor2 !== 0)\n            writer.tag(8, WireType.Varint).int32(message.minor2);\n        /* int32 minor3 = 9; */\n        if (message.minor3 !== 0)\n            writer.tag(9, WireType.Varint).int32(message.minor3);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Glyphs\n */\nexport const Glyphs = new Glyphs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Cooldown$Type extends MessageType<Cooldown> {\n    constructor() {\n        super(\"proto.Cooldown\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"timings\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Cooldown>): Cooldown {\n        const message = { timings: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Cooldown>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cooldown): Cooldown {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* repeated double timings */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.timings.push(reader.double());\n                    else\n                        message.timings.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Cooldown, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated double timings = 2; */\n        if (message.timings.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.timings.length; i++)\n                writer.double(message.timings[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Cooldown\n */\nexport const Cooldown = new Cooldown$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Cooldowns$Type extends MessageType<Cooldowns> {\n    constructor() {\n        super(\"proto.Cooldowns\", [\n            { no: 1, name: \"cooldowns\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Cooldown },\n            { no: 2, name: \"hp_percent_for_defensives\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Cooldowns>): Cooldowns {\n        const message = { cooldowns: [], hpPercentForDefensives: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Cooldowns>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cooldowns): Cooldowns {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Cooldown cooldowns */ 1:\n                    message.cooldowns.push(Cooldown.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* double hp_percent_for_defensives */ 2:\n                    message.hpPercentForDefensives = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Cooldowns, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Cooldown cooldowns = 1; */\n        for (let i = 0; i < message.cooldowns.length; i++)\n            Cooldown.internalBinaryWrite(message.cooldowns[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double hp_percent_for_defensives = 2; */\n        if (message.hpPercentForDefensives !== 0)\n            writer.tag(2, WireType.Bit64).double(message.hpPercentForDefensives);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Cooldowns\n */\nexport const Cooldowns = new Cooldowns$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealingModel$Type extends MessageType<HealingModel> {\n    constructor() {\n        super(\"proto.HealingModel\", [\n            { no: 1, name: \"hps\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"cadence_seconds\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"cadence_variation\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"inspiration_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"burst_window\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HealingModel>): HealingModel {\n        const message = { hps: 0, cadenceSeconds: 0, cadenceVariation: 0, inspirationUptime: 0, burstWindow: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HealingModel>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HealingModel): HealingModel {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double hps */ 1:\n                    message.hps = reader.double();\n                    break;\n                case /* double cadence_seconds */ 2:\n                    message.cadenceSeconds = reader.double();\n                    break;\n                case /* double cadence_variation */ 5:\n                    message.cadenceVariation = reader.double();\n                    break;\n                case /* double inspiration_uptime */ 3:\n                    message.inspirationUptime = reader.double();\n                    break;\n                case /* int32 burst_window */ 4:\n                    message.burstWindow = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HealingModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double hps = 1; */\n        if (message.hps !== 0)\n            writer.tag(1, WireType.Bit64).double(message.hps);\n        /* double cadence_seconds = 2; */\n        if (message.cadenceSeconds !== 0)\n            writer.tag(2, WireType.Bit64).double(message.cadenceSeconds);\n        /* double cadence_variation = 5; */\n        if (message.cadenceVariation !== 0)\n            writer.tag(5, WireType.Bit64).double(message.cadenceVariation);\n        /* double inspiration_uptime = 3; */\n        if (message.inspirationUptime !== 0)\n            writer.tag(3, WireType.Bit64).double(message.inspirationUptime);\n        /* int32 burst_window = 4; */\n        if (message.burstWindow !== 0)\n            writer.tag(4, WireType.Varint).int32(message.burstWindow);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HealingModel\n */\nexport const HealingModel = new HealingModel$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CustomRotation$Type extends MessageType<CustomRotation> {\n    constructor() {\n        super(\"proto.CustomRotation\", [\n            { no: 1, name: \"spells\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => CustomSpell }\n        ]);\n    }\n    create(value?: PartialMessage<CustomRotation>): CustomRotation {\n        const message = { spells: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<CustomRotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomRotation): CustomRotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.CustomSpell spells */ 1:\n                    message.spells.push(CustomSpell.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: CustomRotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.CustomSpell spells = 1; */\n        for (let i = 0; i < message.spells.length; i++)\n            CustomSpell.internalBinaryWrite(message.spells[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.CustomRotation\n */\nexport const CustomRotation = new CustomRotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CustomSpell$Type extends MessageType<CustomSpell> {\n    constructor() {\n        super(\"proto.CustomSpell\", [\n            { no: 1, name: \"spell\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"casts_per_minute\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<CustomSpell>): CustomSpell {\n        const message = { spell: 0, castsPerMinute: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<CustomSpell>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomSpell): CustomSpell {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 spell */ 1:\n                    message.spell = reader.int32();\n                    break;\n                case /* double casts_per_minute */ 2:\n                    message.castsPerMinute = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: CustomSpell, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 spell = 1; */\n        if (message.spell !== 0)\n            writer.tag(1, WireType.Varint).int32(message.spell);\n        /* double casts_per_minute = 2; */\n        if (message.castsPerMinute !== 0)\n            writer.tag(2, WireType.Bit64).double(message.castsPerMinute);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.CustomSpell\n */\nexport const CustomSpell = new CustomSpell$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ItemSwap$Type extends MessageType<ItemSwap> {\n    constructor() {\n        super(\"proto.ItemSwap\", [\n            { no: 1, name: \"mh_item\", kind: \"message\", T: () => ItemSpec },\n            { no: 2, name: \"oh_item\", kind: \"message\", T: () => ItemSpec },\n            { no: 3, name: \"ranged_item\", kind: \"message\", T: () => ItemSpec }\n        ]);\n    }\n    create(value?: PartialMessage<ItemSwap>): ItemSwap {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ItemSwap>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemSwap): ItemSwap {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ItemSpec mh_item */ 1:\n                    message.mhItem = ItemSpec.internalBinaryRead(reader, reader.uint32(), options, message.mhItem);\n                    break;\n                case /* proto.ItemSpec oh_item */ 2:\n                    message.ohItem = ItemSpec.internalBinaryRead(reader, reader.uint32(), options, message.ohItem);\n                    break;\n                case /* proto.ItemSpec ranged_item */ 3:\n                    message.rangedItem = ItemSpec.internalBinaryRead(reader, reader.uint32(), options, message.rangedItem);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ItemSwap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ItemSpec mh_item = 1; */\n        if (message.mhItem)\n            ItemSpec.internalBinaryWrite(message.mhItem, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ItemSpec oh_item = 2; */\n        if (message.ohItem)\n            ItemSpec.internalBinaryWrite(message.ohItem, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ItemSpec ranged_item = 3; */\n        if (message.rangedItem)\n            ItemSpec.internalBinaryWrite(message.rangedItem, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ItemSwap\n */\nexport const ItemSwap = new ItemSwap$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Duration$Type extends MessageType<Duration> {\n    constructor() {\n        super(\"proto.Duration\", [\n            { no: 1, name: \"ms\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Duration>): Duration {\n        const message = { ms: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Duration>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Duration): Duration {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double ms */ 1:\n                    message.ms = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Duration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double ms = 1; */\n        if (message.ms !== 0)\n            writer.tag(1, WireType.Bit64).double(message.ms);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Duration\n */\nexport const Duration = new Duration$Type();\n","import { Spec } from \"../proto/common\";\n\nexport const CHARACTER_LEVEL = 85;\nexport const BOSS_LEVEL = CHARACTER_LEVEL + 3;\n\nexport const EXPERTISE_PER_QUARTER_PERCENT_REDUCTION = 30.027197;\nexport const MELEE_CRIT_RATING_PER_CRIT_CHANCE = 179.280040;\nexport const MELEE_HIT_RATING_PER_HIT_CHANCE = 120.108800;\nexport const ARMOR_PEN_PER_PERCENT_ARMOR = 13.99;\n\nexport const SPELL_CRIT_RATING_PER_CRIT_CHANCE = 179.280040;\nexport const SPELL_HIT_RATING_PER_HIT_CHANCE = 102.445740;\n\nexport const HASTE_RATING_PER_HASTE_PERCENT = 128.057160;\nexport const MASTERY_RATING_PER_MASTERY_POINT = 179.280040;\n\nexport const DEFENSE_RATING_PER_DEFENSE = 19.208574;\nexport const MISS_DODGE_PARRY_BLOCK_CRIT_CHANCE_PER_DEFENSE = 0.04;\nexport const BLOCK_RATING_PER_BLOCK_CHANCE = 88.359444;\nexport const DODGE_RATING_PER_DODGE_CHANCE = 176.718900;\nexport const PARRY_RATING_PER_PARRY_CHANCE = 176.718900;\nexport const RESILIENCE_RATING_PER_CRIT_REDUCTION_CHANCE = 0;\nexport const RESILIENCE_RATING_PER_CRIT_DAMAGE_REDUCTION_PERCENT = 94.27 / 2.2;\n\n// Mastery Ratings have various increments based on spec.\nexport const masteryPercentPerPoint: Map<Spec, number> = new Map([\n\t[Spec.SpecAssassinationRogue, 3.5],\n\t[Spec.SpecCombatRogue, 2.0],\n\t[Spec.SpecSubtletyRogue, 2.5],\n\t[Spec.SpecBloodDeathKnight, 6.25],\n\t[Spec.SpecFrostDeathKnight, 2.0],\n\t[Spec.SpecUnholyDeathKnight, 2.5],\n\t[Spec.SpecBalanceDruid, 2.0],\n\t[Spec.SpecFeralDruid, 3.125],\n\t[Spec.SpecRestorationDruid, 1.25],\n\t[Spec.SpecHolyPaladin, 1.5],\n\t[Spec.SpecProtectionPaladin, 2.25],\n\t[Spec.SpecRetributionPaladin, 2.1],\n\t[Spec.SpecElementalShaman, 2.0],\n\t[Spec.SpecEnhancementShaman, 2.5],\n\t[Spec.SpecRestorationShaman, 3.0],\n\t[Spec.SpecBeastMasteryHunter, 1.675],\n\t[Spec.SpecMarksmanshipHunter, 2.1],\n\t[Spec.SpecSurvivalHunter, 1.0],\n\t[Spec.SpecArmsWarrior, 2.2],\n\t[Spec.SpecFuryWarrior, 5.6],\n\t[Spec.SpecProtectionWarrior, 1.5],\n\t[Spec.SpecArcaneMage, 1.5],\n\t[Spec.SpecFireMage, 2.8],\n\t[Spec.SpecFrostMage, 2.5],\n\t[Spec.SpecDisciplinePriest, 2.5],\n\t[Spec.SpecHolyPriest, 1.25],\n\t[Spec.SpecShadowPriest, 1.45],\n\t[Spec.SpecAfflictionWarlock, 1.625],\n\t[Spec.SpecDemonologyWarlock, 2.3],\n\t[Spec.SpecDestructionWarlock, 1.35],\n]);\n\n// Pending split of Feral to Cat/Bear specifically\nexport const MASTERY_DRUID_BEAR_PER_POINT = 4.0;\nexport const MASTERY_DRUID_CAT_PER_POINT = 3.125;\n\n\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"shaman.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message proto.ShamanTalents\n */\nexport interface ShamanTalents {\n    /**\n     * Elemental\n     *\n     * @generated from protobuf field: int32 acuity = 1;\n     */\n    acuity: number;\n    /**\n     * @generated from protobuf field: int32 convection = 2;\n     */\n    convection: number;\n    /**\n     * @generated from protobuf field: int32 concussion = 3;\n     */\n    concussion: number;\n    /**\n     * @generated from protobuf field: int32 call_of_flame = 4;\n     */\n    callOfFlame: number;\n    /**\n     * @generated from protobuf field: int32 elemental_warding = 5;\n     */\n    elementalWarding: number;\n    /**\n     * @generated from protobuf field: int32 reverberation = 6;\n     */\n    reverberation: number;\n    /**\n     * @generated from protobuf field: int32 elemental_precision = 7;\n     */\n    elementalPrecision: number;\n    /**\n     * @generated from protobuf field: int32 rolling_thunder = 8;\n     */\n    rollingThunder: number;\n    /**\n     * @generated from protobuf field: bool elemental_focus = 9;\n     */\n    elementalFocus: boolean;\n    /**\n     * @generated from protobuf field: int32 elemental_reach = 10;\n     */\n    elementalReach: number;\n    /**\n     * @generated from protobuf field: int32 elemental_oath = 11;\n     */\n    elementalOath: number;\n    /**\n     * @generated from protobuf field: int32 lava_flows = 12;\n     */\n    lavaFlows: number;\n    /**\n     * @generated from protobuf field: bool fulmination = 13;\n     */\n    fulmination: boolean;\n    /**\n     * @generated from protobuf field: bool elemental_mastery = 14;\n     */\n    elementalMastery: boolean;\n    /**\n     * @generated from protobuf field: int32 earths_grasp = 15;\n     */\n    earthsGrasp: number;\n    /**\n     * @generated from protobuf field: bool totemic_wrath = 16;\n     */\n    totemicWrath: boolean;\n    /**\n     * @generated from protobuf field: int32 feedback = 17;\n     */\n    feedback: number;\n    /**\n     * @generated from protobuf field: int32 lava_surge = 18;\n     */\n    lavaSurge: number;\n    /**\n     * @generated from protobuf field: bool earthquake = 19;\n     */\n    earthquake: boolean;\n    /**\n     * Enhancement\n     *\n     * @generated from protobuf field: int32 elemental_weapons = 20;\n     */\n    elementalWeapons: number;\n    /**\n     * @generated from protobuf field: int32 focused_strikes = 21;\n     */\n    focusedStrikes: number;\n    /**\n     * @generated from protobuf field: int32 improved_shields = 22;\n     */\n    improvedShields: number;\n    /**\n     * @generated from protobuf field: int32 elemental_devastation = 23;\n     */\n    elementalDevastation: number;\n    /**\n     * @generated from protobuf field: int32 flurry = 24;\n     */\n    flurry: number;\n    /**\n     * @generated from protobuf field: int32 ancestral_swiftness = 25;\n     */\n    ancestralSwiftness: number;\n    /**\n     * @generated from protobuf field: int32 totemic_reach = 26;\n     */\n    totemicReach: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 27;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: bool stormstrike = 28;\n     */\n    stormstrike: boolean;\n    /**\n     * @generated from protobuf field: int32 static_shock = 29;\n     */\n    staticShock: number;\n    /**\n     * @generated from protobuf field: int32 frozen_power = 30;\n     */\n    frozenPower: number;\n    /**\n     * @generated from protobuf field: int32 seasoned_winds = 31;\n     */\n    seasonedWinds: number;\n    /**\n     * @generated from protobuf field: int32 searing_flames = 32;\n     */\n    searingFlames: number;\n    /**\n     * @generated from protobuf field: int32 earthen_power = 33;\n     */\n    earthenPower: number;\n    /**\n     * @generated from protobuf field: bool shamanistic_rage = 34;\n     */\n    shamanisticRage: boolean;\n    /**\n     * @generated from protobuf field: int32 unleashed_rage = 35;\n     */\n    unleashedRage: number;\n    /**\n     * @generated from protobuf field: int32 maelstrom_weapon = 36;\n     */\n    maelstromWeapon: number;\n    /**\n     * @generated from protobuf field: int32 improved_lava_lash = 37;\n     */\n    improvedLavaLash: number;\n    /**\n     * @generated from protobuf field: bool feral_spirit = 38;\n     */\n    feralSpirit: boolean;\n    /**\n     * Restoration\n     *\n     * @generated from protobuf field: int32 ancestral_resolve = 39;\n     */\n    ancestralResolve: number;\n    /**\n     * @generated from protobuf field: int32 tidal_focus = 40;\n     */\n    tidalFocus: number;\n    /**\n     * @generated from protobuf field: int32 spark_of_life = 41;\n     */\n    sparkOfLife: number;\n    /**\n     * @generated from protobuf field: int32 resurgence = 42;\n     */\n    resurgence: number;\n    /**\n     * @generated from protobuf field: int32 totemic_focus = 43;\n     */\n    totemicFocus: number;\n    /**\n     * @generated from protobuf field: int32 focused_insight = 44;\n     */\n    focusedInsight: number;\n    /**\n     * @generated from protobuf field: int32 natures_guardian = 45;\n     */\n    naturesGuardian: number;\n    /**\n     * @generated from protobuf field: int32 ancestral_healing = 46;\n     */\n    ancestralHealing: number;\n    /**\n     * @generated from protobuf field: bool natures_swiftness = 47;\n     */\n    naturesSwiftness: boolean;\n    /**\n     * @generated from protobuf field: int32 natures_blessing = 48;\n     */\n    naturesBlessing: number;\n    /**\n     * @generated from protobuf field: int32 soothing_rains = 49;\n     */\n    soothingRains: number;\n    /**\n     * @generated from protobuf field: bool improved_cleanse_spirit = 50;\n     */\n    improvedCleanseSpirit: boolean;\n    /**\n     * @generated from protobuf field: int32 cleansing_waters = 51;\n     */\n    cleansingWaters: number;\n    /**\n     * @generated from protobuf field: int32 ancestral_awakening = 52;\n     */\n    ancestralAwakening: number;\n    /**\n     * @generated from protobuf field: bool mana_tide_totem = 53;\n     */\n    manaTideTotem: boolean;\n    /**\n     * @generated from protobuf field: int32 telluric_currents = 54;\n     */\n    telluricCurrents: number;\n    /**\n     * @generated from protobuf field: bool spirit_link_totem = 55;\n     */\n    spiritLinkTotem: boolean;\n    /**\n     * @generated from protobuf field: int32 tidal_waves = 56;\n     */\n    tidalWaves: number;\n    /**\n     * @generated from protobuf field: int32 blessing_of_the_eternals = 57;\n     */\n    blessingOfTheEternals: number;\n    /**\n     * @generated from protobuf field: bool riptide = 58;\n     */\n    riptide: boolean;\n}\n/**\n * @generated from protobuf message proto.TotemSet\n */\nexport interface TotemSet {\n    /**\n     * @generated from protobuf field: proto.EarthTotem earth = 1;\n     */\n    earth: EarthTotem;\n    /**\n     * @generated from protobuf field: proto.AirTotem air = 2;\n     */\n    air: AirTotem;\n    /**\n     * @generated from protobuf field: proto.FireTotem fire = 3;\n     */\n    fire: FireTotem;\n    /**\n     * @generated from protobuf field: proto.WaterTotem water = 4;\n     */\n    water: WaterTotem;\n}\n/**\n * @generated from protobuf message proto.ShamanTotems\n */\nexport interface ShamanTotems {\n    /**\n     * @generated from protobuf field: proto.TotemSet elements = 5;\n     */\n    elements?: TotemSet;\n    /**\n     * @generated from protobuf field: proto.TotemSet ancestors = 6;\n     */\n    ancestors?: TotemSet;\n    /**\n     * @generated from protobuf field: proto.TotemSet spirits = 7;\n     */\n    spirits?: TotemSet;\n    /**\n     * @generated from protobuf field: proto.EarthTotem earth = 8;\n     */\n    earth: EarthTotem;\n    /**\n     * @generated from protobuf field: proto.AirTotem air = 9;\n     */\n    air: AirTotem;\n    /**\n     * @generated from protobuf field: proto.FireTotem fire = 10;\n     */\n    fire: FireTotem;\n    /**\n     * @generated from protobuf field: proto.WaterTotem water = 11;\n     */\n    water: WaterTotem;\n    /**\n     * If set, will use fire elemental totem at the start and revert to regular\n     * fire totems when it expires.\n     *\n     * @generated from protobuf field: bool use_fire_elemental = 12;\n     */\n    useFireElemental: boolean;\n    /**\n     * Bonus spell power for fire elemental snapshotting.\n     *\n     * @generated from protobuf field: int32 bonus_spellpower = 13;\n     */\n    bonusSpellpower: number;\n    /**\n     * Snapshot fire elemental using Tier 10 4 set bonus.\n     *\n     * @generated from protobuf field: bool enh_tier_ten_bonus = 14;\n     */\n    enhTierTenBonus: boolean;\n}\n/**\n * Not used here, but used by APL\n *\n * @generated from protobuf enum proto.ShamanTotems.TotemType\n */\nexport enum ShamanTotems_TotemType {\n    /**\n     * @generated from protobuf enum value: TypeUnknown = 0;\n     */\n    TypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: Earth = 1;\n     */\n    Earth = 1,\n    /**\n     * @generated from protobuf enum value: Air = 2;\n     */\n    Air = 2,\n    /**\n     * @generated from protobuf enum value: Fire = 3;\n     */\n    Fire = 3,\n    /**\n     * @generated from protobuf enum value: Water = 4;\n     */\n    Water = 4\n}\n/**\n * @generated from protobuf message proto.ShamanOptions\n */\nexport interface ShamanOptions {\n    /**\n     * @generated from protobuf field: proto.ShamanShield shield = 1;\n     */\n    shield: ShamanShield;\n    /**\n     * @generated from protobuf field: proto.ShamanTotems totems = 2;\n     */\n    totems?: ShamanTotems;\n    /**\n     * @generated from protobuf field: proto.CallTotem call = 3;\n     */\n    call: CallTotem;\n    /**\n     * @generated from protobuf field: proto.ShamanImbue imbue_mh = 4;\n     */\n    imbueMh: ShamanImbue;\n}\n/**\n * @generated from protobuf message proto.ElementalShaman\n */\nexport interface ElementalShaman {\n    /**\n     * @generated from protobuf field: proto.ElementalShaman.Options options = 3;\n     */\n    options?: ElementalShaman_Options;\n}\n/**\n * @generated from protobuf message proto.ElementalShaman.Rotation\n */\nexport interface ElementalShaman_Rotation {\n}\n/**\n * @generated from protobuf message proto.ElementalShaman.Options\n */\nexport interface ElementalShaman_Options {\n    /**\n     * @generated from protobuf field: proto.ShamanOptions class_options = 1;\n     */\n    classOptions?: ShamanOptions;\n    /**\n     * @generated from protobuf field: proto.ElementalShaman.Options.ThunderstormRange thunderstormRange = 2;\n     */\n    thunderstormRange: ElementalShaman_Options_ThunderstormRange;\n}\n/**\n * @generated from protobuf enum proto.ElementalShaman.Options.ThunderstormRange\n */\nexport enum ElementalShaman_Options_ThunderstormRange {\n    /**\n     * @generated from protobuf enum value: UnsetTSRange = 0;\n     */\n    UnsetTSRange = 0,\n    /**\n     * @generated from protobuf enum value: TSInRange = 1;\n     */\n    TSInRange = 1,\n    /**\n     * @generated from protobuf enum value: TSOutofRange = 2;\n     */\n    TSOutofRange = 2\n}\n/**\n * @generated from protobuf message proto.EnhancementShaman\n */\nexport interface EnhancementShaman {\n    /**\n     * @generated from protobuf field: proto.EnhancementShaman.Options options = 3;\n     */\n    options?: EnhancementShaman_Options;\n}\n/**\n * @generated from protobuf message proto.EnhancementShaman.Rotation\n */\nexport interface EnhancementShaman_Rotation {\n}\n/**\n * @generated from protobuf message proto.EnhancementShaman.Options\n */\nexport interface EnhancementShaman_Options {\n    /**\n     * @generated from protobuf field: proto.ShamanOptions class_options = 1;\n     */\n    classOptions?: ShamanOptions;\n    /**\n     * @generated from protobuf field: proto.ShamanSyncType sync_type = 2;\n     */\n    syncType: ShamanSyncType;\n    /**\n     * @generated from protobuf field: proto.ShamanImbue imbue_oh = 3;\n     */\n    imbueOh: ShamanImbue;\n}\n/**\n * @generated from protobuf message proto.RestorationShaman\n */\nexport interface RestorationShaman {\n    /**\n     * @generated from protobuf field: proto.RestorationShaman.Options options = 3;\n     */\n    options?: RestorationShaman_Options;\n}\n/**\n * @generated from protobuf message proto.RestorationShaman.Rotation\n */\nexport interface RestorationShaman_Rotation {\n}\n/**\n * @generated from protobuf message proto.RestorationShaman.Options\n */\nexport interface RestorationShaman_Options {\n    /**\n     * @generated from protobuf field: proto.ShamanOptions class_options = 1;\n     */\n    classOptions?: ShamanOptions;\n    /**\n     * @generated from protobuf field: int32 earth_shield_p_p_m = 2;\n     */\n    earthShieldPPM: number;\n}\n/**\n * @generated from protobuf enum proto.ShamanPrimeGlyph\n */\nexport enum ShamanPrimeGlyph {\n    /**\n     * @generated from protobuf enum value: ShamanPrimeGlyphNone = 0;\n     */\n    ShamanPrimeGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfEarthShield = 45775;\n     */\n    GlyphOfEarthShield = 45775,\n    /**\n     * @generated from protobuf enum value: GlyphOfEarthlivingWeapon = 41527;\n     */\n    GlyphOfEarthlivingWeapon = 41527,\n    /**\n     * @generated from protobuf enum value: GlyphOfFeralSpirit = 45771;\n     */\n    GlyphOfFeralSpirit = 45771,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireElementalTotem = 41529;\n     */\n    GlyphOfFireElementalTotem = 41529,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlameShock = 41531;\n     */\n    GlyphOfFlameShock = 41531,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlametongueWeapon = 41532;\n     */\n    GlyphOfFlametongueWeapon = 41532,\n    /**\n     * @generated from protobuf enum value: GlyphOfLavaBurst = 41524;\n     */\n    GlyphOfLavaBurst = 41524,\n    /**\n     * @generated from protobuf enum value: GlyphOfLavaLash = 41540;\n     */\n    GlyphOfLavaLash = 41540,\n    /**\n     * @generated from protobuf enum value: GlyphOfLightningBolt = 41536;\n     */\n    GlyphOfLightningBolt = 41536,\n    /**\n     * @generated from protobuf enum value: GlyphOfRiptide = 45772;\n     */\n    GlyphOfRiptide = 45772,\n    /**\n     * @generated from protobuf enum value: GlyphOfShocking = 41526;\n     */\n    GlyphOfShocking = 41526,\n    /**\n     * @generated from protobuf enum value: GlyphOfStormstrike = 41539;\n     */\n    GlyphOfStormstrike = 41539,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnleashedLightning = 71155;\n     */\n    GlyphOfUnleashedLightning = 71155,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterShield = 41541;\n     */\n    GlyphOfWaterShield = 41541,\n    /**\n     * @generated from protobuf enum value: GlyphOfWindfuryWeapon = 41542;\n     */\n    GlyphOfWindfuryWeapon = 41542\n}\n/**\n * @generated from protobuf enum proto.ShamanMajorGlyph\n */\nexport enum ShamanMajorGlyph {\n    /**\n     * @generated from protobuf enum value: ShamanMajorGlyphNone = 0;\n     */\n    ShamanMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfChainHeal = 41517;\n     */\n    GlyphOfChainHeal = 41517,\n    /**\n     * @generated from protobuf enum value: GlyphOfChainLightning = 41518;\n     */\n    GlyphOfChainLightning = 41518,\n    /**\n     * @generated from protobuf enum value: GlyphOfElementalMastery = 41552;\n     */\n    GlyphOfElementalMastery = 41552,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireNova = 41530;\n     */\n    GlyphOfFireNova = 41530,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostShock = 41547;\n     */\n    GlyphOfFrostShock = 41547,\n    /**\n     * @generated from protobuf enum value: GlyphOfGhostWolf = 43725;\n     */\n    GlyphOfGhostWolf = 43725,\n    /**\n     * @generated from protobuf enum value: GlyphOfGroundingTotem = 41538;\n     */\n    GlyphOfGroundingTotem = 41538,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealingStreamTotem = 41533;\n     */\n    GlyphOfHealingStreamTotem = 41533,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealingWave = 41534;\n     */\n    GlyphOfHealingWave = 41534,\n    /**\n     * @generated from protobuf enum value: GlyphOfHex = 45777;\n     */\n    GlyphOfHex = 45777,\n    /**\n     * @generated from protobuf enum value: GlyphOfLightningShield = 41537;\n     */\n    GlyphOfLightningShield = 41537,\n    /**\n     * @generated from protobuf enum value: GlyphOfShamanisticRage = 45776;\n     */\n    GlyphOfShamanisticRage = 45776,\n    /**\n     * @generated from protobuf enum value: GlyphOfStoneclawTotem = 45778;\n     */\n    GlyphOfStoneclawTotem = 45778,\n    /**\n     * @generated from protobuf enum value: GlyphOfThunder = 45770;\n     */\n    GlyphOfThunder = 45770,\n    /**\n     * @generated from protobuf enum value: GlyphOfTotemicRecall = 41535;\n     */\n    GlyphOfTotemicRecall = 41535\n}\n/**\n * @generated from protobuf enum proto.ShamanMinorGlyph\n */\nexport enum ShamanMinorGlyph {\n    /**\n     * @generated from protobuf enum value: ShamanMinorGlyphNone = 0;\n     */\n    ShamanMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAstralRecall = 43381;\n     */\n    GlyphOfAstralRecall = 43381,\n    /**\n     * @generated from protobuf enum value: GlyphOfRenewedLife = 43385;\n     */\n    GlyphOfRenewedLife = 43385,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheArcticWolf = 43386;\n     */\n    GlyphOfTheArcticWolf = 43386,\n    /**\n     * @generated from protobuf enum value: GlyphOfThunderstorm = 44923;\n     */\n    GlyphOfThunderstorm = 44923,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterBreathing = 43344;\n     */\n    GlyphOfWaterBreathing = 43344,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterWalking = 43388;\n     */\n    GlyphOfWaterWalking = 43388\n}\n/**\n * @generated from protobuf enum proto.EarthTotem\n */\nexport enum EarthTotem {\n    /**\n     * @generated from protobuf enum value: NoEarthTotem = 0;\n     */\n    NoEarthTotem = 0,\n    /**\n     * @generated from protobuf enum value: StrengthOfEarthTotem = 1;\n     */\n    StrengthOfEarthTotem = 1,\n    /**\n     * @generated from protobuf enum value: TremorTotem = 2;\n     */\n    TremorTotem = 2,\n    /**\n     * @generated from protobuf enum value: StoneskinTotem = 3;\n     */\n    StoneskinTotem = 3,\n    /**\n     * @generated from protobuf enum value: EarthElementalTotem = 4;\n     */\n    EarthElementalTotem = 4\n}\n/**\n * @generated from protobuf enum proto.AirTotem\n */\nexport enum AirTotem {\n    /**\n     * @generated from protobuf enum value: NoAirTotem = 0;\n     */\n    NoAirTotem = 0,\n    /**\n     * @generated from protobuf enum value: WindfuryTotem = 2;\n     */\n    WindfuryTotem = 2,\n    /**\n     * @generated from protobuf enum value: WrathOfAirTotem = 3;\n     */\n    WrathOfAirTotem = 3\n}\n/**\n * @generated from protobuf enum proto.FireTotem\n */\nexport enum FireTotem {\n    /**\n     * @generated from protobuf enum value: NoFireTotem = 0;\n     */\n    NoFireTotem = 0,\n    /**\n     * @generated from protobuf enum value: MagmaTotem = 1;\n     */\n    MagmaTotem = 1,\n    /**\n     * @generated from protobuf enum value: SearingTotem = 2;\n     */\n    SearingTotem = 2,\n    /**\n     * @generated from protobuf enum value: FlametongueTotem = 3;\n     */\n    FlametongueTotem = 3,\n    /**\n     * @generated from protobuf enum value: FireElementalTotem = 4;\n     */\n    FireElementalTotem = 4\n}\n/**\n * @generated from protobuf enum proto.WaterTotem\n */\nexport enum WaterTotem {\n    /**\n     * @generated from protobuf enum value: NoWaterTotem = 0;\n     */\n    NoWaterTotem = 0,\n    /**\n     * @generated from protobuf enum value: ManaSpringTotem = 1;\n     */\n    ManaSpringTotem = 1,\n    /**\n     * @generated from protobuf enum value: HealingStreamTotem = 2;\n     */\n    HealingStreamTotem = 2,\n    /**\n     * @generated from protobuf enum value: TotemOfTranquilMind = 3;\n     */\n    TotemOfTranquilMind = 3,\n    /**\n     * @generated from protobuf enum value: ElementalResistanceTotem = 4;\n     */\n    ElementalResistanceTotem = 4\n}\n/**\n * @generated from protobuf enum proto.CallTotem\n */\nexport enum CallTotem {\n    /**\n     * @generated from protobuf enum value: NoCall = 0;\n     */\n    NoCall = 0,\n    /**\n     * @generated from protobuf enum value: Elements = 1;\n     */\n    Elements = 1,\n    /**\n     * @generated from protobuf enum value: Ancestors = 2;\n     */\n    Ancestors = 2,\n    /**\n     * @generated from protobuf enum value: Spirits = 3;\n     */\n    Spirits = 3\n}\n/**\n * @generated from protobuf enum proto.ShamanShield\n */\nexport enum ShamanShield {\n    /**\n     * @generated from protobuf enum value: NoShield = 0;\n     */\n    NoShield = 0,\n    /**\n     * @generated from protobuf enum value: WaterShield = 1;\n     */\n    WaterShield = 1,\n    /**\n     * @generated from protobuf enum value: LightningShield = 2;\n     */\n    LightningShield = 2\n}\n/**\n * @generated from protobuf enum proto.ShamanImbue\n */\nexport enum ShamanImbue {\n    /**\n     * @generated from protobuf enum value: NoImbue = 0;\n     */\n    NoImbue = 0,\n    /**\n     * @generated from protobuf enum value: WindfuryWeapon = 1;\n     */\n    WindfuryWeapon = 1,\n    /**\n     * @generated from protobuf enum value: FlametongueWeapon = 2;\n     */\n    FlametongueWeapon = 2,\n    /**\n     * @generated from protobuf enum value: FrostbrandWeapon = 3;\n     */\n    FrostbrandWeapon = 3,\n    /**\n     * @generated from protobuf enum value: EarthlivingWeapon = 4;\n     */\n    EarthlivingWeapon = 4\n}\n/**\n * @generated from protobuf enum proto.ShamanSyncType\n */\nexport enum ShamanSyncType {\n    /**\n     * @generated from protobuf enum value: NoSync = 0;\n     */\n    NoSync = 0,\n    /**\n     * @generated from protobuf enum value: SyncMainhandOffhandSwings = 1;\n     */\n    SyncMainhandOffhandSwings = 1,\n    /**\n     * @generated from protobuf enum value: DelayOffhandSwings = 2;\n     */\n    DelayOffhandSwings = 2,\n    /**\n     * @generated from protobuf enum value: Auto = 3;\n     */\n    Auto = 3\n}\n/**\n * @generated from protobuf enum proto.ShamanHealSpell\n */\nexport enum ShamanHealSpell {\n    /**\n     * @generated from protobuf enum value: AutoHeal = 0;\n     */\n    AutoHeal = 0,\n    /**\n     * @generated from protobuf enum value: HealingWave = 1;\n     */\n    HealingWave = 1,\n    /**\n     * @generated from protobuf enum value: HealingSurge = 2;\n     */\n    HealingSurge = 2,\n    /**\n     * @generated from protobuf enum value: ChainHeal = 3;\n     */\n    ChainHeal = 3\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShamanTalents$Type extends MessageType<ShamanTalents> {\n    constructor() {\n        super(\"proto.ShamanTalents\", [\n            { no: 1, name: \"acuity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"convection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"concussion\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"call_of_flame\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"elemental_warding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"reverberation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"elemental_precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"rolling_thunder\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"elemental_focus\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"elemental_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"elemental_oath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"lava_flows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"fulmination\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"elemental_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"earths_grasp\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"totemic_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"feedback\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"lava_surge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"earthquake\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"elemental_weapons\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"focused_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"improved_shields\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"elemental_devastation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"flurry\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"ancestral_swiftness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"totemic_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"stormstrike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"static_shock\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"frozen_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"seasoned_winds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"searing_flames\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"earthen_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"shamanistic_rage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"unleashed_rage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"maelstrom_weapon\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"improved_lava_lash\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"feral_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"ancestral_resolve\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"tidal_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"spark_of_life\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"resurgence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"totemic_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"focused_insight\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"natures_guardian\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"ancestral_healing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"natures_swiftness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 48, name: \"natures_blessing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"soothing_rains\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"improved_cleanse_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"cleansing_waters\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"ancestral_awakening\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"mana_tide_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 54, name: \"telluric_currents\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"spirit_link_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"tidal_waves\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"blessing_of_the_eternals\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"riptide\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ShamanTalents>): ShamanTalents {\n        const message = { acuity: 0, convection: 0, concussion: 0, callOfFlame: 0, elementalWarding: 0, reverberation: 0, elementalPrecision: 0, rollingThunder: 0, elementalFocus: false, elementalReach: 0, elementalOath: 0, lavaFlows: 0, fulmination: false, elementalMastery: false, earthsGrasp: 0, totemicWrath: false, feedback: 0, lavaSurge: 0, earthquake: false, elementalWeapons: 0, focusedStrikes: 0, improvedShields: 0, elementalDevastation: 0, flurry: 0, ancestralSwiftness: 0, totemicReach: 0, toughness: 0, stormstrike: false, staticShock: 0, frozenPower: 0, seasonedWinds: 0, searingFlames: 0, earthenPower: 0, shamanisticRage: false, unleashedRage: 0, maelstromWeapon: 0, improvedLavaLash: 0, feralSpirit: false, ancestralResolve: 0, tidalFocus: 0, sparkOfLife: 0, resurgence: 0, totemicFocus: 0, focusedInsight: 0, naturesGuardian: 0, ancestralHealing: 0, naturesSwiftness: false, naturesBlessing: 0, soothingRains: 0, improvedCleanseSpirit: false, cleansingWaters: 0, ancestralAwakening: 0, manaTideTotem: false, telluricCurrents: 0, spiritLinkTotem: false, tidalWaves: 0, blessingOfTheEternals: 0, riptide: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShamanTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShamanTalents): ShamanTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 acuity */ 1:\n                    message.acuity = reader.int32();\n                    break;\n                case /* int32 convection */ 2:\n                    message.convection = reader.int32();\n                    break;\n                case /* int32 concussion */ 3:\n                    message.concussion = reader.int32();\n                    break;\n                case /* int32 call_of_flame */ 4:\n                    message.callOfFlame = reader.int32();\n                    break;\n                case /* int32 elemental_warding */ 5:\n                    message.elementalWarding = reader.int32();\n                    break;\n                case /* int32 reverberation */ 6:\n                    message.reverberation = reader.int32();\n                    break;\n                case /* int32 elemental_precision */ 7:\n                    message.elementalPrecision = reader.int32();\n                    break;\n                case /* int32 rolling_thunder */ 8:\n                    message.rollingThunder = reader.int32();\n                    break;\n                case /* bool elemental_focus */ 9:\n                    message.elementalFocus = reader.bool();\n                    break;\n                case /* int32 elemental_reach */ 10:\n                    message.elementalReach = reader.int32();\n                    break;\n                case /* int32 elemental_oath */ 11:\n                    message.elementalOath = reader.int32();\n                    break;\n                case /* int32 lava_flows */ 12:\n                    message.lavaFlows = reader.int32();\n                    break;\n                case /* bool fulmination */ 13:\n                    message.fulmination = reader.bool();\n                    break;\n                case /* bool elemental_mastery */ 14:\n                    message.elementalMastery = reader.bool();\n                    break;\n                case /* int32 earths_grasp */ 15:\n                    message.earthsGrasp = reader.int32();\n                    break;\n                case /* bool totemic_wrath */ 16:\n                    message.totemicWrath = reader.bool();\n                    break;\n                case /* int32 feedback */ 17:\n                    message.feedback = reader.int32();\n                    break;\n                case /* int32 lava_surge */ 18:\n                    message.lavaSurge = reader.int32();\n                    break;\n                case /* bool earthquake */ 19:\n                    message.earthquake = reader.bool();\n                    break;\n                case /* int32 elemental_weapons */ 20:\n                    message.elementalWeapons = reader.int32();\n                    break;\n                case /* int32 focused_strikes */ 21:\n                    message.focusedStrikes = reader.int32();\n                    break;\n                case /* int32 improved_shields */ 22:\n                    message.improvedShields = reader.int32();\n                    break;\n                case /* int32 elemental_devastation */ 23:\n                    message.elementalDevastation = reader.int32();\n                    break;\n                case /* int32 flurry */ 24:\n                    message.flurry = reader.int32();\n                    break;\n                case /* int32 ancestral_swiftness */ 25:\n                    message.ancestralSwiftness = reader.int32();\n                    break;\n                case /* int32 totemic_reach */ 26:\n                    message.totemicReach = reader.int32();\n                    break;\n                case /* int32 toughness */ 27:\n                    message.toughness = reader.int32();\n                    break;\n                case /* bool stormstrike */ 28:\n                    message.stormstrike = reader.bool();\n                    break;\n                case /* int32 static_shock */ 29:\n                    message.staticShock = reader.int32();\n                    break;\n                case /* int32 frozen_power */ 30:\n                    message.frozenPower = reader.int32();\n                    break;\n                case /* int32 seasoned_winds */ 31:\n                    message.seasonedWinds = reader.int32();\n                    break;\n                case /* int32 searing_flames */ 32:\n                    message.searingFlames = reader.int32();\n                    break;\n                case /* int32 earthen_power */ 33:\n                    message.earthenPower = reader.int32();\n                    break;\n                case /* bool shamanistic_rage */ 34:\n                    message.shamanisticRage = reader.bool();\n                    break;\n                case /* int32 unleashed_rage */ 35:\n                    message.unleashedRage = reader.int32();\n                    break;\n                case /* int32 maelstrom_weapon */ 36:\n                    message.maelstromWeapon = reader.int32();\n                    break;\n                case /* int32 improved_lava_lash */ 37:\n                    message.improvedLavaLash = reader.int32();\n                    break;\n                case /* bool feral_spirit */ 38:\n                    message.feralSpirit = reader.bool();\n                    break;\n                case /* int32 ancestral_resolve */ 39:\n                    message.ancestralResolve = reader.int32();\n                    break;\n                case /* int32 tidal_focus */ 40:\n                    message.tidalFocus = reader.int32();\n                    break;\n                case /* int32 spark_of_life */ 41:\n                    message.sparkOfLife = reader.int32();\n                    break;\n                case /* int32 resurgence */ 42:\n                    message.resurgence = reader.int32();\n                    break;\n                case /* int32 totemic_focus */ 43:\n                    message.totemicFocus = reader.int32();\n                    break;\n                case /* int32 focused_insight */ 44:\n                    message.focusedInsight = reader.int32();\n                    break;\n                case /* int32 natures_guardian */ 45:\n                    message.naturesGuardian = reader.int32();\n                    break;\n                case /* int32 ancestral_healing */ 46:\n                    message.ancestralHealing = reader.int32();\n                    break;\n                case /* bool natures_swiftness */ 47:\n                    message.naturesSwiftness = reader.bool();\n                    break;\n                case /* int32 natures_blessing */ 48:\n                    message.naturesBlessing = reader.int32();\n                    break;\n                case /* int32 soothing_rains */ 49:\n                    message.soothingRains = reader.int32();\n                    break;\n                case /* bool improved_cleanse_spirit */ 50:\n                    message.improvedCleanseSpirit = reader.bool();\n                    break;\n                case /* int32 cleansing_waters */ 51:\n                    message.cleansingWaters = reader.int32();\n                    break;\n                case /* int32 ancestral_awakening */ 52:\n                    message.ancestralAwakening = reader.int32();\n                    break;\n                case /* bool mana_tide_totem */ 53:\n                    message.manaTideTotem = reader.bool();\n                    break;\n                case /* int32 telluric_currents */ 54:\n                    message.telluricCurrents = reader.int32();\n                    break;\n                case /* bool spirit_link_totem */ 55:\n                    message.spiritLinkTotem = reader.bool();\n                    break;\n                case /* int32 tidal_waves */ 56:\n                    message.tidalWaves = reader.int32();\n                    break;\n                case /* int32 blessing_of_the_eternals */ 57:\n                    message.blessingOfTheEternals = reader.int32();\n                    break;\n                case /* bool riptide */ 58:\n                    message.riptide = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShamanTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 acuity = 1; */\n        if (message.acuity !== 0)\n            writer.tag(1, WireType.Varint).int32(message.acuity);\n        /* int32 convection = 2; */\n        if (message.convection !== 0)\n            writer.tag(2, WireType.Varint).int32(message.convection);\n        /* int32 concussion = 3; */\n        if (message.concussion !== 0)\n            writer.tag(3, WireType.Varint).int32(message.concussion);\n        /* int32 call_of_flame = 4; */\n        if (message.callOfFlame !== 0)\n            writer.tag(4, WireType.Varint).int32(message.callOfFlame);\n        /* int32 elemental_warding = 5; */\n        if (message.elementalWarding !== 0)\n            writer.tag(5, WireType.Varint).int32(message.elementalWarding);\n        /* int32 reverberation = 6; */\n        if (message.reverberation !== 0)\n            writer.tag(6, WireType.Varint).int32(message.reverberation);\n        /* int32 elemental_precision = 7; */\n        if (message.elementalPrecision !== 0)\n            writer.tag(7, WireType.Varint).int32(message.elementalPrecision);\n        /* int32 rolling_thunder = 8; */\n        if (message.rollingThunder !== 0)\n            writer.tag(8, WireType.Varint).int32(message.rollingThunder);\n        /* bool elemental_focus = 9; */\n        if (message.elementalFocus !== false)\n            writer.tag(9, WireType.Varint).bool(message.elementalFocus);\n        /* int32 elemental_reach = 10; */\n        if (message.elementalReach !== 0)\n            writer.tag(10, WireType.Varint).int32(message.elementalReach);\n        /* int32 elemental_oath = 11; */\n        if (message.elementalOath !== 0)\n            writer.tag(11, WireType.Varint).int32(message.elementalOath);\n        /* int32 lava_flows = 12; */\n        if (message.lavaFlows !== 0)\n            writer.tag(12, WireType.Varint).int32(message.lavaFlows);\n        /* bool fulmination = 13; */\n        if (message.fulmination !== false)\n            writer.tag(13, WireType.Varint).bool(message.fulmination);\n        /* bool elemental_mastery = 14; */\n        if (message.elementalMastery !== false)\n            writer.tag(14, WireType.Varint).bool(message.elementalMastery);\n        /* int32 earths_grasp = 15; */\n        if (message.earthsGrasp !== 0)\n            writer.tag(15, WireType.Varint).int32(message.earthsGrasp);\n        /* bool totemic_wrath = 16; */\n        if (message.totemicWrath !== false)\n            writer.tag(16, WireType.Varint).bool(message.totemicWrath);\n        /* int32 feedback = 17; */\n        if (message.feedback !== 0)\n            writer.tag(17, WireType.Varint).int32(message.feedback);\n        /* int32 lava_surge = 18; */\n        if (message.lavaSurge !== 0)\n            writer.tag(18, WireType.Varint).int32(message.lavaSurge);\n        /* bool earthquake = 19; */\n        if (message.earthquake !== false)\n            writer.tag(19, WireType.Varint).bool(message.earthquake);\n        /* int32 elemental_weapons = 20; */\n        if (message.elementalWeapons !== 0)\n            writer.tag(20, WireType.Varint).int32(message.elementalWeapons);\n        /* int32 focused_strikes = 21; */\n        if (message.focusedStrikes !== 0)\n            writer.tag(21, WireType.Varint).int32(message.focusedStrikes);\n        /* int32 improved_shields = 22; */\n        if (message.improvedShields !== 0)\n            writer.tag(22, WireType.Varint).int32(message.improvedShields);\n        /* int32 elemental_devastation = 23; */\n        if (message.elementalDevastation !== 0)\n            writer.tag(23, WireType.Varint).int32(message.elementalDevastation);\n        /* int32 flurry = 24; */\n        if (message.flurry !== 0)\n            writer.tag(24, WireType.Varint).int32(message.flurry);\n        /* int32 ancestral_swiftness = 25; */\n        if (message.ancestralSwiftness !== 0)\n            writer.tag(25, WireType.Varint).int32(message.ancestralSwiftness);\n        /* int32 totemic_reach = 26; */\n        if (message.totemicReach !== 0)\n            writer.tag(26, WireType.Varint).int32(message.totemicReach);\n        /* int32 toughness = 27; */\n        if (message.toughness !== 0)\n            writer.tag(27, WireType.Varint).int32(message.toughness);\n        /* bool stormstrike = 28; */\n        if (message.stormstrike !== false)\n            writer.tag(28, WireType.Varint).bool(message.stormstrike);\n        /* int32 static_shock = 29; */\n        if (message.staticShock !== 0)\n            writer.tag(29, WireType.Varint).int32(message.staticShock);\n        /* int32 frozen_power = 30; */\n        if (message.frozenPower !== 0)\n            writer.tag(30, WireType.Varint).int32(message.frozenPower);\n        /* int32 seasoned_winds = 31; */\n        if (message.seasonedWinds !== 0)\n            writer.tag(31, WireType.Varint).int32(message.seasonedWinds);\n        /* int32 searing_flames = 32; */\n        if (message.searingFlames !== 0)\n            writer.tag(32, WireType.Varint).int32(message.searingFlames);\n        /* int32 earthen_power = 33; */\n        if (message.earthenPower !== 0)\n            writer.tag(33, WireType.Varint).int32(message.earthenPower);\n        /* bool shamanistic_rage = 34; */\n        if (message.shamanisticRage !== false)\n            writer.tag(34, WireType.Varint).bool(message.shamanisticRage);\n        /* int32 unleashed_rage = 35; */\n        if (message.unleashedRage !== 0)\n            writer.tag(35, WireType.Varint).int32(message.unleashedRage);\n        /* int32 maelstrom_weapon = 36; */\n        if (message.maelstromWeapon !== 0)\n            writer.tag(36, WireType.Varint).int32(message.maelstromWeapon);\n        /* int32 improved_lava_lash = 37; */\n        if (message.improvedLavaLash !== 0)\n            writer.tag(37, WireType.Varint).int32(message.improvedLavaLash);\n        /* bool feral_spirit = 38; */\n        if (message.feralSpirit !== false)\n            writer.tag(38, WireType.Varint).bool(message.feralSpirit);\n        /* int32 ancestral_resolve = 39; */\n        if (message.ancestralResolve !== 0)\n            writer.tag(39, WireType.Varint).int32(message.ancestralResolve);\n        /* int32 tidal_focus = 40; */\n        if (message.tidalFocus !== 0)\n            writer.tag(40, WireType.Varint).int32(message.tidalFocus);\n        /* int32 spark_of_life = 41; */\n        if (message.sparkOfLife !== 0)\n            writer.tag(41, WireType.Varint).int32(message.sparkOfLife);\n        /* int32 resurgence = 42; */\n        if (message.resurgence !== 0)\n            writer.tag(42, WireType.Varint).int32(message.resurgence);\n        /* int32 totemic_focus = 43; */\n        if (message.totemicFocus !== 0)\n            writer.tag(43, WireType.Varint).int32(message.totemicFocus);\n        /* int32 focused_insight = 44; */\n        if (message.focusedInsight !== 0)\n            writer.tag(44, WireType.Varint).int32(message.focusedInsight);\n        /* int32 natures_guardian = 45; */\n        if (message.naturesGuardian !== 0)\n            writer.tag(45, WireType.Varint).int32(message.naturesGuardian);\n        /* int32 ancestral_healing = 46; */\n        if (message.ancestralHealing !== 0)\n            writer.tag(46, WireType.Varint).int32(message.ancestralHealing);\n        /* bool natures_swiftness = 47; */\n        if (message.naturesSwiftness !== false)\n            writer.tag(47, WireType.Varint).bool(message.naturesSwiftness);\n        /* int32 natures_blessing = 48; */\n        if (message.naturesBlessing !== 0)\n            writer.tag(48, WireType.Varint).int32(message.naturesBlessing);\n        /* int32 soothing_rains = 49; */\n        if (message.soothingRains !== 0)\n            writer.tag(49, WireType.Varint).int32(message.soothingRains);\n        /* bool improved_cleanse_spirit = 50; */\n        if (message.improvedCleanseSpirit !== false)\n            writer.tag(50, WireType.Varint).bool(message.improvedCleanseSpirit);\n        /* int32 cleansing_waters = 51; */\n        if (message.cleansingWaters !== 0)\n            writer.tag(51, WireType.Varint).int32(message.cleansingWaters);\n        /* int32 ancestral_awakening = 52; */\n        if (message.ancestralAwakening !== 0)\n            writer.tag(52, WireType.Varint).int32(message.ancestralAwakening);\n        /* bool mana_tide_totem = 53; */\n        if (message.manaTideTotem !== false)\n            writer.tag(53, WireType.Varint).bool(message.manaTideTotem);\n        /* int32 telluric_currents = 54; */\n        if (message.telluricCurrents !== 0)\n            writer.tag(54, WireType.Varint).int32(message.telluricCurrents);\n        /* bool spirit_link_totem = 55; */\n        if (message.spiritLinkTotem !== false)\n            writer.tag(55, WireType.Varint).bool(message.spiritLinkTotem);\n        /* int32 tidal_waves = 56; */\n        if (message.tidalWaves !== 0)\n            writer.tag(56, WireType.Varint).int32(message.tidalWaves);\n        /* int32 blessing_of_the_eternals = 57; */\n        if (message.blessingOfTheEternals !== 0)\n            writer.tag(57, WireType.Varint).int32(message.blessingOfTheEternals);\n        /* bool riptide = 58; */\n        if (message.riptide !== false)\n            writer.tag(58, WireType.Varint).bool(message.riptide);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShamanTalents\n */\nexport const ShamanTalents = new ShamanTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TotemSet$Type extends MessageType<TotemSet> {\n    constructor() {\n        super(\"proto.TotemSet\", [\n            { no: 1, name: \"earth\", kind: \"enum\", T: () => [\"proto.EarthTotem\", EarthTotem] },\n            { no: 2, name: \"air\", kind: \"enum\", T: () => [\"proto.AirTotem\", AirTotem] },\n            { no: 3, name: \"fire\", kind: \"enum\", T: () => [\"proto.FireTotem\", FireTotem] },\n            { no: 4, name: \"water\", kind: \"enum\", T: () => [\"proto.WaterTotem\", WaterTotem] }\n        ]);\n    }\n    create(value?: PartialMessage<TotemSet>): TotemSet {\n        const message = { earth: 0, air: 0, fire: 0, water: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TotemSet>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TotemSet): TotemSet {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.EarthTotem earth */ 1:\n                    message.earth = reader.int32();\n                    break;\n                case /* proto.AirTotem air */ 2:\n                    message.air = reader.int32();\n                    break;\n                case /* proto.FireTotem fire */ 3:\n                    message.fire = reader.int32();\n                    break;\n                case /* proto.WaterTotem water */ 4:\n                    message.water = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TotemSet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.EarthTotem earth = 1; */\n        if (message.earth !== 0)\n            writer.tag(1, WireType.Varint).int32(message.earth);\n        /* proto.AirTotem air = 2; */\n        if (message.air !== 0)\n            writer.tag(2, WireType.Varint).int32(message.air);\n        /* proto.FireTotem fire = 3; */\n        if (message.fire !== 0)\n            writer.tag(3, WireType.Varint).int32(message.fire);\n        /* proto.WaterTotem water = 4; */\n        if (message.water !== 0)\n            writer.tag(4, WireType.Varint).int32(message.water);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TotemSet\n */\nexport const TotemSet = new TotemSet$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShamanTotems$Type extends MessageType<ShamanTotems> {\n    constructor() {\n        super(\"proto.ShamanTotems\", [\n            { no: 5, name: \"elements\", kind: \"message\", T: () => TotemSet },\n            { no: 6, name: \"ancestors\", kind: \"message\", T: () => TotemSet },\n            { no: 7, name: \"spirits\", kind: \"message\", T: () => TotemSet },\n            { no: 8, name: \"earth\", kind: \"enum\", T: () => [\"proto.EarthTotem\", EarthTotem] },\n            { no: 9, name: \"air\", kind: \"enum\", T: () => [\"proto.AirTotem\", AirTotem] },\n            { no: 10, name: \"fire\", kind: \"enum\", T: () => [\"proto.FireTotem\", FireTotem] },\n            { no: 11, name: \"water\", kind: \"enum\", T: () => [\"proto.WaterTotem\", WaterTotem] },\n            { no: 12, name: \"use_fire_elemental\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"bonus_spellpower\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"enh_tier_ten_bonus\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ShamanTotems>): ShamanTotems {\n        const message = { earth: 0, air: 0, fire: 0, water: 0, useFireElemental: false, bonusSpellpower: 0, enhTierTenBonus: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShamanTotems>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShamanTotems): ShamanTotems {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.TotemSet elements */ 5:\n                    message.elements = TotemSet.internalBinaryRead(reader, reader.uint32(), options, message.elements);\n                    break;\n                case /* proto.TotemSet ancestors */ 6:\n                    message.ancestors = TotemSet.internalBinaryRead(reader, reader.uint32(), options, message.ancestors);\n                    break;\n                case /* proto.TotemSet spirits */ 7:\n                    message.spirits = TotemSet.internalBinaryRead(reader, reader.uint32(), options, message.spirits);\n                    break;\n                case /* proto.EarthTotem earth */ 8:\n                    message.earth = reader.int32();\n                    break;\n                case /* proto.AirTotem air */ 9:\n                    message.air = reader.int32();\n                    break;\n                case /* proto.FireTotem fire */ 10:\n                    message.fire = reader.int32();\n                    break;\n                case /* proto.WaterTotem water */ 11:\n                    message.water = reader.int32();\n                    break;\n                case /* bool use_fire_elemental */ 12:\n                    message.useFireElemental = reader.bool();\n                    break;\n                case /* int32 bonus_spellpower */ 13:\n                    message.bonusSpellpower = reader.int32();\n                    break;\n                case /* bool enh_tier_ten_bonus */ 14:\n                    message.enhTierTenBonus = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShamanTotems, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.TotemSet elements = 5; */\n        if (message.elements)\n            TotemSet.internalBinaryWrite(message.elements, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.TotemSet ancestors = 6; */\n        if (message.ancestors)\n            TotemSet.internalBinaryWrite(message.ancestors, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* proto.TotemSet spirits = 7; */\n        if (message.spirits)\n            TotemSet.internalBinaryWrite(message.spirits, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EarthTotem earth = 8; */\n        if (message.earth !== 0)\n            writer.tag(8, WireType.Varint).int32(message.earth);\n        /* proto.AirTotem air = 9; */\n        if (message.air !== 0)\n            writer.tag(9, WireType.Varint).int32(message.air);\n        /* proto.FireTotem fire = 10; */\n        if (message.fire !== 0)\n            writer.tag(10, WireType.Varint).int32(message.fire);\n        /* proto.WaterTotem water = 11; */\n        if (message.water !== 0)\n            writer.tag(11, WireType.Varint).int32(message.water);\n        /* bool use_fire_elemental = 12; */\n        if (message.useFireElemental !== false)\n            writer.tag(12, WireType.Varint).bool(message.useFireElemental);\n        /* int32 bonus_spellpower = 13; */\n        if (message.bonusSpellpower !== 0)\n            writer.tag(13, WireType.Varint).int32(message.bonusSpellpower);\n        /* bool enh_tier_ten_bonus = 14; */\n        if (message.enhTierTenBonus !== false)\n            writer.tag(14, WireType.Varint).bool(message.enhTierTenBonus);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShamanTotems\n */\nexport const ShamanTotems = new ShamanTotems$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShamanOptions$Type extends MessageType<ShamanOptions> {\n    constructor() {\n        super(\"proto.ShamanOptions\", [\n            { no: 1, name: \"shield\", kind: \"enum\", T: () => [\"proto.ShamanShield\", ShamanShield] },\n            { no: 2, name: \"totems\", kind: \"message\", T: () => ShamanTotems },\n            { no: 3, name: \"call\", kind: \"enum\", T: () => [\"proto.CallTotem\", CallTotem] },\n            { no: 4, name: \"imbue_mh\", kind: \"enum\", T: () => [\"proto.ShamanImbue\", ShamanImbue] }\n        ]);\n    }\n    create(value?: PartialMessage<ShamanOptions>): ShamanOptions {\n        const message = { shield: 0, call: 0, imbueMh: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShamanOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShamanOptions): ShamanOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanShield shield */ 1:\n                    message.shield = reader.int32();\n                    break;\n                case /* proto.ShamanTotems totems */ 2:\n                    message.totems = ShamanTotems.internalBinaryRead(reader, reader.uint32(), options, message.totems);\n                    break;\n                case /* proto.CallTotem call */ 3:\n                    message.call = reader.int32();\n                    break;\n                case /* proto.ShamanImbue imbue_mh */ 4:\n                    message.imbueMh = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShamanOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanShield shield = 1; */\n        if (message.shield !== 0)\n            writer.tag(1, WireType.Varint).int32(message.shield);\n        /* proto.ShamanTotems totems = 2; */\n        if (message.totems)\n            ShamanTotems.internalBinaryWrite(message.totems, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.CallTotem call = 3; */\n        if (message.call !== 0)\n            writer.tag(3, WireType.Varint).int32(message.call);\n        /* proto.ShamanImbue imbue_mh = 4; */\n        if (message.imbueMh !== 0)\n            writer.tag(4, WireType.Varint).int32(message.imbueMh);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShamanOptions\n */\nexport const ShamanOptions = new ShamanOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ElementalShaman$Type extends MessageType<ElementalShaman> {\n    constructor() {\n        super(\"proto.ElementalShaman\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => ElementalShaman_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ElementalShaman>): ElementalShaman {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ElementalShaman>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ElementalShaman): ElementalShaman {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ElementalShaman.Options options */ 3:\n                    message.options = ElementalShaman_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ElementalShaman, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ElementalShaman.Options options = 3; */\n        if (message.options)\n            ElementalShaman_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ElementalShaman\n */\nexport const ElementalShaman = new ElementalShaman$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ElementalShaman_Rotation$Type extends MessageType<ElementalShaman_Rotation> {\n    constructor() {\n        super(\"proto.ElementalShaman.Rotation\", []);\n    }\n    create(value?: PartialMessage<ElementalShaman_Rotation>): ElementalShaman_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ElementalShaman_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ElementalShaman_Rotation): ElementalShaman_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: ElementalShaman_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ElementalShaman.Rotation\n */\nexport const ElementalShaman_Rotation = new ElementalShaman_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ElementalShaman_Options$Type extends MessageType<ElementalShaman_Options> {\n    constructor() {\n        super(\"proto.ElementalShaman.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => ShamanOptions },\n            { no: 2, name: \"thunderstormRange\", kind: \"enum\", T: () => [\"proto.ElementalShaman.Options.ThunderstormRange\", ElementalShaman_Options_ThunderstormRange] }\n        ]);\n    }\n    create(value?: PartialMessage<ElementalShaman_Options>): ElementalShaman_Options {\n        const message = { thunderstormRange: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ElementalShaman_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ElementalShaman_Options): ElementalShaman_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanOptions class_options */ 1:\n                    message.classOptions = ShamanOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* proto.ElementalShaman.Options.ThunderstormRange thunderstormRange */ 2:\n                    message.thunderstormRange = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ElementalShaman_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanOptions class_options = 1; */\n        if (message.classOptions)\n            ShamanOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ElementalShaman.Options.ThunderstormRange thunderstormRange = 2; */\n        if (message.thunderstormRange !== 0)\n            writer.tag(2, WireType.Varint).int32(message.thunderstormRange);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ElementalShaman.Options\n */\nexport const ElementalShaman_Options = new ElementalShaman_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EnhancementShaman$Type extends MessageType<EnhancementShaman> {\n    constructor() {\n        super(\"proto.EnhancementShaman\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => EnhancementShaman_Options }\n        ]);\n    }\n    create(value?: PartialMessage<EnhancementShaman>): EnhancementShaman {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EnhancementShaman>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnhancementShaman): EnhancementShaman {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.EnhancementShaman.Options options */ 3:\n                    message.options = EnhancementShaman_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EnhancementShaman, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.EnhancementShaman.Options options = 3; */\n        if (message.options)\n            EnhancementShaman_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EnhancementShaman\n */\nexport const EnhancementShaman = new EnhancementShaman$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EnhancementShaman_Rotation$Type extends MessageType<EnhancementShaman_Rotation> {\n    constructor() {\n        super(\"proto.EnhancementShaman.Rotation\", []);\n    }\n    create(value?: PartialMessage<EnhancementShaman_Rotation>): EnhancementShaman_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EnhancementShaman_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnhancementShaman_Rotation): EnhancementShaman_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: EnhancementShaman_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EnhancementShaman.Rotation\n */\nexport const EnhancementShaman_Rotation = new EnhancementShaman_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EnhancementShaman_Options$Type extends MessageType<EnhancementShaman_Options> {\n    constructor() {\n        super(\"proto.EnhancementShaman.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => ShamanOptions },\n            { no: 2, name: \"sync_type\", kind: \"enum\", T: () => [\"proto.ShamanSyncType\", ShamanSyncType] },\n            { no: 3, name: \"imbue_oh\", kind: \"enum\", T: () => [\"proto.ShamanImbue\", ShamanImbue] }\n        ]);\n    }\n    create(value?: PartialMessage<EnhancementShaman_Options>): EnhancementShaman_Options {\n        const message = { syncType: 0, imbueOh: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EnhancementShaman_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnhancementShaman_Options): EnhancementShaman_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanOptions class_options */ 1:\n                    message.classOptions = ShamanOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* proto.ShamanSyncType sync_type */ 2:\n                    message.syncType = reader.int32();\n                    break;\n                case /* proto.ShamanImbue imbue_oh */ 3:\n                    message.imbueOh = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EnhancementShaman_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanOptions class_options = 1; */\n        if (message.classOptions)\n            ShamanOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ShamanSyncType sync_type = 2; */\n        if (message.syncType !== 0)\n            writer.tag(2, WireType.Varint).int32(message.syncType);\n        /* proto.ShamanImbue imbue_oh = 3; */\n        if (message.imbueOh !== 0)\n            writer.tag(3, WireType.Varint).int32(message.imbueOh);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EnhancementShaman.Options\n */\nexport const EnhancementShaman_Options = new EnhancementShaman_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RestorationShaman$Type extends MessageType<RestorationShaman> {\n    constructor() {\n        super(\"proto.RestorationShaman\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => RestorationShaman_Options }\n        ]);\n    }\n    create(value?: PartialMessage<RestorationShaman>): RestorationShaman {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RestorationShaman>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestorationShaman): RestorationShaman {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RestorationShaman.Options options */ 3:\n                    message.options = RestorationShaman_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RestorationShaman, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RestorationShaman.Options options = 3; */\n        if (message.options)\n            RestorationShaman_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RestorationShaman\n */\nexport const RestorationShaman = new RestorationShaman$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RestorationShaman_Rotation$Type extends MessageType<RestorationShaman_Rotation> {\n    constructor() {\n        super(\"proto.RestorationShaman.Rotation\", []);\n    }\n    create(value?: PartialMessage<RestorationShaman_Rotation>): RestorationShaman_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RestorationShaman_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestorationShaman_Rotation): RestorationShaman_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: RestorationShaman_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RestorationShaman.Rotation\n */\nexport const RestorationShaman_Rotation = new RestorationShaman_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RestorationShaman_Options$Type extends MessageType<RestorationShaman_Options> {\n    constructor() {\n        super(\"proto.RestorationShaman.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => ShamanOptions },\n            { no: 2, name: \"earth_shield_p_p_m\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RestorationShaman_Options>): RestorationShaman_Options {\n        const message = { earthShieldPPM: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RestorationShaman_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestorationShaman_Options): RestorationShaman_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanOptions class_options */ 1:\n                    message.classOptions = ShamanOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* int32 earth_shield_p_p_m */ 2:\n                    message.earthShieldPPM = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RestorationShaman_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanOptions class_options = 1; */\n        if (message.classOptions)\n            ShamanOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* int32 earth_shield_p_p_m = 2; */\n        if (message.earthShieldPPM !== 0)\n            writer.tag(2, WireType.Varint).int32(message.earthShieldPPM);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RestorationShaman.Options\n */\nexport const RestorationShaman_Options = new RestorationShaman_Options$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"druid.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { UnitReference } from \"./common\";\n/**\n * @generated from protobuf message proto.DruidTalents\n */\nexport interface DruidTalents {\n    /**\n     * Balance\n     *\n     * @generated from protobuf field: int32 natures_grace = 1;\n     */\n    naturesGrace: number;\n    /**\n     * @generated from protobuf field: int32 starlight_wrath = 2;\n     */\n    starlightWrath: number;\n    /**\n     * @generated from protobuf field: int32 natures_majesty = 3;\n     */\n    naturesMajesty: number;\n    /**\n     * @generated from protobuf field: int32 genesis = 4;\n     */\n    genesis: number;\n    /**\n     * @generated from protobuf field: int32 moonglow = 5;\n     */\n    moonglow: number;\n    /**\n     * @generated from protobuf field: int32 balance_of_power = 6;\n     */\n    balanceOfPower: number;\n    /**\n     * @generated from protobuf field: int32 euphoria = 7;\n     */\n    euphoria: number;\n    /**\n     * @generated from protobuf field: bool moonkin_form = 8;\n     */\n    moonkinForm: boolean;\n    /**\n     * @generated from protobuf field: bool typhoon = 9;\n     */\n    typhoon: boolean;\n    /**\n     * @generated from protobuf field: int32 shooting_stars = 10;\n     */\n    shootingStars: number;\n    /**\n     * @generated from protobuf field: int32 owlkin_frenzy = 11;\n     */\n    owlkinFrenzy: number;\n    /**\n     * @generated from protobuf field: int32 gale_winds = 12;\n     */\n    galeWinds: number;\n    /**\n     * @generated from protobuf field: bool solar_beam = 13;\n     */\n    solarBeam: boolean;\n    /**\n     * @generated from protobuf field: int32 dreamstate = 14;\n     */\n    dreamstate: number;\n    /**\n     * @generated from protobuf field: bool force_of_nature = 15;\n     */\n    forceOfNature: boolean;\n    /**\n     * @generated from protobuf field: bool sunfire = 16;\n     */\n    sunfire: boolean;\n    /**\n     * @generated from protobuf field: bool earth_and_moon = 17;\n     */\n    earthAndMoon: boolean;\n    /**\n     * @generated from protobuf field: int32 fungal_growth = 18;\n     */\n    fungalGrowth: number;\n    /**\n     * @generated from protobuf field: int32 lunar_shower = 19;\n     */\n    lunarShower: number;\n    /**\n     * @generated from protobuf field: bool starfall = 20;\n     */\n    starfall: boolean;\n    /**\n     * Feral Combat\n     *\n     * @generated from protobuf field: int32 feral_swiftness = 21;\n     */\n    feralSwiftness: number;\n    /**\n     * @generated from protobuf field: int32 furor = 22;\n     */\n    furor: number;\n    /**\n     * @generated from protobuf field: int32 predatory_strikes = 23;\n     */\n    predatoryStrikes: number;\n    /**\n     * @generated from protobuf field: int32 infected_wounds = 24;\n     */\n    infectedWounds: number;\n    /**\n     * @generated from protobuf field: int32 fury_swipes = 25;\n     */\n    furySwipes: number;\n    /**\n     * @generated from protobuf field: int32 primal_fury = 26;\n     */\n    primalFury: number;\n    /**\n     * @generated from protobuf field: int32 feral_aggression = 27;\n     */\n    feralAggression: number;\n    /**\n     * @generated from protobuf field: int32 king_of_the_jungle = 28;\n     */\n    kingOfTheJungle: number;\n    /**\n     * @generated from protobuf field: bool feral_charge = 29;\n     */\n    feralCharge: boolean;\n    /**\n     * @generated from protobuf field: int32 stampede = 30;\n     */\n    stampede: number;\n    /**\n     * @generated from protobuf field: int32 thick_hide = 31;\n     */\n    thickHide: number;\n    /**\n     * @generated from protobuf field: bool leader_of_the_pack = 32;\n     */\n    leaderOfThePack: boolean;\n    /**\n     * @generated from protobuf field: int32 brutal_impact = 33;\n     */\n    brutalImpact: number;\n    /**\n     * @generated from protobuf field: int32 nurturing_instinct = 34;\n     */\n    nurturingInstinct: number;\n    /**\n     * @generated from protobuf field: int32 primal_madness = 35;\n     */\n    primalMadness: number;\n    /**\n     * @generated from protobuf field: bool survival_instincts = 36;\n     */\n    survivalInstincts: boolean;\n    /**\n     * @generated from protobuf field: int32 endless_carnage = 37;\n     */\n    endlessCarnage: number;\n    /**\n     * @generated from protobuf field: int32 natural_reaction = 38;\n     */\n    naturalReaction: number;\n    /**\n     * @generated from protobuf field: int32 blood_in_the_water = 39;\n     */\n    bloodInTheWater: number;\n    /**\n     * @generated from protobuf field: int32 rend_and_tear = 40;\n     */\n    rendAndTear: number;\n    /**\n     * @generated from protobuf field: bool pulverize = 41;\n     */\n    pulverize: boolean;\n    /**\n     * @generated from protobuf field: bool berserk = 42;\n     */\n    berserk: boolean;\n    /**\n     * Restoration\n     *\n     * @generated from protobuf field: int32 blessing_of_the_grove = 43;\n     */\n    blessingOfTheGrove: number;\n    /**\n     * @generated from protobuf field: int32 natural_shapeshifter = 44;\n     */\n    naturalShapeshifter: number;\n    /**\n     * @generated from protobuf field: int32 naturalist = 45;\n     */\n    naturalist: number;\n    /**\n     * @generated from protobuf field: int32 heart_of_the_wild = 46;\n     */\n    heartOfTheWild: number;\n    /**\n     * @generated from protobuf field: int32 perseverance = 47;\n     */\n    perseverance: number;\n    /**\n     * @generated from protobuf field: bool master_shapeshifter = 48;\n     */\n    masterShapeshifter: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_rejuvenation = 49;\n     */\n    improvedRejuvenation: number;\n    /**\n     * @generated from protobuf field: int32 living_seed = 50;\n     */\n    livingSeed: number;\n    /**\n     * @generated from protobuf field: int32 revitalize = 51;\n     */\n    revitalize: number;\n    /**\n     * @generated from protobuf field: bool natures_swiftness = 52;\n     */\n    naturesSwiftness: boolean;\n    /**\n     * @generated from protobuf field: int32 fury_of_stormrage = 53;\n     */\n    furyOfStormrage: number;\n    /**\n     * @generated from protobuf field: int32 natures_bounty = 54;\n     */\n    naturesBounty: number;\n    /**\n     * @generated from protobuf field: int32 empowered_touch = 55;\n     */\n    empoweredTouch: number;\n    /**\n     * @generated from protobuf field: int32 malfurions_gift = 56;\n     */\n    malfurionsGift: number;\n    /**\n     * @generated from protobuf field: int32 efflorescence = 57;\n     */\n    efflorescence: number;\n    /**\n     * @generated from protobuf field: bool wild_growth = 58;\n     */\n    wildGrowth: boolean;\n    /**\n     * @generated from protobuf field: bool natures_cure = 59;\n     */\n    naturesCure: boolean;\n    /**\n     * @generated from protobuf field: int32 natures_ward = 60;\n     */\n    naturesWard: number;\n    /**\n     * @generated from protobuf field: int32 gift_of_the_earthmother = 61;\n     */\n    giftOfTheEarthmother: number;\n    /**\n     * @generated from protobuf field: bool swift_rejuvenation = 62;\n     */\n    swiftRejuvenation: boolean;\n    /**\n     * @generated from protobuf field: bool tree_of_life = 63;\n     */\n    treeOfLife: boolean;\n}\n/**\n * @generated from protobuf message proto.DruidOptions\n */\nexport interface DruidOptions {\n    /**\n     * @generated from protobuf field: proto.UnitReference innervate_target = 1;\n     */\n    innervateTarget?: UnitReference;\n}\n/**\n * @generated from protobuf message proto.BalanceDruid\n */\nexport interface BalanceDruid {\n    /**\n     * @generated from protobuf field: proto.BalanceDruid.Options options = 3;\n     */\n    options?: BalanceDruid_Options;\n}\n/**\n * @generated from protobuf message proto.BalanceDruid.Rotation\n */\nexport interface BalanceDruid_Rotation {\n}\n/**\n * @generated from protobuf message proto.BalanceDruid.Options\n */\nexport interface BalanceDruid_Options {\n    /**\n     * @generated from protobuf field: proto.DruidOptions class_options = 1;\n     */\n    classOptions?: DruidOptions;\n    /**\n     * @generated from protobuf field: float okf_uptime = 2;\n     */\n    okfUptime: number;\n}\n/**\n * @generated from protobuf message proto.FeralDruid\n */\nexport interface FeralDruid {\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Rotation rotation = 1;\n     */\n    rotation?: FeralDruid_Rotation;\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Options options = 3;\n     */\n    options?: FeralDruid_Options;\n}\n/**\n * @generated from protobuf message proto.FeralDruid.Rotation\n */\nexport interface FeralDruid_Rotation {\n    /**\n     * @generated from protobuf field: bool bear_weave = 1;\n     */\n    bearWeave: boolean;\n    /**\n     * @generated from protobuf field: bool maintain_faerie_fire = 2;\n     */\n    maintainFaerieFire: boolean;\n    /**\n     * @generated from protobuf field: int32 min_combos_for_rip = 3;\n     */\n    minCombosForRip: number;\n    /**\n     * @generated from protobuf field: bool use_rake = 4;\n     */\n    useRake: boolean;\n    /**\n     * @generated from protobuf field: bool use_bite = 5;\n     */\n    useBite: boolean;\n    /**\n     * @generated from protobuf field: bool mangle_spam = 6;\n     */\n    mangleSpam: boolean;\n    /**\n     * @generated from protobuf field: float bite_time = 7;\n     */\n    biteTime: number;\n    /**\n     * @generated from protobuf field: int32 min_combos_for_bite = 8;\n     */\n    minCombosForBite: number;\n    /**\n     * @generated from protobuf field: bool bite_during_execute = 13;\n     */\n    biteDuringExecute: boolean;\n    /**\n     * @generated from protobuf field: int32 rip_leeway = 19;\n     */\n    ripLeeway: number;\n    /**\n     * @generated from protobuf field: float min_roar_offset = 11;\n     */\n    minRoarOffset: number;\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Rotation.BiteModeType bite_mode_type = 12;\n     */\n    biteModeType: FeralDruid_Rotation_BiteModeType;\n    /**\n     * @generated from protobuf field: bool snek_weave = 14;\n     */\n    snekWeave: boolean;\n    /**\n     * @generated from protobuf field: bool manual_params = 17;\n     */\n    manualParams: boolean;\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Rotation.AplType rotation_type = 21;\n     */\n    rotationType: FeralDruid_Rotation_AplType;\n    /**\n     * @generated from protobuf field: bool allow_aoe_berserk = 9;\n     */\n    allowAoeBerserk: boolean;\n    /**\n     * @generated from protobuf field: bool melee_weave = 15;\n     */\n    meleeWeave: boolean;\n}\n/**\n * @generated from protobuf enum proto.FeralDruid.Rotation.AplType\n */\nexport enum FeralDruid_Rotation_AplType {\n    /**\n     * @generated from protobuf enum value: SingleTarget = 0;\n     */\n    SingleTarget = 0,\n    /**\n     * @generated from protobuf enum value: Aoe = 1;\n     */\n    Aoe = 1\n}\n/**\n * @generated from protobuf enum proto.FeralDruid.Rotation.BearweaveType\n */\nexport enum FeralDruid_Rotation_BearweaveType {\n    /**\n     * @generated from protobuf enum value: None = 0;\n     */\n    None = 0,\n    /**\n     * @generated from protobuf enum value: Mangle = 1;\n     */\n    Mangle = 1,\n    /**\n     * @generated from protobuf enum value: Lacerate = 2;\n     */\n    Lacerate = 2\n}\n/**\n * @generated from protobuf enum proto.FeralDruid.Rotation.BiteModeType\n */\nexport enum FeralDruid_Rotation_BiteModeType {\n    /**\n     * @generated from protobuf enum value: Emperical = 0;\n     */\n    Emperical = 0,\n    /**\n     * @generated from protobuf enum value: Analytical = 1;\n     */\n    Analytical = 1\n}\n/**\n * @generated from protobuf message proto.FeralDruid.Options\n */\nexport interface FeralDruid_Options {\n    /**\n     * @generated from protobuf field: proto.DruidOptions class_options = 1;\n     */\n    classOptions?: DruidOptions;\n    /**\n     * @generated from protobuf field: bool assume_bleed_active = 4;\n     */\n    assumeBleedActive: boolean;\n}\n/**\n * @generated from protobuf message proto.FeralTankDruid\n */\nexport interface FeralTankDruid {\n    /**\n     * @generated from protobuf field: proto.FeralTankDruid.Options options = 3;\n     */\n    options?: FeralTankDruid_Options;\n}\n/**\n * @generated from protobuf message proto.FeralTankDruid.Rotation\n */\nexport interface FeralTankDruid_Rotation {\n    /**\n     * Minimum rage to queue HS or Cleave.\n     *\n     * @generated from protobuf field: int32 maul_rage_threshold = 1;\n     */\n    maulRageThreshold: number;\n    /**\n     * @generated from protobuf field: bool maintain_demoralizing_roar = 2;\n     */\n    maintainDemoralizingRoar: boolean;\n    /**\n     * @generated from protobuf field: double lacerate_time = 3;\n     */\n    lacerateTime: number;\n}\n/**\n * @generated from protobuf message proto.FeralTankDruid.Options\n */\nexport interface FeralTankDruid_Options {\n    /**\n     * @generated from protobuf field: proto.DruidOptions class_options = 1;\n     */\n    classOptions?: DruidOptions;\n    /**\n     * @generated from protobuf field: double starting_rage = 2;\n     */\n    startingRage: number;\n}\n/**\n * @generated from protobuf message proto.RestorationDruid\n */\nexport interface RestorationDruid {\n    /**\n     * @generated from protobuf field: proto.RestorationDruid.Options options = 3;\n     */\n    options?: RestorationDruid_Options;\n}\n/**\n * @generated from protobuf message proto.RestorationDruid.Rotation\n */\nexport interface RestorationDruid_Rotation {\n}\n/**\n * @generated from protobuf message proto.RestorationDruid.Options\n */\nexport interface RestorationDruid_Options {\n    /**\n     * @generated from protobuf field: proto.DruidOptions class_options = 1;\n     */\n    classOptions?: DruidOptions;\n}\n/**\n * @generated from protobuf enum proto.DruidPrimeGlyph\n */\nexport enum DruidPrimeGlyph {\n    /**\n     * @generated from protobuf enum value: DruidPrimeGlyphNone = 0;\n     */\n    DruidPrimeGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBerserk = 45601;\n     */\n    GlyphOfBerserk = 45601,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodletting = 40901;\n     */\n    GlyphOfBloodletting = 40901,\n    /**\n     * @generated from protobuf enum value: GlyphOfInsectSwarm = 40919;\n     */\n    GlyphOfInsectSwarm = 40919,\n    /**\n     * @generated from protobuf enum value: GlyphOfLacerate = 67484;\n     */\n    GlyphOfLacerate = 67484,\n    /**\n     * @generated from protobuf enum value: GlyphOfLifebloom = 40915;\n     */\n    GlyphOfLifebloom = 40915,\n    /**\n     * @generated from protobuf enum value: GlyphOfMangle = 40900;\n     */\n    GlyphOfMangle = 40900,\n    /**\n     * @generated from protobuf enum value: GlyphOfMoonfire = 40923;\n     */\n    GlyphOfMoonfire = 40923,\n    /**\n     * @generated from protobuf enum value: GlyphOfRegrowth = 40912;\n     */\n    GlyphOfRegrowth = 40912,\n    /**\n     * @generated from protobuf enum value: GlyphOfRejuvenation = 40913;\n     */\n    GlyphOfRejuvenation = 40913,\n    /**\n     * @generated from protobuf enum value: GlyphOfRip = 40902;\n     */\n    GlyphOfRip = 40902,\n    /**\n     * @generated from protobuf enum value: GlyphOfSavageRoar = 45604;\n     */\n    GlyphOfSavageRoar = 45604,\n    /**\n     * @generated from protobuf enum value: GlyphOfStarfire = 40916;\n     */\n    GlyphOfStarfire = 40916,\n    /**\n     * @generated from protobuf enum value: GlyphOfStarsurge = 45603;\n     */\n    GlyphOfStarsurge = 45603,\n    /**\n     * @generated from protobuf enum value: GlyphOfSwiftmend = 40906;\n     */\n    GlyphOfSwiftmend = 40906,\n    /**\n     * @generated from protobuf enum value: GlyphOfTigersFury = 67487;\n     */\n    GlyphOfTigersFury = 67487,\n    /**\n     * @generated from protobuf enum value: GlyphOfWrath = 40922;\n     */\n    GlyphOfWrath = 40922\n}\n/**\n * @generated from protobuf enum proto.DruidMajorGlyph\n */\nexport enum DruidMajorGlyph {\n    /**\n     * @generated from protobuf enum value: DruidMajorGlyphNone = 0;\n     */\n    DruidMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBarkskin = 45623;\n     */\n    GlyphOfBarkskin = 45623,\n    /**\n     * @generated from protobuf enum value: GlyphOfEntanglingRoots = 40924;\n     */\n    GlyphOfEntanglingRoots = 40924,\n    /**\n     * @generated from protobuf enum value: GlyphOfFaerieFire = 67485;\n     */\n    GlyphOfFaerieFire = 67485,\n    /**\n     * @generated from protobuf enum value: GlyphOfFeralCharge = 67486;\n     */\n    GlyphOfFeralCharge = 67486,\n    /**\n     * @generated from protobuf enum value: GlyphOfFerociousBite = 48720;\n     */\n    GlyphOfFerociousBite = 48720,\n    /**\n     * @generated from protobuf enum value: GlyphOfFocus = 44928;\n     */\n    GlyphOfFocus = 44928,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrenziedRegeneration = 40896;\n     */\n    GlyphOfFrenziedRegeneration = 40896,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealingTouch = 40914;\n     */\n    GlyphOfHealingTouch = 40914,\n    /**\n     * @generated from protobuf enum value: GlyphOfHurricane = 40920;\n     */\n    GlyphOfHurricane = 40920,\n    /**\n     * @generated from protobuf enum value: GlyphOfInnervate = 40908;\n     */\n    GlyphOfInnervate = 40908,\n    /**\n     * @generated from protobuf enum value: GlyphOfMaul = 40897;\n     */\n    GlyphOfMaul = 40897,\n    /**\n     * @generated from protobuf enum value: GlyphOfMonsoon = 45622;\n     */\n    GlyphOfMonsoon = 45622,\n    /**\n     * @generated from protobuf enum value: GlyphOfOmenOfClarity = 206580;\n     */\n    GlyphOfOmenOfClarity = 206580,\n    /**\n     * @generated from protobuf enum value: GlyphOfPounce = 40903;\n     */\n    GlyphOfPounce = 40903,\n    /**\n     * @generated from protobuf enum value: GlyphOfRebirth = 40909;\n     */\n    GlyphOfRebirth = 40909,\n    /**\n     * @generated from protobuf enum value: GlyphOfSolarBeam = 40899;\n     */\n    GlyphOfSolarBeam = 40899,\n    /**\n     * @generated from protobuf enum value: GlyphOfStarfall = 40921;\n     */\n    GlyphOfStarfall = 40921,\n    /**\n     * @generated from protobuf enum value: GlyphOfThorns = 43332;\n     */\n    GlyphOfThorns = 43332,\n    /**\n     * @generated from protobuf enum value: GlyphOfWildGrowth = 45602;\n     */\n    GlyphOfWildGrowth = 45602\n}\n/**\n * @generated from protobuf enum proto.DruidMinorGlyph\n */\nexport enum DruidMinorGlyph {\n    /**\n     * @generated from protobuf enum value: DruidMinorGlyphNone = 0;\n     */\n    DruidMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAquaticForm = 43316;\n     */\n    GlyphOfAquaticForm = 43316,\n    /**\n     * @generated from protobuf enum value: GlyphOfChallengingRoar = 43334;\n     */\n    GlyphOfChallengingRoar = 43334,\n    /**\n     * @generated from protobuf enum value: GlyphOfDash = 43674;\n     */\n    GlyphOfDash = 43674,\n    /**\n     * @generated from protobuf enum value: GlyphOfMarkOfTheWild = 43335;\n     */\n    GlyphOfMarkOfTheWild = 43335,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheTreant = 68039;\n     */\n    GlyphOfTheTreant = 68039,\n    /**\n     * @generated from protobuf enum value: GlyphOfTyphoon = 44922;\n     */\n    GlyphOfTyphoon = 44922,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnburdenedRebirth = 43331;\n     */\n    GlyphOfUnburdenedRebirth = 43331\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass DruidTalents$Type extends MessageType<DruidTalents> {\n    constructor() {\n        super(\"proto.DruidTalents\", [\n            { no: 1, name: \"natures_grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"starlight_wrath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"natures_majesty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"genesis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"moonglow\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"balance_of_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"euphoria\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"moonkin_form\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"typhoon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"shooting_stars\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"owlkin_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"gale_winds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"solar_beam\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"dreamstate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"force_of_nature\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"sunfire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"earth_and_moon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"fungal_growth\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"lunar_shower\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"starfall\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 21, name: \"feral_swiftness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"furor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"predatory_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"infected_wounds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"fury_swipes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"primal_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"feral_aggression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"king_of_the_jungle\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"feral_charge\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"stampede\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"thick_hide\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"leader_of_the_pack\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"brutal_impact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"nurturing_instinct\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"primal_madness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"survival_instincts\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"endless_carnage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"natural_reaction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"blood_in_the_water\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"rend_and_tear\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"pulverize\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 42, name: \"berserk\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 43, name: \"blessing_of_the_grove\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"natural_shapeshifter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"naturalist\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"heart_of_the_wild\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"perseverance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"master_shapeshifter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 49, name: \"improved_rejuvenation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"living_seed\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"revitalize\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"natures_swiftness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"fury_of_stormrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"natures_bounty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"empowered_touch\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"malfurions_gift\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"efflorescence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"wild_growth\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 59, name: \"natures_cure\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 60, name: \"natures_ward\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"gift_of_the_earthmother\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"swift_rejuvenation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 63, name: \"tree_of_life\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DruidTalents>): DruidTalents {\n        const message = { naturesGrace: 0, starlightWrath: 0, naturesMajesty: 0, genesis: 0, moonglow: 0, balanceOfPower: 0, euphoria: 0, moonkinForm: false, typhoon: false, shootingStars: 0, owlkinFrenzy: 0, galeWinds: 0, solarBeam: false, dreamstate: 0, forceOfNature: false, sunfire: false, earthAndMoon: false, fungalGrowth: 0, lunarShower: 0, starfall: false, feralSwiftness: 0, furor: 0, predatoryStrikes: 0, infectedWounds: 0, furySwipes: 0, primalFury: 0, feralAggression: 0, kingOfTheJungle: 0, feralCharge: false, stampede: 0, thickHide: 0, leaderOfThePack: false, brutalImpact: 0, nurturingInstinct: 0, primalMadness: 0, survivalInstincts: false, endlessCarnage: 0, naturalReaction: 0, bloodInTheWater: 0, rendAndTear: 0, pulverize: false, berserk: false, blessingOfTheGrove: 0, naturalShapeshifter: 0, naturalist: 0, heartOfTheWild: 0, perseverance: 0, masterShapeshifter: false, improvedRejuvenation: 0, livingSeed: 0, revitalize: 0, naturesSwiftness: false, furyOfStormrage: 0, naturesBounty: 0, empoweredTouch: 0, malfurionsGift: 0, efflorescence: 0, wildGrowth: false, naturesCure: false, naturesWard: 0, giftOfTheEarthmother: 0, swiftRejuvenation: false, treeOfLife: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DruidTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DruidTalents): DruidTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 natures_grace */ 1:\n                    message.naturesGrace = reader.int32();\n                    break;\n                case /* int32 starlight_wrath */ 2:\n                    message.starlightWrath = reader.int32();\n                    break;\n                case /* int32 natures_majesty */ 3:\n                    message.naturesMajesty = reader.int32();\n                    break;\n                case /* int32 genesis */ 4:\n                    message.genesis = reader.int32();\n                    break;\n                case /* int32 moonglow */ 5:\n                    message.moonglow = reader.int32();\n                    break;\n                case /* int32 balance_of_power */ 6:\n                    message.balanceOfPower = reader.int32();\n                    break;\n                case /* int32 euphoria */ 7:\n                    message.euphoria = reader.int32();\n                    break;\n                case /* bool moonkin_form */ 8:\n                    message.moonkinForm = reader.bool();\n                    break;\n                case /* bool typhoon */ 9:\n                    message.typhoon = reader.bool();\n                    break;\n                case /* int32 shooting_stars */ 10:\n                    message.shootingStars = reader.int32();\n                    break;\n                case /* int32 owlkin_frenzy */ 11:\n                    message.owlkinFrenzy = reader.int32();\n                    break;\n                case /* int32 gale_winds */ 12:\n                    message.galeWinds = reader.int32();\n                    break;\n                case /* bool solar_beam */ 13:\n                    message.solarBeam = reader.bool();\n                    break;\n                case /* int32 dreamstate */ 14:\n                    message.dreamstate = reader.int32();\n                    break;\n                case /* bool force_of_nature */ 15:\n                    message.forceOfNature = reader.bool();\n                    break;\n                case /* bool sunfire */ 16:\n                    message.sunfire = reader.bool();\n                    break;\n                case /* bool earth_and_moon */ 17:\n                    message.earthAndMoon = reader.bool();\n                    break;\n                case /* int32 fungal_growth */ 18:\n                    message.fungalGrowth = reader.int32();\n                    break;\n                case /* int32 lunar_shower */ 19:\n                    message.lunarShower = reader.int32();\n                    break;\n                case /* bool starfall */ 20:\n                    message.starfall = reader.bool();\n                    break;\n                case /* int32 feral_swiftness */ 21:\n                    message.feralSwiftness = reader.int32();\n                    break;\n                case /* int32 furor */ 22:\n                    message.furor = reader.int32();\n                    break;\n                case /* int32 predatory_strikes */ 23:\n                    message.predatoryStrikes = reader.int32();\n                    break;\n                case /* int32 infected_wounds */ 24:\n                    message.infectedWounds = reader.int32();\n                    break;\n                case /* int32 fury_swipes */ 25:\n                    message.furySwipes = reader.int32();\n                    break;\n                case /* int32 primal_fury */ 26:\n                    message.primalFury = reader.int32();\n                    break;\n                case /* int32 feral_aggression */ 27:\n                    message.feralAggression = reader.int32();\n                    break;\n                case /* int32 king_of_the_jungle */ 28:\n                    message.kingOfTheJungle = reader.int32();\n                    break;\n                case /* bool feral_charge */ 29:\n                    message.feralCharge = reader.bool();\n                    break;\n                case /* int32 stampede */ 30:\n                    message.stampede = reader.int32();\n                    break;\n                case /* int32 thick_hide */ 31:\n                    message.thickHide = reader.int32();\n                    break;\n                case /* bool leader_of_the_pack */ 32:\n                    message.leaderOfThePack = reader.bool();\n                    break;\n                case /* int32 brutal_impact */ 33:\n                    message.brutalImpact = reader.int32();\n                    break;\n                case /* int32 nurturing_instinct */ 34:\n                    message.nurturingInstinct = reader.int32();\n                    break;\n                case /* int32 primal_madness */ 35:\n                    message.primalMadness = reader.int32();\n                    break;\n                case /* bool survival_instincts */ 36:\n                    message.survivalInstincts = reader.bool();\n                    break;\n                case /* int32 endless_carnage */ 37:\n                    message.endlessCarnage = reader.int32();\n                    break;\n                case /* int32 natural_reaction */ 38:\n                    message.naturalReaction = reader.int32();\n                    break;\n                case /* int32 blood_in_the_water */ 39:\n                    message.bloodInTheWater = reader.int32();\n                    break;\n                case /* int32 rend_and_tear */ 40:\n                    message.rendAndTear = reader.int32();\n                    break;\n                case /* bool pulverize */ 41:\n                    message.pulverize = reader.bool();\n                    break;\n                case /* bool berserk */ 42:\n                    message.berserk = reader.bool();\n                    break;\n                case /* int32 blessing_of_the_grove */ 43:\n                    message.blessingOfTheGrove = reader.int32();\n                    break;\n                case /* int32 natural_shapeshifter */ 44:\n                    message.naturalShapeshifter = reader.int32();\n                    break;\n                case /* int32 naturalist */ 45:\n                    message.naturalist = reader.int32();\n                    break;\n                case /* int32 heart_of_the_wild */ 46:\n                    message.heartOfTheWild = reader.int32();\n                    break;\n                case /* int32 perseverance */ 47:\n                    message.perseverance = reader.int32();\n                    break;\n                case /* bool master_shapeshifter */ 48:\n                    message.masterShapeshifter = reader.bool();\n                    break;\n                case /* int32 improved_rejuvenation */ 49:\n                    message.improvedRejuvenation = reader.int32();\n                    break;\n                case /* int32 living_seed */ 50:\n                    message.livingSeed = reader.int32();\n                    break;\n                case /* int32 revitalize */ 51:\n                    message.revitalize = reader.int32();\n                    break;\n                case /* bool natures_swiftness */ 52:\n                    message.naturesSwiftness = reader.bool();\n                    break;\n                case /* int32 fury_of_stormrage */ 53:\n                    message.furyOfStormrage = reader.int32();\n                    break;\n                case /* int32 natures_bounty */ 54:\n                    message.naturesBounty = reader.int32();\n                    break;\n                case /* int32 empowered_touch */ 55:\n                    message.empoweredTouch = reader.int32();\n                    break;\n                case /* int32 malfurions_gift */ 56:\n                    message.malfurionsGift = reader.int32();\n                    break;\n                case /* int32 efflorescence */ 57:\n                    message.efflorescence = reader.int32();\n                    break;\n                case /* bool wild_growth */ 58:\n                    message.wildGrowth = reader.bool();\n                    break;\n                case /* bool natures_cure */ 59:\n                    message.naturesCure = reader.bool();\n                    break;\n                case /* int32 natures_ward */ 60:\n                    message.naturesWard = reader.int32();\n                    break;\n                case /* int32 gift_of_the_earthmother */ 61:\n                    message.giftOfTheEarthmother = reader.int32();\n                    break;\n                case /* bool swift_rejuvenation */ 62:\n                    message.swiftRejuvenation = reader.bool();\n                    break;\n                case /* bool tree_of_life */ 63:\n                    message.treeOfLife = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DruidTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 natures_grace = 1; */\n        if (message.naturesGrace !== 0)\n            writer.tag(1, WireType.Varint).int32(message.naturesGrace);\n        /* int32 starlight_wrath = 2; */\n        if (message.starlightWrath !== 0)\n            writer.tag(2, WireType.Varint).int32(message.starlightWrath);\n        /* int32 natures_majesty = 3; */\n        if (message.naturesMajesty !== 0)\n            writer.tag(3, WireType.Varint).int32(message.naturesMajesty);\n        /* int32 genesis = 4; */\n        if (message.genesis !== 0)\n            writer.tag(4, WireType.Varint).int32(message.genesis);\n        /* int32 moonglow = 5; */\n        if (message.moonglow !== 0)\n            writer.tag(5, WireType.Varint).int32(message.moonglow);\n        /* int32 balance_of_power = 6; */\n        if (message.balanceOfPower !== 0)\n            writer.tag(6, WireType.Varint).int32(message.balanceOfPower);\n        /* int32 euphoria = 7; */\n        if (message.euphoria !== 0)\n            writer.tag(7, WireType.Varint).int32(message.euphoria);\n        /* bool moonkin_form = 8; */\n        if (message.moonkinForm !== false)\n            writer.tag(8, WireType.Varint).bool(message.moonkinForm);\n        /* bool typhoon = 9; */\n        if (message.typhoon !== false)\n            writer.tag(9, WireType.Varint).bool(message.typhoon);\n        /* int32 shooting_stars = 10; */\n        if (message.shootingStars !== 0)\n            writer.tag(10, WireType.Varint).int32(message.shootingStars);\n        /* int32 owlkin_frenzy = 11; */\n        if (message.owlkinFrenzy !== 0)\n            writer.tag(11, WireType.Varint).int32(message.owlkinFrenzy);\n        /* int32 gale_winds = 12; */\n        if (message.galeWinds !== 0)\n            writer.tag(12, WireType.Varint).int32(message.galeWinds);\n        /* bool solar_beam = 13; */\n        if (message.solarBeam !== false)\n            writer.tag(13, WireType.Varint).bool(message.solarBeam);\n        /* int32 dreamstate = 14; */\n        if (message.dreamstate !== 0)\n            writer.tag(14, WireType.Varint).int32(message.dreamstate);\n        /* bool force_of_nature = 15; */\n        if (message.forceOfNature !== false)\n            writer.tag(15, WireType.Varint).bool(message.forceOfNature);\n        /* bool sunfire = 16; */\n        if (message.sunfire !== false)\n            writer.tag(16, WireType.Varint).bool(message.sunfire);\n        /* bool earth_and_moon = 17; */\n        if (message.earthAndMoon !== false)\n            writer.tag(17, WireType.Varint).bool(message.earthAndMoon);\n        /* int32 fungal_growth = 18; */\n        if (message.fungalGrowth !== 0)\n            writer.tag(18, WireType.Varint).int32(message.fungalGrowth);\n        /* int32 lunar_shower = 19; */\n        if (message.lunarShower !== 0)\n            writer.tag(19, WireType.Varint).int32(message.lunarShower);\n        /* bool starfall = 20; */\n        if (message.starfall !== false)\n            writer.tag(20, WireType.Varint).bool(message.starfall);\n        /* int32 feral_swiftness = 21; */\n        if (message.feralSwiftness !== 0)\n            writer.tag(21, WireType.Varint).int32(message.feralSwiftness);\n        /* int32 furor = 22; */\n        if (message.furor !== 0)\n            writer.tag(22, WireType.Varint).int32(message.furor);\n        /* int32 predatory_strikes = 23; */\n        if (message.predatoryStrikes !== 0)\n            writer.tag(23, WireType.Varint).int32(message.predatoryStrikes);\n        /* int32 infected_wounds = 24; */\n        if (message.infectedWounds !== 0)\n            writer.tag(24, WireType.Varint).int32(message.infectedWounds);\n        /* int32 fury_swipes = 25; */\n        if (message.furySwipes !== 0)\n            writer.tag(25, WireType.Varint).int32(message.furySwipes);\n        /* int32 primal_fury = 26; */\n        if (message.primalFury !== 0)\n            writer.tag(26, WireType.Varint).int32(message.primalFury);\n        /* int32 feral_aggression = 27; */\n        if (message.feralAggression !== 0)\n            writer.tag(27, WireType.Varint).int32(message.feralAggression);\n        /* int32 king_of_the_jungle = 28; */\n        if (message.kingOfTheJungle !== 0)\n            writer.tag(28, WireType.Varint).int32(message.kingOfTheJungle);\n        /* bool feral_charge = 29; */\n        if (message.feralCharge !== false)\n            writer.tag(29, WireType.Varint).bool(message.feralCharge);\n        /* int32 stampede = 30; */\n        if (message.stampede !== 0)\n            writer.tag(30, WireType.Varint).int32(message.stampede);\n        /* int32 thick_hide = 31; */\n        if (message.thickHide !== 0)\n            writer.tag(31, WireType.Varint).int32(message.thickHide);\n        /* bool leader_of_the_pack = 32; */\n        if (message.leaderOfThePack !== false)\n            writer.tag(32, WireType.Varint).bool(message.leaderOfThePack);\n        /* int32 brutal_impact = 33; */\n        if (message.brutalImpact !== 0)\n            writer.tag(33, WireType.Varint).int32(message.brutalImpact);\n        /* int32 nurturing_instinct = 34; */\n        if (message.nurturingInstinct !== 0)\n            writer.tag(34, WireType.Varint).int32(message.nurturingInstinct);\n        /* int32 primal_madness = 35; */\n        if (message.primalMadness !== 0)\n            writer.tag(35, WireType.Varint).int32(message.primalMadness);\n        /* bool survival_instincts = 36; */\n        if (message.survivalInstincts !== false)\n            writer.tag(36, WireType.Varint).bool(message.survivalInstincts);\n        /* int32 endless_carnage = 37; */\n        if (message.endlessCarnage !== 0)\n            writer.tag(37, WireType.Varint).int32(message.endlessCarnage);\n        /* int32 natural_reaction = 38; */\n        if (message.naturalReaction !== 0)\n            writer.tag(38, WireType.Varint).int32(message.naturalReaction);\n        /* int32 blood_in_the_water = 39; */\n        if (message.bloodInTheWater !== 0)\n            writer.tag(39, WireType.Varint).int32(message.bloodInTheWater);\n        /* int32 rend_and_tear = 40; */\n        if (message.rendAndTear !== 0)\n            writer.tag(40, WireType.Varint).int32(message.rendAndTear);\n        /* bool pulverize = 41; */\n        if (message.pulverize !== false)\n            writer.tag(41, WireType.Varint).bool(message.pulverize);\n        /* bool berserk = 42; */\n        if (message.berserk !== false)\n            writer.tag(42, WireType.Varint).bool(message.berserk);\n        /* int32 blessing_of_the_grove = 43; */\n        if (message.blessingOfTheGrove !== 0)\n            writer.tag(43, WireType.Varint).int32(message.blessingOfTheGrove);\n        /* int32 natural_shapeshifter = 44; */\n        if (message.naturalShapeshifter !== 0)\n            writer.tag(44, WireType.Varint).int32(message.naturalShapeshifter);\n        /* int32 naturalist = 45; */\n        if (message.naturalist !== 0)\n            writer.tag(45, WireType.Varint).int32(message.naturalist);\n        /* int32 heart_of_the_wild = 46; */\n        if (message.heartOfTheWild !== 0)\n            writer.tag(46, WireType.Varint).int32(message.heartOfTheWild);\n        /* int32 perseverance = 47; */\n        if (message.perseverance !== 0)\n            writer.tag(47, WireType.Varint).int32(message.perseverance);\n        /* bool master_shapeshifter = 48; */\n        if (message.masterShapeshifter !== false)\n            writer.tag(48, WireType.Varint).bool(message.masterShapeshifter);\n        /* int32 improved_rejuvenation = 49; */\n        if (message.improvedRejuvenation !== 0)\n            writer.tag(49, WireType.Varint).int32(message.improvedRejuvenation);\n        /* int32 living_seed = 50; */\n        if (message.livingSeed !== 0)\n            writer.tag(50, WireType.Varint).int32(message.livingSeed);\n        /* int32 revitalize = 51; */\n        if (message.revitalize !== 0)\n            writer.tag(51, WireType.Varint).int32(message.revitalize);\n        /* bool natures_swiftness = 52; */\n        if (message.naturesSwiftness !== false)\n            writer.tag(52, WireType.Varint).bool(message.naturesSwiftness);\n        /* int32 fury_of_stormrage = 53; */\n        if (message.furyOfStormrage !== 0)\n            writer.tag(53, WireType.Varint).int32(message.furyOfStormrage);\n        /* int32 natures_bounty = 54; */\n        if (message.naturesBounty !== 0)\n            writer.tag(54, WireType.Varint).int32(message.naturesBounty);\n        /* int32 empowered_touch = 55; */\n        if (message.empoweredTouch !== 0)\n            writer.tag(55, WireType.Varint).int32(message.empoweredTouch);\n        /* int32 malfurions_gift = 56; */\n        if (message.malfurionsGift !== 0)\n            writer.tag(56, WireType.Varint).int32(message.malfurionsGift);\n        /* int32 efflorescence = 57; */\n        if (message.efflorescence !== 0)\n            writer.tag(57, WireType.Varint).int32(message.efflorescence);\n        /* bool wild_growth = 58; */\n        if (message.wildGrowth !== false)\n            writer.tag(58, WireType.Varint).bool(message.wildGrowth);\n        /* bool natures_cure = 59; */\n        if (message.naturesCure !== false)\n            writer.tag(59, WireType.Varint).bool(message.naturesCure);\n        /* int32 natures_ward = 60; */\n        if (message.naturesWard !== 0)\n            writer.tag(60, WireType.Varint).int32(message.naturesWard);\n        /* int32 gift_of_the_earthmother = 61; */\n        if (message.giftOfTheEarthmother !== 0)\n            writer.tag(61, WireType.Varint).int32(message.giftOfTheEarthmother);\n        /* bool swift_rejuvenation = 62; */\n        if (message.swiftRejuvenation !== false)\n            writer.tag(62, WireType.Varint).bool(message.swiftRejuvenation);\n        /* bool tree_of_life = 63; */\n        if (message.treeOfLife !== false)\n            writer.tag(63, WireType.Varint).bool(message.treeOfLife);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DruidTalents\n */\nexport const DruidTalents = new DruidTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DruidOptions$Type extends MessageType<DruidOptions> {\n    constructor() {\n        super(\"proto.DruidOptions\", [\n            { no: 1, name: \"innervate_target\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<DruidOptions>): DruidOptions {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DruidOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DruidOptions): DruidOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference innervate_target */ 1:\n                    message.innervateTarget = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.innervateTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DruidOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference innervate_target = 1; */\n        if (message.innervateTarget)\n            UnitReference.internalBinaryWrite(message.innervateTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DruidOptions\n */\nexport const DruidOptions = new DruidOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BalanceDruid$Type extends MessageType<BalanceDruid> {\n    constructor() {\n        super(\"proto.BalanceDruid\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => BalanceDruid_Options }\n        ]);\n    }\n    create(value?: PartialMessage<BalanceDruid>): BalanceDruid {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BalanceDruid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalanceDruid): BalanceDruid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.BalanceDruid.Options options */ 3:\n                    message.options = BalanceDruid_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BalanceDruid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.BalanceDruid.Options options = 3; */\n        if (message.options)\n            BalanceDruid_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BalanceDruid\n */\nexport const BalanceDruid = new BalanceDruid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BalanceDruid_Rotation$Type extends MessageType<BalanceDruid_Rotation> {\n    constructor() {\n        super(\"proto.BalanceDruid.Rotation\", []);\n    }\n    create(value?: PartialMessage<BalanceDruid_Rotation>): BalanceDruid_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BalanceDruid_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalanceDruid_Rotation): BalanceDruid_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: BalanceDruid_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BalanceDruid.Rotation\n */\nexport const BalanceDruid_Rotation = new BalanceDruid_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BalanceDruid_Options$Type extends MessageType<BalanceDruid_Options> {\n    constructor() {\n        super(\"proto.BalanceDruid.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => DruidOptions },\n            { no: 2, name: \"okf_uptime\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ }\n        ]);\n    }\n    create(value?: PartialMessage<BalanceDruid_Options>): BalanceDruid_Options {\n        const message = { okfUptime: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BalanceDruid_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalanceDruid_Options): BalanceDruid_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DruidOptions class_options */ 1:\n                    message.classOptions = DruidOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* float okf_uptime */ 2:\n                    message.okfUptime = reader.float();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BalanceDruid_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DruidOptions class_options = 1; */\n        if (message.classOptions)\n            DruidOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* float okf_uptime = 2; */\n        if (message.okfUptime !== 0)\n            writer.tag(2, WireType.Bit32).float(message.okfUptime);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BalanceDruid.Options\n */\nexport const BalanceDruid_Options = new BalanceDruid_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralDruid$Type extends MessageType<FeralDruid> {\n    constructor() {\n        super(\"proto.FeralDruid\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => FeralDruid_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => FeralDruid_Options }\n        ]);\n    }\n    create(value?: PartialMessage<FeralDruid>): FeralDruid {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralDruid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralDruid): FeralDruid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FeralDruid.Rotation rotation */ 1:\n                    message.rotation = FeralDruid_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.FeralDruid.Options options */ 3:\n                    message.options = FeralDruid_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralDruid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FeralDruid.Rotation rotation = 1; */\n        if (message.rotation)\n            FeralDruid_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FeralDruid.Options options = 3; */\n        if (message.options)\n            FeralDruid_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralDruid\n */\nexport const FeralDruid = new FeralDruid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralDruid_Rotation$Type extends MessageType<FeralDruid_Rotation> {\n    constructor() {\n        super(\"proto.FeralDruid.Rotation\", [\n            { no: 1, name: \"bear_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"maintain_faerie_fire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"min_combos_for_rip\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"use_rake\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"use_bite\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"mangle_spam\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"bite_time\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 8, name: \"min_combos_for_bite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"bite_during_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"rip_leeway\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"min_roar_offset\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 12, name: \"bite_mode_type\", kind: \"enum\", T: () => [\"proto.FeralDruid.Rotation.BiteModeType\", FeralDruid_Rotation_BiteModeType] },\n            { no: 14, name: \"snek_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"manual_params\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 21, name: \"rotation_type\", kind: \"enum\", T: () => [\"proto.FeralDruid.Rotation.AplType\", FeralDruid_Rotation_AplType] },\n            { no: 9, name: \"allow_aoe_berserk\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"melee_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralDruid_Rotation>): FeralDruid_Rotation {\n        const message = { bearWeave: false, maintainFaerieFire: false, minCombosForRip: 0, useRake: false, useBite: false, mangleSpam: false, biteTime: 0, minCombosForBite: 0, biteDuringExecute: false, ripLeeway: 0, minRoarOffset: 0, biteModeType: 0, snekWeave: false, manualParams: false, rotationType: 0, allowAoeBerserk: false, meleeWeave: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralDruid_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralDruid_Rotation): FeralDruid_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool bear_weave */ 1:\n                    message.bearWeave = reader.bool();\n                    break;\n                case /* bool maintain_faerie_fire */ 2:\n                    message.maintainFaerieFire = reader.bool();\n                    break;\n                case /* int32 min_combos_for_rip */ 3:\n                    message.minCombosForRip = reader.int32();\n                    break;\n                case /* bool use_rake */ 4:\n                    message.useRake = reader.bool();\n                    break;\n                case /* bool use_bite */ 5:\n                    message.useBite = reader.bool();\n                    break;\n                case /* bool mangle_spam */ 6:\n                    message.mangleSpam = reader.bool();\n                    break;\n                case /* float bite_time */ 7:\n                    message.biteTime = reader.float();\n                    break;\n                case /* int32 min_combos_for_bite */ 8:\n                    message.minCombosForBite = reader.int32();\n                    break;\n                case /* bool bite_during_execute */ 13:\n                    message.biteDuringExecute = reader.bool();\n                    break;\n                case /* int32 rip_leeway */ 19:\n                    message.ripLeeway = reader.int32();\n                    break;\n                case /* float min_roar_offset */ 11:\n                    message.minRoarOffset = reader.float();\n                    break;\n                case /* proto.FeralDruid.Rotation.BiteModeType bite_mode_type */ 12:\n                    message.biteModeType = reader.int32();\n                    break;\n                case /* bool snek_weave */ 14:\n                    message.snekWeave = reader.bool();\n                    break;\n                case /* bool manual_params */ 17:\n                    message.manualParams = reader.bool();\n                    break;\n                case /* proto.FeralDruid.Rotation.AplType rotation_type */ 21:\n                    message.rotationType = reader.int32();\n                    break;\n                case /* bool allow_aoe_berserk */ 9:\n                    message.allowAoeBerserk = reader.bool();\n                    break;\n                case /* bool melee_weave */ 15:\n                    message.meleeWeave = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralDruid_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool bear_weave = 1; */\n        if (message.bearWeave !== false)\n            writer.tag(1, WireType.Varint).bool(message.bearWeave);\n        /* bool maintain_faerie_fire = 2; */\n        if (message.maintainFaerieFire !== false)\n            writer.tag(2, WireType.Varint).bool(message.maintainFaerieFire);\n        /* int32 min_combos_for_rip = 3; */\n        if (message.minCombosForRip !== 0)\n            writer.tag(3, WireType.Varint).int32(message.minCombosForRip);\n        /* bool use_rake = 4; */\n        if (message.useRake !== false)\n            writer.tag(4, WireType.Varint).bool(message.useRake);\n        /* bool use_bite = 5; */\n        if (message.useBite !== false)\n            writer.tag(5, WireType.Varint).bool(message.useBite);\n        /* bool mangle_spam = 6; */\n        if (message.mangleSpam !== false)\n            writer.tag(6, WireType.Varint).bool(message.mangleSpam);\n        /* float bite_time = 7; */\n        if (message.biteTime !== 0)\n            writer.tag(7, WireType.Bit32).float(message.biteTime);\n        /* int32 min_combos_for_bite = 8; */\n        if (message.minCombosForBite !== 0)\n            writer.tag(8, WireType.Varint).int32(message.minCombosForBite);\n        /* bool bite_during_execute = 13; */\n        if (message.biteDuringExecute !== false)\n            writer.tag(13, WireType.Varint).bool(message.biteDuringExecute);\n        /* int32 rip_leeway = 19; */\n        if (message.ripLeeway !== 0)\n            writer.tag(19, WireType.Varint).int32(message.ripLeeway);\n        /* float min_roar_offset = 11; */\n        if (message.minRoarOffset !== 0)\n            writer.tag(11, WireType.Bit32).float(message.minRoarOffset);\n        /* proto.FeralDruid.Rotation.BiteModeType bite_mode_type = 12; */\n        if (message.biteModeType !== 0)\n            writer.tag(12, WireType.Varint).int32(message.biteModeType);\n        /* bool snek_weave = 14; */\n        if (message.snekWeave !== false)\n            writer.tag(14, WireType.Varint).bool(message.snekWeave);\n        /* bool manual_params = 17; */\n        if (message.manualParams !== false)\n            writer.tag(17, WireType.Varint).bool(message.manualParams);\n        /* proto.FeralDruid.Rotation.AplType rotation_type = 21; */\n        if (message.rotationType !== 0)\n            writer.tag(21, WireType.Varint).int32(message.rotationType);\n        /* bool allow_aoe_berserk = 9; */\n        if (message.allowAoeBerserk !== false)\n            writer.tag(9, WireType.Varint).bool(message.allowAoeBerserk);\n        /* bool melee_weave = 15; */\n        if (message.meleeWeave !== false)\n            writer.tag(15, WireType.Varint).bool(message.meleeWeave);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralDruid.Rotation\n */\nexport const FeralDruid_Rotation = new FeralDruid_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralDruid_Options$Type extends MessageType<FeralDruid_Options> {\n    constructor() {\n        super(\"proto.FeralDruid.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => DruidOptions },\n            { no: 4, name: \"assume_bleed_active\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralDruid_Options>): FeralDruid_Options {\n        const message = { assumeBleedActive: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralDruid_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralDruid_Options): FeralDruid_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DruidOptions class_options */ 1:\n                    message.classOptions = DruidOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* bool assume_bleed_active */ 4:\n                    message.assumeBleedActive = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralDruid_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DruidOptions class_options = 1; */\n        if (message.classOptions)\n            DruidOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool assume_bleed_active = 4; */\n        if (message.assumeBleedActive !== false)\n            writer.tag(4, WireType.Varint).bool(message.assumeBleedActive);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralDruid.Options\n */\nexport const FeralDruid_Options = new FeralDruid_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralTankDruid$Type extends MessageType<FeralTankDruid> {\n    constructor() {\n        super(\"proto.FeralTankDruid\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => FeralTankDruid_Options }\n        ]);\n    }\n    create(value?: PartialMessage<FeralTankDruid>): FeralTankDruid {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralTankDruid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralTankDruid): FeralTankDruid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FeralTankDruid.Options options */ 3:\n                    message.options = FeralTankDruid_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralTankDruid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FeralTankDruid.Options options = 3; */\n        if (message.options)\n            FeralTankDruid_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralTankDruid\n */\nexport const FeralTankDruid = new FeralTankDruid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralTankDruid_Rotation$Type extends MessageType<FeralTankDruid_Rotation> {\n    constructor() {\n        super(\"proto.FeralTankDruid.Rotation\", [\n            { no: 1, name: \"maul_rage_threshold\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"maintain_demoralizing_roar\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"lacerate_time\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralTankDruid_Rotation>): FeralTankDruid_Rotation {\n        const message = { maulRageThreshold: 0, maintainDemoralizingRoar: false, lacerateTime: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralTankDruid_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralTankDruid_Rotation): FeralTankDruid_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 maul_rage_threshold */ 1:\n                    message.maulRageThreshold = reader.int32();\n                    break;\n                case /* bool maintain_demoralizing_roar */ 2:\n                    message.maintainDemoralizingRoar = reader.bool();\n                    break;\n                case /* double lacerate_time */ 3:\n                    message.lacerateTime = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralTankDruid_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 maul_rage_threshold = 1; */\n        if (message.maulRageThreshold !== 0)\n            writer.tag(1, WireType.Varint).int32(message.maulRageThreshold);\n        /* bool maintain_demoralizing_roar = 2; */\n        if (message.maintainDemoralizingRoar !== false)\n            writer.tag(2, WireType.Varint).bool(message.maintainDemoralizingRoar);\n        /* double lacerate_time = 3; */\n        if (message.lacerateTime !== 0)\n            writer.tag(3, WireType.Bit64).double(message.lacerateTime);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralTankDruid.Rotation\n */\nexport const FeralTankDruid_Rotation = new FeralTankDruid_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralTankDruid_Options$Type extends MessageType<FeralTankDruid_Options> {\n    constructor() {\n        super(\"proto.FeralTankDruid.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => DruidOptions },\n            { no: 2, name: \"starting_rage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralTankDruid_Options>): FeralTankDruid_Options {\n        const message = { startingRage: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralTankDruid_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralTankDruid_Options): FeralTankDruid_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DruidOptions class_options */ 1:\n                    message.classOptions = DruidOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* double starting_rage */ 2:\n                    message.startingRage = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralTankDruid_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DruidOptions class_options = 1; */\n        if (message.classOptions)\n            DruidOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double starting_rage = 2; */\n        if (message.startingRage !== 0)\n            writer.tag(2, WireType.Bit64).double(message.startingRage);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralTankDruid.Options\n */\nexport const FeralTankDruid_Options = new FeralTankDruid_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RestorationDruid$Type extends MessageType<RestorationDruid> {\n    constructor() {\n        super(\"proto.RestorationDruid\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => RestorationDruid_Options }\n        ]);\n    }\n    create(value?: PartialMessage<RestorationDruid>): RestorationDruid {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RestorationDruid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestorationDruid): RestorationDruid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RestorationDruid.Options options */ 3:\n                    message.options = RestorationDruid_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RestorationDruid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RestorationDruid.Options options = 3; */\n        if (message.options)\n            RestorationDruid_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RestorationDruid\n */\nexport const RestorationDruid = new RestorationDruid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RestorationDruid_Rotation$Type extends MessageType<RestorationDruid_Rotation> {\n    constructor() {\n        super(\"proto.RestorationDruid.Rotation\", []);\n    }\n    create(value?: PartialMessage<RestorationDruid_Rotation>): RestorationDruid_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RestorationDruid_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestorationDruid_Rotation): RestorationDruid_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: RestorationDruid_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RestorationDruid.Rotation\n */\nexport const RestorationDruid_Rotation = new RestorationDruid_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RestorationDruid_Options$Type extends MessageType<RestorationDruid_Options> {\n    constructor() {\n        super(\"proto.RestorationDruid.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => DruidOptions }\n        ]);\n    }\n    create(value?: PartialMessage<RestorationDruid_Options>): RestorationDruid_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RestorationDruid_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestorationDruid_Options): RestorationDruid_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DruidOptions class_options */ 1:\n                    message.classOptions = DruidOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RestorationDruid_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DruidOptions class_options = 1; */\n        if (message.classOptions)\n            DruidOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RestorationDruid.Options\n */\nexport const RestorationDruid_Options = new RestorationDruid_Options$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"apl.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { ShamanTotems_TotemType } from \"./shaman\";\nimport { FeralDruid_Rotation_AplType } from \"./druid\";\nimport { UnitReference } from \"./common\";\nimport { ActionID } from \"./common\";\nimport { Cooldowns } from \"./common\";\n// Rotation options are based heavily on APL. See https://github.com/simulationcraft/simc/wiki/ActionLists.\n\n/**\n * @generated from protobuf message proto.APLRotation\n */\nexport interface APLRotation {\n    /**\n     * @generated from protobuf field: proto.APLRotation.Type type = 3;\n     */\n    type: APLRotation_Type;\n    /**\n     * @generated from protobuf field: proto.SimpleRotation simple = 4;\n     */\n    simple?: SimpleRotation;\n    /**\n     * @generated from protobuf field: repeated proto.APLPrepullAction prepull_actions = 1;\n     */\n    prepullActions: APLPrepullAction[];\n    /**\n     * @generated from protobuf field: repeated proto.APLListItem priority_list = 2;\n     */\n    priorityList: APLListItem[];\n}\n/**\n * @generated from protobuf enum proto.APLRotation.Type\n */\nexport enum APLRotation_Type {\n    /**\n     * @generated from protobuf enum value: TypeUnknown = 0;\n     */\n    TypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: TypeAuto = 1;\n     */\n    TypeAuto = 1,\n    /**\n     * @generated from protobuf enum value: TypeSimple = 2;\n     */\n    TypeSimple = 2,\n    /**\n     * @generated from protobuf enum value: TypeAPL = 3;\n     */\n    TypeAPL = 3\n}\n/**\n * @generated from protobuf message proto.SimpleRotation\n */\nexport interface SimpleRotation {\n    /**\n     * @generated from protobuf field: string spec_rotation_json = 1;\n     */\n    specRotationJson: string;\n    /**\n     * @generated from protobuf field: proto.Cooldowns cooldowns = 2;\n     */\n    cooldowns?: Cooldowns;\n}\n/**\n * @generated from protobuf message proto.APLPrepullAction\n */\nexport interface APLPrepullAction {\n    /**\n     * @generated from protobuf field: proto.APLAction action = 1;\n     */\n    action?: APLAction;\n    /**\n     * @generated from protobuf field: proto.APLValue do_at_value = 4;\n     */\n    doAtValue?: APLValue; // When to perform this prepull action. Should be a negative value.\n    /**\n     * @generated from protobuf field: bool hide = 3;\n     */\n    hide: boolean; // Causes this item to be ignored.\n}\n/**\n * @generated from protobuf message proto.APLListItem\n */\nexport interface APLListItem {\n    /**\n     * @generated from protobuf field: bool hide = 1;\n     */\n    hide: boolean; // Causes this item to be ignored.\n    /**\n     * @generated from protobuf field: string notes = 2;\n     */\n    notes: string; // Comments for the reader.\n    /**\n     * @generated from protobuf field: proto.APLAction action = 3;\n     */\n    action?: APLAction; // The action to be performed.\n}\n/**\n * NextIndex: 23\n *\n * @generated from protobuf message proto.APLAction\n */\nexport interface APLAction {\n    /**\n     * @generated from protobuf field: proto.APLValue condition = 1;\n     */\n    condition?: APLValue; // If set, action will only execute if value is true or != 0.\n    /**\n     * @generated from protobuf oneof: action\n     */\n    action: {\n        oneofKind: \"castSpell\";\n        /**\n         * Casting\n         *\n         * @generated from protobuf field: proto.APLActionCastSpell cast_spell = 3;\n         */\n        castSpell: APLActionCastSpell;\n    } | {\n        oneofKind: \"castFriendlySpell\";\n        /**\n         * @generated from protobuf field: proto.APLActionCastFriendlySpell cast_friendly_spell = 20;\n         */\n        castFriendlySpell: APLActionCastFriendlySpell;\n    } | {\n        oneofKind: \"channelSpell\";\n        /**\n         * @generated from protobuf field: proto.APLActionChannelSpell channel_spell = 16;\n         */\n        channelSpell: APLActionChannelSpell;\n    } | {\n        oneofKind: \"multidot\";\n        /**\n         * @generated from protobuf field: proto.APLActionMultidot multidot = 8;\n         */\n        multidot: APLActionMultidot;\n    } | {\n        oneofKind: \"multishield\";\n        /**\n         * @generated from protobuf field: proto.APLActionMultishield multishield = 12;\n         */\n        multishield: APLActionMultishield;\n    } | {\n        oneofKind: \"autocastOtherCooldowns\";\n        /**\n         * @generated from protobuf field: proto.APLActionAutocastOtherCooldowns autocast_other_cooldowns = 7;\n         */\n        autocastOtherCooldowns: APLActionAutocastOtherCooldowns;\n    } | {\n        oneofKind: \"wait\";\n        /**\n         * Timing\n         *\n         * @generated from protobuf field: proto.APLActionWait wait = 4;\n         */\n        wait: APLActionWait;\n    } | {\n        oneofKind: \"waitUntil\";\n        /**\n         * @generated from protobuf field: proto.APLActionWaitUntil wait_until = 14;\n         */\n        waitUntil: APLActionWaitUntil;\n    } | {\n        oneofKind: \"schedule\";\n        /**\n         * @generated from protobuf field: proto.APLActionSchedule schedule = 15;\n         */\n        schedule: APLActionSchedule;\n    } | {\n        oneofKind: \"sequence\";\n        /**\n         * Sequences\n         *\n         * @generated from protobuf field: proto.APLActionSequence sequence = 2;\n         */\n        sequence: APLActionSequence;\n    } | {\n        oneofKind: \"resetSequence\";\n        /**\n         * @generated from protobuf field: proto.APLActionResetSequence reset_sequence = 5;\n         */\n        resetSequence: APLActionResetSequence;\n    } | {\n        oneofKind: \"strictSequence\";\n        /**\n         * @generated from protobuf field: proto.APLActionStrictSequence strict_sequence = 6;\n         */\n        strictSequence: APLActionStrictSequence;\n    } | {\n        oneofKind: \"changeTarget\";\n        /**\n         * Misc\n         *\n         * @generated from protobuf field: proto.APLActionChangeTarget change_target = 9;\n         */\n        changeTarget: APLActionChangeTarget;\n    } | {\n        oneofKind: \"activateAura\";\n        /**\n         * @generated from protobuf field: proto.APLActionActivateAura activate_aura = 13;\n         */\n        activateAura: APLActionActivateAura;\n    } | {\n        oneofKind: \"cancelAura\";\n        /**\n         * @generated from protobuf field: proto.APLActionCancelAura cancel_aura = 10;\n         */\n        cancelAura: APLActionCancelAura;\n    } | {\n        oneofKind: \"triggerIcd\";\n        /**\n         * @generated from protobuf field: proto.APLActionTriggerICD trigger_icd = 11;\n         */\n        triggerIcd: APLActionTriggerICD;\n    } | {\n        oneofKind: \"itemSwap\";\n        /**\n         * @generated from protobuf field: proto.APLActionItemSwap item_swap = 17;\n         */\n        itemSwap: APLActionItemSwap;\n    } | {\n        oneofKind: \"move\";\n        /**\n         * @generated from protobuf field: proto.APLActionMove move = 21;\n         */\n        move: APLActionMove;\n    } | {\n        oneofKind: \"moveDuration\";\n        /**\n         * @generated from protobuf field: proto.APLActionMoveDuration move_duration = 22;\n         */\n        moveDuration: APLActionMoveDuration;\n    } | {\n        oneofKind: \"catOptimalRotationAction\";\n        /**\n         * Class or Spec-specific actions\n         *\n         * @generated from protobuf field: proto.APLActionCatOptimalRotationAction cat_optimal_rotation_action = 18;\n         */\n        catOptimalRotationAction: APLActionCatOptimalRotationAction;\n    } | {\n        oneofKind: \"customRotation\";\n        /**\n         * Internal use only, not exposed in UI.\n         *\n         * @generated from protobuf field: proto.APLActionCustomRotation custom_rotation = 19;\n         */\n        customRotation: APLActionCustomRotation;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * NextIndex: 73\n *\n * @generated from protobuf message proto.APLValue\n */\nexport interface APLValue {\n    /**\n     * @generated from protobuf oneof: value\n     */\n    value: {\n        oneofKind: \"const\";\n        /**\n         * Operators\n         *\n         * @generated from protobuf field: proto.APLValueConst const = 1;\n         */\n        const: APLValueConst;\n    } | {\n        oneofKind: \"and\";\n        /**\n         * @generated from protobuf field: proto.APLValueAnd and = 2;\n         */\n        and: APLValueAnd;\n    } | {\n        oneofKind: \"or\";\n        /**\n         * @generated from protobuf field: proto.APLValueOr or = 3;\n         */\n        or: APLValueOr;\n    } | {\n        oneofKind: \"not\";\n        /**\n         * @generated from protobuf field: proto.APLValueNot not = 4;\n         */\n        not: APLValueNot;\n    } | {\n        oneofKind: \"cmp\";\n        /**\n         * @generated from protobuf field: proto.APLValueCompare cmp = 5;\n         */\n        cmp: APLValueCompare;\n    } | {\n        oneofKind: \"math\";\n        /**\n         * @generated from protobuf field: proto.APLValueMath math = 38;\n         */\n        math: APLValueMath;\n    } | {\n        oneofKind: \"max\";\n        /**\n         * @generated from protobuf field: proto.APLValueMax max = 47;\n         */\n        max: APLValueMax;\n    } | {\n        oneofKind: \"min\";\n        /**\n         * @generated from protobuf field: proto.APLValueMin min = 48;\n         */\n        min: APLValueMin;\n    } | {\n        oneofKind: \"currentTime\";\n        /**\n         * Encounter values\n         *\n         * @generated from protobuf field: proto.APLValueCurrentTime current_time = 7;\n         */\n        currentTime: APLValueCurrentTime;\n    } | {\n        oneofKind: \"currentTimePercent\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentTimePercent current_time_percent = 8;\n         */\n        currentTimePercent: APLValueCurrentTimePercent;\n    } | {\n        oneofKind: \"remainingTime\";\n        /**\n         * @generated from protobuf field: proto.APLValueRemainingTime remaining_time = 9;\n         */\n        remainingTime: APLValueRemainingTime;\n    } | {\n        oneofKind: \"remainingTimePercent\";\n        /**\n         * @generated from protobuf field: proto.APLValueRemainingTimePercent remaining_time_percent = 10;\n         */\n        remainingTimePercent: APLValueRemainingTimePercent;\n    } | {\n        oneofKind: \"isExecutePhase\";\n        /**\n         * @generated from protobuf field: proto.APLValueIsExecutePhase is_execute_phase = 41;\n         */\n        isExecutePhase: APLValueIsExecutePhase;\n    } | {\n        oneofKind: \"numberTargets\";\n        /**\n         * @generated from protobuf field: proto.APLValueNumberTargets number_targets = 28;\n         */\n        numberTargets: APLValueNumberTargets;\n    } | {\n        oneofKind: \"bossSpellTimeToReady\";\n        /**\n         * Boss values\n         *\n         * @generated from protobuf field: proto.APLValueBossSpellTimeToReady boss_spell_time_to_ready = 64;\n         */\n        bossSpellTimeToReady: APLValueBossSpellTimeToReady;\n    } | {\n        oneofKind: \"bossSpellIsCasting\";\n        /**\n         * @generated from protobuf field: proto.APLValueBossSpellIsCasting boss_spell_is_casting = 65;\n         */\n        bossSpellIsCasting: APLValueBossSpellIsCasting;\n    } | {\n        oneofKind: \"currentHealth\";\n        /**\n         * Resource values\n         *\n         * @generated from protobuf field: proto.APLValueCurrentHealth current_health = 26;\n         */\n        currentHealth: APLValueCurrentHealth;\n    } | {\n        oneofKind: \"currentHealthPercent\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentHealthPercent current_health_percent = 27;\n         */\n        currentHealthPercent: APLValueCurrentHealthPercent;\n    } | {\n        oneofKind: \"currentMana\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentMana current_mana = 11;\n         */\n        currentMana: APLValueCurrentMana;\n    } | {\n        oneofKind: \"currentManaPercent\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentManaPercent current_mana_percent = 12;\n         */\n        currentManaPercent: APLValueCurrentManaPercent;\n    } | {\n        oneofKind: \"currentRage\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentRage current_rage = 14;\n         */\n        currentRage: APLValueCurrentRage;\n    } | {\n        oneofKind: \"currentEnergy\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentEnergy current_energy = 15;\n         */\n        currentEnergy: APLValueCurrentEnergy;\n    } | {\n        oneofKind: \"currentFocus\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentFocus current_focus = 66;\n         */\n        currentFocus: APLValueCurrentFocus;\n    } | {\n        oneofKind: \"currentComboPoints\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentComboPoints current_combo_points = 16;\n         */\n        currentComboPoints: APLValueCurrentComboPoints;\n    } | {\n        oneofKind: \"currentRunicPower\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentRunicPower current_runic_power = 25;\n         */\n        currentRunicPower: APLValueCurrentRunicPower;\n    } | {\n        oneofKind: \"currentSolarEnergy\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentSolarEnergy current_solar_energy = 68;\n         */\n        currentSolarEnergy: APLValueCurrentSolarEnergy;\n    } | {\n        oneofKind: \"currentLunarEnergy\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentLunarEnergy current_lunar_energy = 69;\n         */\n        currentLunarEnergy: APLValueCurrentLunarEnergy;\n    } | {\n        oneofKind: \"unitIsMoving\";\n        /**\n         * Unit values\n         *\n         * @generated from protobuf field: proto.APLValueUnitIsMoving unit_is_moving = 72;\n         */\n        unitIsMoving: APLValueUnitIsMoving;\n    } | {\n        oneofKind: \"currentRuneCount\";\n        /**\n         * Rune Resource values\n         *\n         * @generated from protobuf field: proto.APLValueCurrentRuneCount current_rune_count = 29;\n         */\n        currentRuneCount: APLValueCurrentRuneCount;\n    } | {\n        oneofKind: \"currentNonDeathRuneCount\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentNonDeathRuneCount current_non_death_rune_count = 34;\n         */\n        currentNonDeathRuneCount: APLValueCurrentNonDeathRuneCount;\n    } | {\n        oneofKind: \"currentRuneDeath\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentRuneDeath current_rune_death = 30;\n         */\n        currentRuneDeath: APLValueCurrentRuneDeath;\n    } | {\n        oneofKind: \"currentRuneActive\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentRuneActive current_rune_active = 31;\n         */\n        currentRuneActive: APLValueCurrentRuneActive;\n    } | {\n        oneofKind: \"runeCooldown\";\n        /**\n         * @generated from protobuf field: proto.APLValueRuneCooldown rune_cooldown = 32;\n         */\n        runeCooldown: APLValueRuneCooldown;\n    } | {\n        oneofKind: \"nextRuneCooldown\";\n        /**\n         * @generated from protobuf field: proto.APLValueNextRuneCooldown next_rune_cooldown = 33;\n         */\n        nextRuneCooldown: APLValueNextRuneCooldown;\n    } | {\n        oneofKind: \"runeSlotCooldown\";\n        /**\n         * @generated from protobuf field: proto.APLValueRuneSlotCooldown rune_slot_cooldown = 53;\n         */\n        runeSlotCooldown: APLValueRuneSlotCooldown;\n    } | {\n        oneofKind: \"gcdIsReady\";\n        /**\n         * GCD values\n         *\n         * @generated from protobuf field: proto.APLValueGCDIsReady gcd_is_ready = 17;\n         */\n        gcdIsReady: APLValueGCDIsReady;\n    } | {\n        oneofKind: \"gcdTimeToReady\";\n        /**\n         * @generated from protobuf field: proto.APLValueGCDTimeToReady gcd_time_to_ready = 18;\n         */\n        gcdTimeToReady: APLValueGCDTimeToReady;\n    } | {\n        oneofKind: \"autoTimeToNext\";\n        /**\n         * Autoattack values\n         *\n         * @generated from protobuf field: proto.APLValueAutoTimeToNext auto_time_to_next = 40;\n         */\n        autoTimeToNext: APLValueAutoTimeToNext;\n    } | {\n        oneofKind: \"spellCanCast\";\n        /**\n         * Spell values\n         *\n         * @generated from protobuf field: proto.APLValueSpellCanCast spell_can_cast = 19;\n         */\n        spellCanCast: APLValueSpellCanCast;\n    } | {\n        oneofKind: \"spellIsReady\";\n        /**\n         * @generated from protobuf field: proto.APLValueSpellIsReady spell_is_ready = 20;\n         */\n        spellIsReady: APLValueSpellIsReady;\n    } | {\n        oneofKind: \"spellTimeToReady\";\n        /**\n         * @generated from protobuf field: proto.APLValueSpellTimeToReady spell_time_to_ready = 21;\n         */\n        spellTimeToReady: APLValueSpellTimeToReady;\n    } | {\n        oneofKind: \"spellCastTime\";\n        /**\n         * @generated from protobuf field: proto.APLValueSpellCastTime spell_cast_time = 35;\n         */\n        spellCastTime: APLValueSpellCastTime;\n    } | {\n        oneofKind: \"spellTravelTime\";\n        /**\n         * @generated from protobuf field: proto.APLValueSpellTravelTime spell_travel_time = 37;\n         */\n        spellTravelTime: APLValueSpellTravelTime;\n    } | {\n        oneofKind: \"spellCpm\";\n        /**\n         * @generated from protobuf field: proto.APLValueSpellCPM spell_cpm = 42;\n         */\n        spellCpm: APLValueSpellCPM;\n    } | {\n        oneofKind: \"spellIsChanneling\";\n        /**\n         * @generated from protobuf field: proto.APLValueSpellIsChanneling spell_is_channeling = 56;\n         */\n        spellIsChanneling: APLValueSpellIsChanneling;\n    } | {\n        oneofKind: \"spellChanneledTicks\";\n        /**\n         * @generated from protobuf field: proto.APLValueSpellChanneledTicks spell_channeled_ticks = 57;\n         */\n        spellChanneledTicks: APLValueSpellChanneledTicks;\n    } | {\n        oneofKind: \"spellCurrentCost\";\n        /**\n         * @generated from protobuf field: proto.APLValueSpellCurrentCost spell_current_cost = 62;\n         */\n        spellCurrentCost: APLValueSpellCurrentCost;\n    } | {\n        oneofKind: \"auraIsActive\";\n        /**\n         * Aura values\n         *\n         * @generated from protobuf field: proto.APLValueAuraIsActive aura_is_active = 22;\n         */\n        auraIsActive: APLValueAuraIsActive;\n    } | {\n        oneofKind: \"auraIsActiveWithReactionTime\";\n        /**\n         * @generated from protobuf field: proto.APLValueAuraIsActiveWithReactionTime aura_is_active_with_reaction_time = 50;\n         */\n        auraIsActiveWithReactionTime: APLValueAuraIsActiveWithReactionTime;\n    } | {\n        oneofKind: \"auraRemainingTime\";\n        /**\n         * @generated from protobuf field: proto.APLValueAuraRemainingTime aura_remaining_time = 23;\n         */\n        auraRemainingTime: APLValueAuraRemainingTime;\n    } | {\n        oneofKind: \"auraNumStacks\";\n        /**\n         * @generated from protobuf field: proto.APLValueAuraNumStacks aura_num_stacks = 24;\n         */\n        auraNumStacks: APLValueAuraNumStacks;\n    } | {\n        oneofKind: \"auraInternalCooldown\";\n        /**\n         * @generated from protobuf field: proto.APLValueAuraInternalCooldown aura_internal_cooldown = 39;\n         */\n        auraInternalCooldown: APLValueAuraInternalCooldown;\n    } | {\n        oneofKind: \"auraIcdIsReadyWithReactionTime\";\n        /**\n         * @generated from protobuf field: proto.APLValueAuraICDIsReadyWithReactionTime aura_icd_is_ready_with_reaction_time = 51;\n         */\n        auraIcdIsReadyWithReactionTime: APLValueAuraICDIsReadyWithReactionTime;\n    } | {\n        oneofKind: \"auraShouldRefresh\";\n        /**\n         * @generated from protobuf field: proto.APLValueAuraShouldRefresh aura_should_refresh = 43;\n         */\n        auraShouldRefresh: APLValueAuraShouldRefresh;\n    } | {\n        oneofKind: \"dotIsActive\";\n        /**\n         * Dot values\n         *\n         * @generated from protobuf field: proto.APLValueDotIsActive dot_is_active = 6;\n         */\n        dotIsActive: APLValueDotIsActive;\n    } | {\n        oneofKind: \"dotRemainingTime\";\n        /**\n         * @generated from protobuf field: proto.APLValueDotRemainingTime dot_remaining_time = 13;\n         */\n        dotRemainingTime: APLValueDotRemainingTime;\n    } | {\n        oneofKind: \"dotTickFrequency\";\n        /**\n         * @generated from protobuf field: proto.APLValueDotTickFrequency dot_tick_frequency = 67;\n         */\n        dotTickFrequency: APLValueDotTickFrequency;\n    } | {\n        oneofKind: \"sequenceIsComplete\";\n        /**\n         * Sequence values\n         *\n         * @generated from protobuf field: proto.APLValueSequenceIsComplete sequence_is_complete = 44;\n         */\n        sequenceIsComplete: APLValueSequenceIsComplete;\n    } | {\n        oneofKind: \"sequenceIsReady\";\n        /**\n         * @generated from protobuf field: proto.APLValueSequenceIsReady sequence_is_ready = 45;\n         */\n        sequenceIsReady: APLValueSequenceIsReady;\n    } | {\n        oneofKind: \"sequenceTimeToReady\";\n        /**\n         * @generated from protobuf field: proto.APLValueSequenceTimeToReady sequence_time_to_ready = 46;\n         */\n        sequenceTimeToReady: APLValueSequenceTimeToReady;\n    } | {\n        oneofKind: \"channelClipDelay\";\n        /**\n         * Properties\n         *\n         * @generated from protobuf field: proto.APLValueChannelClipDelay channel_clip_delay = 58;\n         */\n        channelClipDelay: APLValueChannelClipDelay;\n    } | {\n        oneofKind: \"inputDelay\";\n        /**\n         * @generated from protobuf field: proto.APLValueInputDelay input_delay = 71;\n         */\n        inputDelay: APLValueInputDelay;\n    } | {\n        oneofKind: \"frontOfTarget\";\n        /**\n         * @generated from protobuf field: proto.APLValueFrontOfTarget front_of_target = 63;\n         */\n        frontOfTarget: APLValueFrontOfTarget;\n    } | {\n        oneofKind: \"totemRemainingTime\";\n        /**\n         * Class or Spec-specific values\n         *\n         * @generated from protobuf field: proto.APLValueTotemRemainingTime totem_remaining_time = 49;\n         */\n        totemRemainingTime: APLValueTotemRemainingTime;\n    } | {\n        oneofKind: \"catExcessEnergy\";\n        /**\n         * @generated from protobuf field: proto.APLValueCatExcessEnergy cat_excess_energy = 52;\n         */\n        catExcessEnergy: APLValueCatExcessEnergy;\n    } | {\n        oneofKind: \"catNewSavageRoarDuration\";\n        /**\n         * @generated from protobuf field: proto.APLValueCatNewSavageRoarDuration cat_new_savage_roar_duration = 61;\n         */\n        catNewSavageRoarDuration: APLValueCatNewSavageRoarDuration;\n    } | {\n        oneofKind: \"warlockShouldRecastDrainSoul\";\n        /**\n         * @generated from protobuf field: proto.APLValueWarlockShouldRecastDrainSoul warlock_should_recast_drain_soul = 59;\n         */\n        warlockShouldRecastDrainSoul: APLValueWarlockShouldRecastDrainSoul;\n    } | {\n        oneofKind: \"warlockShouldRefreshCorruption\";\n        /**\n         * @generated from protobuf field: proto.APLValueWarlockShouldRefreshCorruption warlock_should_refresh_corruption = 60;\n         */\n        warlockShouldRefreshCorruption: APLValueWarlockShouldRefreshCorruption;\n    } | {\n        oneofKind: \"druidCurrentEclipsePhase\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentEclipsePhase druid_current_eclipse_phase = 70;\n         */\n        druidCurrentEclipsePhase: APLValueCurrentEclipsePhase;\n    } | {\n        oneofKind: undefined;\n    };\n}\n// /////////////////////////////////////////////////////////////////////////\n//                                 ACTIONS\n// /////////////////////////////////////////////////////////////////////////\n\n/**\n * @generated from protobuf message proto.APLActionCastSpell\n */\nexport interface APLActionCastSpell {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n    /**\n     * @generated from protobuf field: proto.UnitReference target = 2;\n     */\n    target?: UnitReference;\n}\n/**\n * @generated from protobuf message proto.APLActionCastFriendlySpell\n */\nexport interface APLActionCastFriendlySpell {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n    /**\n     * @generated from protobuf field: proto.UnitReference target = 2;\n     */\n    target?: UnitReference;\n}\n/**\n * @generated from protobuf message proto.APLActionChannelSpell\n */\nexport interface APLActionChannelSpell {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n    /**\n     * @generated from protobuf field: proto.UnitReference target = 2;\n     */\n    target?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.APLValue interrupt_if = 3;\n     */\n    interruptIf?: APLValue;\n    /**\n     * @generated from protobuf field: bool allow_recast = 5;\n     */\n    allowRecast: boolean;\n}\n/**\n * @generated from protobuf message proto.APLActionMultidot\n */\nexport interface APLActionMultidot {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n    /**\n     * @generated from protobuf field: int32 max_dots = 2;\n     */\n    maxDots: number;\n    /**\n     * @generated from protobuf field: proto.APLValue max_overlap = 3;\n     */\n    maxOverlap?: APLValue;\n}\n/**\n * @generated from protobuf message proto.APLActionMultishield\n */\nexport interface APLActionMultishield {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n    /**\n     * @generated from protobuf field: int32 max_shields = 2;\n     */\n    maxShields: number;\n    /**\n     * @generated from protobuf field: proto.APLValue max_overlap = 3;\n     */\n    maxOverlap?: APLValue;\n}\n/**\n * @generated from protobuf message proto.APLActionAutocastOtherCooldowns\n */\nexport interface APLActionAutocastOtherCooldowns {\n}\n/**\n * @generated from protobuf message proto.APLActionWait\n */\nexport interface APLActionWait {\n    /**\n     * @generated from protobuf field: proto.APLValue duration = 1;\n     */\n    duration?: APLValue;\n}\n/**\n * @generated from protobuf message proto.APLActionWaitUntil\n */\nexport interface APLActionWaitUntil {\n    /**\n     * @generated from protobuf field: proto.APLValue condition = 1;\n     */\n    condition?: APLValue;\n}\n/**\n * @generated from protobuf message proto.APLActionSchedule\n */\nexport interface APLActionSchedule {\n    /**\n     * Comma-separated list of times, e.g. '0s, 30s, 60s'\n     *\n     * @generated from protobuf field: string schedule = 1;\n     */\n    schedule: string;\n    /**\n     * @generated from protobuf field: proto.APLAction inner_action = 2;\n     */\n    innerAction?: APLAction;\n}\n/**\n * @generated from protobuf message proto.APLActionSequence\n */\nexport interface APLActionSequence {\n    /**\n     * @generated from protobuf field: string name = 1;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: repeated proto.APLAction actions = 2;\n     */\n    actions: APLAction[];\n}\n/**\n * @generated from protobuf message proto.APLActionResetSequence\n */\nexport interface APLActionResetSequence {\n    /**\n     * @generated from protobuf field: string sequence_name = 1;\n     */\n    sequenceName: string;\n}\n/**\n * @generated from protobuf message proto.APLActionStrictSequence\n */\nexport interface APLActionStrictSequence {\n    /**\n     * @generated from protobuf field: repeated proto.APLAction actions = 1;\n     */\n    actions: APLAction[];\n}\n/**\n * @generated from protobuf message proto.APLActionChangeTarget\n */\nexport interface APLActionChangeTarget {\n    /**\n     * @generated from protobuf field: proto.UnitReference new_target = 1;\n     */\n    newTarget?: UnitReference;\n}\n/**\n * @generated from protobuf message proto.APLActionCancelAura\n */\nexport interface APLActionCancelAura {\n    /**\n     * @generated from protobuf field: proto.ActionID aura_id = 1;\n     */\n    auraId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLActionActivateAura\n */\nexport interface APLActionActivateAura {\n    /**\n     * @generated from protobuf field: proto.ActionID aura_id = 1;\n     */\n    auraId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLActionTriggerICD\n */\nexport interface APLActionTriggerICD {\n    /**\n     * @generated from protobuf field: proto.ActionID aura_id = 1;\n     */\n    auraId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLActionItemSwap\n */\nexport interface APLActionItemSwap {\n    /**\n     * The set to swap to.\n     *\n     * @generated from protobuf field: proto.APLActionItemSwap.SwapSet swap_set = 1;\n     */\n    swapSet: APLActionItemSwap_SwapSet;\n}\n/**\n * @generated from protobuf enum proto.APLActionItemSwap.SwapSet\n */\nexport enum APLActionItemSwap_SwapSet {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Main = 1;\n     */\n    Main = 1,\n    /**\n     * @generated from protobuf enum value: Swap1 = 2;\n     */\n    Swap1 = 2\n}\n/**\n * @generated from protobuf message proto.APLActionCatOptimalRotationAction\n */\nexport interface APLActionCatOptimalRotationAction {\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Rotation.AplType rotation_type = 1;\n     */\n    rotationType: FeralDruid_Rotation_AplType;\n    /**\n     * @generated from protobuf field: bool maintain_faerie_fire = 3;\n     */\n    maintainFaerieFire: boolean;\n    /**\n     * @generated from protobuf field: bool manual_params = 2;\n     */\n    manualParams: boolean;\n    /**\n     * @generated from protobuf field: float min_roar_offset = 4;\n     */\n    minRoarOffset: number;\n    /**\n     * @generated from protobuf field: int32 rip_leeway = 5;\n     */\n    ripLeeway: number;\n    /**\n     * @generated from protobuf field: bool use_rake = 6;\n     */\n    useRake: boolean;\n    /**\n     * @generated from protobuf field: bool use_bite = 7;\n     */\n    useBite: boolean;\n    /**\n     * @generated from protobuf field: float bite_time = 8;\n     */\n    biteTime: number;\n    /**\n     * @generated from protobuf field: bool bite_during_execute = 9;\n     */\n    biteDuringExecute: boolean;\n    /**\n     * @generated from protobuf field: bool allow_aoe_berserk = 10;\n     */\n    allowAoeBerserk: boolean;\n    /**\n     * @generated from protobuf field: bool melee_weave = 11;\n     */\n    meleeWeave: boolean;\n    /**\n     * @generated from protobuf field: bool bear_weave = 12;\n     */\n    bearWeave: boolean;\n    /**\n     * @generated from protobuf field: bool snek_weave = 13;\n     */\n    snekWeave: boolean;\n}\n/**\n * @generated from protobuf message proto.APLActionMove\n */\nexport interface APLActionMove {\n    /**\n     * @generated from protobuf field: proto.APLValue range_from_target = 1;\n     */\n    rangeFromTarget?: APLValue;\n}\n/**\n * @generated from protobuf message proto.APLActionMoveDuration\n */\nexport interface APLActionMoveDuration {\n    /**\n     * @generated from protobuf field: proto.APLValue duration = 1;\n     */\n    duration?: APLValue;\n}\n/**\n * @generated from protobuf message proto.APLActionCustomRotation\n */\nexport interface APLActionCustomRotation {\n}\n/**\n * @generated from protobuf message proto.APLValueConst\n */\nexport interface APLValueConst {\n    /**\n     * @generated from protobuf field: string val = 1;\n     */\n    val: string;\n}\n/**\n * @generated from protobuf message proto.APLValueAnd\n */\nexport interface APLValueAnd {\n    /**\n     * @generated from protobuf field: repeated proto.APLValue vals = 1;\n     */\n    vals: APLValue[];\n}\n/**\n * @generated from protobuf message proto.APLValueOr\n */\nexport interface APLValueOr {\n    /**\n     * @generated from protobuf field: repeated proto.APLValue vals = 1;\n     */\n    vals: APLValue[];\n}\n/**\n * @generated from protobuf message proto.APLValueNot\n */\nexport interface APLValueNot {\n    /**\n     * @generated from protobuf field: proto.APLValue val = 1;\n     */\n    val?: APLValue;\n}\n/**\n * @generated from protobuf message proto.APLValueCompare\n */\nexport interface APLValueCompare {\n    /**\n     * @generated from protobuf field: proto.APLValueCompare.ComparisonOperator op = 1;\n     */\n    op: APLValueCompare_ComparisonOperator;\n    /**\n     * @generated from protobuf field: proto.APLValue lhs = 2;\n     */\n    lhs?: APLValue;\n    /**\n     * @generated from protobuf field: proto.APLValue rhs = 3;\n     */\n    rhs?: APLValue;\n}\n/**\n * @generated from protobuf enum proto.APLValueCompare.ComparisonOperator\n */\nexport enum APLValueCompare_ComparisonOperator {\n    /**\n     * @generated from protobuf enum value: OpUnknown = 0;\n     */\n    OpUnknown = 0,\n    /**\n     * Equals\n     *\n     * @generated from protobuf enum value: OpEq = 1;\n     */\n    OpEq = 1,\n    /**\n     * Not equals\n     *\n     * @generated from protobuf enum value: OpNe = 2;\n     */\n    OpNe = 2,\n    /**\n     * Less than\n     *\n     * @generated from protobuf enum value: OpLt = 3;\n     */\n    OpLt = 3,\n    /**\n     * Less than or equal\n     *\n     * @generated from protobuf enum value: OpLe = 4;\n     */\n    OpLe = 4,\n    /**\n     * Greater than\n     *\n     * @generated from protobuf enum value: OpGt = 5;\n     */\n    OpGt = 5,\n    /**\n     * Greater than or equal\n     *\n     * @generated from protobuf enum value: OpGe = 6;\n     */\n    OpGe = 6\n}\n/**\n * @generated from protobuf message proto.APLValueMath\n */\nexport interface APLValueMath {\n    /**\n     * @generated from protobuf field: proto.APLValueMath.MathOperator op = 1;\n     */\n    op: APLValueMath_MathOperator;\n    /**\n     * @generated from protobuf field: proto.APLValue lhs = 2;\n     */\n    lhs?: APLValue;\n    /**\n     * @generated from protobuf field: proto.APLValue rhs = 3;\n     */\n    rhs?: APLValue;\n}\n/**\n * @generated from protobuf enum proto.APLValueMath.MathOperator\n */\nexport enum APLValueMath_MathOperator {\n    /**\n     * @generated from protobuf enum value: OpUnknown = 0;\n     */\n    OpUnknown = 0,\n    /**\n     * Add\n     *\n     * @generated from protobuf enum value: OpAdd = 1;\n     */\n    OpAdd = 1,\n    /**\n     * Subtract\n     *\n     * @generated from protobuf enum value: OpSub = 2;\n     */\n    OpSub = 2,\n    /**\n     * Multiply\n     *\n     * @generated from protobuf enum value: OpMul = 3;\n     */\n    OpMul = 3,\n    /**\n     * Divide\n     *\n     * @generated from protobuf enum value: OpDiv = 4;\n     */\n    OpDiv = 4\n}\n/**\n * @generated from protobuf message proto.APLValueMax\n */\nexport interface APLValueMax {\n    /**\n     * @generated from protobuf field: repeated proto.APLValue vals = 1;\n     */\n    vals: APLValue[];\n}\n/**\n * @generated from protobuf message proto.APLValueMin\n */\nexport interface APLValueMin {\n    /**\n     * @generated from protobuf field: repeated proto.APLValue vals = 1;\n     */\n    vals: APLValue[];\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentTime\n */\nexport interface APLValueCurrentTime {\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentTimePercent\n */\nexport interface APLValueCurrentTimePercent {\n}\n/**\n * @generated from protobuf message proto.APLValueRemainingTime\n */\nexport interface APLValueRemainingTime {\n}\n/**\n * @generated from protobuf message proto.APLValueRemainingTimePercent\n */\nexport interface APLValueRemainingTimePercent {\n}\n/**\n * @generated from protobuf message proto.APLValueNumberTargets\n */\nexport interface APLValueNumberTargets {\n}\n/**\n * @generated from protobuf message proto.APLValueIsExecutePhase\n */\nexport interface APLValueIsExecutePhase {\n    /**\n     * @generated from protobuf field: proto.APLValueIsExecutePhase.ExecutePhaseThreshold threshold = 1;\n     */\n    threshold: APLValueIsExecutePhase_ExecutePhaseThreshold;\n}\n/**\n * @generated from protobuf enum proto.APLValueIsExecutePhase.ExecutePhaseThreshold\n */\nexport enum APLValueIsExecutePhase_ExecutePhaseThreshold {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: E20 = 1;\n     */\n    E20 = 1,\n    /**\n     * @generated from protobuf enum value: E25 = 2;\n     */\n    E25 = 2,\n    /**\n     * @generated from protobuf enum value: E35 = 3;\n     */\n    E35 = 3,\n    /**\n     * @generated from protobuf enum value: E90 = 4;\n     */\n    E90 = 4\n}\n/**\n * @generated from protobuf message proto.APLValueBossSpellTimeToReady\n */\nexport interface APLValueBossSpellTimeToReady {\n    /**\n     * @generated from protobuf field: proto.UnitReference target_unit = 1;\n     */\n    targetUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 2;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueBossSpellIsCasting\n */\nexport interface APLValueBossSpellIsCasting {\n    /**\n     * @generated from protobuf field: proto.UnitReference target_unit = 1;\n     */\n    targetUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 2;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueUnitIsMoving\n */\nexport interface APLValueUnitIsMoving {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 1;\n     */\n    sourceUnit?: UnitReference;\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentHealth\n */\nexport interface APLValueCurrentHealth {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 1;\n     */\n    sourceUnit?: UnitReference;\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentHealthPercent\n */\nexport interface APLValueCurrentHealthPercent {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 1;\n     */\n    sourceUnit?: UnitReference;\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentMana\n */\nexport interface APLValueCurrentMana {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 1;\n     */\n    sourceUnit?: UnitReference;\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentManaPercent\n */\nexport interface APLValueCurrentManaPercent {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 1;\n     */\n    sourceUnit?: UnitReference;\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentRage\n */\nexport interface APLValueCurrentRage {\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentEnergy\n */\nexport interface APLValueCurrentEnergy {\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentFocus\n */\nexport interface APLValueCurrentFocus {\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentComboPoints\n */\nexport interface APLValueCurrentComboPoints {\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentRunicPower\n */\nexport interface APLValueCurrentRunicPower {\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentSolarEnergy\n */\nexport interface APLValueCurrentSolarEnergy {\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentLunarEnergy\n */\nexport interface APLValueCurrentLunarEnergy {\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentRuneCount\n */\nexport interface APLValueCurrentRuneCount {\n    /**\n     * @generated from protobuf field: proto.APLValueRuneType rune_type = 1;\n     */\n    runeType: APLValueRuneType;\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentNonDeathRuneCount\n */\nexport interface APLValueCurrentNonDeathRuneCount {\n    /**\n     * @generated from protobuf field: proto.APLValueRuneType rune_type = 1;\n     */\n    runeType: APLValueRuneType;\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentRuneDeath\n */\nexport interface APLValueCurrentRuneDeath {\n    /**\n     * @generated from protobuf field: proto.APLValueRuneSlot rune_slot = 1;\n     */\n    runeSlot: APLValueRuneSlot;\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentRuneActive\n */\nexport interface APLValueCurrentRuneActive {\n    /**\n     * @generated from protobuf field: proto.APLValueRuneSlot rune_slot = 1;\n     */\n    runeSlot: APLValueRuneSlot;\n}\n/**\n * @generated from protobuf message proto.APLValueRuneCooldown\n */\nexport interface APLValueRuneCooldown {\n    /**\n     * @generated from protobuf field: proto.APLValueRuneType rune_type = 1;\n     */\n    runeType: APLValueRuneType;\n}\n/**\n * @generated from protobuf message proto.APLValueNextRuneCooldown\n */\nexport interface APLValueNextRuneCooldown {\n    /**\n     * @generated from protobuf field: proto.APLValueRuneType rune_type = 1;\n     */\n    runeType: APLValueRuneType;\n}\n/**\n * @generated from protobuf message proto.APLValueRuneSlotCooldown\n */\nexport interface APLValueRuneSlotCooldown {\n    /**\n     * @generated from protobuf field: proto.APLValueRuneSlot rune_slot = 1;\n     */\n    runeSlot: APLValueRuneSlot;\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentEclipsePhase\n */\nexport interface APLValueCurrentEclipsePhase {\n    /**\n     * @generated from protobuf field: proto.APLValueEclipsePhase eclipse_phase = 1;\n     */\n    eclipsePhase: APLValueEclipsePhase;\n}\n/**\n * @generated from protobuf message proto.APLValueGCDIsReady\n */\nexport interface APLValueGCDIsReady {\n}\n/**\n * @generated from protobuf message proto.APLValueGCDTimeToReady\n */\nexport interface APLValueGCDTimeToReady {\n}\n/**\n * @generated from protobuf message proto.APLValueAutoTimeToNext\n */\nexport interface APLValueAutoTimeToNext {\n}\n/**\n * @generated from protobuf message proto.APLValueSpellCanCast\n */\nexport interface APLValueSpellCanCast {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueSpellIsReady\n */\nexport interface APLValueSpellIsReady {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueSpellTimeToReady\n */\nexport interface APLValueSpellTimeToReady {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueSpellCastTime\n */\nexport interface APLValueSpellCastTime {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueChannelClipDelay\n */\nexport interface APLValueChannelClipDelay {\n}\n/**\n * @generated from protobuf message proto.APLValueInputDelay\n */\nexport interface APLValueInputDelay {\n}\n/**\n * @generated from protobuf message proto.APLValueFrontOfTarget\n */\nexport interface APLValueFrontOfTarget {\n}\n/**\n * @generated from protobuf message proto.APLValueSpellTravelTime\n */\nexport interface APLValueSpellTravelTime {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueSpellCPM\n */\nexport interface APLValueSpellCPM {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueSpellIsChanneling\n */\nexport interface APLValueSpellIsChanneling {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueSpellChanneledTicks\n */\nexport interface APLValueSpellChanneledTicks {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueSpellCurrentCost\n */\nexport interface APLValueSpellCurrentCost {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueAuraIsActive\n */\nexport interface APLValueAuraIsActive {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 2;\n     */\n    sourceUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID aura_id = 1;\n     */\n    auraId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueAuraIsActiveWithReactionTime\n */\nexport interface APLValueAuraIsActiveWithReactionTime {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 2;\n     */\n    sourceUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID aura_id = 1;\n     */\n    auraId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueAuraRemainingTime\n */\nexport interface APLValueAuraRemainingTime {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 2;\n     */\n    sourceUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID aura_id = 1;\n     */\n    auraId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueAuraNumStacks\n */\nexport interface APLValueAuraNumStacks {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 2;\n     */\n    sourceUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID aura_id = 1;\n     */\n    auraId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueAuraInternalCooldown\n */\nexport interface APLValueAuraInternalCooldown {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 2;\n     */\n    sourceUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID aura_id = 1;\n     */\n    auraId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueAuraICDIsReadyWithReactionTime\n */\nexport interface APLValueAuraICDIsReadyWithReactionTime {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 2;\n     */\n    sourceUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID aura_id = 1;\n     */\n    auraId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueAuraShouldRefresh\n */\nexport interface APLValueAuraShouldRefresh {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 2;\n     */\n    sourceUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID aura_id = 1;\n     */\n    auraId?: ActionID;\n    /**\n     * @generated from protobuf field: proto.APLValue max_overlap = 3;\n     */\n    maxOverlap?: APLValue;\n}\n/**\n * @generated from protobuf message proto.APLValueDotIsActive\n */\nexport interface APLValueDotIsActive {\n    /**\n     * @generated from protobuf field: proto.UnitReference target_unit = 2;\n     */\n    targetUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueDotRemainingTime\n */\nexport interface APLValueDotRemainingTime {\n    /**\n     * @generated from protobuf field: proto.UnitReference target_unit = 2;\n     */\n    targetUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueDotTickFrequency\n */\nexport interface APLValueDotTickFrequency {\n    /**\n     * @generated from protobuf field: proto.UnitReference target_unit = 2;\n     */\n    targetUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueSequenceIsComplete\n */\nexport interface APLValueSequenceIsComplete {\n    /**\n     * @generated from protobuf field: string sequence_name = 1;\n     */\n    sequenceName: string;\n}\n/**\n * @generated from protobuf message proto.APLValueSequenceIsReady\n */\nexport interface APLValueSequenceIsReady {\n    /**\n     * @generated from protobuf field: string sequence_name = 1;\n     */\n    sequenceName: string;\n}\n/**\n * @generated from protobuf message proto.APLValueSequenceTimeToReady\n */\nexport interface APLValueSequenceTimeToReady {\n    /**\n     * @generated from protobuf field: string sequence_name = 1;\n     */\n    sequenceName: string;\n}\n/**\n * @generated from protobuf message proto.APLValueTotemRemainingTime\n */\nexport interface APLValueTotemRemainingTime {\n    /**\n     * @generated from protobuf field: proto.ShamanTotems.TotemType totem_type = 1;\n     */\n    totemType: ShamanTotems_TotemType;\n}\n/**\n * @generated from protobuf message proto.APLValueCatExcessEnergy\n */\nexport interface APLValueCatExcessEnergy {\n}\n/**\n * @generated from protobuf message proto.APLValueCatNewSavageRoarDuration\n */\nexport interface APLValueCatNewSavageRoarDuration {\n}\n/**\n * @generated from protobuf message proto.APLValueWarlockShouldRecastDrainSoul\n */\nexport interface APLValueWarlockShouldRecastDrainSoul {\n}\n/**\n * @generated from protobuf message proto.APLValueWarlockShouldRefreshCorruption\n */\nexport interface APLValueWarlockShouldRefreshCorruption {\n    /**\n     * @generated from protobuf field: proto.UnitReference target_unit = 1;\n     */\n    targetUnit?: UnitReference;\n}\n// /////////////////////////////////////////////////////////////////////////\n//                                  VALUES\n// /////////////////////////////////////////////////////////////////////////\n\n/**\n * @generated from protobuf enum proto.APLValueType\n */\nexport enum APLValueType {\n    /**\n     * @generated from protobuf enum value: ValueTypeUnknown = 0;\n     */\n    ValueTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ValueTypeBool = 1;\n     */\n    ValueTypeBool = 1,\n    /**\n     * @generated from protobuf enum value: ValueTypeInt = 2;\n     */\n    ValueTypeInt = 2,\n    /**\n     * @generated from protobuf enum value: ValueTypeFloat = 3;\n     */\n    ValueTypeFloat = 3,\n    /**\n     * @generated from protobuf enum value: ValueTypeDuration = 4;\n     */\n    ValueTypeDuration = 4,\n    /**\n     * @generated from protobuf enum value: ValueTypeString = 5;\n     */\n    ValueTypeString = 5\n}\n/**\n * @generated from protobuf enum proto.APLValueRuneType\n */\nexport enum APLValueRuneType {\n    /**\n     * @generated from protobuf enum value: RuneUnknown = 0;\n     */\n    RuneUnknown = 0,\n    /**\n     * @generated from protobuf enum value: RuneBlood = 1;\n     */\n    RuneBlood = 1,\n    /**\n     * @generated from protobuf enum value: RuneFrost = 2;\n     */\n    RuneFrost = 2,\n    /**\n     * @generated from protobuf enum value: RuneUnholy = 3;\n     */\n    RuneUnholy = 3,\n    /**\n     * @generated from protobuf enum value: RuneDeath = 4;\n     */\n    RuneDeath = 4\n}\n/**\n * @generated from protobuf enum proto.APLValueRuneSlot\n */\nexport enum APLValueRuneSlot {\n    /**\n     * @generated from protobuf enum value: SlotUnknown = 0;\n     */\n    SlotUnknown = 0,\n    /**\n     * @generated from protobuf enum value: SlotLeftBlood = 1;\n     */\n    SlotLeftBlood = 1,\n    /**\n     * @generated from protobuf enum value: SlotRightBlood = 2;\n     */\n    SlotRightBlood = 2,\n    /**\n     * @generated from protobuf enum value: SlotLeftFrost = 3;\n     */\n    SlotLeftFrost = 3,\n    /**\n     * @generated from protobuf enum value: SlotRightFrost = 4;\n     */\n    SlotRightFrost = 4,\n    /**\n     * @generated from protobuf enum value: SlotLeftUnholy = 5;\n     */\n    SlotLeftUnholy = 5,\n    /**\n     * @generated from protobuf enum value: SlotRightUnholy = 6;\n     */\n    SlotRightUnholy = 6\n}\n/**\n * @generated from protobuf enum proto.APLValueEclipsePhase\n */\nexport enum APLValueEclipsePhase {\n    /**\n     * @generated from protobuf enum value: UnknownPhase = 0;\n     */\n    UnknownPhase = 0,\n    /**\n     * @generated from protobuf enum value: NeutralPhase = 1;\n     */\n    NeutralPhase = 1,\n    /**\n     * @generated from protobuf enum value: SolarPhase = 2;\n     */\n    SolarPhase = 2,\n    /**\n     * @generated from protobuf enum value: LunarPhase = 3;\n     */\n    LunarPhase = 3\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLRotation$Type extends MessageType<APLRotation> {\n    constructor() {\n        super(\"proto.APLRotation\", [\n            { no: 3, name: \"type\", kind: \"enum\", T: () => [\"proto.APLRotation.Type\", APLRotation_Type] },\n            { no: 4, name: \"simple\", kind: \"message\", T: () => SimpleRotation },\n            { no: 1, name: \"prepull_actions\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLPrepullAction },\n            { no: 2, name: \"priority_list\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLListItem }\n        ]);\n    }\n    create(value?: PartialMessage<APLRotation>): APLRotation {\n        const message = { type: 0, prepullActions: [], priorityList: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLRotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLRotation): APLRotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLRotation.Type type */ 3:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.SimpleRotation simple */ 4:\n                    message.simple = SimpleRotation.internalBinaryRead(reader, reader.uint32(), options, message.simple);\n                    break;\n                case /* repeated proto.APLPrepullAction prepull_actions */ 1:\n                    message.prepullActions.push(APLPrepullAction.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.APLListItem priority_list */ 2:\n                    message.priorityList.push(APLListItem.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLRotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLRotation.Type type = 3; */\n        if (message.type !== 0)\n            writer.tag(3, WireType.Varint).int32(message.type);\n        /* proto.SimpleRotation simple = 4; */\n        if (message.simple)\n            SimpleRotation.internalBinaryWrite(message.simple, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.APLPrepullAction prepull_actions = 1; */\n        for (let i = 0; i < message.prepullActions.length; i++)\n            APLPrepullAction.internalBinaryWrite(message.prepullActions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.APLListItem priority_list = 2; */\n        for (let i = 0; i < message.priorityList.length; i++)\n            APLListItem.internalBinaryWrite(message.priorityList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLRotation\n */\nexport const APLRotation = new APLRotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimpleRotation$Type extends MessageType<SimpleRotation> {\n    constructor() {\n        super(\"proto.SimpleRotation\", [\n            { no: 1, name: \"spec_rotation_json\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"cooldowns\", kind: \"message\", T: () => Cooldowns }\n        ]);\n    }\n    create(value?: PartialMessage<SimpleRotation>): SimpleRotation {\n        const message = { specRotationJson: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimpleRotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimpleRotation): SimpleRotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string spec_rotation_json */ 1:\n                    message.specRotationJson = reader.string();\n                    break;\n                case /* proto.Cooldowns cooldowns */ 2:\n                    message.cooldowns = Cooldowns.internalBinaryRead(reader, reader.uint32(), options, message.cooldowns);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimpleRotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string spec_rotation_json = 1; */\n        if (message.specRotationJson !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.specRotationJson);\n        /* proto.Cooldowns cooldowns = 2; */\n        if (message.cooldowns)\n            Cooldowns.internalBinaryWrite(message.cooldowns, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimpleRotation\n */\nexport const SimpleRotation = new SimpleRotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLPrepullAction$Type extends MessageType<APLPrepullAction> {\n    constructor() {\n        super(\"proto.APLPrepullAction\", [\n            { no: 1, name: \"action\", kind: \"message\", T: () => APLAction },\n            { no: 4, name: \"do_at_value\", kind: \"message\", T: () => APLValue },\n            { no: 3, name: \"hide\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<APLPrepullAction>): APLPrepullAction {\n        const message = { hide: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLPrepullAction>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLPrepullAction): APLPrepullAction {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLAction action */ 1:\n                    message.action = APLAction.internalBinaryRead(reader, reader.uint32(), options, message.action);\n                    break;\n                case /* proto.APLValue do_at_value */ 4:\n                    message.doAtValue = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.doAtValue);\n                    break;\n                case /* bool hide */ 3:\n                    message.hide = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLPrepullAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLAction action = 1; */\n        if (message.action)\n            APLAction.internalBinaryWrite(message.action, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValue do_at_value = 4; */\n        if (message.doAtValue)\n            APLValue.internalBinaryWrite(message.doAtValue, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* bool hide = 3; */\n        if (message.hide !== false)\n            writer.tag(3, WireType.Varint).bool(message.hide);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLPrepullAction\n */\nexport const APLPrepullAction = new APLPrepullAction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLListItem$Type extends MessageType<APLListItem> {\n    constructor() {\n        super(\"proto.APLListItem\", [\n            { no: 1, name: \"hide\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"notes\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"action\", kind: \"message\", T: () => APLAction }\n        ]);\n    }\n    create(value?: PartialMessage<APLListItem>): APLListItem {\n        const message = { hide: false, notes: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLListItem>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLListItem): APLListItem {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool hide */ 1:\n                    message.hide = reader.bool();\n                    break;\n                case /* string notes */ 2:\n                    message.notes = reader.string();\n                    break;\n                case /* proto.APLAction action */ 3:\n                    message.action = APLAction.internalBinaryRead(reader, reader.uint32(), options, message.action);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLListItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool hide = 1; */\n        if (message.hide !== false)\n            writer.tag(1, WireType.Varint).bool(message.hide);\n        /* string notes = 2; */\n        if (message.notes !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.notes);\n        /* proto.APLAction action = 3; */\n        if (message.action)\n            APLAction.internalBinaryWrite(message.action, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLListItem\n */\nexport const APLListItem = new APLListItem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLAction$Type extends MessageType<APLAction> {\n    constructor() {\n        super(\"proto.APLAction\", [\n            { no: 1, name: \"condition\", kind: \"message\", T: () => APLValue },\n            { no: 3, name: \"cast_spell\", kind: \"message\", oneof: \"action\", T: () => APLActionCastSpell },\n            { no: 20, name: \"cast_friendly_spell\", kind: \"message\", oneof: \"action\", T: () => APLActionCastFriendlySpell },\n            { no: 16, name: \"channel_spell\", kind: \"message\", oneof: \"action\", T: () => APLActionChannelSpell },\n            { no: 8, name: \"multidot\", kind: \"message\", oneof: \"action\", T: () => APLActionMultidot },\n            { no: 12, name: \"multishield\", kind: \"message\", oneof: \"action\", T: () => APLActionMultishield },\n            { no: 7, name: \"autocast_other_cooldowns\", kind: \"message\", oneof: \"action\", T: () => APLActionAutocastOtherCooldowns },\n            { no: 4, name: \"wait\", kind: \"message\", oneof: \"action\", T: () => APLActionWait },\n            { no: 14, name: \"wait_until\", kind: \"message\", oneof: \"action\", T: () => APLActionWaitUntil },\n            { no: 15, name: \"schedule\", kind: \"message\", oneof: \"action\", T: () => APLActionSchedule },\n            { no: 2, name: \"sequence\", kind: \"message\", oneof: \"action\", T: () => APLActionSequence },\n            { no: 5, name: \"reset_sequence\", kind: \"message\", oneof: \"action\", T: () => APLActionResetSequence },\n            { no: 6, name: \"strict_sequence\", kind: \"message\", oneof: \"action\", T: () => APLActionStrictSequence },\n            { no: 9, name: \"change_target\", kind: \"message\", oneof: \"action\", T: () => APLActionChangeTarget },\n            { no: 13, name: \"activate_aura\", kind: \"message\", oneof: \"action\", T: () => APLActionActivateAura },\n            { no: 10, name: \"cancel_aura\", kind: \"message\", oneof: \"action\", T: () => APLActionCancelAura },\n            { no: 11, name: \"trigger_icd\", kind: \"message\", oneof: \"action\", T: () => APLActionTriggerICD },\n            { no: 17, name: \"item_swap\", kind: \"message\", oneof: \"action\", T: () => APLActionItemSwap },\n            { no: 21, name: \"move\", kind: \"message\", oneof: \"action\", T: () => APLActionMove },\n            { no: 22, name: \"move_duration\", kind: \"message\", oneof: \"action\", T: () => APLActionMoveDuration },\n            { no: 18, name: \"cat_optimal_rotation_action\", kind: \"message\", oneof: \"action\", T: () => APLActionCatOptimalRotationAction },\n            { no: 19, name: \"custom_rotation\", kind: \"message\", oneof: \"action\", T: () => APLActionCustomRotation }\n        ]);\n    }\n    create(value?: PartialMessage<APLAction>): APLAction {\n        const message = { action: { oneofKind: undefined } };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLAction>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLAction): APLAction {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValue condition */ 1:\n                    message.condition = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.condition);\n                    break;\n                case /* proto.APLActionCastSpell cast_spell */ 3:\n                    message.action = {\n                        oneofKind: \"castSpell\",\n                        castSpell: APLActionCastSpell.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).castSpell)\n                    };\n                    break;\n                case /* proto.APLActionCastFriendlySpell cast_friendly_spell */ 20:\n                    message.action = {\n                        oneofKind: \"castFriendlySpell\",\n                        castFriendlySpell: APLActionCastFriendlySpell.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).castFriendlySpell)\n                    };\n                    break;\n                case /* proto.APLActionChannelSpell channel_spell */ 16:\n                    message.action = {\n                        oneofKind: \"channelSpell\",\n                        channelSpell: APLActionChannelSpell.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).channelSpell)\n                    };\n                    break;\n                case /* proto.APLActionMultidot multidot */ 8:\n                    message.action = {\n                        oneofKind: \"multidot\",\n                        multidot: APLActionMultidot.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).multidot)\n                    };\n                    break;\n                case /* proto.APLActionMultishield multishield */ 12:\n                    message.action = {\n                        oneofKind: \"multishield\",\n                        multishield: APLActionMultishield.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).multishield)\n                    };\n                    break;\n                case /* proto.APLActionAutocastOtherCooldowns autocast_other_cooldowns */ 7:\n                    message.action = {\n                        oneofKind: \"autocastOtherCooldowns\",\n                        autocastOtherCooldowns: APLActionAutocastOtherCooldowns.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).autocastOtherCooldowns)\n                    };\n                    break;\n                case /* proto.APLActionWait wait */ 4:\n                    message.action = {\n                        oneofKind: \"wait\",\n                        wait: APLActionWait.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).wait)\n                    };\n                    break;\n                case /* proto.APLActionWaitUntil wait_until */ 14:\n                    message.action = {\n                        oneofKind: \"waitUntil\",\n                        waitUntil: APLActionWaitUntil.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).waitUntil)\n                    };\n                    break;\n                case /* proto.APLActionSchedule schedule */ 15:\n                    message.action = {\n                        oneofKind: \"schedule\",\n                        schedule: APLActionSchedule.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).schedule)\n                    };\n                    break;\n                case /* proto.APLActionSequence sequence */ 2:\n                    message.action = {\n                        oneofKind: \"sequence\",\n                        sequence: APLActionSequence.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).sequence)\n                    };\n                    break;\n                case /* proto.APLActionResetSequence reset_sequence */ 5:\n                    message.action = {\n                        oneofKind: \"resetSequence\",\n                        resetSequence: APLActionResetSequence.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).resetSequence)\n                    };\n                    break;\n                case /* proto.APLActionStrictSequence strict_sequence */ 6:\n                    message.action = {\n                        oneofKind: \"strictSequence\",\n                        strictSequence: APLActionStrictSequence.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).strictSequence)\n                    };\n                    break;\n                case /* proto.APLActionChangeTarget change_target */ 9:\n                    message.action = {\n                        oneofKind: \"changeTarget\",\n                        changeTarget: APLActionChangeTarget.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).changeTarget)\n                    };\n                    break;\n                case /* proto.APLActionActivateAura activate_aura */ 13:\n                    message.action = {\n                        oneofKind: \"activateAura\",\n                        activateAura: APLActionActivateAura.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).activateAura)\n                    };\n                    break;\n                case /* proto.APLActionCancelAura cancel_aura */ 10:\n                    message.action = {\n                        oneofKind: \"cancelAura\",\n                        cancelAura: APLActionCancelAura.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).cancelAura)\n                    };\n                    break;\n                case /* proto.APLActionTriggerICD trigger_icd */ 11:\n                    message.action = {\n                        oneofKind: \"triggerIcd\",\n                        triggerIcd: APLActionTriggerICD.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).triggerIcd)\n                    };\n                    break;\n                case /* proto.APLActionItemSwap item_swap */ 17:\n                    message.action = {\n                        oneofKind: \"itemSwap\",\n                        itemSwap: APLActionItemSwap.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).itemSwap)\n                    };\n                    break;\n                case /* proto.APLActionMove move */ 21:\n                    message.action = {\n                        oneofKind: \"move\",\n                        move: APLActionMove.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).move)\n                    };\n                    break;\n                case /* proto.APLActionMoveDuration move_duration */ 22:\n                    message.action = {\n                        oneofKind: \"moveDuration\",\n                        moveDuration: APLActionMoveDuration.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).moveDuration)\n                    };\n                    break;\n                case /* proto.APLActionCatOptimalRotationAction cat_optimal_rotation_action */ 18:\n                    message.action = {\n                        oneofKind: \"catOptimalRotationAction\",\n                        catOptimalRotationAction: APLActionCatOptimalRotationAction.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).catOptimalRotationAction)\n                    };\n                    break;\n                case /* proto.APLActionCustomRotation custom_rotation */ 19:\n                    message.action = {\n                        oneofKind: \"customRotation\",\n                        customRotation: APLActionCustomRotation.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).customRotation)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValue condition = 1; */\n        if (message.condition)\n            APLValue.internalBinaryWrite(message.condition, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionCastSpell cast_spell = 3; */\n        if (message.action.oneofKind === \"castSpell\")\n            APLActionCastSpell.internalBinaryWrite(message.action.castSpell, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionCastFriendlySpell cast_friendly_spell = 20; */\n        if (message.action.oneofKind === \"castFriendlySpell\")\n            APLActionCastFriendlySpell.internalBinaryWrite(message.action.castFriendlySpell, writer.tag(20, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionChannelSpell channel_spell = 16; */\n        if (message.action.oneofKind === \"channelSpell\")\n            APLActionChannelSpell.internalBinaryWrite(message.action.channelSpell, writer.tag(16, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionMultidot multidot = 8; */\n        if (message.action.oneofKind === \"multidot\")\n            APLActionMultidot.internalBinaryWrite(message.action.multidot, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionMultishield multishield = 12; */\n        if (message.action.oneofKind === \"multishield\")\n            APLActionMultishield.internalBinaryWrite(message.action.multishield, writer.tag(12, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionAutocastOtherCooldowns autocast_other_cooldowns = 7; */\n        if (message.action.oneofKind === \"autocastOtherCooldowns\")\n            APLActionAutocastOtherCooldowns.internalBinaryWrite(message.action.autocastOtherCooldowns, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionWait wait = 4; */\n        if (message.action.oneofKind === \"wait\")\n            APLActionWait.internalBinaryWrite(message.action.wait, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionWaitUntil wait_until = 14; */\n        if (message.action.oneofKind === \"waitUntil\")\n            APLActionWaitUntil.internalBinaryWrite(message.action.waitUntil, writer.tag(14, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionSchedule schedule = 15; */\n        if (message.action.oneofKind === \"schedule\")\n            APLActionSchedule.internalBinaryWrite(message.action.schedule, writer.tag(15, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionSequence sequence = 2; */\n        if (message.action.oneofKind === \"sequence\")\n            APLActionSequence.internalBinaryWrite(message.action.sequence, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionResetSequence reset_sequence = 5; */\n        if (message.action.oneofKind === \"resetSequence\")\n            APLActionResetSequence.internalBinaryWrite(message.action.resetSequence, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionStrictSequence strict_sequence = 6; */\n        if (message.action.oneofKind === \"strictSequence\")\n            APLActionStrictSequence.internalBinaryWrite(message.action.strictSequence, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionChangeTarget change_target = 9; */\n        if (message.action.oneofKind === \"changeTarget\")\n            APLActionChangeTarget.internalBinaryWrite(message.action.changeTarget, writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionActivateAura activate_aura = 13; */\n        if (message.action.oneofKind === \"activateAura\")\n            APLActionActivateAura.internalBinaryWrite(message.action.activateAura, writer.tag(13, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionCancelAura cancel_aura = 10; */\n        if (message.action.oneofKind === \"cancelAura\")\n            APLActionCancelAura.internalBinaryWrite(message.action.cancelAura, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionTriggerICD trigger_icd = 11; */\n        if (message.action.oneofKind === \"triggerIcd\")\n            APLActionTriggerICD.internalBinaryWrite(message.action.triggerIcd, writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionItemSwap item_swap = 17; */\n        if (message.action.oneofKind === \"itemSwap\")\n            APLActionItemSwap.internalBinaryWrite(message.action.itemSwap, writer.tag(17, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionMove move = 21; */\n        if (message.action.oneofKind === \"move\")\n            APLActionMove.internalBinaryWrite(message.action.move, writer.tag(21, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionMoveDuration move_duration = 22; */\n        if (message.action.oneofKind === \"moveDuration\")\n            APLActionMoveDuration.internalBinaryWrite(message.action.moveDuration, writer.tag(22, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionCatOptimalRotationAction cat_optimal_rotation_action = 18; */\n        if (message.action.oneofKind === \"catOptimalRotationAction\")\n            APLActionCatOptimalRotationAction.internalBinaryWrite(message.action.catOptimalRotationAction, writer.tag(18, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionCustomRotation custom_rotation = 19; */\n        if (message.action.oneofKind === \"customRotation\")\n            APLActionCustomRotation.internalBinaryWrite(message.action.customRotation, writer.tag(19, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLAction\n */\nexport const APLAction = new APLAction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValue$Type extends MessageType<APLValue> {\n    constructor() {\n        super(\"proto.APLValue\", [\n            { no: 1, name: \"const\", kind: \"message\", oneof: \"value\", T: () => APLValueConst },\n            { no: 2, name: \"and\", kind: \"message\", oneof: \"value\", T: () => APLValueAnd },\n            { no: 3, name: \"or\", kind: \"message\", oneof: \"value\", T: () => APLValueOr },\n            { no: 4, name: \"not\", kind: \"message\", oneof: \"value\", T: () => APLValueNot },\n            { no: 5, name: \"cmp\", kind: \"message\", oneof: \"value\", T: () => APLValueCompare },\n            { no: 38, name: \"math\", kind: \"message\", oneof: \"value\", T: () => APLValueMath },\n            { no: 47, name: \"max\", kind: \"message\", oneof: \"value\", T: () => APLValueMax },\n            { no: 48, name: \"min\", kind: \"message\", oneof: \"value\", T: () => APLValueMin },\n            { no: 7, name: \"current_time\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentTime },\n            { no: 8, name: \"current_time_percent\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentTimePercent },\n            { no: 9, name: \"remaining_time\", kind: \"message\", oneof: \"value\", T: () => APLValueRemainingTime },\n            { no: 10, name: \"remaining_time_percent\", kind: \"message\", oneof: \"value\", T: () => APLValueRemainingTimePercent },\n            { no: 41, name: \"is_execute_phase\", kind: \"message\", oneof: \"value\", T: () => APLValueIsExecutePhase },\n            { no: 28, name: \"number_targets\", kind: \"message\", oneof: \"value\", T: () => APLValueNumberTargets },\n            { no: 64, name: \"boss_spell_time_to_ready\", kind: \"message\", oneof: \"value\", T: () => APLValueBossSpellTimeToReady },\n            { no: 65, name: \"boss_spell_is_casting\", kind: \"message\", oneof: \"value\", T: () => APLValueBossSpellIsCasting },\n            { no: 26, name: \"current_health\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentHealth },\n            { no: 27, name: \"current_health_percent\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentHealthPercent },\n            { no: 11, name: \"current_mana\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentMana },\n            { no: 12, name: \"current_mana_percent\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentManaPercent },\n            { no: 14, name: \"current_rage\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentRage },\n            { no: 15, name: \"current_energy\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentEnergy },\n            { no: 66, name: \"current_focus\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentFocus },\n            { no: 16, name: \"current_combo_points\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentComboPoints },\n            { no: 25, name: \"current_runic_power\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentRunicPower },\n            { no: 68, name: \"current_solar_energy\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentSolarEnergy },\n            { no: 69, name: \"current_lunar_energy\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentLunarEnergy },\n            { no: 72, name: \"unit_is_moving\", kind: \"message\", oneof: \"value\", T: () => APLValueUnitIsMoving },\n            { no: 29, name: \"current_rune_count\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentRuneCount },\n            { no: 34, name: \"current_non_death_rune_count\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentNonDeathRuneCount },\n            { no: 30, name: \"current_rune_death\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentRuneDeath },\n            { no: 31, name: \"current_rune_active\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentRuneActive },\n            { no: 32, name: \"rune_cooldown\", kind: \"message\", oneof: \"value\", T: () => APLValueRuneCooldown },\n            { no: 33, name: \"next_rune_cooldown\", kind: \"message\", oneof: \"value\", T: () => APLValueNextRuneCooldown },\n            { no: 53, name: \"rune_slot_cooldown\", kind: \"message\", oneof: \"value\", T: () => APLValueRuneSlotCooldown },\n            { no: 17, name: \"gcd_is_ready\", kind: \"message\", oneof: \"value\", T: () => APLValueGCDIsReady },\n            { no: 18, name: \"gcd_time_to_ready\", kind: \"message\", oneof: \"value\", T: () => APLValueGCDTimeToReady },\n            { no: 40, name: \"auto_time_to_next\", kind: \"message\", oneof: \"value\", T: () => APLValueAutoTimeToNext },\n            { no: 19, name: \"spell_can_cast\", kind: \"message\", oneof: \"value\", T: () => APLValueSpellCanCast },\n            { no: 20, name: \"spell_is_ready\", kind: \"message\", oneof: \"value\", T: () => APLValueSpellIsReady },\n            { no: 21, name: \"spell_time_to_ready\", kind: \"message\", oneof: \"value\", T: () => APLValueSpellTimeToReady },\n            { no: 35, name: \"spell_cast_time\", kind: \"message\", oneof: \"value\", T: () => APLValueSpellCastTime },\n            { no: 37, name: \"spell_travel_time\", kind: \"message\", oneof: \"value\", T: () => APLValueSpellTravelTime },\n            { no: 42, name: \"spell_cpm\", kind: \"message\", oneof: \"value\", T: () => APLValueSpellCPM },\n            { no: 56, name: \"spell_is_channeling\", kind: \"message\", oneof: \"value\", T: () => APLValueSpellIsChanneling },\n            { no: 57, name: \"spell_channeled_ticks\", kind: \"message\", oneof: \"value\", T: () => APLValueSpellChanneledTicks },\n            { no: 62, name: \"spell_current_cost\", kind: \"message\", oneof: \"value\", T: () => APLValueSpellCurrentCost },\n            { no: 22, name: \"aura_is_active\", kind: \"message\", oneof: \"value\", T: () => APLValueAuraIsActive },\n            { no: 50, name: \"aura_is_active_with_reaction_time\", kind: \"message\", oneof: \"value\", T: () => APLValueAuraIsActiveWithReactionTime },\n            { no: 23, name: \"aura_remaining_time\", kind: \"message\", oneof: \"value\", T: () => APLValueAuraRemainingTime },\n            { no: 24, name: \"aura_num_stacks\", kind: \"message\", oneof: \"value\", T: () => APLValueAuraNumStacks },\n            { no: 39, name: \"aura_internal_cooldown\", kind: \"message\", oneof: \"value\", T: () => APLValueAuraInternalCooldown },\n            { no: 51, name: \"aura_icd_is_ready_with_reaction_time\", kind: \"message\", oneof: \"value\", T: () => APLValueAuraICDIsReadyWithReactionTime },\n            { no: 43, name: \"aura_should_refresh\", kind: \"message\", oneof: \"value\", T: () => APLValueAuraShouldRefresh },\n            { no: 6, name: \"dot_is_active\", kind: \"message\", oneof: \"value\", T: () => APLValueDotIsActive },\n            { no: 13, name: \"dot_remaining_time\", kind: \"message\", oneof: \"value\", T: () => APLValueDotRemainingTime },\n            { no: 67, name: \"dot_tick_frequency\", kind: \"message\", oneof: \"value\", T: () => APLValueDotTickFrequency },\n            { no: 44, name: \"sequence_is_complete\", kind: \"message\", oneof: \"value\", T: () => APLValueSequenceIsComplete },\n            { no: 45, name: \"sequence_is_ready\", kind: \"message\", oneof: \"value\", T: () => APLValueSequenceIsReady },\n            { no: 46, name: \"sequence_time_to_ready\", kind: \"message\", oneof: \"value\", T: () => APLValueSequenceTimeToReady },\n            { no: 58, name: \"channel_clip_delay\", kind: \"message\", oneof: \"value\", T: () => APLValueChannelClipDelay },\n            { no: 71, name: \"input_delay\", kind: \"message\", oneof: \"value\", T: () => APLValueInputDelay },\n            { no: 63, name: \"front_of_target\", kind: \"message\", oneof: \"value\", T: () => APLValueFrontOfTarget },\n            { no: 49, name: \"totem_remaining_time\", kind: \"message\", oneof: \"value\", T: () => APLValueTotemRemainingTime },\n            { no: 52, name: \"cat_excess_energy\", kind: \"message\", oneof: \"value\", T: () => APLValueCatExcessEnergy },\n            { no: 61, name: \"cat_new_savage_roar_duration\", kind: \"message\", oneof: \"value\", T: () => APLValueCatNewSavageRoarDuration },\n            { no: 59, name: \"warlock_should_recast_drain_soul\", kind: \"message\", oneof: \"value\", T: () => APLValueWarlockShouldRecastDrainSoul },\n            { no: 60, name: \"warlock_should_refresh_corruption\", kind: \"message\", oneof: \"value\", T: () => APLValueWarlockShouldRefreshCorruption },\n            { no: 70, name: \"druid_current_eclipse_phase\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentEclipsePhase }\n        ]);\n    }\n    create(value?: PartialMessage<APLValue>): APLValue {\n        const message = { value: { oneofKind: undefined } };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValue>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValue): APLValue {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueConst const */ 1:\n                    message.value = {\n                        oneofKind: \"const\",\n                        const: APLValueConst.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).const)\n                    };\n                    break;\n                case /* proto.APLValueAnd and */ 2:\n                    message.value = {\n                        oneofKind: \"and\",\n                        and: APLValueAnd.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).and)\n                    };\n                    break;\n                case /* proto.APLValueOr or */ 3:\n                    message.value = {\n                        oneofKind: \"or\",\n                        or: APLValueOr.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).or)\n                    };\n                    break;\n                case /* proto.APLValueNot not */ 4:\n                    message.value = {\n                        oneofKind: \"not\",\n                        not: APLValueNot.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).not)\n                    };\n                    break;\n                case /* proto.APLValueCompare cmp */ 5:\n                    message.value = {\n                        oneofKind: \"cmp\",\n                        cmp: APLValueCompare.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).cmp)\n                    };\n                    break;\n                case /* proto.APLValueMath math */ 38:\n                    message.value = {\n                        oneofKind: \"math\",\n                        math: APLValueMath.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).math)\n                    };\n                    break;\n                case /* proto.APLValueMax max */ 47:\n                    message.value = {\n                        oneofKind: \"max\",\n                        max: APLValueMax.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).max)\n                    };\n                    break;\n                case /* proto.APLValueMin min */ 48:\n                    message.value = {\n                        oneofKind: \"min\",\n                        min: APLValueMin.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).min)\n                    };\n                    break;\n                case /* proto.APLValueCurrentTime current_time */ 7:\n                    message.value = {\n                        oneofKind: \"currentTime\",\n                        currentTime: APLValueCurrentTime.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentTime)\n                    };\n                    break;\n                case /* proto.APLValueCurrentTimePercent current_time_percent */ 8:\n                    message.value = {\n                        oneofKind: \"currentTimePercent\",\n                        currentTimePercent: APLValueCurrentTimePercent.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentTimePercent)\n                    };\n                    break;\n                case /* proto.APLValueRemainingTime remaining_time */ 9:\n                    message.value = {\n                        oneofKind: \"remainingTime\",\n                        remainingTime: APLValueRemainingTime.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).remainingTime)\n                    };\n                    break;\n                case /* proto.APLValueRemainingTimePercent remaining_time_percent */ 10:\n                    message.value = {\n                        oneofKind: \"remainingTimePercent\",\n                        remainingTimePercent: APLValueRemainingTimePercent.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).remainingTimePercent)\n                    };\n                    break;\n                case /* proto.APLValueIsExecutePhase is_execute_phase */ 41:\n                    message.value = {\n                        oneofKind: \"isExecutePhase\",\n                        isExecutePhase: APLValueIsExecutePhase.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).isExecutePhase)\n                    };\n                    break;\n                case /* proto.APLValueNumberTargets number_targets */ 28:\n                    message.value = {\n                        oneofKind: \"numberTargets\",\n                        numberTargets: APLValueNumberTargets.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).numberTargets)\n                    };\n                    break;\n                case /* proto.APLValueBossSpellTimeToReady boss_spell_time_to_ready */ 64:\n                    message.value = {\n                        oneofKind: \"bossSpellTimeToReady\",\n                        bossSpellTimeToReady: APLValueBossSpellTimeToReady.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).bossSpellTimeToReady)\n                    };\n                    break;\n                case /* proto.APLValueBossSpellIsCasting boss_spell_is_casting */ 65:\n                    message.value = {\n                        oneofKind: \"bossSpellIsCasting\",\n                        bossSpellIsCasting: APLValueBossSpellIsCasting.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).bossSpellIsCasting)\n                    };\n                    break;\n                case /* proto.APLValueCurrentHealth current_health */ 26:\n                    message.value = {\n                        oneofKind: \"currentHealth\",\n                        currentHealth: APLValueCurrentHealth.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentHealth)\n                    };\n                    break;\n                case /* proto.APLValueCurrentHealthPercent current_health_percent */ 27:\n                    message.value = {\n                        oneofKind: \"currentHealthPercent\",\n                        currentHealthPercent: APLValueCurrentHealthPercent.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentHealthPercent)\n                    };\n                    break;\n                case /* proto.APLValueCurrentMana current_mana */ 11:\n                    message.value = {\n                        oneofKind: \"currentMana\",\n                        currentMana: APLValueCurrentMana.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentMana)\n                    };\n                    break;\n                case /* proto.APLValueCurrentManaPercent current_mana_percent */ 12:\n                    message.value = {\n                        oneofKind: \"currentManaPercent\",\n                        currentManaPercent: APLValueCurrentManaPercent.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentManaPercent)\n                    };\n                    break;\n                case /* proto.APLValueCurrentRage current_rage */ 14:\n                    message.value = {\n                        oneofKind: \"currentRage\",\n                        currentRage: APLValueCurrentRage.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentRage)\n                    };\n                    break;\n                case /* proto.APLValueCurrentEnergy current_energy */ 15:\n                    message.value = {\n                        oneofKind: \"currentEnergy\",\n                        currentEnergy: APLValueCurrentEnergy.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentEnergy)\n                    };\n                    break;\n                case /* proto.APLValueCurrentFocus current_focus */ 66:\n                    message.value = {\n                        oneofKind: \"currentFocus\",\n                        currentFocus: APLValueCurrentFocus.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentFocus)\n                    };\n                    break;\n                case /* proto.APLValueCurrentComboPoints current_combo_points */ 16:\n                    message.value = {\n                        oneofKind: \"currentComboPoints\",\n                        currentComboPoints: APLValueCurrentComboPoints.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentComboPoints)\n                    };\n                    break;\n                case /* proto.APLValueCurrentRunicPower current_runic_power */ 25:\n                    message.value = {\n                        oneofKind: \"currentRunicPower\",\n                        currentRunicPower: APLValueCurrentRunicPower.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentRunicPower)\n                    };\n                    break;\n                case /* proto.APLValueCurrentSolarEnergy current_solar_energy */ 68:\n                    message.value = {\n                        oneofKind: \"currentSolarEnergy\",\n                        currentSolarEnergy: APLValueCurrentSolarEnergy.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentSolarEnergy)\n                    };\n                    break;\n                case /* proto.APLValueCurrentLunarEnergy current_lunar_energy */ 69:\n                    message.value = {\n                        oneofKind: \"currentLunarEnergy\",\n                        currentLunarEnergy: APLValueCurrentLunarEnergy.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentLunarEnergy)\n                    };\n                    break;\n                case /* proto.APLValueUnitIsMoving unit_is_moving */ 72:\n                    message.value = {\n                        oneofKind: \"unitIsMoving\",\n                        unitIsMoving: APLValueUnitIsMoving.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).unitIsMoving)\n                    };\n                    break;\n                case /* proto.APLValueCurrentRuneCount current_rune_count */ 29:\n                    message.value = {\n                        oneofKind: \"currentRuneCount\",\n                        currentRuneCount: APLValueCurrentRuneCount.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentRuneCount)\n                    };\n                    break;\n                case /* proto.APLValueCurrentNonDeathRuneCount current_non_death_rune_count */ 34:\n                    message.value = {\n                        oneofKind: \"currentNonDeathRuneCount\",\n                        currentNonDeathRuneCount: APLValueCurrentNonDeathRuneCount.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentNonDeathRuneCount)\n                    };\n                    break;\n                case /* proto.APLValueCurrentRuneDeath current_rune_death */ 30:\n                    message.value = {\n                        oneofKind: \"currentRuneDeath\",\n                        currentRuneDeath: APLValueCurrentRuneDeath.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentRuneDeath)\n                    };\n                    break;\n                case /* proto.APLValueCurrentRuneActive current_rune_active */ 31:\n                    message.value = {\n                        oneofKind: \"currentRuneActive\",\n                        currentRuneActive: APLValueCurrentRuneActive.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentRuneActive)\n                    };\n                    break;\n                case /* proto.APLValueRuneCooldown rune_cooldown */ 32:\n                    message.value = {\n                        oneofKind: \"runeCooldown\",\n                        runeCooldown: APLValueRuneCooldown.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).runeCooldown)\n                    };\n                    break;\n                case /* proto.APLValueNextRuneCooldown next_rune_cooldown */ 33:\n                    message.value = {\n                        oneofKind: \"nextRuneCooldown\",\n                        nextRuneCooldown: APLValueNextRuneCooldown.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).nextRuneCooldown)\n                    };\n                    break;\n                case /* proto.APLValueRuneSlotCooldown rune_slot_cooldown */ 53:\n                    message.value = {\n                        oneofKind: \"runeSlotCooldown\",\n                        runeSlotCooldown: APLValueRuneSlotCooldown.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).runeSlotCooldown)\n                    };\n                    break;\n                case /* proto.APLValueGCDIsReady gcd_is_ready */ 17:\n                    message.value = {\n                        oneofKind: \"gcdIsReady\",\n                        gcdIsReady: APLValueGCDIsReady.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).gcdIsReady)\n                    };\n                    break;\n                case /* proto.APLValueGCDTimeToReady gcd_time_to_ready */ 18:\n                    message.value = {\n                        oneofKind: \"gcdTimeToReady\",\n                        gcdTimeToReady: APLValueGCDTimeToReady.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).gcdTimeToReady)\n                    };\n                    break;\n                case /* proto.APLValueAutoTimeToNext auto_time_to_next */ 40:\n                    message.value = {\n                        oneofKind: \"autoTimeToNext\",\n                        autoTimeToNext: APLValueAutoTimeToNext.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).autoTimeToNext)\n                    };\n                    break;\n                case /* proto.APLValueSpellCanCast spell_can_cast */ 19:\n                    message.value = {\n                        oneofKind: \"spellCanCast\",\n                        spellCanCast: APLValueSpellCanCast.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).spellCanCast)\n                    };\n                    break;\n                case /* proto.APLValueSpellIsReady spell_is_ready */ 20:\n                    message.value = {\n                        oneofKind: \"spellIsReady\",\n                        spellIsReady: APLValueSpellIsReady.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).spellIsReady)\n                    };\n                    break;\n                case /* proto.APLValueSpellTimeToReady spell_time_to_ready */ 21:\n                    message.value = {\n                        oneofKind: \"spellTimeToReady\",\n                        spellTimeToReady: APLValueSpellTimeToReady.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).spellTimeToReady)\n                    };\n                    break;\n                case /* proto.APLValueSpellCastTime spell_cast_time */ 35:\n                    message.value = {\n                        oneofKind: \"spellCastTime\",\n                        spellCastTime: APLValueSpellCastTime.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).spellCastTime)\n                    };\n                    break;\n                case /* proto.APLValueSpellTravelTime spell_travel_time */ 37:\n                    message.value = {\n                        oneofKind: \"spellTravelTime\",\n                        spellTravelTime: APLValueSpellTravelTime.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).spellTravelTime)\n                    };\n                    break;\n                case /* proto.APLValueSpellCPM spell_cpm */ 42:\n                    message.value = {\n                        oneofKind: \"spellCpm\",\n                        spellCpm: APLValueSpellCPM.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).spellCpm)\n                    };\n                    break;\n                case /* proto.APLValueSpellIsChanneling spell_is_channeling */ 56:\n                    message.value = {\n                        oneofKind: \"spellIsChanneling\",\n                        spellIsChanneling: APLValueSpellIsChanneling.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).spellIsChanneling)\n                    };\n                    break;\n                case /* proto.APLValueSpellChanneledTicks spell_channeled_ticks */ 57:\n                    message.value = {\n                        oneofKind: \"spellChanneledTicks\",\n                        spellChanneledTicks: APLValueSpellChanneledTicks.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).spellChanneledTicks)\n                    };\n                    break;\n                case /* proto.APLValueSpellCurrentCost spell_current_cost */ 62:\n                    message.value = {\n                        oneofKind: \"spellCurrentCost\",\n                        spellCurrentCost: APLValueSpellCurrentCost.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).spellCurrentCost)\n                    };\n                    break;\n                case /* proto.APLValueAuraIsActive aura_is_active */ 22:\n                    message.value = {\n                        oneofKind: \"auraIsActive\",\n                        auraIsActive: APLValueAuraIsActive.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).auraIsActive)\n                    };\n                    break;\n                case /* proto.APLValueAuraIsActiveWithReactionTime aura_is_active_with_reaction_time */ 50:\n                    message.value = {\n                        oneofKind: \"auraIsActiveWithReactionTime\",\n                        auraIsActiveWithReactionTime: APLValueAuraIsActiveWithReactionTime.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).auraIsActiveWithReactionTime)\n                    };\n                    break;\n                case /* proto.APLValueAuraRemainingTime aura_remaining_time */ 23:\n                    message.value = {\n                        oneofKind: \"auraRemainingTime\",\n                        auraRemainingTime: APLValueAuraRemainingTime.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).auraRemainingTime)\n                    };\n                    break;\n                case /* proto.APLValueAuraNumStacks aura_num_stacks */ 24:\n                    message.value = {\n                        oneofKind: \"auraNumStacks\",\n                        auraNumStacks: APLValueAuraNumStacks.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).auraNumStacks)\n                    };\n                    break;\n                case /* proto.APLValueAuraInternalCooldown aura_internal_cooldown */ 39:\n                    message.value = {\n                        oneofKind: \"auraInternalCooldown\",\n                        auraInternalCooldown: APLValueAuraInternalCooldown.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).auraInternalCooldown)\n                    };\n                    break;\n                case /* proto.APLValueAuraICDIsReadyWithReactionTime aura_icd_is_ready_with_reaction_time */ 51:\n                    message.value = {\n                        oneofKind: \"auraIcdIsReadyWithReactionTime\",\n                        auraIcdIsReadyWithReactionTime: APLValueAuraICDIsReadyWithReactionTime.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).auraIcdIsReadyWithReactionTime)\n                    };\n                    break;\n                case /* proto.APLValueAuraShouldRefresh aura_should_refresh */ 43:\n                    message.value = {\n                        oneofKind: \"auraShouldRefresh\",\n                        auraShouldRefresh: APLValueAuraShouldRefresh.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).auraShouldRefresh)\n                    };\n                    break;\n                case /* proto.APLValueDotIsActive dot_is_active */ 6:\n                    message.value = {\n                        oneofKind: \"dotIsActive\",\n                        dotIsActive: APLValueDotIsActive.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).dotIsActive)\n                    };\n                    break;\n                case /* proto.APLValueDotRemainingTime dot_remaining_time */ 13:\n                    message.value = {\n                        oneofKind: \"dotRemainingTime\",\n                        dotRemainingTime: APLValueDotRemainingTime.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).dotRemainingTime)\n                    };\n                    break;\n                case /* proto.APLValueDotTickFrequency dot_tick_frequency */ 67:\n                    message.value = {\n                        oneofKind: \"dotTickFrequency\",\n                        dotTickFrequency: APLValueDotTickFrequency.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).dotTickFrequency)\n                    };\n                    break;\n                case /* proto.APLValueSequenceIsComplete sequence_is_complete */ 44:\n                    message.value = {\n                        oneofKind: \"sequenceIsComplete\",\n                        sequenceIsComplete: APLValueSequenceIsComplete.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).sequenceIsComplete)\n                    };\n                    break;\n                case /* proto.APLValueSequenceIsReady sequence_is_ready */ 45:\n                    message.value = {\n                        oneofKind: \"sequenceIsReady\",\n                        sequenceIsReady: APLValueSequenceIsReady.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).sequenceIsReady)\n                    };\n                    break;\n                case /* proto.APLValueSequenceTimeToReady sequence_time_to_ready */ 46:\n                    message.value = {\n                        oneofKind: \"sequenceTimeToReady\",\n                        sequenceTimeToReady: APLValueSequenceTimeToReady.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).sequenceTimeToReady)\n                    };\n                    break;\n                case /* proto.APLValueChannelClipDelay channel_clip_delay */ 58:\n                    message.value = {\n                        oneofKind: \"channelClipDelay\",\n                        channelClipDelay: APLValueChannelClipDelay.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).channelClipDelay)\n                    };\n                    break;\n                case /* proto.APLValueInputDelay input_delay */ 71:\n                    message.value = {\n                        oneofKind: \"inputDelay\",\n                        inputDelay: APLValueInputDelay.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).inputDelay)\n                    };\n                    break;\n                case /* proto.APLValueFrontOfTarget front_of_target */ 63:\n                    message.value = {\n                        oneofKind: \"frontOfTarget\",\n                        frontOfTarget: APLValueFrontOfTarget.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).frontOfTarget)\n                    };\n                    break;\n                case /* proto.APLValueTotemRemainingTime totem_remaining_time */ 49:\n                    message.value = {\n                        oneofKind: \"totemRemainingTime\",\n                        totemRemainingTime: APLValueTotemRemainingTime.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).totemRemainingTime)\n                    };\n                    break;\n                case /* proto.APLValueCatExcessEnergy cat_excess_energy */ 52:\n                    message.value = {\n                        oneofKind: \"catExcessEnergy\",\n                        catExcessEnergy: APLValueCatExcessEnergy.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).catExcessEnergy)\n                    };\n                    break;\n                case /* proto.APLValueCatNewSavageRoarDuration cat_new_savage_roar_duration */ 61:\n                    message.value = {\n                        oneofKind: \"catNewSavageRoarDuration\",\n                        catNewSavageRoarDuration: APLValueCatNewSavageRoarDuration.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).catNewSavageRoarDuration)\n                    };\n                    break;\n                case /* proto.APLValueWarlockShouldRecastDrainSoul warlock_should_recast_drain_soul */ 59:\n                    message.value = {\n                        oneofKind: \"warlockShouldRecastDrainSoul\",\n                        warlockShouldRecastDrainSoul: APLValueWarlockShouldRecastDrainSoul.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).warlockShouldRecastDrainSoul)\n                    };\n                    break;\n                case /* proto.APLValueWarlockShouldRefreshCorruption warlock_should_refresh_corruption */ 60:\n                    message.value = {\n                        oneofKind: \"warlockShouldRefreshCorruption\",\n                        warlockShouldRefreshCorruption: APLValueWarlockShouldRefreshCorruption.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).warlockShouldRefreshCorruption)\n                    };\n                    break;\n                case /* proto.APLValueCurrentEclipsePhase druid_current_eclipse_phase */ 70:\n                    message.value = {\n                        oneofKind: \"druidCurrentEclipsePhase\",\n                        druidCurrentEclipsePhase: APLValueCurrentEclipsePhase.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).druidCurrentEclipsePhase)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueConst const = 1; */\n        if (message.value.oneofKind === \"const\")\n            APLValueConst.internalBinaryWrite(message.value.const, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueAnd and = 2; */\n        if (message.value.oneofKind === \"and\")\n            APLValueAnd.internalBinaryWrite(message.value.and, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueOr or = 3; */\n        if (message.value.oneofKind === \"or\")\n            APLValueOr.internalBinaryWrite(message.value.or, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueNot not = 4; */\n        if (message.value.oneofKind === \"not\")\n            APLValueNot.internalBinaryWrite(message.value.not, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCompare cmp = 5; */\n        if (message.value.oneofKind === \"cmp\")\n            APLValueCompare.internalBinaryWrite(message.value.cmp, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueMath math = 38; */\n        if (message.value.oneofKind === \"math\")\n            APLValueMath.internalBinaryWrite(message.value.math, writer.tag(38, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueMax max = 47; */\n        if (message.value.oneofKind === \"max\")\n            APLValueMax.internalBinaryWrite(message.value.max, writer.tag(47, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueMin min = 48; */\n        if (message.value.oneofKind === \"min\")\n            APLValueMin.internalBinaryWrite(message.value.min, writer.tag(48, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentTime current_time = 7; */\n        if (message.value.oneofKind === \"currentTime\")\n            APLValueCurrentTime.internalBinaryWrite(message.value.currentTime, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentTimePercent current_time_percent = 8; */\n        if (message.value.oneofKind === \"currentTimePercent\")\n            APLValueCurrentTimePercent.internalBinaryWrite(message.value.currentTimePercent, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueRemainingTime remaining_time = 9; */\n        if (message.value.oneofKind === \"remainingTime\")\n            APLValueRemainingTime.internalBinaryWrite(message.value.remainingTime, writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueRemainingTimePercent remaining_time_percent = 10; */\n        if (message.value.oneofKind === \"remainingTimePercent\")\n            APLValueRemainingTimePercent.internalBinaryWrite(message.value.remainingTimePercent, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueIsExecutePhase is_execute_phase = 41; */\n        if (message.value.oneofKind === \"isExecutePhase\")\n            APLValueIsExecutePhase.internalBinaryWrite(message.value.isExecutePhase, writer.tag(41, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueNumberTargets number_targets = 28; */\n        if (message.value.oneofKind === \"numberTargets\")\n            APLValueNumberTargets.internalBinaryWrite(message.value.numberTargets, writer.tag(28, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueBossSpellTimeToReady boss_spell_time_to_ready = 64; */\n        if (message.value.oneofKind === \"bossSpellTimeToReady\")\n            APLValueBossSpellTimeToReady.internalBinaryWrite(message.value.bossSpellTimeToReady, writer.tag(64, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueBossSpellIsCasting boss_spell_is_casting = 65; */\n        if (message.value.oneofKind === \"bossSpellIsCasting\")\n            APLValueBossSpellIsCasting.internalBinaryWrite(message.value.bossSpellIsCasting, writer.tag(65, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentHealth current_health = 26; */\n        if (message.value.oneofKind === \"currentHealth\")\n            APLValueCurrentHealth.internalBinaryWrite(message.value.currentHealth, writer.tag(26, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentHealthPercent current_health_percent = 27; */\n        if (message.value.oneofKind === \"currentHealthPercent\")\n            APLValueCurrentHealthPercent.internalBinaryWrite(message.value.currentHealthPercent, writer.tag(27, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentMana current_mana = 11; */\n        if (message.value.oneofKind === \"currentMana\")\n            APLValueCurrentMana.internalBinaryWrite(message.value.currentMana, writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentManaPercent current_mana_percent = 12; */\n        if (message.value.oneofKind === \"currentManaPercent\")\n            APLValueCurrentManaPercent.internalBinaryWrite(message.value.currentManaPercent, writer.tag(12, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentRage current_rage = 14; */\n        if (message.value.oneofKind === \"currentRage\")\n            APLValueCurrentRage.internalBinaryWrite(message.value.currentRage, writer.tag(14, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentEnergy current_energy = 15; */\n        if (message.value.oneofKind === \"currentEnergy\")\n            APLValueCurrentEnergy.internalBinaryWrite(message.value.currentEnergy, writer.tag(15, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentFocus current_focus = 66; */\n        if (message.value.oneofKind === \"currentFocus\")\n            APLValueCurrentFocus.internalBinaryWrite(message.value.currentFocus, writer.tag(66, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentComboPoints current_combo_points = 16; */\n        if (message.value.oneofKind === \"currentComboPoints\")\n            APLValueCurrentComboPoints.internalBinaryWrite(message.value.currentComboPoints, writer.tag(16, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentRunicPower current_runic_power = 25; */\n        if (message.value.oneofKind === \"currentRunicPower\")\n            APLValueCurrentRunicPower.internalBinaryWrite(message.value.currentRunicPower, writer.tag(25, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentSolarEnergy current_solar_energy = 68; */\n        if (message.value.oneofKind === \"currentSolarEnergy\")\n            APLValueCurrentSolarEnergy.internalBinaryWrite(message.value.currentSolarEnergy, writer.tag(68, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentLunarEnergy current_lunar_energy = 69; */\n        if (message.value.oneofKind === \"currentLunarEnergy\")\n            APLValueCurrentLunarEnergy.internalBinaryWrite(message.value.currentLunarEnergy, writer.tag(69, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueUnitIsMoving unit_is_moving = 72; */\n        if (message.value.oneofKind === \"unitIsMoving\")\n            APLValueUnitIsMoving.internalBinaryWrite(message.value.unitIsMoving, writer.tag(72, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentRuneCount current_rune_count = 29; */\n        if (message.value.oneofKind === \"currentRuneCount\")\n            APLValueCurrentRuneCount.internalBinaryWrite(message.value.currentRuneCount, writer.tag(29, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentNonDeathRuneCount current_non_death_rune_count = 34; */\n        if (message.value.oneofKind === \"currentNonDeathRuneCount\")\n            APLValueCurrentNonDeathRuneCount.internalBinaryWrite(message.value.currentNonDeathRuneCount, writer.tag(34, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentRuneDeath current_rune_death = 30; */\n        if (message.value.oneofKind === \"currentRuneDeath\")\n            APLValueCurrentRuneDeath.internalBinaryWrite(message.value.currentRuneDeath, writer.tag(30, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentRuneActive current_rune_active = 31; */\n        if (message.value.oneofKind === \"currentRuneActive\")\n            APLValueCurrentRuneActive.internalBinaryWrite(message.value.currentRuneActive, writer.tag(31, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueRuneCooldown rune_cooldown = 32; */\n        if (message.value.oneofKind === \"runeCooldown\")\n            APLValueRuneCooldown.internalBinaryWrite(message.value.runeCooldown, writer.tag(32, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueNextRuneCooldown next_rune_cooldown = 33; */\n        if (message.value.oneofKind === \"nextRuneCooldown\")\n            APLValueNextRuneCooldown.internalBinaryWrite(message.value.nextRuneCooldown, writer.tag(33, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueRuneSlotCooldown rune_slot_cooldown = 53; */\n        if (message.value.oneofKind === \"runeSlotCooldown\")\n            APLValueRuneSlotCooldown.internalBinaryWrite(message.value.runeSlotCooldown, writer.tag(53, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueGCDIsReady gcd_is_ready = 17; */\n        if (message.value.oneofKind === \"gcdIsReady\")\n            APLValueGCDIsReady.internalBinaryWrite(message.value.gcdIsReady, writer.tag(17, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueGCDTimeToReady gcd_time_to_ready = 18; */\n        if (message.value.oneofKind === \"gcdTimeToReady\")\n            APLValueGCDTimeToReady.internalBinaryWrite(message.value.gcdTimeToReady, writer.tag(18, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueAutoTimeToNext auto_time_to_next = 40; */\n        if (message.value.oneofKind === \"autoTimeToNext\")\n            APLValueAutoTimeToNext.internalBinaryWrite(message.value.autoTimeToNext, writer.tag(40, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSpellCanCast spell_can_cast = 19; */\n        if (message.value.oneofKind === \"spellCanCast\")\n            APLValueSpellCanCast.internalBinaryWrite(message.value.spellCanCast, writer.tag(19, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSpellIsReady spell_is_ready = 20; */\n        if (message.value.oneofKind === \"spellIsReady\")\n            APLValueSpellIsReady.internalBinaryWrite(message.value.spellIsReady, writer.tag(20, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSpellTimeToReady spell_time_to_ready = 21; */\n        if (message.value.oneofKind === \"spellTimeToReady\")\n            APLValueSpellTimeToReady.internalBinaryWrite(message.value.spellTimeToReady, writer.tag(21, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSpellCastTime spell_cast_time = 35; */\n        if (message.value.oneofKind === \"spellCastTime\")\n            APLValueSpellCastTime.internalBinaryWrite(message.value.spellCastTime, writer.tag(35, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSpellTravelTime spell_travel_time = 37; */\n        if (message.value.oneofKind === \"spellTravelTime\")\n            APLValueSpellTravelTime.internalBinaryWrite(message.value.spellTravelTime, writer.tag(37, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSpellCPM spell_cpm = 42; */\n        if (message.value.oneofKind === \"spellCpm\")\n            APLValueSpellCPM.internalBinaryWrite(message.value.spellCpm, writer.tag(42, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSpellIsChanneling spell_is_channeling = 56; */\n        if (message.value.oneofKind === \"spellIsChanneling\")\n            APLValueSpellIsChanneling.internalBinaryWrite(message.value.spellIsChanneling, writer.tag(56, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSpellChanneledTicks spell_channeled_ticks = 57; */\n        if (message.value.oneofKind === \"spellChanneledTicks\")\n            APLValueSpellChanneledTicks.internalBinaryWrite(message.value.spellChanneledTicks, writer.tag(57, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSpellCurrentCost spell_current_cost = 62; */\n        if (message.value.oneofKind === \"spellCurrentCost\")\n            APLValueSpellCurrentCost.internalBinaryWrite(message.value.spellCurrentCost, writer.tag(62, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueAuraIsActive aura_is_active = 22; */\n        if (message.value.oneofKind === \"auraIsActive\")\n            APLValueAuraIsActive.internalBinaryWrite(message.value.auraIsActive, writer.tag(22, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueAuraIsActiveWithReactionTime aura_is_active_with_reaction_time = 50; */\n        if (message.value.oneofKind === \"auraIsActiveWithReactionTime\")\n            APLValueAuraIsActiveWithReactionTime.internalBinaryWrite(message.value.auraIsActiveWithReactionTime, writer.tag(50, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueAuraRemainingTime aura_remaining_time = 23; */\n        if (message.value.oneofKind === \"auraRemainingTime\")\n            APLValueAuraRemainingTime.internalBinaryWrite(message.value.auraRemainingTime, writer.tag(23, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueAuraNumStacks aura_num_stacks = 24; */\n        if (message.value.oneofKind === \"auraNumStacks\")\n            APLValueAuraNumStacks.internalBinaryWrite(message.value.auraNumStacks, writer.tag(24, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueAuraInternalCooldown aura_internal_cooldown = 39; */\n        if (message.value.oneofKind === \"auraInternalCooldown\")\n            APLValueAuraInternalCooldown.internalBinaryWrite(message.value.auraInternalCooldown, writer.tag(39, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueAuraICDIsReadyWithReactionTime aura_icd_is_ready_with_reaction_time = 51; */\n        if (message.value.oneofKind === \"auraIcdIsReadyWithReactionTime\")\n            APLValueAuraICDIsReadyWithReactionTime.internalBinaryWrite(message.value.auraIcdIsReadyWithReactionTime, writer.tag(51, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueAuraShouldRefresh aura_should_refresh = 43; */\n        if (message.value.oneofKind === \"auraShouldRefresh\")\n            APLValueAuraShouldRefresh.internalBinaryWrite(message.value.auraShouldRefresh, writer.tag(43, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueDotIsActive dot_is_active = 6; */\n        if (message.value.oneofKind === \"dotIsActive\")\n            APLValueDotIsActive.internalBinaryWrite(message.value.dotIsActive, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueDotRemainingTime dot_remaining_time = 13; */\n        if (message.value.oneofKind === \"dotRemainingTime\")\n            APLValueDotRemainingTime.internalBinaryWrite(message.value.dotRemainingTime, writer.tag(13, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueDotTickFrequency dot_tick_frequency = 67; */\n        if (message.value.oneofKind === \"dotTickFrequency\")\n            APLValueDotTickFrequency.internalBinaryWrite(message.value.dotTickFrequency, writer.tag(67, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSequenceIsComplete sequence_is_complete = 44; */\n        if (message.value.oneofKind === \"sequenceIsComplete\")\n            APLValueSequenceIsComplete.internalBinaryWrite(message.value.sequenceIsComplete, writer.tag(44, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSequenceIsReady sequence_is_ready = 45; */\n        if (message.value.oneofKind === \"sequenceIsReady\")\n            APLValueSequenceIsReady.internalBinaryWrite(message.value.sequenceIsReady, writer.tag(45, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSequenceTimeToReady sequence_time_to_ready = 46; */\n        if (message.value.oneofKind === \"sequenceTimeToReady\")\n            APLValueSequenceTimeToReady.internalBinaryWrite(message.value.sequenceTimeToReady, writer.tag(46, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueChannelClipDelay channel_clip_delay = 58; */\n        if (message.value.oneofKind === \"channelClipDelay\")\n            APLValueChannelClipDelay.internalBinaryWrite(message.value.channelClipDelay, writer.tag(58, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueInputDelay input_delay = 71; */\n        if (message.value.oneofKind === \"inputDelay\")\n            APLValueInputDelay.internalBinaryWrite(message.value.inputDelay, writer.tag(71, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueFrontOfTarget front_of_target = 63; */\n        if (message.value.oneofKind === \"frontOfTarget\")\n            APLValueFrontOfTarget.internalBinaryWrite(message.value.frontOfTarget, writer.tag(63, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueTotemRemainingTime totem_remaining_time = 49; */\n        if (message.value.oneofKind === \"totemRemainingTime\")\n            APLValueTotemRemainingTime.internalBinaryWrite(message.value.totemRemainingTime, writer.tag(49, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCatExcessEnergy cat_excess_energy = 52; */\n        if (message.value.oneofKind === \"catExcessEnergy\")\n            APLValueCatExcessEnergy.internalBinaryWrite(message.value.catExcessEnergy, writer.tag(52, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCatNewSavageRoarDuration cat_new_savage_roar_duration = 61; */\n        if (message.value.oneofKind === \"catNewSavageRoarDuration\")\n            APLValueCatNewSavageRoarDuration.internalBinaryWrite(message.value.catNewSavageRoarDuration, writer.tag(61, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueWarlockShouldRecastDrainSoul warlock_should_recast_drain_soul = 59; */\n        if (message.value.oneofKind === \"warlockShouldRecastDrainSoul\")\n            APLValueWarlockShouldRecastDrainSoul.internalBinaryWrite(message.value.warlockShouldRecastDrainSoul, writer.tag(59, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueWarlockShouldRefreshCorruption warlock_should_refresh_corruption = 60; */\n        if (message.value.oneofKind === \"warlockShouldRefreshCorruption\")\n            APLValueWarlockShouldRefreshCorruption.internalBinaryWrite(message.value.warlockShouldRefreshCorruption, writer.tag(60, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentEclipsePhase druid_current_eclipse_phase = 70; */\n        if (message.value.oneofKind === \"druidCurrentEclipsePhase\")\n            APLValueCurrentEclipsePhase.internalBinaryWrite(message.value.druidCurrentEclipsePhase, writer.tag(70, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValue\n */\nexport const APLValue = new APLValue$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionCastSpell$Type extends MessageType<APLActionCastSpell> {\n    constructor() {\n        super(\"proto.APLActionCastSpell\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"target\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionCastSpell>): APLActionCastSpell {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionCastSpell>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionCastSpell): APLActionCastSpell {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                case /* proto.UnitReference target */ 2:\n                    message.target = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.target);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionCastSpell, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitReference target = 2; */\n        if (message.target)\n            UnitReference.internalBinaryWrite(message.target, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionCastSpell\n */\nexport const APLActionCastSpell = new APLActionCastSpell$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionCastFriendlySpell$Type extends MessageType<APLActionCastFriendlySpell> {\n    constructor() {\n        super(\"proto.APLActionCastFriendlySpell\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"target\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionCastFriendlySpell>): APLActionCastFriendlySpell {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionCastFriendlySpell>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionCastFriendlySpell): APLActionCastFriendlySpell {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                case /* proto.UnitReference target */ 2:\n                    message.target = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.target);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionCastFriendlySpell, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitReference target = 2; */\n        if (message.target)\n            UnitReference.internalBinaryWrite(message.target, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionCastFriendlySpell\n */\nexport const APLActionCastFriendlySpell = new APLActionCastFriendlySpell$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionChannelSpell$Type extends MessageType<APLActionChannelSpell> {\n    constructor() {\n        super(\"proto.APLActionChannelSpell\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"target\", kind: \"message\", T: () => UnitReference },\n            { no: 3, name: \"interrupt_if\", kind: \"message\", T: () => APLValue },\n            { no: 5, name: \"allow_recast\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionChannelSpell>): APLActionChannelSpell {\n        const message = { allowRecast: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionChannelSpell>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionChannelSpell): APLActionChannelSpell {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                case /* proto.UnitReference target */ 2:\n                    message.target = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.target);\n                    break;\n                case /* proto.APLValue interrupt_if */ 3:\n                    message.interruptIf = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.interruptIf);\n                    break;\n                case /* bool allow_recast */ 5:\n                    message.allowRecast = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionChannelSpell, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitReference target = 2; */\n        if (message.target)\n            UnitReference.internalBinaryWrite(message.target, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValue interrupt_if = 3; */\n        if (message.interruptIf)\n            APLValue.internalBinaryWrite(message.interruptIf, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* bool allow_recast = 5; */\n        if (message.allowRecast !== false)\n            writer.tag(5, WireType.Varint).bool(message.allowRecast);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionChannelSpell\n */\nexport const APLActionChannelSpell = new APLActionChannelSpell$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionMultidot$Type extends MessageType<APLActionMultidot> {\n    constructor() {\n        super(\"proto.APLActionMultidot\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"max_dots\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"max_overlap\", kind: \"message\", T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionMultidot>): APLActionMultidot {\n        const message = { maxDots: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionMultidot>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionMultidot): APLActionMultidot {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                case /* int32 max_dots */ 2:\n                    message.maxDots = reader.int32();\n                    break;\n                case /* proto.APLValue max_overlap */ 3:\n                    message.maxOverlap = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.maxOverlap);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionMultidot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* int32 max_dots = 2; */\n        if (message.maxDots !== 0)\n            writer.tag(2, WireType.Varint).int32(message.maxDots);\n        /* proto.APLValue max_overlap = 3; */\n        if (message.maxOverlap)\n            APLValue.internalBinaryWrite(message.maxOverlap, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionMultidot\n */\nexport const APLActionMultidot = new APLActionMultidot$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionMultishield$Type extends MessageType<APLActionMultishield> {\n    constructor() {\n        super(\"proto.APLActionMultishield\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"max_shields\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"max_overlap\", kind: \"message\", T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionMultishield>): APLActionMultishield {\n        const message = { maxShields: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionMultishield>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionMultishield): APLActionMultishield {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                case /* int32 max_shields */ 2:\n                    message.maxShields = reader.int32();\n                    break;\n                case /* proto.APLValue max_overlap */ 3:\n                    message.maxOverlap = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.maxOverlap);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionMultishield, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* int32 max_shields = 2; */\n        if (message.maxShields !== 0)\n            writer.tag(2, WireType.Varint).int32(message.maxShields);\n        /* proto.APLValue max_overlap = 3; */\n        if (message.maxOverlap)\n            APLValue.internalBinaryWrite(message.maxOverlap, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionMultishield\n */\nexport const APLActionMultishield = new APLActionMultishield$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionAutocastOtherCooldowns$Type extends MessageType<APLActionAutocastOtherCooldowns> {\n    constructor() {\n        super(\"proto.APLActionAutocastOtherCooldowns\", []);\n    }\n    create(value?: PartialMessage<APLActionAutocastOtherCooldowns>): APLActionAutocastOtherCooldowns {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionAutocastOtherCooldowns>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionAutocastOtherCooldowns): APLActionAutocastOtherCooldowns {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLActionAutocastOtherCooldowns, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionAutocastOtherCooldowns\n */\nexport const APLActionAutocastOtherCooldowns = new APLActionAutocastOtherCooldowns$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionWait$Type extends MessageType<APLActionWait> {\n    constructor() {\n        super(\"proto.APLActionWait\", [\n            { no: 1, name: \"duration\", kind: \"message\", T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionWait>): APLActionWait {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionWait>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionWait): APLActionWait {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValue duration */ 1:\n                    message.duration = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.duration);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionWait, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValue duration = 1; */\n        if (message.duration)\n            APLValue.internalBinaryWrite(message.duration, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionWait\n */\nexport const APLActionWait = new APLActionWait$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionWaitUntil$Type extends MessageType<APLActionWaitUntil> {\n    constructor() {\n        super(\"proto.APLActionWaitUntil\", [\n            { no: 1, name: \"condition\", kind: \"message\", T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionWaitUntil>): APLActionWaitUntil {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionWaitUntil>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionWaitUntil): APLActionWaitUntil {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValue condition */ 1:\n                    message.condition = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.condition);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionWaitUntil, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValue condition = 1; */\n        if (message.condition)\n            APLValue.internalBinaryWrite(message.condition, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionWaitUntil\n */\nexport const APLActionWaitUntil = new APLActionWaitUntil$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionSchedule$Type extends MessageType<APLActionSchedule> {\n    constructor() {\n        super(\"proto.APLActionSchedule\", [\n            { no: 1, name: \"schedule\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"inner_action\", kind: \"message\", T: () => APLAction }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionSchedule>): APLActionSchedule {\n        const message = { schedule: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionSchedule>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionSchedule): APLActionSchedule {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string schedule */ 1:\n                    message.schedule = reader.string();\n                    break;\n                case /* proto.APLAction inner_action */ 2:\n                    message.innerAction = APLAction.internalBinaryRead(reader, reader.uint32(), options, message.innerAction);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionSchedule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string schedule = 1; */\n        if (message.schedule !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.schedule);\n        /* proto.APLAction inner_action = 2; */\n        if (message.innerAction)\n            APLAction.internalBinaryWrite(message.innerAction, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionSchedule\n */\nexport const APLActionSchedule = new APLActionSchedule$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionSequence$Type extends MessageType<APLActionSequence> {\n    constructor() {\n        super(\"proto.APLActionSequence\", [\n            { no: 1, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"actions\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLAction }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionSequence>): APLActionSequence {\n        const message = { name: \"\", actions: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionSequence>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionSequence): APLActionSequence {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string name */ 1:\n                    message.name = reader.string();\n                    break;\n                case /* repeated proto.APLAction actions */ 2:\n                    message.actions.push(APLAction.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionSequence, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string name = 1; */\n        if (message.name !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.name);\n        /* repeated proto.APLAction actions = 2; */\n        for (let i = 0; i < message.actions.length; i++)\n            APLAction.internalBinaryWrite(message.actions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionSequence\n */\nexport const APLActionSequence = new APLActionSequence$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionResetSequence$Type extends MessageType<APLActionResetSequence> {\n    constructor() {\n        super(\"proto.APLActionResetSequence\", [\n            { no: 1, name: \"sequence_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionResetSequence>): APLActionResetSequence {\n        const message = { sequenceName: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionResetSequence>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionResetSequence): APLActionResetSequence {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string sequence_name */ 1:\n                    message.sequenceName = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionResetSequence, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string sequence_name = 1; */\n        if (message.sequenceName !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.sequenceName);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionResetSequence\n */\nexport const APLActionResetSequence = new APLActionResetSequence$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionStrictSequence$Type extends MessageType<APLActionStrictSequence> {\n    constructor() {\n        super(\"proto.APLActionStrictSequence\", [\n            { no: 1, name: \"actions\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLAction }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionStrictSequence>): APLActionStrictSequence {\n        const message = { actions: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionStrictSequence>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionStrictSequence): APLActionStrictSequence {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.APLAction actions */ 1:\n                    message.actions.push(APLAction.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionStrictSequence, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.APLAction actions = 1; */\n        for (let i = 0; i < message.actions.length; i++)\n            APLAction.internalBinaryWrite(message.actions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionStrictSequence\n */\nexport const APLActionStrictSequence = new APLActionStrictSequence$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionChangeTarget$Type extends MessageType<APLActionChangeTarget> {\n    constructor() {\n        super(\"proto.APLActionChangeTarget\", [\n            { no: 1, name: \"new_target\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionChangeTarget>): APLActionChangeTarget {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionChangeTarget>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionChangeTarget): APLActionChangeTarget {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference new_target */ 1:\n                    message.newTarget = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.newTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionChangeTarget, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference new_target = 1; */\n        if (message.newTarget)\n            UnitReference.internalBinaryWrite(message.newTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionChangeTarget\n */\nexport const APLActionChangeTarget = new APLActionChangeTarget$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionCancelAura$Type extends MessageType<APLActionCancelAura> {\n    constructor() {\n        super(\"proto.APLActionCancelAura\", [\n            { no: 1, name: \"aura_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionCancelAura>): APLActionCancelAura {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionCancelAura>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionCancelAura): APLActionCancelAura {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID aura_id */ 1:\n                    message.auraId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.auraId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionCancelAura, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID aura_id = 1; */\n        if (message.auraId)\n            ActionID.internalBinaryWrite(message.auraId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionCancelAura\n */\nexport const APLActionCancelAura = new APLActionCancelAura$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionActivateAura$Type extends MessageType<APLActionActivateAura> {\n    constructor() {\n        super(\"proto.APLActionActivateAura\", [\n            { no: 1, name: \"aura_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionActivateAura>): APLActionActivateAura {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionActivateAura>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionActivateAura): APLActionActivateAura {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID aura_id */ 1:\n                    message.auraId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.auraId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionActivateAura, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID aura_id = 1; */\n        if (message.auraId)\n            ActionID.internalBinaryWrite(message.auraId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionActivateAura\n */\nexport const APLActionActivateAura = new APLActionActivateAura$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionTriggerICD$Type extends MessageType<APLActionTriggerICD> {\n    constructor() {\n        super(\"proto.APLActionTriggerICD\", [\n            { no: 1, name: \"aura_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionTriggerICD>): APLActionTriggerICD {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionTriggerICD>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionTriggerICD): APLActionTriggerICD {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID aura_id */ 1:\n                    message.auraId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.auraId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionTriggerICD, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID aura_id = 1; */\n        if (message.auraId)\n            ActionID.internalBinaryWrite(message.auraId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionTriggerICD\n */\nexport const APLActionTriggerICD = new APLActionTriggerICD$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionItemSwap$Type extends MessageType<APLActionItemSwap> {\n    constructor() {\n        super(\"proto.APLActionItemSwap\", [\n            { no: 1, name: \"swap_set\", kind: \"enum\", T: () => [\"proto.APLActionItemSwap.SwapSet\", APLActionItemSwap_SwapSet] }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionItemSwap>): APLActionItemSwap {\n        const message = { swapSet: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionItemSwap>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionItemSwap): APLActionItemSwap {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLActionItemSwap.SwapSet swap_set */ 1:\n                    message.swapSet = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionItemSwap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLActionItemSwap.SwapSet swap_set = 1; */\n        if (message.swapSet !== 0)\n            writer.tag(1, WireType.Varint).int32(message.swapSet);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionItemSwap\n */\nexport const APLActionItemSwap = new APLActionItemSwap$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionCatOptimalRotationAction$Type extends MessageType<APLActionCatOptimalRotationAction> {\n    constructor() {\n        super(\"proto.APLActionCatOptimalRotationAction\", [\n            { no: 1, name: \"rotation_type\", kind: \"enum\", T: () => [\"proto.FeralDruid.Rotation.AplType\", FeralDruid_Rotation_AplType] },\n            { no: 3, name: \"maintain_faerie_fire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"manual_params\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"min_roar_offset\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 5, name: \"rip_leeway\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"use_rake\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"use_bite\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"bite_time\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 9, name: \"bite_during_execute\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"allow_aoe_berserk\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"melee_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"bear_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"snek_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionCatOptimalRotationAction>): APLActionCatOptimalRotationAction {\n        const message = { rotationType: 0, maintainFaerieFire: false, manualParams: false, minRoarOffset: 0, ripLeeway: 0, useRake: false, useBite: false, biteTime: 0, biteDuringExecute: false, allowAoeBerserk: false, meleeWeave: false, bearWeave: false, snekWeave: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionCatOptimalRotationAction>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionCatOptimalRotationAction): APLActionCatOptimalRotationAction {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FeralDruid.Rotation.AplType rotation_type */ 1:\n                    message.rotationType = reader.int32();\n                    break;\n                case /* bool maintain_faerie_fire */ 3:\n                    message.maintainFaerieFire = reader.bool();\n                    break;\n                case /* bool manual_params */ 2:\n                    message.manualParams = reader.bool();\n                    break;\n                case /* float min_roar_offset */ 4:\n                    message.minRoarOffset = reader.float();\n                    break;\n                case /* int32 rip_leeway */ 5:\n                    message.ripLeeway = reader.int32();\n                    break;\n                case /* bool use_rake */ 6:\n                    message.useRake = reader.bool();\n                    break;\n                case /* bool use_bite */ 7:\n                    message.useBite = reader.bool();\n                    break;\n                case /* float bite_time */ 8:\n                    message.biteTime = reader.float();\n                    break;\n                case /* bool bite_during_execute */ 9:\n                    message.biteDuringExecute = reader.bool();\n                    break;\n                case /* bool allow_aoe_berserk */ 10:\n                    message.allowAoeBerserk = reader.bool();\n                    break;\n                case /* bool melee_weave */ 11:\n                    message.meleeWeave = reader.bool();\n                    break;\n                case /* bool bear_weave */ 12:\n                    message.bearWeave = reader.bool();\n                    break;\n                case /* bool snek_weave */ 13:\n                    message.snekWeave = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionCatOptimalRotationAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FeralDruid.Rotation.AplType rotation_type = 1; */\n        if (message.rotationType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.rotationType);\n        /* bool maintain_faerie_fire = 3; */\n        if (message.maintainFaerieFire !== false)\n            writer.tag(3, WireType.Varint).bool(message.maintainFaerieFire);\n        /* bool manual_params = 2; */\n        if (message.manualParams !== false)\n            writer.tag(2, WireType.Varint).bool(message.manualParams);\n        /* float min_roar_offset = 4; */\n        if (message.minRoarOffset !== 0)\n            writer.tag(4, WireType.Bit32).float(message.minRoarOffset);\n        /* int32 rip_leeway = 5; */\n        if (message.ripLeeway !== 0)\n            writer.tag(5, WireType.Varint).int32(message.ripLeeway);\n        /* bool use_rake = 6; */\n        if (message.useRake !== false)\n            writer.tag(6, WireType.Varint).bool(message.useRake);\n        /* bool use_bite = 7; */\n        if (message.useBite !== false)\n            writer.tag(7, WireType.Varint).bool(message.useBite);\n        /* float bite_time = 8; */\n        if (message.biteTime !== 0)\n            writer.tag(8, WireType.Bit32).float(message.biteTime);\n        /* bool bite_during_execute = 9; */\n        if (message.biteDuringExecute !== false)\n            writer.tag(9, WireType.Varint).bool(message.biteDuringExecute);\n        /* bool allow_aoe_berserk = 10; */\n        if (message.allowAoeBerserk !== false)\n            writer.tag(10, WireType.Varint).bool(message.allowAoeBerserk);\n        /* bool melee_weave = 11; */\n        if (message.meleeWeave !== false)\n            writer.tag(11, WireType.Varint).bool(message.meleeWeave);\n        /* bool bear_weave = 12; */\n        if (message.bearWeave !== false)\n            writer.tag(12, WireType.Varint).bool(message.bearWeave);\n        /* bool snek_weave = 13; */\n        if (message.snekWeave !== false)\n            writer.tag(13, WireType.Varint).bool(message.snekWeave);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionCatOptimalRotationAction\n */\nexport const APLActionCatOptimalRotationAction = new APLActionCatOptimalRotationAction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionMove$Type extends MessageType<APLActionMove> {\n    constructor() {\n        super(\"proto.APLActionMove\", [\n            { no: 1, name: \"range_from_target\", kind: \"message\", T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionMove>): APLActionMove {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionMove>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionMove): APLActionMove {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValue range_from_target */ 1:\n                    message.rangeFromTarget = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.rangeFromTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionMove, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValue range_from_target = 1; */\n        if (message.rangeFromTarget)\n            APLValue.internalBinaryWrite(message.rangeFromTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionMove\n */\nexport const APLActionMove = new APLActionMove$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionMoveDuration$Type extends MessageType<APLActionMoveDuration> {\n    constructor() {\n        super(\"proto.APLActionMoveDuration\", [\n            { no: 1, name: \"duration\", kind: \"message\", T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionMoveDuration>): APLActionMoveDuration {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionMoveDuration>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionMoveDuration): APLActionMoveDuration {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValue duration */ 1:\n                    message.duration = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.duration);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionMoveDuration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValue duration = 1; */\n        if (message.duration)\n            APLValue.internalBinaryWrite(message.duration, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionMoveDuration\n */\nexport const APLActionMoveDuration = new APLActionMoveDuration$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionCustomRotation$Type extends MessageType<APLActionCustomRotation> {\n    constructor() {\n        super(\"proto.APLActionCustomRotation\", []);\n    }\n    create(value?: PartialMessage<APLActionCustomRotation>): APLActionCustomRotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionCustomRotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionCustomRotation): APLActionCustomRotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLActionCustomRotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionCustomRotation\n */\nexport const APLActionCustomRotation = new APLActionCustomRotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueConst$Type extends MessageType<APLValueConst> {\n    constructor() {\n        super(\"proto.APLValueConst\", [\n            { no: 1, name: \"val\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueConst>): APLValueConst {\n        const message = { val: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueConst>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueConst): APLValueConst {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string val */ 1:\n                    message.val = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueConst, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string val = 1; */\n        if (message.val !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.val);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueConst\n */\nexport const APLValueConst = new APLValueConst$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueAnd$Type extends MessageType<APLValueAnd> {\n    constructor() {\n        super(\"proto.APLValueAnd\", [\n            { no: 1, name: \"vals\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueAnd>): APLValueAnd {\n        const message = { vals: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueAnd>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueAnd): APLValueAnd {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.APLValue vals */ 1:\n                    message.vals.push(APLValue.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueAnd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.APLValue vals = 1; */\n        for (let i = 0; i < message.vals.length; i++)\n            APLValue.internalBinaryWrite(message.vals[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueAnd\n */\nexport const APLValueAnd = new APLValueAnd$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueOr$Type extends MessageType<APLValueOr> {\n    constructor() {\n        super(\"proto.APLValueOr\", [\n            { no: 1, name: \"vals\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueOr>): APLValueOr {\n        const message = { vals: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueOr>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueOr): APLValueOr {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.APLValue vals */ 1:\n                    message.vals.push(APLValue.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueOr, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.APLValue vals = 1; */\n        for (let i = 0; i < message.vals.length; i++)\n            APLValue.internalBinaryWrite(message.vals[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueOr\n */\nexport const APLValueOr = new APLValueOr$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueNot$Type extends MessageType<APLValueNot> {\n    constructor() {\n        super(\"proto.APLValueNot\", [\n            { no: 1, name: \"val\", kind: \"message\", T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueNot>): APLValueNot {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueNot>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueNot): APLValueNot {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValue val */ 1:\n                    message.val = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.val);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueNot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValue val = 1; */\n        if (message.val)\n            APLValue.internalBinaryWrite(message.val, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueNot\n */\nexport const APLValueNot = new APLValueNot$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCompare$Type extends MessageType<APLValueCompare> {\n    constructor() {\n        super(\"proto.APLValueCompare\", [\n            { no: 1, name: \"op\", kind: \"enum\", T: () => [\"proto.APLValueCompare.ComparisonOperator\", APLValueCompare_ComparisonOperator] },\n            { no: 2, name: \"lhs\", kind: \"message\", T: () => APLValue },\n            { no: 3, name: \"rhs\", kind: \"message\", T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueCompare>): APLValueCompare {\n        const message = { op: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCompare>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCompare): APLValueCompare {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueCompare.ComparisonOperator op */ 1:\n                    message.op = reader.int32();\n                    break;\n                case /* proto.APLValue lhs */ 2:\n                    message.lhs = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.lhs);\n                    break;\n                case /* proto.APLValue rhs */ 3:\n                    message.rhs = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.rhs);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueCompare, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueCompare.ComparisonOperator op = 1; */\n        if (message.op !== 0)\n            writer.tag(1, WireType.Varint).int32(message.op);\n        /* proto.APLValue lhs = 2; */\n        if (message.lhs)\n            APLValue.internalBinaryWrite(message.lhs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValue rhs = 3; */\n        if (message.rhs)\n            APLValue.internalBinaryWrite(message.rhs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCompare\n */\nexport const APLValueCompare = new APLValueCompare$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueMath$Type extends MessageType<APLValueMath> {\n    constructor() {\n        super(\"proto.APLValueMath\", [\n            { no: 1, name: \"op\", kind: \"enum\", T: () => [\"proto.APLValueMath.MathOperator\", APLValueMath_MathOperator] },\n            { no: 2, name: \"lhs\", kind: \"message\", T: () => APLValue },\n            { no: 3, name: \"rhs\", kind: \"message\", T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueMath>): APLValueMath {\n        const message = { op: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueMath>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueMath): APLValueMath {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueMath.MathOperator op */ 1:\n                    message.op = reader.int32();\n                    break;\n                case /* proto.APLValue lhs */ 2:\n                    message.lhs = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.lhs);\n                    break;\n                case /* proto.APLValue rhs */ 3:\n                    message.rhs = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.rhs);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueMath, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueMath.MathOperator op = 1; */\n        if (message.op !== 0)\n            writer.tag(1, WireType.Varint).int32(message.op);\n        /* proto.APLValue lhs = 2; */\n        if (message.lhs)\n            APLValue.internalBinaryWrite(message.lhs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValue rhs = 3; */\n        if (message.rhs)\n            APLValue.internalBinaryWrite(message.rhs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueMath\n */\nexport const APLValueMath = new APLValueMath$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueMax$Type extends MessageType<APLValueMax> {\n    constructor() {\n        super(\"proto.APLValueMax\", [\n            { no: 1, name: \"vals\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueMax>): APLValueMax {\n        const message = { vals: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueMax>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueMax): APLValueMax {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.APLValue vals */ 1:\n                    message.vals.push(APLValue.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueMax, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.APLValue vals = 1; */\n        for (let i = 0; i < message.vals.length; i++)\n            APLValue.internalBinaryWrite(message.vals[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueMax\n */\nexport const APLValueMax = new APLValueMax$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueMin$Type extends MessageType<APLValueMin> {\n    constructor() {\n        super(\"proto.APLValueMin\", [\n            { no: 1, name: \"vals\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueMin>): APLValueMin {\n        const message = { vals: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueMin>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueMin): APLValueMin {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.APLValue vals */ 1:\n                    message.vals.push(APLValue.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueMin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.APLValue vals = 1; */\n        for (let i = 0; i < message.vals.length; i++)\n            APLValue.internalBinaryWrite(message.vals[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueMin\n */\nexport const APLValueMin = new APLValueMin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentTime$Type extends MessageType<APLValueCurrentTime> {\n    constructor() {\n        super(\"proto.APLValueCurrentTime\", []);\n    }\n    create(value?: PartialMessage<APLValueCurrentTime>): APLValueCurrentTime {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentTime>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentTime): APLValueCurrentTime {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueCurrentTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentTime\n */\nexport const APLValueCurrentTime = new APLValueCurrentTime$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentTimePercent$Type extends MessageType<APLValueCurrentTimePercent> {\n    constructor() {\n        super(\"proto.APLValueCurrentTimePercent\", []);\n    }\n    create(value?: PartialMessage<APLValueCurrentTimePercent>): APLValueCurrentTimePercent {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentTimePercent>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentTimePercent): APLValueCurrentTimePercent {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueCurrentTimePercent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentTimePercent\n */\nexport const APLValueCurrentTimePercent = new APLValueCurrentTimePercent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueRemainingTime$Type extends MessageType<APLValueRemainingTime> {\n    constructor() {\n        super(\"proto.APLValueRemainingTime\", []);\n    }\n    create(value?: PartialMessage<APLValueRemainingTime>): APLValueRemainingTime {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueRemainingTime>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueRemainingTime): APLValueRemainingTime {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueRemainingTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueRemainingTime\n */\nexport const APLValueRemainingTime = new APLValueRemainingTime$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueRemainingTimePercent$Type extends MessageType<APLValueRemainingTimePercent> {\n    constructor() {\n        super(\"proto.APLValueRemainingTimePercent\", []);\n    }\n    create(value?: PartialMessage<APLValueRemainingTimePercent>): APLValueRemainingTimePercent {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueRemainingTimePercent>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueRemainingTimePercent): APLValueRemainingTimePercent {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueRemainingTimePercent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueRemainingTimePercent\n */\nexport const APLValueRemainingTimePercent = new APLValueRemainingTimePercent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueNumberTargets$Type extends MessageType<APLValueNumberTargets> {\n    constructor() {\n        super(\"proto.APLValueNumberTargets\", []);\n    }\n    create(value?: PartialMessage<APLValueNumberTargets>): APLValueNumberTargets {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueNumberTargets>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueNumberTargets): APLValueNumberTargets {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueNumberTargets, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueNumberTargets\n */\nexport const APLValueNumberTargets = new APLValueNumberTargets$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueIsExecutePhase$Type extends MessageType<APLValueIsExecutePhase> {\n    constructor() {\n        super(\"proto.APLValueIsExecutePhase\", [\n            { no: 1, name: \"threshold\", kind: \"enum\", T: () => [\"proto.APLValueIsExecutePhase.ExecutePhaseThreshold\", APLValueIsExecutePhase_ExecutePhaseThreshold] }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueIsExecutePhase>): APLValueIsExecutePhase {\n        const message = { threshold: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueIsExecutePhase>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueIsExecutePhase): APLValueIsExecutePhase {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueIsExecutePhase.ExecutePhaseThreshold threshold */ 1:\n                    message.threshold = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueIsExecutePhase, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueIsExecutePhase.ExecutePhaseThreshold threshold = 1; */\n        if (message.threshold !== 0)\n            writer.tag(1, WireType.Varint).int32(message.threshold);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueIsExecutePhase\n */\nexport const APLValueIsExecutePhase = new APLValueIsExecutePhase$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueBossSpellTimeToReady$Type extends MessageType<APLValueBossSpellTimeToReady> {\n    constructor() {\n        super(\"proto.APLValueBossSpellTimeToReady\", [\n            { no: 1, name: \"target_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 2, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueBossSpellTimeToReady>): APLValueBossSpellTimeToReady {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueBossSpellTimeToReady>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueBossSpellTimeToReady): APLValueBossSpellTimeToReady {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference target_unit */ 1:\n                    message.targetUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.targetUnit);\n                    break;\n                case /* proto.ActionID spell_id */ 2:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueBossSpellTimeToReady, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference target_unit = 1; */\n        if (message.targetUnit)\n            UnitReference.internalBinaryWrite(message.targetUnit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID spell_id = 2; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueBossSpellTimeToReady\n */\nexport const APLValueBossSpellTimeToReady = new APLValueBossSpellTimeToReady$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueBossSpellIsCasting$Type extends MessageType<APLValueBossSpellIsCasting> {\n    constructor() {\n        super(\"proto.APLValueBossSpellIsCasting\", [\n            { no: 1, name: \"target_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 2, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueBossSpellIsCasting>): APLValueBossSpellIsCasting {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueBossSpellIsCasting>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueBossSpellIsCasting): APLValueBossSpellIsCasting {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference target_unit */ 1:\n                    message.targetUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.targetUnit);\n                    break;\n                case /* proto.ActionID spell_id */ 2:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueBossSpellIsCasting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference target_unit = 1; */\n        if (message.targetUnit)\n            UnitReference.internalBinaryWrite(message.targetUnit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID spell_id = 2; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueBossSpellIsCasting\n */\nexport const APLValueBossSpellIsCasting = new APLValueBossSpellIsCasting$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueUnitIsMoving$Type extends MessageType<APLValueUnitIsMoving> {\n    constructor() {\n        super(\"proto.APLValueUnitIsMoving\", [\n            { no: 1, name: \"source_unit\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueUnitIsMoving>): APLValueUnitIsMoving {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueUnitIsMoving>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueUnitIsMoving): APLValueUnitIsMoving {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 1:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueUnitIsMoving, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 1; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueUnitIsMoving\n */\nexport const APLValueUnitIsMoving = new APLValueUnitIsMoving$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentHealth$Type extends MessageType<APLValueCurrentHealth> {\n    constructor() {\n        super(\"proto.APLValueCurrentHealth\", [\n            { no: 1, name: \"source_unit\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueCurrentHealth>): APLValueCurrentHealth {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentHealth>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentHealth): APLValueCurrentHealth {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 1:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueCurrentHealth, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 1; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentHealth\n */\nexport const APLValueCurrentHealth = new APLValueCurrentHealth$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentHealthPercent$Type extends MessageType<APLValueCurrentHealthPercent> {\n    constructor() {\n        super(\"proto.APLValueCurrentHealthPercent\", [\n            { no: 1, name: \"source_unit\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueCurrentHealthPercent>): APLValueCurrentHealthPercent {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentHealthPercent>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentHealthPercent): APLValueCurrentHealthPercent {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 1:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueCurrentHealthPercent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 1; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentHealthPercent\n */\nexport const APLValueCurrentHealthPercent = new APLValueCurrentHealthPercent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentMana$Type extends MessageType<APLValueCurrentMana> {\n    constructor() {\n        super(\"proto.APLValueCurrentMana\", [\n            { no: 1, name: \"source_unit\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueCurrentMana>): APLValueCurrentMana {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentMana>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentMana): APLValueCurrentMana {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 1:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueCurrentMana, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 1; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentMana\n */\nexport const APLValueCurrentMana = new APLValueCurrentMana$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentManaPercent$Type extends MessageType<APLValueCurrentManaPercent> {\n    constructor() {\n        super(\"proto.APLValueCurrentManaPercent\", [\n            { no: 1, name: \"source_unit\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueCurrentManaPercent>): APLValueCurrentManaPercent {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentManaPercent>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentManaPercent): APLValueCurrentManaPercent {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 1:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueCurrentManaPercent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 1; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentManaPercent\n */\nexport const APLValueCurrentManaPercent = new APLValueCurrentManaPercent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentRage$Type extends MessageType<APLValueCurrentRage> {\n    constructor() {\n        super(\"proto.APLValueCurrentRage\", []);\n    }\n    create(value?: PartialMessage<APLValueCurrentRage>): APLValueCurrentRage {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentRage>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentRage): APLValueCurrentRage {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueCurrentRage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentRage\n */\nexport const APLValueCurrentRage = new APLValueCurrentRage$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentEnergy$Type extends MessageType<APLValueCurrentEnergy> {\n    constructor() {\n        super(\"proto.APLValueCurrentEnergy\", []);\n    }\n    create(value?: PartialMessage<APLValueCurrentEnergy>): APLValueCurrentEnergy {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentEnergy>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentEnergy): APLValueCurrentEnergy {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueCurrentEnergy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentEnergy\n */\nexport const APLValueCurrentEnergy = new APLValueCurrentEnergy$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentFocus$Type extends MessageType<APLValueCurrentFocus> {\n    constructor() {\n        super(\"proto.APLValueCurrentFocus\", []);\n    }\n    create(value?: PartialMessage<APLValueCurrentFocus>): APLValueCurrentFocus {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentFocus>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentFocus): APLValueCurrentFocus {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueCurrentFocus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentFocus\n */\nexport const APLValueCurrentFocus = new APLValueCurrentFocus$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentComboPoints$Type extends MessageType<APLValueCurrentComboPoints> {\n    constructor() {\n        super(\"proto.APLValueCurrentComboPoints\", []);\n    }\n    create(value?: PartialMessage<APLValueCurrentComboPoints>): APLValueCurrentComboPoints {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentComboPoints>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentComboPoints): APLValueCurrentComboPoints {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueCurrentComboPoints, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentComboPoints\n */\nexport const APLValueCurrentComboPoints = new APLValueCurrentComboPoints$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentRunicPower$Type extends MessageType<APLValueCurrentRunicPower> {\n    constructor() {\n        super(\"proto.APLValueCurrentRunicPower\", []);\n    }\n    create(value?: PartialMessage<APLValueCurrentRunicPower>): APLValueCurrentRunicPower {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentRunicPower>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentRunicPower): APLValueCurrentRunicPower {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueCurrentRunicPower, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentRunicPower\n */\nexport const APLValueCurrentRunicPower = new APLValueCurrentRunicPower$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentSolarEnergy$Type extends MessageType<APLValueCurrentSolarEnergy> {\n    constructor() {\n        super(\"proto.APLValueCurrentSolarEnergy\", []);\n    }\n    create(value?: PartialMessage<APLValueCurrentSolarEnergy>): APLValueCurrentSolarEnergy {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentSolarEnergy>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentSolarEnergy): APLValueCurrentSolarEnergy {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueCurrentSolarEnergy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentSolarEnergy\n */\nexport const APLValueCurrentSolarEnergy = new APLValueCurrentSolarEnergy$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentLunarEnergy$Type extends MessageType<APLValueCurrentLunarEnergy> {\n    constructor() {\n        super(\"proto.APLValueCurrentLunarEnergy\", []);\n    }\n    create(value?: PartialMessage<APLValueCurrentLunarEnergy>): APLValueCurrentLunarEnergy {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentLunarEnergy>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentLunarEnergy): APLValueCurrentLunarEnergy {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueCurrentLunarEnergy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentLunarEnergy\n */\nexport const APLValueCurrentLunarEnergy = new APLValueCurrentLunarEnergy$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentRuneCount$Type extends MessageType<APLValueCurrentRuneCount> {\n    constructor() {\n        super(\"proto.APLValueCurrentRuneCount\", [\n            { no: 1, name: \"rune_type\", kind: \"enum\", T: () => [\"proto.APLValueRuneType\", APLValueRuneType] }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueCurrentRuneCount>): APLValueCurrentRuneCount {\n        const message = { runeType: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentRuneCount>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentRuneCount): APLValueCurrentRuneCount {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueRuneType rune_type */ 1:\n                    message.runeType = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueCurrentRuneCount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueRuneType rune_type = 1; */\n        if (message.runeType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.runeType);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentRuneCount\n */\nexport const APLValueCurrentRuneCount = new APLValueCurrentRuneCount$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentNonDeathRuneCount$Type extends MessageType<APLValueCurrentNonDeathRuneCount> {\n    constructor() {\n        super(\"proto.APLValueCurrentNonDeathRuneCount\", [\n            { no: 1, name: \"rune_type\", kind: \"enum\", T: () => [\"proto.APLValueRuneType\", APLValueRuneType] }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueCurrentNonDeathRuneCount>): APLValueCurrentNonDeathRuneCount {\n        const message = { runeType: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentNonDeathRuneCount>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentNonDeathRuneCount): APLValueCurrentNonDeathRuneCount {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueRuneType rune_type */ 1:\n                    message.runeType = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueCurrentNonDeathRuneCount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueRuneType rune_type = 1; */\n        if (message.runeType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.runeType);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentNonDeathRuneCount\n */\nexport const APLValueCurrentNonDeathRuneCount = new APLValueCurrentNonDeathRuneCount$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentRuneDeath$Type extends MessageType<APLValueCurrentRuneDeath> {\n    constructor() {\n        super(\"proto.APLValueCurrentRuneDeath\", [\n            { no: 1, name: \"rune_slot\", kind: \"enum\", T: () => [\"proto.APLValueRuneSlot\", APLValueRuneSlot] }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueCurrentRuneDeath>): APLValueCurrentRuneDeath {\n        const message = { runeSlot: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentRuneDeath>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentRuneDeath): APLValueCurrentRuneDeath {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueRuneSlot rune_slot */ 1:\n                    message.runeSlot = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueCurrentRuneDeath, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueRuneSlot rune_slot = 1; */\n        if (message.runeSlot !== 0)\n            writer.tag(1, WireType.Varint).int32(message.runeSlot);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentRuneDeath\n */\nexport const APLValueCurrentRuneDeath = new APLValueCurrentRuneDeath$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentRuneActive$Type extends MessageType<APLValueCurrentRuneActive> {\n    constructor() {\n        super(\"proto.APLValueCurrentRuneActive\", [\n            { no: 1, name: \"rune_slot\", kind: \"enum\", T: () => [\"proto.APLValueRuneSlot\", APLValueRuneSlot] }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueCurrentRuneActive>): APLValueCurrentRuneActive {\n        const message = { runeSlot: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentRuneActive>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentRuneActive): APLValueCurrentRuneActive {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueRuneSlot rune_slot */ 1:\n                    message.runeSlot = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueCurrentRuneActive, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueRuneSlot rune_slot = 1; */\n        if (message.runeSlot !== 0)\n            writer.tag(1, WireType.Varint).int32(message.runeSlot);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentRuneActive\n */\nexport const APLValueCurrentRuneActive = new APLValueCurrentRuneActive$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueRuneCooldown$Type extends MessageType<APLValueRuneCooldown> {\n    constructor() {\n        super(\"proto.APLValueRuneCooldown\", [\n            { no: 1, name: \"rune_type\", kind: \"enum\", T: () => [\"proto.APLValueRuneType\", APLValueRuneType] }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueRuneCooldown>): APLValueRuneCooldown {\n        const message = { runeType: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueRuneCooldown>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueRuneCooldown): APLValueRuneCooldown {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueRuneType rune_type */ 1:\n                    message.runeType = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueRuneCooldown, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueRuneType rune_type = 1; */\n        if (message.runeType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.runeType);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueRuneCooldown\n */\nexport const APLValueRuneCooldown = new APLValueRuneCooldown$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueNextRuneCooldown$Type extends MessageType<APLValueNextRuneCooldown> {\n    constructor() {\n        super(\"proto.APLValueNextRuneCooldown\", [\n            { no: 1, name: \"rune_type\", kind: \"enum\", T: () => [\"proto.APLValueRuneType\", APLValueRuneType] }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueNextRuneCooldown>): APLValueNextRuneCooldown {\n        const message = { runeType: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueNextRuneCooldown>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueNextRuneCooldown): APLValueNextRuneCooldown {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueRuneType rune_type */ 1:\n                    message.runeType = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueNextRuneCooldown, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueRuneType rune_type = 1; */\n        if (message.runeType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.runeType);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueNextRuneCooldown\n */\nexport const APLValueNextRuneCooldown = new APLValueNextRuneCooldown$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueRuneSlotCooldown$Type extends MessageType<APLValueRuneSlotCooldown> {\n    constructor() {\n        super(\"proto.APLValueRuneSlotCooldown\", [\n            { no: 1, name: \"rune_slot\", kind: \"enum\", T: () => [\"proto.APLValueRuneSlot\", APLValueRuneSlot] }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueRuneSlotCooldown>): APLValueRuneSlotCooldown {\n        const message = { runeSlot: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueRuneSlotCooldown>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueRuneSlotCooldown): APLValueRuneSlotCooldown {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueRuneSlot rune_slot */ 1:\n                    message.runeSlot = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueRuneSlotCooldown, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueRuneSlot rune_slot = 1; */\n        if (message.runeSlot !== 0)\n            writer.tag(1, WireType.Varint).int32(message.runeSlot);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueRuneSlotCooldown\n */\nexport const APLValueRuneSlotCooldown = new APLValueRuneSlotCooldown$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentEclipsePhase$Type extends MessageType<APLValueCurrentEclipsePhase> {\n    constructor() {\n        super(\"proto.APLValueCurrentEclipsePhase\", [\n            { no: 1, name: \"eclipse_phase\", kind: \"enum\", T: () => [\"proto.APLValueEclipsePhase\", APLValueEclipsePhase] }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueCurrentEclipsePhase>): APLValueCurrentEclipsePhase {\n        const message = { eclipsePhase: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentEclipsePhase>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentEclipsePhase): APLValueCurrentEclipsePhase {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueEclipsePhase eclipse_phase */ 1:\n                    message.eclipsePhase = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueCurrentEclipsePhase, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueEclipsePhase eclipse_phase = 1; */\n        if (message.eclipsePhase !== 0)\n            writer.tag(1, WireType.Varint).int32(message.eclipsePhase);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentEclipsePhase\n */\nexport const APLValueCurrentEclipsePhase = new APLValueCurrentEclipsePhase$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueGCDIsReady$Type extends MessageType<APLValueGCDIsReady> {\n    constructor() {\n        super(\"proto.APLValueGCDIsReady\", []);\n    }\n    create(value?: PartialMessage<APLValueGCDIsReady>): APLValueGCDIsReady {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueGCDIsReady>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueGCDIsReady): APLValueGCDIsReady {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueGCDIsReady, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueGCDIsReady\n */\nexport const APLValueGCDIsReady = new APLValueGCDIsReady$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueGCDTimeToReady$Type extends MessageType<APLValueGCDTimeToReady> {\n    constructor() {\n        super(\"proto.APLValueGCDTimeToReady\", []);\n    }\n    create(value?: PartialMessage<APLValueGCDTimeToReady>): APLValueGCDTimeToReady {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueGCDTimeToReady>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueGCDTimeToReady): APLValueGCDTimeToReady {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueGCDTimeToReady, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueGCDTimeToReady\n */\nexport const APLValueGCDTimeToReady = new APLValueGCDTimeToReady$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueAutoTimeToNext$Type extends MessageType<APLValueAutoTimeToNext> {\n    constructor() {\n        super(\"proto.APLValueAutoTimeToNext\", []);\n    }\n    create(value?: PartialMessage<APLValueAutoTimeToNext>): APLValueAutoTimeToNext {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueAutoTimeToNext>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueAutoTimeToNext): APLValueAutoTimeToNext {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueAutoTimeToNext, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueAutoTimeToNext\n */\nexport const APLValueAutoTimeToNext = new APLValueAutoTimeToNext$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSpellCanCast$Type extends MessageType<APLValueSpellCanCast> {\n    constructor() {\n        super(\"proto.APLValueSpellCanCast\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSpellCanCast>): APLValueSpellCanCast {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSpellCanCast>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSpellCanCast): APLValueSpellCanCast {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSpellCanCast, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSpellCanCast\n */\nexport const APLValueSpellCanCast = new APLValueSpellCanCast$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSpellIsReady$Type extends MessageType<APLValueSpellIsReady> {\n    constructor() {\n        super(\"proto.APLValueSpellIsReady\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSpellIsReady>): APLValueSpellIsReady {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSpellIsReady>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSpellIsReady): APLValueSpellIsReady {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSpellIsReady, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSpellIsReady\n */\nexport const APLValueSpellIsReady = new APLValueSpellIsReady$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSpellTimeToReady$Type extends MessageType<APLValueSpellTimeToReady> {\n    constructor() {\n        super(\"proto.APLValueSpellTimeToReady\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSpellTimeToReady>): APLValueSpellTimeToReady {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSpellTimeToReady>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSpellTimeToReady): APLValueSpellTimeToReady {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSpellTimeToReady, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSpellTimeToReady\n */\nexport const APLValueSpellTimeToReady = new APLValueSpellTimeToReady$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSpellCastTime$Type extends MessageType<APLValueSpellCastTime> {\n    constructor() {\n        super(\"proto.APLValueSpellCastTime\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSpellCastTime>): APLValueSpellCastTime {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSpellCastTime>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSpellCastTime): APLValueSpellCastTime {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSpellCastTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSpellCastTime\n */\nexport const APLValueSpellCastTime = new APLValueSpellCastTime$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueChannelClipDelay$Type extends MessageType<APLValueChannelClipDelay> {\n    constructor() {\n        super(\"proto.APLValueChannelClipDelay\", []);\n    }\n    create(value?: PartialMessage<APLValueChannelClipDelay>): APLValueChannelClipDelay {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueChannelClipDelay>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueChannelClipDelay): APLValueChannelClipDelay {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueChannelClipDelay, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueChannelClipDelay\n */\nexport const APLValueChannelClipDelay = new APLValueChannelClipDelay$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueInputDelay$Type extends MessageType<APLValueInputDelay> {\n    constructor() {\n        super(\"proto.APLValueInputDelay\", []);\n    }\n    create(value?: PartialMessage<APLValueInputDelay>): APLValueInputDelay {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueInputDelay>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueInputDelay): APLValueInputDelay {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueInputDelay, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueInputDelay\n */\nexport const APLValueInputDelay = new APLValueInputDelay$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueFrontOfTarget$Type extends MessageType<APLValueFrontOfTarget> {\n    constructor() {\n        super(\"proto.APLValueFrontOfTarget\", []);\n    }\n    create(value?: PartialMessage<APLValueFrontOfTarget>): APLValueFrontOfTarget {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueFrontOfTarget>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueFrontOfTarget): APLValueFrontOfTarget {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueFrontOfTarget, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueFrontOfTarget\n */\nexport const APLValueFrontOfTarget = new APLValueFrontOfTarget$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSpellTravelTime$Type extends MessageType<APLValueSpellTravelTime> {\n    constructor() {\n        super(\"proto.APLValueSpellTravelTime\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSpellTravelTime>): APLValueSpellTravelTime {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSpellTravelTime>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSpellTravelTime): APLValueSpellTravelTime {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSpellTravelTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSpellTravelTime\n */\nexport const APLValueSpellTravelTime = new APLValueSpellTravelTime$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSpellCPM$Type extends MessageType<APLValueSpellCPM> {\n    constructor() {\n        super(\"proto.APLValueSpellCPM\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSpellCPM>): APLValueSpellCPM {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSpellCPM>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSpellCPM): APLValueSpellCPM {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSpellCPM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSpellCPM\n */\nexport const APLValueSpellCPM = new APLValueSpellCPM$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSpellIsChanneling$Type extends MessageType<APLValueSpellIsChanneling> {\n    constructor() {\n        super(\"proto.APLValueSpellIsChanneling\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSpellIsChanneling>): APLValueSpellIsChanneling {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSpellIsChanneling>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSpellIsChanneling): APLValueSpellIsChanneling {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSpellIsChanneling, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSpellIsChanneling\n */\nexport const APLValueSpellIsChanneling = new APLValueSpellIsChanneling$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSpellChanneledTicks$Type extends MessageType<APLValueSpellChanneledTicks> {\n    constructor() {\n        super(\"proto.APLValueSpellChanneledTicks\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSpellChanneledTicks>): APLValueSpellChanneledTicks {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSpellChanneledTicks>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSpellChanneledTicks): APLValueSpellChanneledTicks {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSpellChanneledTicks, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSpellChanneledTicks\n */\nexport const APLValueSpellChanneledTicks = new APLValueSpellChanneledTicks$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSpellCurrentCost$Type extends MessageType<APLValueSpellCurrentCost> {\n    constructor() {\n        super(\"proto.APLValueSpellCurrentCost\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSpellCurrentCost>): APLValueSpellCurrentCost {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSpellCurrentCost>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSpellCurrentCost): APLValueSpellCurrentCost {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSpellCurrentCost, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSpellCurrentCost\n */\nexport const APLValueSpellCurrentCost = new APLValueSpellCurrentCost$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueAuraIsActive$Type extends MessageType<APLValueAuraIsActive> {\n    constructor() {\n        super(\"proto.APLValueAuraIsActive\", [\n            { no: 2, name: \"source_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 1, name: \"aura_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueAuraIsActive>): APLValueAuraIsActive {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueAuraIsActive>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueAuraIsActive): APLValueAuraIsActive {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 2:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                case /* proto.ActionID aura_id */ 1:\n                    message.auraId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.auraId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueAuraIsActive, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 2; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID aura_id = 1; */\n        if (message.auraId)\n            ActionID.internalBinaryWrite(message.auraId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueAuraIsActive\n */\nexport const APLValueAuraIsActive = new APLValueAuraIsActive$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueAuraIsActiveWithReactionTime$Type extends MessageType<APLValueAuraIsActiveWithReactionTime> {\n    constructor() {\n        super(\"proto.APLValueAuraIsActiveWithReactionTime\", [\n            { no: 2, name: \"source_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 1, name: \"aura_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueAuraIsActiveWithReactionTime>): APLValueAuraIsActiveWithReactionTime {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueAuraIsActiveWithReactionTime>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueAuraIsActiveWithReactionTime): APLValueAuraIsActiveWithReactionTime {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 2:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                case /* proto.ActionID aura_id */ 1:\n                    message.auraId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.auraId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueAuraIsActiveWithReactionTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 2; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID aura_id = 1; */\n        if (message.auraId)\n            ActionID.internalBinaryWrite(message.auraId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueAuraIsActiveWithReactionTime\n */\nexport const APLValueAuraIsActiveWithReactionTime = new APLValueAuraIsActiveWithReactionTime$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueAuraRemainingTime$Type extends MessageType<APLValueAuraRemainingTime> {\n    constructor() {\n        super(\"proto.APLValueAuraRemainingTime\", [\n            { no: 2, name: \"source_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 1, name: \"aura_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueAuraRemainingTime>): APLValueAuraRemainingTime {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueAuraRemainingTime>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueAuraRemainingTime): APLValueAuraRemainingTime {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 2:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                case /* proto.ActionID aura_id */ 1:\n                    message.auraId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.auraId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueAuraRemainingTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 2; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID aura_id = 1; */\n        if (message.auraId)\n            ActionID.internalBinaryWrite(message.auraId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueAuraRemainingTime\n */\nexport const APLValueAuraRemainingTime = new APLValueAuraRemainingTime$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueAuraNumStacks$Type extends MessageType<APLValueAuraNumStacks> {\n    constructor() {\n        super(\"proto.APLValueAuraNumStacks\", [\n            { no: 2, name: \"source_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 1, name: \"aura_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueAuraNumStacks>): APLValueAuraNumStacks {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueAuraNumStacks>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueAuraNumStacks): APLValueAuraNumStacks {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 2:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                case /* proto.ActionID aura_id */ 1:\n                    message.auraId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.auraId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueAuraNumStacks, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 2; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID aura_id = 1; */\n        if (message.auraId)\n            ActionID.internalBinaryWrite(message.auraId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueAuraNumStacks\n */\nexport const APLValueAuraNumStacks = new APLValueAuraNumStacks$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueAuraInternalCooldown$Type extends MessageType<APLValueAuraInternalCooldown> {\n    constructor() {\n        super(\"proto.APLValueAuraInternalCooldown\", [\n            { no: 2, name: \"source_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 1, name: \"aura_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueAuraInternalCooldown>): APLValueAuraInternalCooldown {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueAuraInternalCooldown>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueAuraInternalCooldown): APLValueAuraInternalCooldown {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 2:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                case /* proto.ActionID aura_id */ 1:\n                    message.auraId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.auraId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueAuraInternalCooldown, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 2; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID aura_id = 1; */\n        if (message.auraId)\n            ActionID.internalBinaryWrite(message.auraId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueAuraInternalCooldown\n */\nexport const APLValueAuraInternalCooldown = new APLValueAuraInternalCooldown$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueAuraICDIsReadyWithReactionTime$Type extends MessageType<APLValueAuraICDIsReadyWithReactionTime> {\n    constructor() {\n        super(\"proto.APLValueAuraICDIsReadyWithReactionTime\", [\n            { no: 2, name: \"source_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 1, name: \"aura_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueAuraICDIsReadyWithReactionTime>): APLValueAuraICDIsReadyWithReactionTime {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueAuraICDIsReadyWithReactionTime>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueAuraICDIsReadyWithReactionTime): APLValueAuraICDIsReadyWithReactionTime {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 2:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                case /* proto.ActionID aura_id */ 1:\n                    message.auraId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.auraId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueAuraICDIsReadyWithReactionTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 2; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID aura_id = 1; */\n        if (message.auraId)\n            ActionID.internalBinaryWrite(message.auraId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueAuraICDIsReadyWithReactionTime\n */\nexport const APLValueAuraICDIsReadyWithReactionTime = new APLValueAuraICDIsReadyWithReactionTime$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueAuraShouldRefresh$Type extends MessageType<APLValueAuraShouldRefresh> {\n    constructor() {\n        super(\"proto.APLValueAuraShouldRefresh\", [\n            { no: 2, name: \"source_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 1, name: \"aura_id\", kind: \"message\", T: () => ActionID },\n            { no: 3, name: \"max_overlap\", kind: \"message\", T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueAuraShouldRefresh>): APLValueAuraShouldRefresh {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueAuraShouldRefresh>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueAuraShouldRefresh): APLValueAuraShouldRefresh {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 2:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                case /* proto.ActionID aura_id */ 1:\n                    message.auraId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.auraId);\n                    break;\n                case /* proto.APLValue max_overlap */ 3:\n                    message.maxOverlap = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.maxOverlap);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueAuraShouldRefresh, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 2; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID aura_id = 1; */\n        if (message.auraId)\n            ActionID.internalBinaryWrite(message.auraId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValue max_overlap = 3; */\n        if (message.maxOverlap)\n            APLValue.internalBinaryWrite(message.maxOverlap, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueAuraShouldRefresh\n */\nexport const APLValueAuraShouldRefresh = new APLValueAuraShouldRefresh$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueDotIsActive$Type extends MessageType<APLValueDotIsActive> {\n    constructor() {\n        super(\"proto.APLValueDotIsActive\", [\n            { no: 2, name: \"target_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueDotIsActive>): APLValueDotIsActive {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueDotIsActive>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueDotIsActive): APLValueDotIsActive {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference target_unit */ 2:\n                    message.targetUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.targetUnit);\n                    break;\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueDotIsActive, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference target_unit = 2; */\n        if (message.targetUnit)\n            UnitReference.internalBinaryWrite(message.targetUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueDotIsActive\n */\nexport const APLValueDotIsActive = new APLValueDotIsActive$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueDotRemainingTime$Type extends MessageType<APLValueDotRemainingTime> {\n    constructor() {\n        super(\"proto.APLValueDotRemainingTime\", [\n            { no: 2, name: \"target_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueDotRemainingTime>): APLValueDotRemainingTime {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueDotRemainingTime>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueDotRemainingTime): APLValueDotRemainingTime {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference target_unit */ 2:\n                    message.targetUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.targetUnit);\n                    break;\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueDotRemainingTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference target_unit = 2; */\n        if (message.targetUnit)\n            UnitReference.internalBinaryWrite(message.targetUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueDotRemainingTime\n */\nexport const APLValueDotRemainingTime = new APLValueDotRemainingTime$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueDotTickFrequency$Type extends MessageType<APLValueDotTickFrequency> {\n    constructor() {\n        super(\"proto.APLValueDotTickFrequency\", [\n            { no: 2, name: \"target_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueDotTickFrequency>): APLValueDotTickFrequency {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueDotTickFrequency>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueDotTickFrequency): APLValueDotTickFrequency {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference target_unit */ 2:\n                    message.targetUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.targetUnit);\n                    break;\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueDotTickFrequency, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference target_unit = 2; */\n        if (message.targetUnit)\n            UnitReference.internalBinaryWrite(message.targetUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueDotTickFrequency\n */\nexport const APLValueDotTickFrequency = new APLValueDotTickFrequency$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSequenceIsComplete$Type extends MessageType<APLValueSequenceIsComplete> {\n    constructor() {\n        super(\"proto.APLValueSequenceIsComplete\", [\n            { no: 1, name: \"sequence_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSequenceIsComplete>): APLValueSequenceIsComplete {\n        const message = { sequenceName: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSequenceIsComplete>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSequenceIsComplete): APLValueSequenceIsComplete {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string sequence_name */ 1:\n                    message.sequenceName = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSequenceIsComplete, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string sequence_name = 1; */\n        if (message.sequenceName !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.sequenceName);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSequenceIsComplete\n */\nexport const APLValueSequenceIsComplete = new APLValueSequenceIsComplete$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSequenceIsReady$Type extends MessageType<APLValueSequenceIsReady> {\n    constructor() {\n        super(\"proto.APLValueSequenceIsReady\", [\n            { no: 1, name: \"sequence_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSequenceIsReady>): APLValueSequenceIsReady {\n        const message = { sequenceName: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSequenceIsReady>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSequenceIsReady): APLValueSequenceIsReady {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string sequence_name */ 1:\n                    message.sequenceName = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSequenceIsReady, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string sequence_name = 1; */\n        if (message.sequenceName !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.sequenceName);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSequenceIsReady\n */\nexport const APLValueSequenceIsReady = new APLValueSequenceIsReady$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSequenceTimeToReady$Type extends MessageType<APLValueSequenceTimeToReady> {\n    constructor() {\n        super(\"proto.APLValueSequenceTimeToReady\", [\n            { no: 1, name: \"sequence_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSequenceTimeToReady>): APLValueSequenceTimeToReady {\n        const message = { sequenceName: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSequenceTimeToReady>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSequenceTimeToReady): APLValueSequenceTimeToReady {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string sequence_name */ 1:\n                    message.sequenceName = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSequenceTimeToReady, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string sequence_name = 1; */\n        if (message.sequenceName !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.sequenceName);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSequenceTimeToReady\n */\nexport const APLValueSequenceTimeToReady = new APLValueSequenceTimeToReady$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueTotemRemainingTime$Type extends MessageType<APLValueTotemRemainingTime> {\n    constructor() {\n        super(\"proto.APLValueTotemRemainingTime\", [\n            { no: 1, name: \"totem_type\", kind: \"enum\", T: () => [\"proto.ShamanTotems.TotemType\", ShamanTotems_TotemType] }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueTotemRemainingTime>): APLValueTotemRemainingTime {\n        const message = { totemType: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueTotemRemainingTime>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueTotemRemainingTime): APLValueTotemRemainingTime {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanTotems.TotemType totem_type */ 1:\n                    message.totemType = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueTotemRemainingTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanTotems.TotemType totem_type = 1; */\n        if (message.totemType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.totemType);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueTotemRemainingTime\n */\nexport const APLValueTotemRemainingTime = new APLValueTotemRemainingTime$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCatExcessEnergy$Type extends MessageType<APLValueCatExcessEnergy> {\n    constructor() {\n        super(\"proto.APLValueCatExcessEnergy\", []);\n    }\n    create(value?: PartialMessage<APLValueCatExcessEnergy>): APLValueCatExcessEnergy {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCatExcessEnergy>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCatExcessEnergy): APLValueCatExcessEnergy {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueCatExcessEnergy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCatExcessEnergy\n */\nexport const APLValueCatExcessEnergy = new APLValueCatExcessEnergy$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCatNewSavageRoarDuration$Type extends MessageType<APLValueCatNewSavageRoarDuration> {\n    constructor() {\n        super(\"proto.APLValueCatNewSavageRoarDuration\", []);\n    }\n    create(value?: PartialMessage<APLValueCatNewSavageRoarDuration>): APLValueCatNewSavageRoarDuration {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCatNewSavageRoarDuration>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCatNewSavageRoarDuration): APLValueCatNewSavageRoarDuration {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueCatNewSavageRoarDuration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCatNewSavageRoarDuration\n */\nexport const APLValueCatNewSavageRoarDuration = new APLValueCatNewSavageRoarDuration$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueWarlockShouldRecastDrainSoul$Type extends MessageType<APLValueWarlockShouldRecastDrainSoul> {\n    constructor() {\n        super(\"proto.APLValueWarlockShouldRecastDrainSoul\", []);\n    }\n    create(value?: PartialMessage<APLValueWarlockShouldRecastDrainSoul>): APLValueWarlockShouldRecastDrainSoul {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueWarlockShouldRecastDrainSoul>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueWarlockShouldRecastDrainSoul): APLValueWarlockShouldRecastDrainSoul {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueWarlockShouldRecastDrainSoul, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueWarlockShouldRecastDrainSoul\n */\nexport const APLValueWarlockShouldRecastDrainSoul = new APLValueWarlockShouldRecastDrainSoul$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueWarlockShouldRefreshCorruption$Type extends MessageType<APLValueWarlockShouldRefreshCorruption> {\n    constructor() {\n        super(\"proto.APLValueWarlockShouldRefreshCorruption\", [\n            { no: 1, name: \"target_unit\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueWarlockShouldRefreshCorruption>): APLValueWarlockShouldRefreshCorruption {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueWarlockShouldRefreshCorruption>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueWarlockShouldRefreshCorruption): APLValueWarlockShouldRefreshCorruption {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference target_unit */ 1:\n                    message.targetUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.targetUnit);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueWarlockShouldRefreshCorruption, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference target_unit = 1; */\n        if (message.targetUnit)\n            UnitReference.internalBinaryWrite(message.targetUnit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueWarlockShouldRefreshCorruption\n */\nexport const APLValueWarlockShouldRefreshCorruption = new APLValueWarlockShouldRefreshCorruption$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"warrior.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message proto.WarriorTalents\n */\nexport interface WarriorTalents {\n    /**\n     * Arms\n     *\n     * @generated from protobuf field: int32 war_academy = 1;\n     */\n    warAcademy: number;\n    /**\n     * @generated from protobuf field: int32 field_dressing = 2;\n     */\n    fieldDressing: number;\n    /**\n     * @generated from protobuf field: int32 blitz = 3;\n     */\n    blitz: number;\n    /**\n     * @generated from protobuf field: int32 tactical_mastery = 4;\n     */\n    tacticalMastery: number;\n    /**\n     * @generated from protobuf field: int32 second_wind = 5;\n     */\n    secondWind: number;\n    /**\n     * @generated from protobuf field: int32 deep_wounds = 6;\n     */\n    deepWounds: number;\n    /**\n     * @generated from protobuf field: int32 drums_of_war = 7;\n     */\n    drumsOfWar: number;\n    /**\n     * @generated from protobuf field: int32 taste_for_blood = 8;\n     */\n    tasteForBlood: number;\n    /**\n     * @generated from protobuf field: bool sweeping_strikes = 9;\n     */\n    sweepingStrikes: boolean;\n    /**\n     * @generated from protobuf field: int32 impale = 10;\n     */\n    impale: number;\n    /**\n     * @generated from protobuf field: int32 improved_hamstring = 11;\n     */\n    improvedHamstring: number;\n    /**\n     * @generated from protobuf field: int32 improved_slam = 12;\n     */\n    improvedSlam: number;\n    /**\n     * @generated from protobuf field: bool deadly_calm = 13;\n     */\n    deadlyCalm: boolean;\n    /**\n     * @generated from protobuf field: int32 blood_frenzy = 14;\n     */\n    bloodFrenzy: number;\n    /**\n     * @generated from protobuf field: int32 lambs_to_the_slaughter = 15;\n     */\n    lambsToTheSlaughter: number;\n    /**\n     * @generated from protobuf field: bool juggernaut = 16;\n     */\n    juggernaut: boolean;\n    /**\n     * @generated from protobuf field: int32 sudden_death = 17;\n     */\n    suddenDeath: number;\n    /**\n     * @generated from protobuf field: int32 wrecking_crew = 18;\n     */\n    wreckingCrew: number;\n    /**\n     * @generated from protobuf field: bool throwdown = 19;\n     */\n    throwdown: boolean;\n    /**\n     * @generated from protobuf field: bool bladestorm = 20;\n     */\n    bladestorm: boolean;\n    /**\n     * Fury\n     *\n     * @generated from protobuf field: int32 blood_craze = 21;\n     */\n    bloodCraze: number;\n    /**\n     * @generated from protobuf field: int32 battle_trance = 22;\n     */\n    battleTrance: number;\n    /**\n     * @generated from protobuf field: int32 cruelty = 23;\n     */\n    cruelty: number;\n    /**\n     * @generated from protobuf field: int32 executioner = 24;\n     */\n    executioner: number;\n    /**\n     * @generated from protobuf field: int32 booming_voice = 25;\n     */\n    boomingVoice: number;\n    /**\n     * @generated from protobuf field: int32 rude_interruption = 26;\n     */\n    rudeInterruption: number;\n    /**\n     * @generated from protobuf field: bool piercing_howl = 27;\n     */\n    piercingHowl: boolean;\n    /**\n     * @generated from protobuf field: int32 flurry = 28;\n     */\n    flurry: number;\n    /**\n     * @generated from protobuf field: bool death_wish = 29;\n     */\n    deathWish: boolean;\n    /**\n     * @generated from protobuf field: int32 enrage = 30;\n     */\n    enrage: number;\n    /**\n     * @generated from protobuf field: int32 die_by_the_sword = 31;\n     */\n    dieByTheSword: number;\n    /**\n     * @generated from protobuf field: bool raging_blow = 32;\n     */\n    ragingBlow: boolean;\n    /**\n     * @generated from protobuf field: bool rampage = 33;\n     */\n    rampage: boolean;\n    /**\n     * @generated from protobuf field: bool heroic_fury = 34;\n     */\n    heroicFury: boolean;\n    /**\n     * @generated from protobuf field: bool furious_attacks = 35;\n     */\n    furiousAttacks: boolean;\n    /**\n     * @generated from protobuf field: int32 meat_cleaver = 36;\n     */\n    meatCleaver: number;\n    /**\n     * @generated from protobuf field: int32 intensify_rage = 37;\n     */\n    intensifyRage: number;\n    /**\n     * @generated from protobuf field: int32 bloodsurge = 38;\n     */\n    bloodsurge: number;\n    /**\n     * @generated from protobuf field: int32 skirmisher = 39;\n     */\n    skirmisher: number;\n    /**\n     * @generated from protobuf field: bool titans_grip = 40;\n     */\n    titansGrip: boolean;\n    /**\n     * @generated from protobuf field: bool single_minded_fury = 41;\n     */\n    singleMindedFury: boolean;\n    /**\n     * Protection\n     *\n     * @generated from protobuf field: int32 incite = 42;\n     */\n    incite: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 43;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 blood_and_thunder = 44;\n     */\n    bloodAndThunder: number;\n    /**\n     * @generated from protobuf field: int32 shield_specialization = 45;\n     */\n    shieldSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 shield_mastery = 46;\n     */\n    shieldMastery: number;\n    /**\n     * @generated from protobuf field: int32 hold_the_line = 47;\n     */\n    holdTheLine: number;\n    /**\n     * @generated from protobuf field: int32 gag_order = 48;\n     */\n    gagOrder: number;\n    /**\n     * @generated from protobuf field: bool last_stand = 49;\n     */\n    lastStand: boolean;\n    /**\n     * @generated from protobuf field: bool concussion_blow = 50;\n     */\n    concussionBlow: boolean;\n    /**\n     * @generated from protobuf field: int32 bastion_of_defense = 51;\n     */\n    bastionOfDefense: number;\n    /**\n     * @generated from protobuf field: bool warbringer = 52;\n     */\n    warbringer: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_revenge = 53;\n     */\n    improvedRevenge: number;\n    /**\n     * @generated from protobuf field: bool devastate = 54;\n     */\n    devastate: boolean;\n    /**\n     * @generated from protobuf field: int32 impending_victory = 55;\n     */\n    impendingVictory: number;\n    /**\n     * @generated from protobuf field: int32 thunderstruck = 56;\n     */\n    thunderstruck: number;\n    /**\n     * @generated from protobuf field: bool vigilance = 57;\n     */\n    vigilance: boolean;\n    /**\n     * @generated from protobuf field: int32 heavy_repercussions = 58;\n     */\n    heavyRepercussions: number;\n    /**\n     * @generated from protobuf field: int32 safeguard = 59;\n     */\n    safeguard: number;\n    /**\n     * @generated from protobuf field: int32 sword_and_board = 60;\n     */\n    swordAndBoard: number;\n    /**\n     * @generated from protobuf field: bool shockwave = 61;\n     */\n    shockwave: boolean;\n}\n/**\n * @generated from protobuf message proto.WarriorOptions\n */\nexport interface WarriorOptions {\n    /**\n     * @generated from protobuf field: double starting_rage = 1;\n     */\n    startingRage: number;\n    /**\n     * @generated from protobuf field: proto.WarriorShout shout = 2;\n     */\n    shout: WarriorShout;\n    /**\n     * @generated from protobuf field: bool use_shattering_throw = 3;\n     */\n    useShatteringThrow: boolean;\n}\n/**\n * @generated from protobuf message proto.ArmsWarrior\n */\nexport interface ArmsWarrior {\n    /**\n     * @generated from protobuf field: proto.ArmsWarrior.Options options = 1;\n     */\n    options?: ArmsWarrior_Options;\n}\n/**\n * @generated from protobuf message proto.ArmsWarrior.Rotation\n */\nexport interface ArmsWarrior_Rotation {\n}\n/**\n * @generated from protobuf message proto.ArmsWarrior.Options\n */\nexport interface ArmsWarrior_Options {\n    /**\n     * @generated from protobuf field: proto.WarriorOptions class_options = 1;\n     */\n    classOptions?: WarriorOptions;\n    /**\n     * @generated from protobuf field: bool use_recklessness = 2;\n     */\n    useRecklessness: boolean;\n    /**\n     * @generated from protobuf field: bool stance_snapshot = 3;\n     */\n    stanceSnapshot: boolean;\n    /**\n     * @generated from protobuf field: bool disable_expertise_gemming = 4;\n     */\n    disableExpertiseGemming: boolean;\n}\n/**\n * @generated from protobuf message proto.FuryWarrior\n */\nexport interface FuryWarrior {\n    /**\n     * @generated from protobuf field: proto.FuryWarrior.Options options = 1;\n     */\n    options?: FuryWarrior_Options;\n}\n/**\n * @generated from protobuf message proto.FuryWarrior.Rotation\n */\nexport interface FuryWarrior_Rotation {\n}\n/**\n * @generated from protobuf message proto.FuryWarrior.Options\n */\nexport interface FuryWarrior_Options {\n    /**\n     * @generated from protobuf field: proto.WarriorOptions class_options = 1;\n     */\n    classOptions?: WarriorOptions;\n    /**\n     * @generated from protobuf field: bool use_recklessness = 2;\n     */\n    useRecklessness: boolean;\n    /**\n     * @generated from protobuf field: bool stance_snapshot = 3;\n     */\n    stanceSnapshot: boolean;\n    /**\n     * @generated from protobuf field: bool disable_expertise_gemming = 4;\n     */\n    disableExpertiseGemming: boolean;\n}\n/**\n * @generated from protobuf message proto.ProtectionWarrior\n */\nexport interface ProtectionWarrior {\n    /**\n     * @generated from protobuf field: proto.ProtectionWarrior.Options options = 1;\n     */\n    options?: ProtectionWarrior_Options;\n}\n/**\n * @generated from protobuf message proto.ProtectionWarrior.Rotation\n */\nexport interface ProtectionWarrior_Rotation {\n}\n/**\n * @generated from protobuf message proto.ProtectionWarrior.Options\n */\nexport interface ProtectionWarrior_Options {\n    /**\n     * @generated from protobuf field: proto.WarriorOptions class_options = 1;\n     */\n    classOptions?: WarriorOptions;\n    /**\n     * @generated from protobuf field: bool use_recklessness = 2;\n     */\n    useRecklessness: boolean;\n}\n/**\n * @generated from protobuf enum proto.WarriorPrimeGlyph\n */\nexport enum WarriorPrimeGlyph {\n    /**\n     * @generated from protobuf enum value: WarriorPrimeGlyphNone = 0;\n     */\n    WarriorPrimeGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBladestorm = 45790;\n     */\n    GlyphOfBladestorm = 45790,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodthirst = 43416;\n     */\n    GlyphOfBloodthirst = 43416,\n    /**\n     * @generated from protobuf enum value: GlyphOfDevastate = 43415;\n     */\n    GlyphOfDevastate = 43415,\n    /**\n     * @generated from protobuf enum value: GlyphOfMortalStrike = 43421;\n     */\n    GlyphOfMortalStrike = 43421,\n    /**\n     * @generated from protobuf enum value: GlyphOfOverpower = 43422;\n     */\n    GlyphOfOverpower = 43422,\n    /**\n     * @generated from protobuf enum value: GlyphOfRagingBlow = 43432;\n     */\n    GlyphOfRagingBlow = 43432,\n    /**\n     * @generated from protobuf enum value: GlyphOfRevenge = 43424;\n     */\n    GlyphOfRevenge = 43424,\n    /**\n     * @generated from protobuf enum value: GlyphOfShieldSlam = 43425;\n     */\n    GlyphOfShieldSlam = 43425,\n    /**\n     * @generated from protobuf enum value: GlyphOfSlam = 43423;\n     */\n    GlyphOfSlam = 43423\n}\n/**\n * @generated from protobuf enum proto.WarriorMajorGlyph\n */\nexport enum WarriorMajorGlyph {\n    /**\n     * @generated from protobuf enum value: WarriorMajorGlyphNone = 0;\n     */\n    WarriorMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfCleaving = 43414;\n     */\n    GlyphOfCleaving = 43414,\n    /**\n     * @generated from protobuf enum value: GlyphOfColossusSmash = 63481;\n     */\n    GlyphOfColossusSmash = 63481,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathWish = 67483;\n     */\n    GlyphOfDeathWish = 67483,\n    /**\n     * @generated from protobuf enum value: GlyphOfHeroicThrow = 43418;\n     */\n    GlyphOfHeroicThrow = 43418,\n    /**\n     * @generated from protobuf enum value: GlyphOfIntercept = 67482;\n     */\n    GlyphOfIntercept = 67482,\n    /**\n     * @generated from protobuf enum value: GlyphOfIntervene = 43419;\n     */\n    GlyphOfIntervene = 43419,\n    /**\n     * @generated from protobuf enum value: GlyphOfLongCharge = 43397;\n     */\n    GlyphOfLongCharge = 43397,\n    /**\n     * @generated from protobuf enum value: GlyphOfPiercingHowl = 43417;\n     */\n    GlyphOfPiercingHowl = 43417,\n    /**\n     * @generated from protobuf enum value: GlyphOfRapidCharge = 43413;\n     */\n    GlyphOfRapidCharge = 43413,\n    /**\n     * @generated from protobuf enum value: GlyphOfResonatingPower = 43430;\n     */\n    GlyphOfResonatingPower = 43430,\n    /**\n     * @generated from protobuf enum value: GlyphOfShieldWall = 45797;\n     */\n    GlyphOfShieldWall = 45797,\n    /**\n     * @generated from protobuf enum value: GlyphOfShockwave = 45792;\n     */\n    GlyphOfShockwave = 45792,\n    /**\n     * @generated from protobuf enum value: GlyphOfSpellReflection = 45795;\n     */\n    GlyphOfSpellReflection = 45795,\n    /**\n     * @generated from protobuf enum value: GlyphOfSunderArmor = 43427;\n     */\n    GlyphOfSunderArmor = 43427,\n    /**\n     * @generated from protobuf enum value: GlyphOfSweepingStrikes = 43428;\n     */\n    GlyphOfSweepingStrikes = 43428,\n    /**\n     * @generated from protobuf enum value: GlyphOfThunderClap = 43399;\n     */\n    GlyphOfThunderClap = 43399,\n    /**\n     * @generated from protobuf enum value: GlyphOfVictoryRush = 43431;\n     */\n    GlyphOfVictoryRush = 43431\n}\n/**\n * @generated from protobuf enum proto.WarriorMinorGlyph\n */\nexport enum WarriorMinorGlyph {\n    /**\n     * @generated from protobuf enum value: WarriorMinorGlyphNone = 0;\n     */\n    WarriorMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBattle = 43395;\n     */\n    GlyphOfBattle = 43395,\n    /**\n     * @generated from protobuf enum value: GlyphOfBerserkerRage = 43396;\n     */\n    GlyphOfBerserkerRage = 43396,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodyHealing = 43412;\n     */\n    GlyphOfBloodyHealing = 43412,\n    /**\n     * @generated from protobuf enum value: GlyphOfCommand = 49084;\n     */\n    GlyphOfCommand = 49084,\n    /**\n     * @generated from protobuf enum value: GlyphOfDemoralizingShout = 43398;\n     */\n    GlyphOfDemoralizingShout = 43398,\n    /**\n     * @generated from protobuf enum value: GlyphOfEnduringVictory = 43400;\n     */\n    GlyphOfEnduringVictory = 43400,\n    /**\n     * @generated from protobuf enum value: GlyphOfFuriousSundering = 45793;\n     */\n    GlyphOfFuriousSundering = 45793,\n    /**\n     * @generated from protobuf enum value: GlyphOfIntimidatingShout = 45794;\n     */\n    GlyphOfIntimidatingShout = 45794,\n    /**\n     * @generated from protobuf enum value: GlyphOfShatteringThrow = 206953;\n     */\n    GlyphOfShatteringThrow = 206953\n}\n/**\n * @generated from protobuf enum proto.WarriorShout\n */\nexport enum WarriorShout {\n    /**\n     * @generated from protobuf enum value: WarriorShoutNone = 0;\n     */\n    WarriorShoutNone = 0,\n    /**\n     * @generated from protobuf enum value: WarriorShoutBattle = 1;\n     */\n    WarriorShoutBattle = 1,\n    /**\n     * @generated from protobuf enum value: WarriorShoutCommanding = 2;\n     */\n    WarriorShoutCommanding = 2\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass WarriorTalents$Type extends MessageType<WarriorTalents> {\n    constructor() {\n        super(\"proto.WarriorTalents\", [\n            { no: 1, name: \"war_academy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"field_dressing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"blitz\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"tactical_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"second_wind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"deep_wounds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"drums_of_war\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"taste_for_blood\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"sweeping_strikes\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"impale\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"improved_hamstring\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"improved_slam\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"deadly_calm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"blood_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"lambs_to_the_slaughter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"juggernaut\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"sudden_death\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"wrecking_crew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"throwdown\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"bladestorm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 21, name: \"blood_craze\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"battle_trance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"cruelty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"executioner\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"booming_voice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"rude_interruption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"piercing_howl\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 28, name: \"flurry\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"death_wish\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"enrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"die_by_the_sword\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"raging_blow\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"rampage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"heroic_fury\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"furious_attacks\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"meat_cleaver\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"intensify_rage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"bloodsurge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"skirmisher\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"titans_grip\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 41, name: \"single_minded_fury\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 42, name: \"incite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"blood_and_thunder\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"shield_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"shield_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"hold_the_line\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"gag_order\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"last_stand\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 50, name: \"concussion_blow\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"bastion_of_defense\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"warbringer\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"improved_revenge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"devastate\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"impending_victory\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"thunderstruck\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"vigilance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 58, name: \"heavy_repercussions\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"safeguard\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"sword_and_board\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"shockwave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<WarriorTalents>): WarriorTalents {\n        const message = { warAcademy: 0, fieldDressing: 0, blitz: 0, tacticalMastery: 0, secondWind: 0, deepWounds: 0, drumsOfWar: 0, tasteForBlood: 0, sweepingStrikes: false, impale: 0, improvedHamstring: 0, improvedSlam: 0, deadlyCalm: false, bloodFrenzy: 0, lambsToTheSlaughter: 0, juggernaut: false, suddenDeath: 0, wreckingCrew: 0, throwdown: false, bladestorm: false, bloodCraze: 0, battleTrance: 0, cruelty: 0, executioner: 0, boomingVoice: 0, rudeInterruption: 0, piercingHowl: false, flurry: 0, deathWish: false, enrage: 0, dieByTheSword: 0, ragingBlow: false, rampage: false, heroicFury: false, furiousAttacks: false, meatCleaver: 0, intensifyRage: 0, bloodsurge: 0, skirmisher: 0, titansGrip: false, singleMindedFury: false, incite: 0, toughness: 0, bloodAndThunder: 0, shieldSpecialization: 0, shieldMastery: 0, holdTheLine: 0, gagOrder: 0, lastStand: false, concussionBlow: false, bastionOfDefense: 0, warbringer: false, improvedRevenge: 0, devastate: false, impendingVictory: 0, thunderstruck: 0, vigilance: false, heavyRepercussions: 0, safeguard: 0, swordAndBoard: 0, shockwave: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<WarriorTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarriorTalents): WarriorTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 war_academy */ 1:\n                    message.warAcademy = reader.int32();\n                    break;\n                case /* int32 field_dressing */ 2:\n                    message.fieldDressing = reader.int32();\n                    break;\n                case /* int32 blitz */ 3:\n                    message.blitz = reader.int32();\n                    break;\n                case /* int32 tactical_mastery */ 4:\n                    message.tacticalMastery = reader.int32();\n                    break;\n                case /* int32 second_wind */ 5:\n                    message.secondWind = reader.int32();\n                    break;\n                case /* int32 deep_wounds */ 6:\n                    message.deepWounds = reader.int32();\n                    break;\n                case /* int32 drums_of_war */ 7:\n                    message.drumsOfWar = reader.int32();\n                    break;\n                case /* int32 taste_for_blood */ 8:\n                    message.tasteForBlood = reader.int32();\n                    break;\n                case /* bool sweeping_strikes */ 9:\n                    message.sweepingStrikes = reader.bool();\n                    break;\n                case /* int32 impale */ 10:\n                    message.impale = reader.int32();\n                    break;\n                case /* int32 improved_hamstring */ 11:\n                    message.improvedHamstring = reader.int32();\n                    break;\n                case /* int32 improved_slam */ 12:\n                    message.improvedSlam = reader.int32();\n                    break;\n                case /* bool deadly_calm */ 13:\n                    message.deadlyCalm = reader.bool();\n                    break;\n                case /* int32 blood_frenzy */ 14:\n                    message.bloodFrenzy = reader.int32();\n                    break;\n                case /* int32 lambs_to_the_slaughter */ 15:\n                    message.lambsToTheSlaughter = reader.int32();\n                    break;\n                case /* bool juggernaut */ 16:\n                    message.juggernaut = reader.bool();\n                    break;\n                case /* int32 sudden_death */ 17:\n                    message.suddenDeath = reader.int32();\n                    break;\n                case /* int32 wrecking_crew */ 18:\n                    message.wreckingCrew = reader.int32();\n                    break;\n                case /* bool throwdown */ 19:\n                    message.throwdown = reader.bool();\n                    break;\n                case /* bool bladestorm */ 20:\n                    message.bladestorm = reader.bool();\n                    break;\n                case /* int32 blood_craze */ 21:\n                    message.bloodCraze = reader.int32();\n                    break;\n                case /* int32 battle_trance */ 22:\n                    message.battleTrance = reader.int32();\n                    break;\n                case /* int32 cruelty */ 23:\n                    message.cruelty = reader.int32();\n                    break;\n                case /* int32 executioner */ 24:\n                    message.executioner = reader.int32();\n                    break;\n                case /* int32 booming_voice */ 25:\n                    message.boomingVoice = reader.int32();\n                    break;\n                case /* int32 rude_interruption */ 26:\n                    message.rudeInterruption = reader.int32();\n                    break;\n                case /* bool piercing_howl */ 27:\n                    message.piercingHowl = reader.bool();\n                    break;\n                case /* int32 flurry */ 28:\n                    message.flurry = reader.int32();\n                    break;\n                case /* bool death_wish */ 29:\n                    message.deathWish = reader.bool();\n                    break;\n                case /* int32 enrage */ 30:\n                    message.enrage = reader.int32();\n                    break;\n                case /* int32 die_by_the_sword */ 31:\n                    message.dieByTheSword = reader.int32();\n                    break;\n                case /* bool raging_blow */ 32:\n                    message.ragingBlow = reader.bool();\n                    break;\n                case /* bool rampage */ 33:\n                    message.rampage = reader.bool();\n                    break;\n                case /* bool heroic_fury */ 34:\n                    message.heroicFury = reader.bool();\n                    break;\n                case /* bool furious_attacks */ 35:\n                    message.furiousAttacks = reader.bool();\n                    break;\n                case /* int32 meat_cleaver */ 36:\n                    message.meatCleaver = reader.int32();\n                    break;\n                case /* int32 intensify_rage */ 37:\n                    message.intensifyRage = reader.int32();\n                    break;\n                case /* int32 bloodsurge */ 38:\n                    message.bloodsurge = reader.int32();\n                    break;\n                case /* int32 skirmisher */ 39:\n                    message.skirmisher = reader.int32();\n                    break;\n                case /* bool titans_grip */ 40:\n                    message.titansGrip = reader.bool();\n                    break;\n                case /* bool single_minded_fury */ 41:\n                    message.singleMindedFury = reader.bool();\n                    break;\n                case /* int32 incite */ 42:\n                    message.incite = reader.int32();\n                    break;\n                case /* int32 toughness */ 43:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 blood_and_thunder */ 44:\n                    message.bloodAndThunder = reader.int32();\n                    break;\n                case /* int32 shield_specialization */ 45:\n                    message.shieldSpecialization = reader.int32();\n                    break;\n                case /* int32 shield_mastery */ 46:\n                    message.shieldMastery = reader.int32();\n                    break;\n                case /* int32 hold_the_line */ 47:\n                    message.holdTheLine = reader.int32();\n                    break;\n                case /* int32 gag_order */ 48:\n                    message.gagOrder = reader.int32();\n                    break;\n                case /* bool last_stand */ 49:\n                    message.lastStand = reader.bool();\n                    break;\n                case /* bool concussion_blow */ 50:\n                    message.concussionBlow = reader.bool();\n                    break;\n                case /* int32 bastion_of_defense */ 51:\n                    message.bastionOfDefense = reader.int32();\n                    break;\n                case /* bool warbringer */ 52:\n                    message.warbringer = reader.bool();\n                    break;\n                case /* int32 improved_revenge */ 53:\n                    message.improvedRevenge = reader.int32();\n                    break;\n                case /* bool devastate */ 54:\n                    message.devastate = reader.bool();\n                    break;\n                case /* int32 impending_victory */ 55:\n                    message.impendingVictory = reader.int32();\n                    break;\n                case /* int32 thunderstruck */ 56:\n                    message.thunderstruck = reader.int32();\n                    break;\n                case /* bool vigilance */ 57:\n                    message.vigilance = reader.bool();\n                    break;\n                case /* int32 heavy_repercussions */ 58:\n                    message.heavyRepercussions = reader.int32();\n                    break;\n                case /* int32 safeguard */ 59:\n                    message.safeguard = reader.int32();\n                    break;\n                case /* int32 sword_and_board */ 60:\n                    message.swordAndBoard = reader.int32();\n                    break;\n                case /* bool shockwave */ 61:\n                    message.shockwave = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: WarriorTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 war_academy = 1; */\n        if (message.warAcademy !== 0)\n            writer.tag(1, WireType.Varint).int32(message.warAcademy);\n        /* int32 field_dressing = 2; */\n        if (message.fieldDressing !== 0)\n            writer.tag(2, WireType.Varint).int32(message.fieldDressing);\n        /* int32 blitz = 3; */\n        if (message.blitz !== 0)\n            writer.tag(3, WireType.Varint).int32(message.blitz);\n        /* int32 tactical_mastery = 4; */\n        if (message.tacticalMastery !== 0)\n            writer.tag(4, WireType.Varint).int32(message.tacticalMastery);\n        /* int32 second_wind = 5; */\n        if (message.secondWind !== 0)\n            writer.tag(5, WireType.Varint).int32(message.secondWind);\n        /* int32 deep_wounds = 6; */\n        if (message.deepWounds !== 0)\n            writer.tag(6, WireType.Varint).int32(message.deepWounds);\n        /* int32 drums_of_war = 7; */\n        if (message.drumsOfWar !== 0)\n            writer.tag(7, WireType.Varint).int32(message.drumsOfWar);\n        /* int32 taste_for_blood = 8; */\n        if (message.tasteForBlood !== 0)\n            writer.tag(8, WireType.Varint).int32(message.tasteForBlood);\n        /* bool sweeping_strikes = 9; */\n        if (message.sweepingStrikes !== false)\n            writer.tag(9, WireType.Varint).bool(message.sweepingStrikes);\n        /* int32 impale = 10; */\n        if (message.impale !== 0)\n            writer.tag(10, WireType.Varint).int32(message.impale);\n        /* int32 improved_hamstring = 11; */\n        if (message.improvedHamstring !== 0)\n            writer.tag(11, WireType.Varint).int32(message.improvedHamstring);\n        /* int32 improved_slam = 12; */\n        if (message.improvedSlam !== 0)\n            writer.tag(12, WireType.Varint).int32(message.improvedSlam);\n        /* bool deadly_calm = 13; */\n        if (message.deadlyCalm !== false)\n            writer.tag(13, WireType.Varint).bool(message.deadlyCalm);\n        /* int32 blood_frenzy = 14; */\n        if (message.bloodFrenzy !== 0)\n            writer.tag(14, WireType.Varint).int32(message.bloodFrenzy);\n        /* int32 lambs_to_the_slaughter = 15; */\n        if (message.lambsToTheSlaughter !== 0)\n            writer.tag(15, WireType.Varint).int32(message.lambsToTheSlaughter);\n        /* bool juggernaut = 16; */\n        if (message.juggernaut !== false)\n            writer.tag(16, WireType.Varint).bool(message.juggernaut);\n        /* int32 sudden_death = 17; */\n        if (message.suddenDeath !== 0)\n            writer.tag(17, WireType.Varint).int32(message.suddenDeath);\n        /* int32 wrecking_crew = 18; */\n        if (message.wreckingCrew !== 0)\n            writer.tag(18, WireType.Varint).int32(message.wreckingCrew);\n        /* bool throwdown = 19; */\n        if (message.throwdown !== false)\n            writer.tag(19, WireType.Varint).bool(message.throwdown);\n        /* bool bladestorm = 20; */\n        if (message.bladestorm !== false)\n            writer.tag(20, WireType.Varint).bool(message.bladestorm);\n        /* int32 blood_craze = 21; */\n        if (message.bloodCraze !== 0)\n            writer.tag(21, WireType.Varint).int32(message.bloodCraze);\n        /* int32 battle_trance = 22; */\n        if (message.battleTrance !== 0)\n            writer.tag(22, WireType.Varint).int32(message.battleTrance);\n        /* int32 cruelty = 23; */\n        if (message.cruelty !== 0)\n            writer.tag(23, WireType.Varint).int32(message.cruelty);\n        /* int32 executioner = 24; */\n        if (message.executioner !== 0)\n            writer.tag(24, WireType.Varint).int32(message.executioner);\n        /* int32 booming_voice = 25; */\n        if (message.boomingVoice !== 0)\n            writer.tag(25, WireType.Varint).int32(message.boomingVoice);\n        /* int32 rude_interruption = 26; */\n        if (message.rudeInterruption !== 0)\n            writer.tag(26, WireType.Varint).int32(message.rudeInterruption);\n        /* bool piercing_howl = 27; */\n        if (message.piercingHowl !== false)\n            writer.tag(27, WireType.Varint).bool(message.piercingHowl);\n        /* int32 flurry = 28; */\n        if (message.flurry !== 0)\n            writer.tag(28, WireType.Varint).int32(message.flurry);\n        /* bool death_wish = 29; */\n        if (message.deathWish !== false)\n            writer.tag(29, WireType.Varint).bool(message.deathWish);\n        /* int32 enrage = 30; */\n        if (message.enrage !== 0)\n            writer.tag(30, WireType.Varint).int32(message.enrage);\n        /* int32 die_by_the_sword = 31; */\n        if (message.dieByTheSword !== 0)\n            writer.tag(31, WireType.Varint).int32(message.dieByTheSword);\n        /* bool raging_blow = 32; */\n        if (message.ragingBlow !== false)\n            writer.tag(32, WireType.Varint).bool(message.ragingBlow);\n        /* bool rampage = 33; */\n        if (message.rampage !== false)\n            writer.tag(33, WireType.Varint).bool(message.rampage);\n        /* bool heroic_fury = 34; */\n        if (message.heroicFury !== false)\n            writer.tag(34, WireType.Varint).bool(message.heroicFury);\n        /* bool furious_attacks = 35; */\n        if (message.furiousAttacks !== false)\n            writer.tag(35, WireType.Varint).bool(message.furiousAttacks);\n        /* int32 meat_cleaver = 36; */\n        if (message.meatCleaver !== 0)\n            writer.tag(36, WireType.Varint).int32(message.meatCleaver);\n        /* int32 intensify_rage = 37; */\n        if (message.intensifyRage !== 0)\n            writer.tag(37, WireType.Varint).int32(message.intensifyRage);\n        /* int32 bloodsurge = 38; */\n        if (message.bloodsurge !== 0)\n            writer.tag(38, WireType.Varint).int32(message.bloodsurge);\n        /* int32 skirmisher = 39; */\n        if (message.skirmisher !== 0)\n            writer.tag(39, WireType.Varint).int32(message.skirmisher);\n        /* bool titans_grip = 40; */\n        if (message.titansGrip !== false)\n            writer.tag(40, WireType.Varint).bool(message.titansGrip);\n        /* bool single_minded_fury = 41; */\n        if (message.singleMindedFury !== false)\n            writer.tag(41, WireType.Varint).bool(message.singleMindedFury);\n        /* int32 incite = 42; */\n        if (message.incite !== 0)\n            writer.tag(42, WireType.Varint).int32(message.incite);\n        /* int32 toughness = 43; */\n        if (message.toughness !== 0)\n            writer.tag(43, WireType.Varint).int32(message.toughness);\n        /* int32 blood_and_thunder = 44; */\n        if (message.bloodAndThunder !== 0)\n            writer.tag(44, WireType.Varint).int32(message.bloodAndThunder);\n        /* int32 shield_specialization = 45; */\n        if (message.shieldSpecialization !== 0)\n            writer.tag(45, WireType.Varint).int32(message.shieldSpecialization);\n        /* int32 shield_mastery = 46; */\n        if (message.shieldMastery !== 0)\n            writer.tag(46, WireType.Varint).int32(message.shieldMastery);\n        /* int32 hold_the_line = 47; */\n        if (message.holdTheLine !== 0)\n            writer.tag(47, WireType.Varint).int32(message.holdTheLine);\n        /* int32 gag_order = 48; */\n        if (message.gagOrder !== 0)\n            writer.tag(48, WireType.Varint).int32(message.gagOrder);\n        /* bool last_stand = 49; */\n        if (message.lastStand !== false)\n            writer.tag(49, WireType.Varint).bool(message.lastStand);\n        /* bool concussion_blow = 50; */\n        if (message.concussionBlow !== false)\n            writer.tag(50, WireType.Varint).bool(message.concussionBlow);\n        /* int32 bastion_of_defense = 51; */\n        if (message.bastionOfDefense !== 0)\n            writer.tag(51, WireType.Varint).int32(message.bastionOfDefense);\n        /* bool warbringer = 52; */\n        if (message.warbringer !== false)\n            writer.tag(52, WireType.Varint).bool(message.warbringer);\n        /* int32 improved_revenge = 53; */\n        if (message.improvedRevenge !== 0)\n            writer.tag(53, WireType.Varint).int32(message.improvedRevenge);\n        /* bool devastate = 54; */\n        if (message.devastate !== false)\n            writer.tag(54, WireType.Varint).bool(message.devastate);\n        /* int32 impending_victory = 55; */\n        if (message.impendingVictory !== 0)\n            writer.tag(55, WireType.Varint).int32(message.impendingVictory);\n        /* int32 thunderstruck = 56; */\n        if (message.thunderstruck !== 0)\n            writer.tag(56, WireType.Varint).int32(message.thunderstruck);\n        /* bool vigilance = 57; */\n        if (message.vigilance !== false)\n            writer.tag(57, WireType.Varint).bool(message.vigilance);\n        /* int32 heavy_repercussions = 58; */\n        if (message.heavyRepercussions !== 0)\n            writer.tag(58, WireType.Varint).int32(message.heavyRepercussions);\n        /* int32 safeguard = 59; */\n        if (message.safeguard !== 0)\n            writer.tag(59, WireType.Varint).int32(message.safeguard);\n        /* int32 sword_and_board = 60; */\n        if (message.swordAndBoard !== 0)\n            writer.tag(60, WireType.Varint).int32(message.swordAndBoard);\n        /* bool shockwave = 61; */\n        if (message.shockwave !== false)\n            writer.tag(61, WireType.Varint).bool(message.shockwave);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.WarriorTalents\n */\nexport const WarriorTalents = new WarriorTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass WarriorOptions$Type extends MessageType<WarriorOptions> {\n    constructor() {\n        super(\"proto.WarriorOptions\", [\n            { no: 1, name: \"starting_rage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"shout\", kind: \"enum\", T: () => [\"proto.WarriorShout\", WarriorShout] },\n            { no: 3, name: \"use_shattering_throw\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<WarriorOptions>): WarriorOptions {\n        const message = { startingRage: 0, shout: 0, useShatteringThrow: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<WarriorOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarriorOptions): WarriorOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double starting_rage */ 1:\n                    message.startingRage = reader.double();\n                    break;\n                case /* proto.WarriorShout shout */ 2:\n                    message.shout = reader.int32();\n                    break;\n                case /* bool use_shattering_throw */ 3:\n                    message.useShatteringThrow = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: WarriorOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double starting_rage = 1; */\n        if (message.startingRage !== 0)\n            writer.tag(1, WireType.Bit64).double(message.startingRage);\n        /* proto.WarriorShout shout = 2; */\n        if (message.shout !== 0)\n            writer.tag(2, WireType.Varint).int32(message.shout);\n        /* bool use_shattering_throw = 3; */\n        if (message.useShatteringThrow !== false)\n            writer.tag(3, WireType.Varint).bool(message.useShatteringThrow);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.WarriorOptions\n */\nexport const WarriorOptions = new WarriorOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ArmsWarrior$Type extends MessageType<ArmsWarrior> {\n    constructor() {\n        super(\"proto.ArmsWarrior\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => ArmsWarrior_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ArmsWarrior>): ArmsWarrior {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ArmsWarrior>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArmsWarrior): ArmsWarrior {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ArmsWarrior.Options options */ 1:\n                    message.options = ArmsWarrior_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ArmsWarrior, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ArmsWarrior.Options options = 1; */\n        if (message.options)\n            ArmsWarrior_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ArmsWarrior\n */\nexport const ArmsWarrior = new ArmsWarrior$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ArmsWarrior_Rotation$Type extends MessageType<ArmsWarrior_Rotation> {\n    constructor() {\n        super(\"proto.ArmsWarrior.Rotation\", []);\n    }\n    create(value?: PartialMessage<ArmsWarrior_Rotation>): ArmsWarrior_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ArmsWarrior_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArmsWarrior_Rotation): ArmsWarrior_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: ArmsWarrior_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ArmsWarrior.Rotation\n */\nexport const ArmsWarrior_Rotation = new ArmsWarrior_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ArmsWarrior_Options$Type extends MessageType<ArmsWarrior_Options> {\n    constructor() {\n        super(\"proto.ArmsWarrior.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => WarriorOptions },\n            { no: 2, name: \"use_recklessness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"stance_snapshot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"disable_expertise_gemming\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ArmsWarrior_Options>): ArmsWarrior_Options {\n        const message = { useRecklessness: false, stanceSnapshot: false, disableExpertiseGemming: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ArmsWarrior_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArmsWarrior_Options): ArmsWarrior_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.WarriorOptions class_options */ 1:\n                    message.classOptions = WarriorOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* bool use_recklessness */ 2:\n                    message.useRecklessness = reader.bool();\n                    break;\n                case /* bool stance_snapshot */ 3:\n                    message.stanceSnapshot = reader.bool();\n                    break;\n                case /* bool disable_expertise_gemming */ 4:\n                    message.disableExpertiseGemming = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ArmsWarrior_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.WarriorOptions class_options = 1; */\n        if (message.classOptions)\n            WarriorOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool use_recklessness = 2; */\n        if (message.useRecklessness !== false)\n            writer.tag(2, WireType.Varint).bool(message.useRecklessness);\n        /* bool stance_snapshot = 3; */\n        if (message.stanceSnapshot !== false)\n            writer.tag(3, WireType.Varint).bool(message.stanceSnapshot);\n        /* bool disable_expertise_gemming = 4; */\n        if (message.disableExpertiseGemming !== false)\n            writer.tag(4, WireType.Varint).bool(message.disableExpertiseGemming);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ArmsWarrior.Options\n */\nexport const ArmsWarrior_Options = new ArmsWarrior_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FuryWarrior$Type extends MessageType<FuryWarrior> {\n    constructor() {\n        super(\"proto.FuryWarrior\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => FuryWarrior_Options }\n        ]);\n    }\n    create(value?: PartialMessage<FuryWarrior>): FuryWarrior {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FuryWarrior>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FuryWarrior): FuryWarrior {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FuryWarrior.Options options */ 1:\n                    message.options = FuryWarrior_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FuryWarrior, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FuryWarrior.Options options = 1; */\n        if (message.options)\n            FuryWarrior_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FuryWarrior\n */\nexport const FuryWarrior = new FuryWarrior$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FuryWarrior_Rotation$Type extends MessageType<FuryWarrior_Rotation> {\n    constructor() {\n        super(\"proto.FuryWarrior.Rotation\", []);\n    }\n    create(value?: PartialMessage<FuryWarrior_Rotation>): FuryWarrior_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FuryWarrior_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FuryWarrior_Rotation): FuryWarrior_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: FuryWarrior_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FuryWarrior.Rotation\n */\nexport const FuryWarrior_Rotation = new FuryWarrior_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FuryWarrior_Options$Type extends MessageType<FuryWarrior_Options> {\n    constructor() {\n        super(\"proto.FuryWarrior.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => WarriorOptions },\n            { no: 2, name: \"use_recklessness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"stance_snapshot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"disable_expertise_gemming\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FuryWarrior_Options>): FuryWarrior_Options {\n        const message = { useRecklessness: false, stanceSnapshot: false, disableExpertiseGemming: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FuryWarrior_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FuryWarrior_Options): FuryWarrior_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.WarriorOptions class_options */ 1:\n                    message.classOptions = WarriorOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* bool use_recklessness */ 2:\n                    message.useRecklessness = reader.bool();\n                    break;\n                case /* bool stance_snapshot */ 3:\n                    message.stanceSnapshot = reader.bool();\n                    break;\n                case /* bool disable_expertise_gemming */ 4:\n                    message.disableExpertiseGemming = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FuryWarrior_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.WarriorOptions class_options = 1; */\n        if (message.classOptions)\n            WarriorOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool use_recklessness = 2; */\n        if (message.useRecklessness !== false)\n            writer.tag(2, WireType.Varint).bool(message.useRecklessness);\n        /* bool stance_snapshot = 3; */\n        if (message.stanceSnapshot !== false)\n            writer.tag(3, WireType.Varint).bool(message.stanceSnapshot);\n        /* bool disable_expertise_gemming = 4; */\n        if (message.disableExpertiseGemming !== false)\n            writer.tag(4, WireType.Varint).bool(message.disableExpertiseGemming);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FuryWarrior.Options\n */\nexport const FuryWarrior_Options = new FuryWarrior_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionWarrior$Type extends MessageType<ProtectionWarrior> {\n    constructor() {\n        super(\"proto.ProtectionWarrior\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => ProtectionWarrior_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionWarrior>): ProtectionWarrior {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionWarrior>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionWarrior): ProtectionWarrior {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ProtectionWarrior.Options options */ 1:\n                    message.options = ProtectionWarrior_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionWarrior, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ProtectionWarrior.Options options = 1; */\n        if (message.options)\n            ProtectionWarrior_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionWarrior\n */\nexport const ProtectionWarrior = new ProtectionWarrior$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionWarrior_Rotation$Type extends MessageType<ProtectionWarrior_Rotation> {\n    constructor() {\n        super(\"proto.ProtectionWarrior.Rotation\", []);\n    }\n    create(value?: PartialMessage<ProtectionWarrior_Rotation>): ProtectionWarrior_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionWarrior_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionWarrior_Rotation): ProtectionWarrior_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: ProtectionWarrior_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionWarrior.Rotation\n */\nexport const ProtectionWarrior_Rotation = new ProtectionWarrior_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionWarrior_Options$Type extends MessageType<ProtectionWarrior_Options> {\n    constructor() {\n        super(\"proto.ProtectionWarrior.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => WarriorOptions },\n            { no: 2, name: \"use_recklessness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionWarrior_Options>): ProtectionWarrior_Options {\n        const message = { useRecklessness: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionWarrior_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionWarrior_Options): ProtectionWarrior_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.WarriorOptions class_options */ 1:\n                    message.classOptions = WarriorOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* bool use_recklessness */ 2:\n                    message.useRecklessness = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionWarrior_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.WarriorOptions class_options = 1; */\n        if (message.classOptions)\n            WarriorOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool use_recklessness = 2; */\n        if (message.useRecklessness !== false)\n            writer.tag(2, WireType.Varint).bool(message.useRecklessness);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionWarrior.Options\n */\nexport const ProtectionWarrior_Options = new ProtectionWarrior_Options$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"warlock.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message proto.WarlockTalents\n */\nexport interface WarlockTalents {\n    /**\n     * Affliction\n     *\n     * @generated from protobuf field: int32 doom_and_gloom = 1;\n     */\n    doomAndGloom: number;\n    /**\n     * @generated from protobuf field: int32 improved_life_tap = 2;\n     */\n    improvedLifeTap: number;\n    /**\n     * @generated from protobuf field: int32 improved_corruption = 3;\n     */\n    improvedCorruption: number;\n    /**\n     * @generated from protobuf field: int32 jinx = 4;\n     */\n    jinx: number;\n    /**\n     * @generated from protobuf field: int32 soul_siphon = 5;\n     */\n    soulSiphon: number;\n    /**\n     * @generated from protobuf field: int32 siphon_life = 6;\n     */\n    siphonLife: number;\n    /**\n     * @generated from protobuf field: bool curse_of_exhaustion = 7;\n     */\n    curseOfExhaustion: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_fear = 8;\n     */\n    improvedFear: number;\n    /**\n     * @generated from protobuf field: int32 eradication = 9;\n     */\n    eradication: number;\n    /**\n     * @generated from protobuf field: int32 improved_howl_of_terror = 10;\n     */\n    improvedHowlOfTerror: number;\n    /**\n     * @generated from protobuf field: bool soul_swap = 11;\n     */\n    soulSwap: boolean;\n    /**\n     * @generated from protobuf field: int32 shadow_embrace = 12;\n     */\n    shadowEmbrace: number;\n    /**\n     * @generated from protobuf field: int32 deaths_embrace = 13;\n     */\n    deathsEmbrace: number;\n    /**\n     * @generated from protobuf field: int32 nightfall = 14;\n     */\n    nightfall: number;\n    /**\n     * @generated from protobuf field: bool soulburn_seed_of_corruption = 15;\n     */\n    soulburnSeedOfCorruption: boolean;\n    /**\n     * @generated from protobuf field: int32 everlasting_affliction = 16;\n     */\n    everlastingAffliction: number;\n    /**\n     * @generated from protobuf field: int32 pandemic = 17;\n     */\n    pandemic: number;\n    /**\n     * @generated from protobuf field: bool haunt = 18;\n     */\n    haunt: boolean;\n    /**\n     * Demonology\n     *\n     * @generated from protobuf field: int32 demonic_embrace = 19;\n     */\n    demonicEmbrace: number;\n    /**\n     * @generated from protobuf field: int32 dark_arts = 20;\n     */\n    darkArts: number;\n    /**\n     * @generated from protobuf field: int32 fel_synergy = 21;\n     */\n    felSynergy: number;\n    /**\n     * @generated from protobuf field: int32 demonic_rebirth = 22;\n     */\n    demonicRebirth: number;\n    /**\n     * @generated from protobuf field: int32 mana_feed = 23;\n     */\n    manaFeed: number;\n    /**\n     * @generated from protobuf field: int32 demonic_aegis = 24;\n     */\n    demonicAegis: number;\n    /**\n     * @generated from protobuf field: int32 master_summoner = 25;\n     */\n    masterSummoner: number;\n    /**\n     * @generated from protobuf field: int32 impending_doom = 26;\n     */\n    impendingDoom: number;\n    /**\n     * @generated from protobuf field: bool demonic_empowerment = 27;\n     */\n    demonicEmpowerment: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_health_funnel = 28;\n     */\n    improvedHealthFunnel: number;\n    /**\n     * @generated from protobuf field: int32 molten_core = 29;\n     */\n    moltenCore: number;\n    /**\n     * @generated from protobuf field: bool hand_of_guldan = 30;\n     */\n    handOfGuldan: boolean;\n    /**\n     * @generated from protobuf field: int32 aura_of_foreboding = 31;\n     */\n    auraOfForeboding: number;\n    /**\n     * @generated from protobuf field: int32 ancient_grimoire = 32;\n     */\n    ancientGrimoire: number;\n    /**\n     * @generated from protobuf field: bool inferno = 33;\n     */\n    inferno: boolean;\n    /**\n     * @generated from protobuf field: int32 decimation = 34;\n     */\n    decimation: number;\n    /**\n     * @generated from protobuf field: int32 cremation = 35;\n     */\n    cremation: number;\n    /**\n     * @generated from protobuf field: bool demonic_pact = 36;\n     */\n    demonicPact: boolean;\n    /**\n     * @generated from protobuf field: bool metamorphosis = 37;\n     */\n    metamorphosis: boolean;\n    /**\n     * Destruction\n     *\n     * @generated from protobuf field: int32 bane = 38;\n     */\n    bane: number;\n    /**\n     * @generated from protobuf field: int32 shadow_and_flame = 39;\n     */\n    shadowAndFlame: number;\n    /**\n     * @generated from protobuf field: int32 improved_immolate = 40;\n     */\n    improvedImmolate: number;\n    /**\n     * @generated from protobuf field: int32 aftermath = 41;\n     */\n    aftermath: number;\n    /**\n     * @generated from protobuf field: int32 emberstorm = 42;\n     */\n    emberstorm: number;\n    /**\n     * @generated from protobuf field: int32 improved_searing_pain = 43;\n     */\n    improvedSearingPain: number;\n    /**\n     * @generated from protobuf field: int32 improved_soul_fire = 44;\n     */\n    improvedSoulFire: number;\n    /**\n     * @generated from protobuf field: int32 backdraft = 45;\n     */\n    backdraft: number;\n    /**\n     * @generated from protobuf field: bool shadowburn = 46;\n     */\n    shadowburn: boolean;\n    /**\n     * @generated from protobuf field: int32 burning_embers = 47;\n     */\n    burningEmbers: number;\n    /**\n     * @generated from protobuf field: int32 soul_leech = 48;\n     */\n    soulLeech: number;\n    /**\n     * @generated from protobuf field: int32 backlash = 49;\n     */\n    backlash: number;\n    /**\n     * @generated from protobuf field: bool nether_ward = 50;\n     */\n    netherWard: boolean;\n    /**\n     * @generated from protobuf field: int32 fire_and_brimstone = 51;\n     */\n    fireAndBrimstone: number;\n    /**\n     * @generated from protobuf field: bool shadowfury = 52;\n     */\n    shadowfury: boolean;\n    /**\n     * @generated from protobuf field: int32 nether_protection = 53;\n     */\n    netherProtection: number;\n    /**\n     * @generated from protobuf field: int32 empowered_imp = 54;\n     */\n    empoweredImp: number;\n    /**\n     * @generated from protobuf field: bool bane_of_havoc = 55;\n     */\n    baneOfHavoc: boolean;\n    /**\n     * @generated from protobuf field: bool chaos_bolt = 56;\n     */\n    chaosBolt: boolean;\n}\n/**\n * @generated from protobuf message proto.WarlockOptions\n */\nexport interface WarlockOptions {\n    /**\n     * @generated from protobuf field: proto.WarlockOptions.Summon summon = 1;\n     */\n    summon: WarlockOptions_Summon;\n    /**\n     * @generated from protobuf field: bool detonate_seed = 2;\n     */\n    detonateSeed: boolean;\n}\n/**\n * @generated from protobuf enum proto.WarlockOptions.Summon\n */\nexport enum WarlockOptions_Summon {\n    /**\n     * @generated from protobuf enum value: NoSummon = 0;\n     */\n    NoSummon = 0,\n    /**\n     * @generated from protobuf enum value: Imp = 1;\n     */\n    Imp = 1,\n    /**\n     * @generated from protobuf enum value: Voidwalker = 2;\n     */\n    Voidwalker = 2,\n    /**\n     * @generated from protobuf enum value: Succubus = 3;\n     */\n    Succubus = 3,\n    /**\n     * @generated from protobuf enum value: Felhunter = 4;\n     */\n    Felhunter = 4,\n    /**\n     * @generated from protobuf enum value: Felguard = 5;\n     */\n    Felguard = 5\n}\n/**\n * @generated from protobuf message proto.AfflictionWarlock\n */\nexport interface AfflictionWarlock {\n    /**\n     * @generated from protobuf field: proto.AfflictionWarlock.Options options = 1;\n     */\n    options?: AfflictionWarlock_Options;\n}\n/**\n * @generated from protobuf message proto.AfflictionWarlock.Rotation\n */\nexport interface AfflictionWarlock_Rotation {\n}\n/**\n * @generated from protobuf message proto.AfflictionWarlock.Options\n */\nexport interface AfflictionWarlock_Options {\n    /**\n     * @generated from protobuf field: proto.WarlockOptions class_options = 1;\n     */\n    classOptions?: WarlockOptions;\n}\n/**\n * @generated from protobuf message proto.DemonologyWarlock\n */\nexport interface DemonologyWarlock {\n    /**\n     * @generated from protobuf field: proto.DemonologyWarlock.Options options = 1;\n     */\n    options?: DemonologyWarlock_Options;\n}\n/**\n * @generated from protobuf message proto.DemonologyWarlock.Rotation\n */\nexport interface DemonologyWarlock_Rotation {\n}\n/**\n * @generated from protobuf message proto.DemonologyWarlock.Options\n */\nexport interface DemonologyWarlock_Options {\n    /**\n     * @generated from protobuf field: proto.WarlockOptions class_options = 1;\n     */\n    classOptions?: WarlockOptions;\n}\n/**\n * @generated from protobuf message proto.DestructionWarlock\n */\nexport interface DestructionWarlock {\n    /**\n     * @generated from protobuf field: proto.DestructionWarlock.Options options = 1;\n     */\n    options?: DestructionWarlock_Options;\n}\n/**\n * @generated from protobuf message proto.DestructionWarlock.Rotation\n */\nexport interface DestructionWarlock_Rotation {\n}\n/**\n * @generated from protobuf message proto.DestructionWarlock.Options\n */\nexport interface DestructionWarlock_Options {\n    /**\n     * @generated from protobuf field: proto.WarlockOptions class_options = 1;\n     */\n    classOptions?: WarlockOptions;\n}\n/**\n * @generated from protobuf enum proto.WarlockPrimeGlyph\n */\nexport enum WarlockPrimeGlyph {\n    /**\n     * @generated from protobuf enum value: WarlockPrimeGlyphNone = 0;\n     */\n    WarlockPrimeGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBaneOfAgony = 42456;\n     */\n    GlyphOfBaneOfAgony = 42456,\n    /**\n     * @generated from protobuf enum value: GlyphOfChaosBolt = 45781;\n     */\n    GlyphOfChaosBolt = 45781,\n    /**\n     * @generated from protobuf enum value: GlyphOfConflagrate = 42454;\n     */\n    GlyphOfConflagrate = 42454,\n    /**\n     * @generated from protobuf enum value: GlyphOfCorruption = 42455;\n     */\n    GlyphOfCorruption = 42455,\n    /**\n     * @generated from protobuf enum value: GlyphOfFelguard = 42459;\n     */\n    GlyphOfFelguard = 42459,\n    /**\n     * @generated from protobuf enum value: GlyphOfHaunt = 45779;\n     */\n    GlyphOfHaunt = 45779,\n    /**\n     * @generated from protobuf enum value: GlyphOfImmolate = 42464;\n     */\n    GlyphOfImmolate = 42464,\n    /**\n     * @generated from protobuf enum value: GlyphOfImp = 42465;\n     */\n    GlyphOfImp = 42465,\n    /**\n     * @generated from protobuf enum value: GlyphOfIncinerate = 42453;\n     */\n    GlyphOfIncinerate = 42453,\n    /**\n     * @generated from protobuf enum value: GlyphOfLashOfPain = 50077;\n     */\n    GlyphOfLashOfPain = 50077,\n    /**\n     * @generated from protobuf enum value: GlyphOfMetamorphosis = 45780;\n     */\n    GlyphOfMetamorphosis = 45780,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowburn = 42468;\n     */\n    GlyphOfShadowburn = 42468,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnstableAffliction = 42472;\n     */\n    GlyphOfUnstableAffliction = 42472\n}\n/**\n * @generated from protobuf enum proto.WarlockMajorGlyph\n */\nexport enum WarlockMajorGlyph {\n    /**\n     * @generated from protobuf enum value: WarlockMajorGlyphNone = 0;\n     */\n    WarlockMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathCoilWl = 42457;\n     */\n    GlyphOfDeathCoilWl = 42457,\n    /**\n     * @generated from protobuf enum value: GlyphOfDemonicCircle = 45782;\n     */\n    GlyphOfDemonicCircle = 45782,\n    /**\n     * @generated from protobuf enum value: GlyphOfFear = 42458;\n     */\n    GlyphOfFear = 42458,\n    /**\n     * @generated from protobuf enum value: GlyphOfFelhunter = 42460;\n     */\n    GlyphOfFelhunter = 42460,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealthstone = 42462;\n     */\n    GlyphOfHealthstone = 42462,\n    /**\n     * @generated from protobuf enum value: GlyphOfHowlOfTerror = 42463;\n     */\n    GlyphOfHowlOfTerror = 42463,\n    /**\n     * @generated from protobuf enum value: GlyphOfLifeTap = 45785;\n     */\n    GlyphOfLifeTap = 45785,\n    /**\n     * @generated from protobuf enum value: GlyphOfSeduction = 42471;\n     */\n    GlyphOfSeduction = 42471,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowBolt = 42467;\n     */\n    GlyphOfShadowBolt = 42467,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowflame = 45783;\n     */\n    GlyphOfShadowflame = 45783,\n    /**\n     * @generated from protobuf enum value: GlyphOfSoulLink = 45789;\n     */\n    GlyphOfSoulLink = 45789,\n    /**\n     * @generated from protobuf enum value: GlyphOfSoulSwap = 42466;\n     */\n    GlyphOfSoulSwap = 42466,\n    /**\n     * @generated from protobuf enum value: GlyphOfSoulstone = 42470;\n     */\n    GlyphOfSoulstone = 42470,\n    /**\n     * @generated from protobuf enum value: GlyphOfVoidwalker = 42473;\n     */\n    GlyphOfVoidwalker = 42473\n}\n/**\n * @generated from protobuf enum proto.WarlockMinorGlyph\n */\nexport enum WarlockMinorGlyph {\n    /**\n     * @generated from protobuf enum value: WarlockMinorGlyphNone = 0;\n     */\n    WarlockMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfCurseOfExhaustion = 43392;\n     */\n    GlyphOfCurseOfExhaustion = 43392,\n    /**\n     * @generated from protobuf enum value: GlyphOfDrainSoul = 43390;\n     */\n    GlyphOfDrainSoul = 43390,\n    /**\n     * @generated from protobuf enum value: GlyphOfEyeOfKilrogg = 43391;\n     */\n    GlyphOfEyeOfKilrogg = 43391,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealthFunnel = 42461;\n     */\n    GlyphOfHealthFunnel = 42461,\n    /**\n     * @generated from protobuf enum value: GlyphOfRitualOfSouls = 43394;\n     */\n    GlyphOfRitualOfSouls = 43394,\n    /**\n     * @generated from protobuf enum value: GlyphOfSubjugateDemon = 43393;\n     */\n    GlyphOfSubjugateDemon = 43393,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnendingBreath = 43389;\n     */\n    GlyphOfUnendingBreath = 43389\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass WarlockTalents$Type extends MessageType<WarlockTalents> {\n    constructor() {\n        super(\"proto.WarlockTalents\", [\n            { no: 1, name: \"doom_and_gloom\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"improved_life_tap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"improved_corruption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"jinx\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"soul_siphon\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"siphon_life\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"curse_of_exhaustion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"improved_fear\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"eradication\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"improved_howl_of_terror\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"soul_swap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"shadow_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"deaths_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"nightfall\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"soulburn_seed_of_corruption\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"everlasting_affliction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"pandemic\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"haunt\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"demonic_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"dark_arts\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"fel_synergy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"demonic_rebirth\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"mana_feed\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"demonic_aegis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"master_summoner\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"impending_doom\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"demonic_empowerment\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 28, name: \"improved_health_funnel\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"molten_core\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"hand_of_guldan\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 31, name: \"aura_of_foreboding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"ancient_grimoire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"inferno\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"decimation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"cremation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"demonic_pact\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"metamorphosis\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 38, name: \"bane\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"shadow_and_flame\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"improved_immolate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"aftermath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"emberstorm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"improved_searing_pain\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"improved_soul_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"backdraft\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"shadowburn\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 47, name: \"burning_embers\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"soul_leech\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"backlash\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"nether_ward\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"fire_and_brimstone\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"shadowfury\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"nether_protection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"empowered_imp\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"bane_of_havoc\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"chaos_bolt\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<WarlockTalents>): WarlockTalents {\n        const message = { doomAndGloom: 0, improvedLifeTap: 0, improvedCorruption: 0, jinx: 0, soulSiphon: 0, siphonLife: 0, curseOfExhaustion: false, improvedFear: 0, eradication: 0, improvedHowlOfTerror: 0, soulSwap: false, shadowEmbrace: 0, deathsEmbrace: 0, nightfall: 0, soulburnSeedOfCorruption: false, everlastingAffliction: 0, pandemic: 0, haunt: false, demonicEmbrace: 0, darkArts: 0, felSynergy: 0, demonicRebirth: 0, manaFeed: 0, demonicAegis: 0, masterSummoner: 0, impendingDoom: 0, demonicEmpowerment: false, improvedHealthFunnel: 0, moltenCore: 0, handOfGuldan: false, auraOfForeboding: 0, ancientGrimoire: 0, inferno: false, decimation: 0, cremation: 0, demonicPact: false, metamorphosis: false, bane: 0, shadowAndFlame: 0, improvedImmolate: 0, aftermath: 0, emberstorm: 0, improvedSearingPain: 0, improvedSoulFire: 0, backdraft: 0, shadowburn: false, burningEmbers: 0, soulLeech: 0, backlash: 0, netherWard: false, fireAndBrimstone: 0, shadowfury: false, netherProtection: 0, empoweredImp: 0, baneOfHavoc: false, chaosBolt: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<WarlockTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarlockTalents): WarlockTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 doom_and_gloom */ 1:\n                    message.doomAndGloom = reader.int32();\n                    break;\n                case /* int32 improved_life_tap */ 2:\n                    message.improvedLifeTap = reader.int32();\n                    break;\n                case /* int32 improved_corruption */ 3:\n                    message.improvedCorruption = reader.int32();\n                    break;\n                case /* int32 jinx */ 4:\n                    message.jinx = reader.int32();\n                    break;\n                case /* int32 soul_siphon */ 5:\n                    message.soulSiphon = reader.int32();\n                    break;\n                case /* int32 siphon_life */ 6:\n                    message.siphonLife = reader.int32();\n                    break;\n                case /* bool curse_of_exhaustion */ 7:\n                    message.curseOfExhaustion = reader.bool();\n                    break;\n                case /* int32 improved_fear */ 8:\n                    message.improvedFear = reader.int32();\n                    break;\n                case /* int32 eradication */ 9:\n                    message.eradication = reader.int32();\n                    break;\n                case /* int32 improved_howl_of_terror */ 10:\n                    message.improvedHowlOfTerror = reader.int32();\n                    break;\n                case /* bool soul_swap */ 11:\n                    message.soulSwap = reader.bool();\n                    break;\n                case /* int32 shadow_embrace */ 12:\n                    message.shadowEmbrace = reader.int32();\n                    break;\n                case /* int32 deaths_embrace */ 13:\n                    message.deathsEmbrace = reader.int32();\n                    break;\n                case /* int32 nightfall */ 14:\n                    message.nightfall = reader.int32();\n                    break;\n                case /* bool soulburn_seed_of_corruption */ 15:\n                    message.soulburnSeedOfCorruption = reader.bool();\n                    break;\n                case /* int32 everlasting_affliction */ 16:\n                    message.everlastingAffliction = reader.int32();\n                    break;\n                case /* int32 pandemic */ 17:\n                    message.pandemic = reader.int32();\n                    break;\n                case /* bool haunt */ 18:\n                    message.haunt = reader.bool();\n                    break;\n                case /* int32 demonic_embrace */ 19:\n                    message.demonicEmbrace = reader.int32();\n                    break;\n                case /* int32 dark_arts */ 20:\n                    message.darkArts = reader.int32();\n                    break;\n                case /* int32 fel_synergy */ 21:\n                    message.felSynergy = reader.int32();\n                    break;\n                case /* int32 demonic_rebirth */ 22:\n                    message.demonicRebirth = reader.int32();\n                    break;\n                case /* int32 mana_feed */ 23:\n                    message.manaFeed = reader.int32();\n                    break;\n                case /* int32 demonic_aegis */ 24:\n                    message.demonicAegis = reader.int32();\n                    break;\n                case /* int32 master_summoner */ 25:\n                    message.masterSummoner = reader.int32();\n                    break;\n                case /* int32 impending_doom */ 26:\n                    message.impendingDoom = reader.int32();\n                    break;\n                case /* bool demonic_empowerment */ 27:\n                    message.demonicEmpowerment = reader.bool();\n                    break;\n                case /* int32 improved_health_funnel */ 28:\n                    message.improvedHealthFunnel = reader.int32();\n                    break;\n                case /* int32 molten_core */ 29:\n                    message.moltenCore = reader.int32();\n                    break;\n                case /* bool hand_of_guldan */ 30:\n                    message.handOfGuldan = reader.bool();\n                    break;\n                case /* int32 aura_of_foreboding */ 31:\n                    message.auraOfForeboding = reader.int32();\n                    break;\n                case /* int32 ancient_grimoire */ 32:\n                    message.ancientGrimoire = reader.int32();\n                    break;\n                case /* bool inferno */ 33:\n                    message.inferno = reader.bool();\n                    break;\n                case /* int32 decimation */ 34:\n                    message.decimation = reader.int32();\n                    break;\n                case /* int32 cremation */ 35:\n                    message.cremation = reader.int32();\n                    break;\n                case /* bool demonic_pact */ 36:\n                    message.demonicPact = reader.bool();\n                    break;\n                case /* bool metamorphosis */ 37:\n                    message.metamorphosis = reader.bool();\n                    break;\n                case /* int32 bane */ 38:\n                    message.bane = reader.int32();\n                    break;\n                case /* int32 shadow_and_flame */ 39:\n                    message.shadowAndFlame = reader.int32();\n                    break;\n                case /* int32 improved_immolate */ 40:\n                    message.improvedImmolate = reader.int32();\n                    break;\n                case /* int32 aftermath */ 41:\n                    message.aftermath = reader.int32();\n                    break;\n                case /* int32 emberstorm */ 42:\n                    message.emberstorm = reader.int32();\n                    break;\n                case /* int32 improved_searing_pain */ 43:\n                    message.improvedSearingPain = reader.int32();\n                    break;\n                case /* int32 improved_soul_fire */ 44:\n                    message.improvedSoulFire = reader.int32();\n                    break;\n                case /* int32 backdraft */ 45:\n                    message.backdraft = reader.int32();\n                    break;\n                case /* bool shadowburn */ 46:\n                    message.shadowburn = reader.bool();\n                    break;\n                case /* int32 burning_embers */ 47:\n                    message.burningEmbers = reader.int32();\n                    break;\n                case /* int32 soul_leech */ 48:\n                    message.soulLeech = reader.int32();\n                    break;\n                case /* int32 backlash */ 49:\n                    message.backlash = reader.int32();\n                    break;\n                case /* bool nether_ward */ 50:\n                    message.netherWard = reader.bool();\n                    break;\n                case /* int32 fire_and_brimstone */ 51:\n                    message.fireAndBrimstone = reader.int32();\n                    break;\n                case /* bool shadowfury */ 52:\n                    message.shadowfury = reader.bool();\n                    break;\n                case /* int32 nether_protection */ 53:\n                    message.netherProtection = reader.int32();\n                    break;\n                case /* int32 empowered_imp */ 54:\n                    message.empoweredImp = reader.int32();\n                    break;\n                case /* bool bane_of_havoc */ 55:\n                    message.baneOfHavoc = reader.bool();\n                    break;\n                case /* bool chaos_bolt */ 56:\n                    message.chaosBolt = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: WarlockTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 doom_and_gloom = 1; */\n        if (message.doomAndGloom !== 0)\n            writer.tag(1, WireType.Varint).int32(message.doomAndGloom);\n        /* int32 improved_life_tap = 2; */\n        if (message.improvedLifeTap !== 0)\n            writer.tag(2, WireType.Varint).int32(message.improvedLifeTap);\n        /* int32 improved_corruption = 3; */\n        if (message.improvedCorruption !== 0)\n            writer.tag(3, WireType.Varint).int32(message.improvedCorruption);\n        /* int32 jinx = 4; */\n        if (message.jinx !== 0)\n            writer.tag(4, WireType.Varint).int32(message.jinx);\n        /* int32 soul_siphon = 5; */\n        if (message.soulSiphon !== 0)\n            writer.tag(5, WireType.Varint).int32(message.soulSiphon);\n        /* int32 siphon_life = 6; */\n        if (message.siphonLife !== 0)\n            writer.tag(6, WireType.Varint).int32(message.siphonLife);\n        /* bool curse_of_exhaustion = 7; */\n        if (message.curseOfExhaustion !== false)\n            writer.tag(7, WireType.Varint).bool(message.curseOfExhaustion);\n        /* int32 improved_fear = 8; */\n        if (message.improvedFear !== 0)\n            writer.tag(8, WireType.Varint).int32(message.improvedFear);\n        /* int32 eradication = 9; */\n        if (message.eradication !== 0)\n            writer.tag(9, WireType.Varint).int32(message.eradication);\n        /* int32 improved_howl_of_terror = 10; */\n        if (message.improvedHowlOfTerror !== 0)\n            writer.tag(10, WireType.Varint).int32(message.improvedHowlOfTerror);\n        /* bool soul_swap = 11; */\n        if (message.soulSwap !== false)\n            writer.tag(11, WireType.Varint).bool(message.soulSwap);\n        /* int32 shadow_embrace = 12; */\n        if (message.shadowEmbrace !== 0)\n            writer.tag(12, WireType.Varint).int32(message.shadowEmbrace);\n        /* int32 deaths_embrace = 13; */\n        if (message.deathsEmbrace !== 0)\n            writer.tag(13, WireType.Varint).int32(message.deathsEmbrace);\n        /* int32 nightfall = 14; */\n        if (message.nightfall !== 0)\n            writer.tag(14, WireType.Varint).int32(message.nightfall);\n        /* bool soulburn_seed_of_corruption = 15; */\n        if (message.soulburnSeedOfCorruption !== false)\n            writer.tag(15, WireType.Varint).bool(message.soulburnSeedOfCorruption);\n        /* int32 everlasting_affliction = 16; */\n        if (message.everlastingAffliction !== 0)\n            writer.tag(16, WireType.Varint).int32(message.everlastingAffliction);\n        /* int32 pandemic = 17; */\n        if (message.pandemic !== 0)\n            writer.tag(17, WireType.Varint).int32(message.pandemic);\n        /* bool haunt = 18; */\n        if (message.haunt !== false)\n            writer.tag(18, WireType.Varint).bool(message.haunt);\n        /* int32 demonic_embrace = 19; */\n        if (message.demonicEmbrace !== 0)\n            writer.tag(19, WireType.Varint).int32(message.demonicEmbrace);\n        /* int32 dark_arts = 20; */\n        if (message.darkArts !== 0)\n            writer.tag(20, WireType.Varint).int32(message.darkArts);\n        /* int32 fel_synergy = 21; */\n        if (message.felSynergy !== 0)\n            writer.tag(21, WireType.Varint).int32(message.felSynergy);\n        /* int32 demonic_rebirth = 22; */\n        if (message.demonicRebirth !== 0)\n            writer.tag(22, WireType.Varint).int32(message.demonicRebirth);\n        /* int32 mana_feed = 23; */\n        if (message.manaFeed !== 0)\n            writer.tag(23, WireType.Varint).int32(message.manaFeed);\n        /* int32 demonic_aegis = 24; */\n        if (message.demonicAegis !== 0)\n            writer.tag(24, WireType.Varint).int32(message.demonicAegis);\n        /* int32 master_summoner = 25; */\n        if (message.masterSummoner !== 0)\n            writer.tag(25, WireType.Varint).int32(message.masterSummoner);\n        /* int32 impending_doom = 26; */\n        if (message.impendingDoom !== 0)\n            writer.tag(26, WireType.Varint).int32(message.impendingDoom);\n        /* bool demonic_empowerment = 27; */\n        if (message.demonicEmpowerment !== false)\n            writer.tag(27, WireType.Varint).bool(message.demonicEmpowerment);\n        /* int32 improved_health_funnel = 28; */\n        if (message.improvedHealthFunnel !== 0)\n            writer.tag(28, WireType.Varint).int32(message.improvedHealthFunnel);\n        /* int32 molten_core = 29; */\n        if (message.moltenCore !== 0)\n            writer.tag(29, WireType.Varint).int32(message.moltenCore);\n        /* bool hand_of_guldan = 30; */\n        if (message.handOfGuldan !== false)\n            writer.tag(30, WireType.Varint).bool(message.handOfGuldan);\n        /* int32 aura_of_foreboding = 31; */\n        if (message.auraOfForeboding !== 0)\n            writer.tag(31, WireType.Varint).int32(message.auraOfForeboding);\n        /* int32 ancient_grimoire = 32; */\n        if (message.ancientGrimoire !== 0)\n            writer.tag(32, WireType.Varint).int32(message.ancientGrimoire);\n        /* bool inferno = 33; */\n        if (message.inferno !== false)\n            writer.tag(33, WireType.Varint).bool(message.inferno);\n        /* int32 decimation = 34; */\n        if (message.decimation !== 0)\n            writer.tag(34, WireType.Varint).int32(message.decimation);\n        /* int32 cremation = 35; */\n        if (message.cremation !== 0)\n            writer.tag(35, WireType.Varint).int32(message.cremation);\n        /* bool demonic_pact = 36; */\n        if (message.demonicPact !== false)\n            writer.tag(36, WireType.Varint).bool(message.demonicPact);\n        /* bool metamorphosis = 37; */\n        if (message.metamorphosis !== false)\n            writer.tag(37, WireType.Varint).bool(message.metamorphosis);\n        /* int32 bane = 38; */\n        if (message.bane !== 0)\n            writer.tag(38, WireType.Varint).int32(message.bane);\n        /* int32 shadow_and_flame = 39; */\n        if (message.shadowAndFlame !== 0)\n            writer.tag(39, WireType.Varint).int32(message.shadowAndFlame);\n        /* int32 improved_immolate = 40; */\n        if (message.improvedImmolate !== 0)\n            writer.tag(40, WireType.Varint).int32(message.improvedImmolate);\n        /* int32 aftermath = 41; */\n        if (message.aftermath !== 0)\n            writer.tag(41, WireType.Varint).int32(message.aftermath);\n        /* int32 emberstorm = 42; */\n        if (message.emberstorm !== 0)\n            writer.tag(42, WireType.Varint).int32(message.emberstorm);\n        /* int32 improved_searing_pain = 43; */\n        if (message.improvedSearingPain !== 0)\n            writer.tag(43, WireType.Varint).int32(message.improvedSearingPain);\n        /* int32 improved_soul_fire = 44; */\n        if (message.improvedSoulFire !== 0)\n            writer.tag(44, WireType.Varint).int32(message.improvedSoulFire);\n        /* int32 backdraft = 45; */\n        if (message.backdraft !== 0)\n            writer.tag(45, WireType.Varint).int32(message.backdraft);\n        /* bool shadowburn = 46; */\n        if (message.shadowburn !== false)\n            writer.tag(46, WireType.Varint).bool(message.shadowburn);\n        /* int32 burning_embers = 47; */\n        if (message.burningEmbers !== 0)\n            writer.tag(47, WireType.Varint).int32(message.burningEmbers);\n        /* int32 soul_leech = 48; */\n        if (message.soulLeech !== 0)\n            writer.tag(48, WireType.Varint).int32(message.soulLeech);\n        /* int32 backlash = 49; */\n        if (message.backlash !== 0)\n            writer.tag(49, WireType.Varint).int32(message.backlash);\n        /* bool nether_ward = 50; */\n        if (message.netherWard !== false)\n            writer.tag(50, WireType.Varint).bool(message.netherWard);\n        /* int32 fire_and_brimstone = 51; */\n        if (message.fireAndBrimstone !== 0)\n            writer.tag(51, WireType.Varint).int32(message.fireAndBrimstone);\n        /* bool shadowfury = 52; */\n        if (message.shadowfury !== false)\n            writer.tag(52, WireType.Varint).bool(message.shadowfury);\n        /* int32 nether_protection = 53; */\n        if (message.netherProtection !== 0)\n            writer.tag(53, WireType.Varint).int32(message.netherProtection);\n        /* int32 empowered_imp = 54; */\n        if (message.empoweredImp !== 0)\n            writer.tag(54, WireType.Varint).int32(message.empoweredImp);\n        /* bool bane_of_havoc = 55; */\n        if (message.baneOfHavoc !== false)\n            writer.tag(55, WireType.Varint).bool(message.baneOfHavoc);\n        /* bool chaos_bolt = 56; */\n        if (message.chaosBolt !== false)\n            writer.tag(56, WireType.Varint).bool(message.chaosBolt);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.WarlockTalents\n */\nexport const WarlockTalents = new WarlockTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass WarlockOptions$Type extends MessageType<WarlockOptions> {\n    constructor() {\n        super(\"proto.WarlockOptions\", [\n            { no: 1, name: \"summon\", kind: \"enum\", T: () => [\"proto.WarlockOptions.Summon\", WarlockOptions_Summon] },\n            { no: 2, name: \"detonate_seed\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<WarlockOptions>): WarlockOptions {\n        const message = { summon: 0, detonateSeed: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<WarlockOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarlockOptions): WarlockOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.WarlockOptions.Summon summon */ 1:\n                    message.summon = reader.int32();\n                    break;\n                case /* bool detonate_seed */ 2:\n                    message.detonateSeed = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: WarlockOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.WarlockOptions.Summon summon = 1; */\n        if (message.summon !== 0)\n            writer.tag(1, WireType.Varint).int32(message.summon);\n        /* bool detonate_seed = 2; */\n        if (message.detonateSeed !== false)\n            writer.tag(2, WireType.Varint).bool(message.detonateSeed);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.WarlockOptions\n */\nexport const WarlockOptions = new WarlockOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AfflictionWarlock$Type extends MessageType<AfflictionWarlock> {\n    constructor() {\n        super(\"proto.AfflictionWarlock\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => AfflictionWarlock_Options }\n        ]);\n    }\n    create(value?: PartialMessage<AfflictionWarlock>): AfflictionWarlock {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AfflictionWarlock>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AfflictionWarlock): AfflictionWarlock {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.AfflictionWarlock.Options options */ 1:\n                    message.options = AfflictionWarlock_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AfflictionWarlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.AfflictionWarlock.Options options = 1; */\n        if (message.options)\n            AfflictionWarlock_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AfflictionWarlock\n */\nexport const AfflictionWarlock = new AfflictionWarlock$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AfflictionWarlock_Rotation$Type extends MessageType<AfflictionWarlock_Rotation> {\n    constructor() {\n        super(\"proto.AfflictionWarlock.Rotation\", []);\n    }\n    create(value?: PartialMessage<AfflictionWarlock_Rotation>): AfflictionWarlock_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AfflictionWarlock_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AfflictionWarlock_Rotation): AfflictionWarlock_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: AfflictionWarlock_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AfflictionWarlock.Rotation\n */\nexport const AfflictionWarlock_Rotation = new AfflictionWarlock_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AfflictionWarlock_Options$Type extends MessageType<AfflictionWarlock_Options> {\n    constructor() {\n        super(\"proto.AfflictionWarlock.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => WarlockOptions }\n        ]);\n    }\n    create(value?: PartialMessage<AfflictionWarlock_Options>): AfflictionWarlock_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AfflictionWarlock_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AfflictionWarlock_Options): AfflictionWarlock_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.WarlockOptions class_options */ 1:\n                    message.classOptions = WarlockOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AfflictionWarlock_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.WarlockOptions class_options = 1; */\n        if (message.classOptions)\n            WarlockOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AfflictionWarlock.Options\n */\nexport const AfflictionWarlock_Options = new AfflictionWarlock_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DemonologyWarlock$Type extends MessageType<DemonologyWarlock> {\n    constructor() {\n        super(\"proto.DemonologyWarlock\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => DemonologyWarlock_Options }\n        ]);\n    }\n    create(value?: PartialMessage<DemonologyWarlock>): DemonologyWarlock {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DemonologyWarlock>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DemonologyWarlock): DemonologyWarlock {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DemonologyWarlock.Options options */ 1:\n                    message.options = DemonologyWarlock_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DemonologyWarlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DemonologyWarlock.Options options = 1; */\n        if (message.options)\n            DemonologyWarlock_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DemonologyWarlock\n */\nexport const DemonologyWarlock = new DemonologyWarlock$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DemonologyWarlock_Rotation$Type extends MessageType<DemonologyWarlock_Rotation> {\n    constructor() {\n        super(\"proto.DemonologyWarlock.Rotation\", []);\n    }\n    create(value?: PartialMessage<DemonologyWarlock_Rotation>): DemonologyWarlock_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DemonologyWarlock_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DemonologyWarlock_Rotation): DemonologyWarlock_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: DemonologyWarlock_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DemonologyWarlock.Rotation\n */\nexport const DemonologyWarlock_Rotation = new DemonologyWarlock_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DemonologyWarlock_Options$Type extends MessageType<DemonologyWarlock_Options> {\n    constructor() {\n        super(\"proto.DemonologyWarlock.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => WarlockOptions }\n        ]);\n    }\n    create(value?: PartialMessage<DemonologyWarlock_Options>): DemonologyWarlock_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DemonologyWarlock_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DemonologyWarlock_Options): DemonologyWarlock_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.WarlockOptions class_options */ 1:\n                    message.classOptions = WarlockOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DemonologyWarlock_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.WarlockOptions class_options = 1; */\n        if (message.classOptions)\n            WarlockOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DemonologyWarlock.Options\n */\nexport const DemonologyWarlock_Options = new DemonologyWarlock_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DestructionWarlock$Type extends MessageType<DestructionWarlock> {\n    constructor() {\n        super(\"proto.DestructionWarlock\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => DestructionWarlock_Options }\n        ]);\n    }\n    create(value?: PartialMessage<DestructionWarlock>): DestructionWarlock {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DestructionWarlock>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DestructionWarlock): DestructionWarlock {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DestructionWarlock.Options options */ 1:\n                    message.options = DestructionWarlock_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DestructionWarlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DestructionWarlock.Options options = 1; */\n        if (message.options)\n            DestructionWarlock_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DestructionWarlock\n */\nexport const DestructionWarlock = new DestructionWarlock$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DestructionWarlock_Rotation$Type extends MessageType<DestructionWarlock_Rotation> {\n    constructor() {\n        super(\"proto.DestructionWarlock.Rotation\", []);\n    }\n    create(value?: PartialMessage<DestructionWarlock_Rotation>): DestructionWarlock_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DestructionWarlock_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DestructionWarlock_Rotation): DestructionWarlock_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: DestructionWarlock_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DestructionWarlock.Rotation\n */\nexport const DestructionWarlock_Rotation = new DestructionWarlock_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DestructionWarlock_Options$Type extends MessageType<DestructionWarlock_Options> {\n    constructor() {\n        super(\"proto.DestructionWarlock.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => WarlockOptions }\n        ]);\n    }\n    create(value?: PartialMessage<DestructionWarlock_Options>): DestructionWarlock_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DestructionWarlock_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DestructionWarlock_Options): DestructionWarlock_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.WarlockOptions class_options */ 1:\n                    message.classOptions = WarlockOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DestructionWarlock_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.WarlockOptions class_options = 1; */\n        if (message.classOptions)\n            WarlockOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DestructionWarlock.Options\n */\nexport const DestructionWarlock_Options = new DestructionWarlock_Options$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"rogue.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { UnitReference } from \"./common\";\n/**\n * @generated from protobuf message proto.RogueTalents\n */\nexport interface RogueTalents {\n    /**\n     * Assassination\n     *\n     * @generated from protobuf field: int32 deadly_momentum = 1;\n     */\n    deadlyMomentum: number;\n    /**\n     * @generated from protobuf field: int32 coup_de_grace = 2;\n     */\n    coupDeGrace: number;\n    /**\n     * @generated from protobuf field: int32 lethality = 3;\n     */\n    lethality: number;\n    /**\n     * @generated from protobuf field: int32 ruthlessness = 4;\n     */\n    ruthlessness: number;\n    /**\n     * @generated from protobuf field: int32 quickening = 5;\n     */\n    quickening: number;\n    /**\n     * @generated from protobuf field: int32 puncturing_wounds = 6;\n     */\n    puncturingWounds: number;\n    /**\n     * @generated from protobuf field: int32 blackjack = 7;\n     */\n    blackjack: number;\n    /**\n     * @generated from protobuf field: int32 deadly_brew = 8;\n     */\n    deadlyBrew: number;\n    /**\n     * @generated from protobuf field: bool cold_blood = 9;\n     */\n    coldBlood: boolean;\n    /**\n     * @generated from protobuf field: int32 vile_poisons = 10;\n     */\n    vilePoisons: number;\n    /**\n     * @generated from protobuf field: int32 deadened_nerves = 11;\n     */\n    deadenedNerves: number;\n    /**\n     * @generated from protobuf field: int32 seal_fate = 12;\n     */\n    sealFate: number;\n    /**\n     * @generated from protobuf field: int32 murderous_intent = 13;\n     */\n    murderousIntent: number;\n    /**\n     * @generated from protobuf field: bool overkill = 14;\n     */\n    overkill: boolean;\n    /**\n     * @generated from protobuf field: bool master_poisoner = 15;\n     */\n    masterPoisoner: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_expose_armor = 16;\n     */\n    improvedExposeArmor: number;\n    /**\n     * @generated from protobuf field: int32 cut_to_the_chase = 17;\n     */\n    cutToTheChase: number;\n    /**\n     * @generated from protobuf field: int32 venomous_wounds = 18;\n     */\n    venomousWounds: number;\n    /**\n     * @generated from protobuf field: bool vendetta = 19;\n     */\n    vendetta: boolean;\n    /**\n     * Combat\n     *\n     * @generated from protobuf field: int32 improved_recuperate = 20;\n     */\n    improvedRecuperate: number;\n    /**\n     * @generated from protobuf field: int32 improved_sinister_strike = 21;\n     */\n    improvedSinisterStrike: number;\n    /**\n     * @generated from protobuf field: int32 precision = 22;\n     */\n    precision: number;\n    /**\n     * @generated from protobuf field: int32 improved_slice_and_dice = 23;\n     */\n    improvedSliceAndDice: number;\n    /**\n     * @generated from protobuf field: int32 improved_sprint = 24;\n     */\n    improvedSprint: number;\n    /**\n     * @generated from protobuf field: int32 aggression = 25;\n     */\n    aggression: number;\n    /**\n     * @generated from protobuf field: int32 improved_kick = 26;\n     */\n    improvedKick: number;\n    /**\n     * @generated from protobuf field: int32 lightning_reflexes = 27;\n     */\n    lightningReflexes: number;\n    /**\n     * @generated from protobuf field: bool revealing_strike = 28;\n     */\n    revealingStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 reinforced_leather = 29;\n     */\n    reinforcedLeather: number;\n    /**\n     * @generated from protobuf field: int32 improved_gouge = 30;\n     */\n    improvedGouge: number;\n    /**\n     * @generated from protobuf field: int32 combat_potency = 31;\n     */\n    combatPotency: number;\n    /**\n     * @generated from protobuf field: int32 blade_twisting = 32;\n     */\n    bladeTwisting: number;\n    /**\n     * @generated from protobuf field: int32 throwing_specialization = 33;\n     */\n    throwingSpecialization: number;\n    /**\n     * @generated from protobuf field: bool adrenaline_rush = 34;\n     */\n    adrenalineRush: boolean;\n    /**\n     * @generated from protobuf field: int32 savage_combat = 35;\n     */\n    savageCombat: number;\n    /**\n     * @generated from protobuf field: int32 bandits_guile = 36;\n     */\n    banditsGuile: number;\n    /**\n     * @generated from protobuf field: int32 restless_blades = 37;\n     */\n    restlessBlades: number;\n    /**\n     * @generated from protobuf field: bool killing_spree = 38;\n     */\n    killingSpree: boolean;\n    /**\n     * Subtlety\n     *\n     * @generated from protobuf field: int32 nightstalker = 39;\n     */\n    nightstalker: number;\n    /**\n     * @generated from protobuf field: int32 improved_ambush = 40;\n     */\n    improvedAmbush: number;\n    /**\n     * @generated from protobuf field: int32 relentless_strikes = 41;\n     */\n    relentlessStrikes: number;\n    /**\n     * @generated from protobuf field: int32 elusiveness = 42;\n     */\n    elusiveness: number;\n    /**\n     * @generated from protobuf field: int32 waylay = 43;\n     */\n    waylay: number;\n    /**\n     * @generated from protobuf field: int32 opportunity = 44;\n     */\n    opportunity: number;\n    /**\n     * @generated from protobuf field: int32 initiative = 45;\n     */\n    initiative: number;\n    /**\n     * @generated from protobuf field: int32 energetic_recovery = 46;\n     */\n    energeticRecovery: number;\n    /**\n     * @generated from protobuf field: int32 find_weakness = 47;\n     */\n    findWeakness: number;\n    /**\n     * @generated from protobuf field: bool hemorrhage = 48;\n     */\n    hemorrhage: boolean;\n    /**\n     * @generated from protobuf field: int32 honor_among_thieves = 49;\n     */\n    honorAmongThieves: number;\n    /**\n     * @generated from protobuf field: bool premeditation = 50;\n     */\n    premeditation: boolean;\n    /**\n     * @generated from protobuf field: int32 enveloping_shadows = 51;\n     */\n    envelopingShadows: number;\n    /**\n     * @generated from protobuf field: int32 cheat_death = 52;\n     */\n    cheatDeath: number;\n    /**\n     * @generated from protobuf field: bool preparation = 53;\n     */\n    preparation: boolean;\n    /**\n     * @generated from protobuf field: int32 sanguinary_vein = 54;\n     */\n    sanguinaryVein: number;\n    /**\n     * @generated from protobuf field: int32 slaughter_from_the_shadows = 55;\n     */\n    slaughterFromTheShadows: number;\n    /**\n     * @generated from protobuf field: int32 serrated_blades = 56;\n     */\n    serratedBlades: number;\n    /**\n     * @generated from protobuf field: bool shadow_dance = 57;\n     */\n    shadowDance: boolean;\n}\n/**\n * @generated from protobuf message proto.RogueOptions\n */\nexport interface RogueOptions {\n    /**\n     * @generated from protobuf field: proto.UnitReference tricks_of_the_trade_target = 1;\n     */\n    tricksOfTheTradeTarget?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.RogueOptions.PoisonImbue mh_imbue = 2;\n     */\n    mhImbue: RogueOptions_PoisonImbue;\n    /**\n     * @generated from protobuf field: proto.RogueOptions.PoisonImbue oh_imbue = 3;\n     */\n    ohImbue: RogueOptions_PoisonImbue;\n    /**\n     * @generated from protobuf field: proto.RogueOptions.PoisonImbue th_imbue = 4;\n     */\n    thImbue: RogueOptions_PoisonImbue;\n    /**\n     * @generated from protobuf field: int32 starting_overkill_duration = 5;\n     */\n    startingOverkillDuration: number;\n    /**\n     * @generated from protobuf field: bool apply_poisons_manually = 6;\n     */\n    applyPoisonsManually: boolean;\n    /**\n     * @generated from protobuf field: bool assume_bleed_active = 7;\n     */\n    assumeBleedActive: boolean;\n    /**\n     * @generated from protobuf field: float vanish_break_time = 8;\n     */\n    vanishBreakTime: number;\n}\n/**\n * @generated from protobuf enum proto.RogueOptions.PoisonImbue\n */\nexport enum RogueOptions_PoisonImbue {\n    /**\n     * @generated from protobuf enum value: NoPoison = 0;\n     */\n    NoPoison = 0,\n    /**\n     * @generated from protobuf enum value: InstantPoison = 1;\n     */\n    InstantPoison = 1,\n    /**\n     * @generated from protobuf enum value: DeadlyPoison = 2;\n     */\n    DeadlyPoison = 2,\n    /**\n     * @generated from protobuf enum value: WoundPoison = 3;\n     */\n    WoundPoison = 3\n}\n/**\n * @generated from protobuf message proto.AssassinationRogue\n */\nexport interface AssassinationRogue {\n    /**\n     * @generated from protobuf field: proto.AssassinationRogue.Options options = 1;\n     */\n    options?: AssassinationRogue_Options;\n}\n/**\n * @generated from protobuf message proto.AssassinationRogue.Rotation\n */\nexport interface AssassinationRogue_Rotation {\n}\n/**\n * @generated from protobuf message proto.AssassinationRogue.Options\n */\nexport interface AssassinationRogue_Options {\n    /**\n     * @generated from protobuf field: proto.RogueOptions class_options = 1;\n     */\n    classOptions?: RogueOptions;\n}\n/**\n * @generated from protobuf message proto.CombatRogue\n */\nexport interface CombatRogue {\n    /**\n     * @generated from protobuf field: proto.CombatRogue.Options options = 1;\n     */\n    options?: CombatRogue_Options;\n}\n/**\n * @generated from protobuf message proto.CombatRogue.Rotation\n */\nexport interface CombatRogue_Rotation {\n}\n/**\n * @generated from protobuf message proto.CombatRogue.Options\n */\nexport interface CombatRogue_Options {\n    /**\n     * @generated from protobuf field: proto.RogueOptions class_options = 1;\n     */\n    classOptions?: RogueOptions;\n}\n/**\n * @generated from protobuf message proto.SubtletyRogue\n */\nexport interface SubtletyRogue {\n    /**\n     * @generated from protobuf field: proto.SubtletyRogue.Options options = 1;\n     */\n    options?: SubtletyRogue_Options;\n}\n/**\n * @generated from protobuf message proto.SubtletyRogue.Rotation\n */\nexport interface SubtletyRogue_Rotation {\n}\n/**\n * @generated from protobuf message proto.SubtletyRogue.Options\n */\nexport interface SubtletyRogue_Options {\n    /**\n     * @generated from protobuf field: proto.RogueOptions class_options = 1;\n     */\n    classOptions?: RogueOptions;\n    /**\n     * @generated from protobuf field: int32 honor_among_thieves_crit_rate = 6;\n     */\n    honorAmongThievesCritRate: number;\n}\n/**\n * @generated from protobuf enum proto.RoguePrimeGlyph\n */\nexport enum RoguePrimeGlyph {\n    /**\n     * @generated from protobuf enum value: RoguePrimeGlyphNone = 0;\n     */\n    RoguePrimeGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAdrenalineRush = 42954;\n     */\n    GlyphOfAdrenalineRush = 42954,\n    /**\n     * @generated from protobuf enum value: GlyphOfBackstab = 42956;\n     */\n    GlyphOfBackstab = 42956,\n    /**\n     * @generated from protobuf enum value: GlyphOfEviscerate = 42961;\n     */\n    GlyphOfEviscerate = 42961,\n    /**\n     * @generated from protobuf enum value: GlyphOfHemorrhage = 42967;\n     */\n    GlyphOfHemorrhage = 42967,\n    /**\n     * @generated from protobuf enum value: GlyphOfKillingSpree = 45762;\n     */\n    GlyphOfKillingSpree = 45762,\n    /**\n     * @generated from protobuf enum value: GlyphOfMutilate = 45768;\n     */\n    GlyphOfMutilate = 45768,\n    /**\n     * @generated from protobuf enum value: GlyphOfRevealingStrike = 42965;\n     */\n    GlyphOfRevealingStrike = 42965,\n    /**\n     * @generated from protobuf enum value: GlyphOfRupture = 42969;\n     */\n    GlyphOfRupture = 42969,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowDance = 45764;\n     */\n    GlyphOfShadowDance = 45764,\n    /**\n     * @generated from protobuf enum value: GlyphOfSinisterStrike = 42972;\n     */\n    GlyphOfSinisterStrike = 42972,\n    /**\n     * @generated from protobuf enum value: GlyphOfSliceAndDice = 42973;\n     */\n    GlyphOfSliceAndDice = 42973,\n    /**\n     * @generated from protobuf enum value: GlyphOfVendetta = 45761;\n     */\n    GlyphOfVendetta = 45761\n}\n/**\n * @generated from protobuf enum proto.RogueMajorGlyph\n */\nexport enum RogueMajorGlyph {\n    /**\n     * @generated from protobuf enum value: RogueMajorGlyphNone = 0;\n     */\n    RogueMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAmbush = 42955;\n     */\n    GlyphOfAmbush = 42955,\n    /**\n     * @generated from protobuf enum value: GlyphOfBladeFlurry = 42957;\n     */\n    GlyphOfBladeFlurry = 42957,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlind = 64493;\n     */\n    GlyphOfBlind = 64493,\n    /**\n     * @generated from protobuf enum value: GlyphOfCloakOfShadows = 45769;\n     */\n    GlyphOfCloakOfShadows = 45769,\n    /**\n     * @generated from protobuf enum value: GlyphOfCripplingPoison = 42958;\n     */\n    GlyphOfCripplingPoison = 42958,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeadlyThrow = 42959;\n     */\n    GlyphOfDeadlyThrow = 42959,\n    /**\n     * @generated from protobuf enum value: GlyphOfEvasion = 42960;\n     */\n    GlyphOfEvasion = 42960,\n    /**\n     * @generated from protobuf enum value: GlyphOfExposeArmor = 42962;\n     */\n    GlyphOfExposeArmor = 42962,\n    /**\n     * @generated from protobuf enum value: GlyphOfFanOfKnives = 45766;\n     */\n    GlyphOfFanOfKnives = 45766,\n    /**\n     * @generated from protobuf enum value: GlyphOfFeint = 42963;\n     */\n    GlyphOfFeint = 42963,\n    /**\n     * @generated from protobuf enum value: GlyphOfGarrote = 42964;\n     */\n    GlyphOfGarrote = 42964,\n    /**\n     * @generated from protobuf enum value: GlyphOfGouge = 42966;\n     */\n    GlyphOfGouge = 42966,\n    /**\n     * @generated from protobuf enum value: GlyphOfKick = 42971;\n     */\n    GlyphOfKick = 42971,\n    /**\n     * @generated from protobuf enum value: GlyphOfPreparation = 42968;\n     */\n    GlyphOfPreparation = 42968,\n    /**\n     * @generated from protobuf enum value: GlyphOfSap = 42970;\n     */\n    GlyphOfSap = 42970,\n    /**\n     * @generated from protobuf enum value: GlyphOfSprint = 42974;\n     */\n    GlyphOfSprint = 42974,\n    /**\n     * @generated from protobuf enum value: GlyphOfTricksOfTheTrade = 45767;\n     */\n    GlyphOfTricksOfTheTrade = 45767,\n    /**\n     * @generated from protobuf enum value: GlyphOfVanish = 63420;\n     */\n    GlyphOfVanish = 63420\n}\n/**\n * @generated from protobuf enum proto.RogueMinorGlyph\n */\nexport enum RogueMinorGlyph {\n    /**\n     * @generated from protobuf enum value: RogueMinorGlyphNone = 0;\n     */\n    RogueMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlurredSpeed = 43379;\n     */\n    GlyphOfBlurredSpeed = 43379,\n    /**\n     * @generated from protobuf enum value: GlyphOfDistract = 43376;\n     */\n    GlyphOfDistract = 43376,\n    /**\n     * @generated from protobuf enum value: GlyphOfPickLock = 43377;\n     */\n    GlyphOfPickLock = 43377,\n    /**\n     * @generated from protobuf enum value: GlyphOfPickPocket = 43343;\n     */\n    GlyphOfPickPocket = 43343,\n    /**\n     * @generated from protobuf enum value: GlyphOfPoisons = 43380;\n     */\n    GlyphOfPoisons = 43380,\n    /**\n     * @generated from protobuf enum value: GlyphOfSafeFall = 43378;\n     */\n    GlyphOfSafeFall = 43378\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass RogueTalents$Type extends MessageType<RogueTalents> {\n    constructor() {\n        super(\"proto.RogueTalents\", [\n            { no: 1, name: \"deadly_momentum\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"coup_de_grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"lethality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"ruthlessness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"quickening\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"puncturing_wounds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"blackjack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"deadly_brew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"cold_blood\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"vile_poisons\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"deadened_nerves\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"seal_fate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"murderous_intent\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"overkill\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"master_poisoner\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"improved_expose_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"cut_to_the_chase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"venomous_wounds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"vendetta\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"improved_recuperate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"improved_sinister_strike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"improved_slice_and_dice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"improved_sprint\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"aggression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"improved_kick\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"lightning_reflexes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"revealing_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"reinforced_leather\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"improved_gouge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"combat_potency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"blade_twisting\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"throwing_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"adrenaline_rush\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"savage_combat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"bandits_guile\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"restless_blades\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"killing_spree\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"nightstalker\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"improved_ambush\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"relentless_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"elusiveness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"waylay\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"opportunity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"initiative\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"energetic_recovery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"find_weakness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"hemorrhage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 49, name: \"honor_among_thieves\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"premeditation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"enveloping_shadows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"cheat_death\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"preparation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 54, name: \"sanguinary_vein\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"slaughter_from_the_shadows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"serrated_blades\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"shadow_dance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RogueTalents>): RogueTalents {\n        const message = { deadlyMomentum: 0, coupDeGrace: 0, lethality: 0, ruthlessness: 0, quickening: 0, puncturingWounds: 0, blackjack: 0, deadlyBrew: 0, coldBlood: false, vilePoisons: 0, deadenedNerves: 0, sealFate: 0, murderousIntent: 0, overkill: false, masterPoisoner: false, improvedExposeArmor: 0, cutToTheChase: 0, venomousWounds: 0, vendetta: false, improvedRecuperate: 0, improvedSinisterStrike: 0, precision: 0, improvedSliceAndDice: 0, improvedSprint: 0, aggression: 0, improvedKick: 0, lightningReflexes: 0, revealingStrike: false, reinforcedLeather: 0, improvedGouge: 0, combatPotency: 0, bladeTwisting: 0, throwingSpecialization: 0, adrenalineRush: false, savageCombat: 0, banditsGuile: 0, restlessBlades: 0, killingSpree: false, nightstalker: 0, improvedAmbush: 0, relentlessStrikes: 0, elusiveness: 0, waylay: 0, opportunity: 0, initiative: 0, energeticRecovery: 0, findWeakness: 0, hemorrhage: false, honorAmongThieves: 0, premeditation: false, envelopingShadows: 0, cheatDeath: 0, preparation: false, sanguinaryVein: 0, slaughterFromTheShadows: 0, serratedBlades: 0, shadowDance: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RogueTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueTalents): RogueTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 deadly_momentum */ 1:\n                    message.deadlyMomentum = reader.int32();\n                    break;\n                case /* int32 coup_de_grace */ 2:\n                    message.coupDeGrace = reader.int32();\n                    break;\n                case /* int32 lethality */ 3:\n                    message.lethality = reader.int32();\n                    break;\n                case /* int32 ruthlessness */ 4:\n                    message.ruthlessness = reader.int32();\n                    break;\n                case /* int32 quickening */ 5:\n                    message.quickening = reader.int32();\n                    break;\n                case /* int32 puncturing_wounds */ 6:\n                    message.puncturingWounds = reader.int32();\n                    break;\n                case /* int32 blackjack */ 7:\n                    message.blackjack = reader.int32();\n                    break;\n                case /* int32 deadly_brew */ 8:\n                    message.deadlyBrew = reader.int32();\n                    break;\n                case /* bool cold_blood */ 9:\n                    message.coldBlood = reader.bool();\n                    break;\n                case /* int32 vile_poisons */ 10:\n                    message.vilePoisons = reader.int32();\n                    break;\n                case /* int32 deadened_nerves */ 11:\n                    message.deadenedNerves = reader.int32();\n                    break;\n                case /* int32 seal_fate */ 12:\n                    message.sealFate = reader.int32();\n                    break;\n                case /* int32 murderous_intent */ 13:\n                    message.murderousIntent = reader.int32();\n                    break;\n                case /* bool overkill */ 14:\n                    message.overkill = reader.bool();\n                    break;\n                case /* bool master_poisoner */ 15:\n                    message.masterPoisoner = reader.bool();\n                    break;\n                case /* int32 improved_expose_armor */ 16:\n                    message.improvedExposeArmor = reader.int32();\n                    break;\n                case /* int32 cut_to_the_chase */ 17:\n                    message.cutToTheChase = reader.int32();\n                    break;\n                case /* int32 venomous_wounds */ 18:\n                    message.venomousWounds = reader.int32();\n                    break;\n                case /* bool vendetta */ 19:\n                    message.vendetta = reader.bool();\n                    break;\n                case /* int32 improved_recuperate */ 20:\n                    message.improvedRecuperate = reader.int32();\n                    break;\n                case /* int32 improved_sinister_strike */ 21:\n                    message.improvedSinisterStrike = reader.int32();\n                    break;\n                case /* int32 precision */ 22:\n                    message.precision = reader.int32();\n                    break;\n                case /* int32 improved_slice_and_dice */ 23:\n                    message.improvedSliceAndDice = reader.int32();\n                    break;\n                case /* int32 improved_sprint */ 24:\n                    message.improvedSprint = reader.int32();\n                    break;\n                case /* int32 aggression */ 25:\n                    message.aggression = reader.int32();\n                    break;\n                case /* int32 improved_kick */ 26:\n                    message.improvedKick = reader.int32();\n                    break;\n                case /* int32 lightning_reflexes */ 27:\n                    message.lightningReflexes = reader.int32();\n                    break;\n                case /* bool revealing_strike */ 28:\n                    message.revealingStrike = reader.bool();\n                    break;\n                case /* int32 reinforced_leather */ 29:\n                    message.reinforcedLeather = reader.int32();\n                    break;\n                case /* int32 improved_gouge */ 30:\n                    message.improvedGouge = reader.int32();\n                    break;\n                case /* int32 combat_potency */ 31:\n                    message.combatPotency = reader.int32();\n                    break;\n                case /* int32 blade_twisting */ 32:\n                    message.bladeTwisting = reader.int32();\n                    break;\n                case /* int32 throwing_specialization */ 33:\n                    message.throwingSpecialization = reader.int32();\n                    break;\n                case /* bool adrenaline_rush */ 34:\n                    message.adrenalineRush = reader.bool();\n                    break;\n                case /* int32 savage_combat */ 35:\n                    message.savageCombat = reader.int32();\n                    break;\n                case /* int32 bandits_guile */ 36:\n                    message.banditsGuile = reader.int32();\n                    break;\n                case /* int32 restless_blades */ 37:\n                    message.restlessBlades = reader.int32();\n                    break;\n                case /* bool killing_spree */ 38:\n                    message.killingSpree = reader.bool();\n                    break;\n                case /* int32 nightstalker */ 39:\n                    message.nightstalker = reader.int32();\n                    break;\n                case /* int32 improved_ambush */ 40:\n                    message.improvedAmbush = reader.int32();\n                    break;\n                case /* int32 relentless_strikes */ 41:\n                    message.relentlessStrikes = reader.int32();\n                    break;\n                case /* int32 elusiveness */ 42:\n                    message.elusiveness = reader.int32();\n                    break;\n                case /* int32 waylay */ 43:\n                    message.waylay = reader.int32();\n                    break;\n                case /* int32 opportunity */ 44:\n                    message.opportunity = reader.int32();\n                    break;\n                case /* int32 initiative */ 45:\n                    message.initiative = reader.int32();\n                    break;\n                case /* int32 energetic_recovery */ 46:\n                    message.energeticRecovery = reader.int32();\n                    break;\n                case /* int32 find_weakness */ 47:\n                    message.findWeakness = reader.int32();\n                    break;\n                case /* bool hemorrhage */ 48:\n                    message.hemorrhage = reader.bool();\n                    break;\n                case /* int32 honor_among_thieves */ 49:\n                    message.honorAmongThieves = reader.int32();\n                    break;\n                case /* bool premeditation */ 50:\n                    message.premeditation = reader.bool();\n                    break;\n                case /* int32 enveloping_shadows */ 51:\n                    message.envelopingShadows = reader.int32();\n                    break;\n                case /* int32 cheat_death */ 52:\n                    message.cheatDeath = reader.int32();\n                    break;\n                case /* bool preparation */ 53:\n                    message.preparation = reader.bool();\n                    break;\n                case /* int32 sanguinary_vein */ 54:\n                    message.sanguinaryVein = reader.int32();\n                    break;\n                case /* int32 slaughter_from_the_shadows */ 55:\n                    message.slaughterFromTheShadows = reader.int32();\n                    break;\n                case /* int32 serrated_blades */ 56:\n                    message.serratedBlades = reader.int32();\n                    break;\n                case /* bool shadow_dance */ 57:\n                    message.shadowDance = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RogueTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 deadly_momentum = 1; */\n        if (message.deadlyMomentum !== 0)\n            writer.tag(1, WireType.Varint).int32(message.deadlyMomentum);\n        /* int32 coup_de_grace = 2; */\n        if (message.coupDeGrace !== 0)\n            writer.tag(2, WireType.Varint).int32(message.coupDeGrace);\n        /* int32 lethality = 3; */\n        if (message.lethality !== 0)\n            writer.tag(3, WireType.Varint).int32(message.lethality);\n        /* int32 ruthlessness = 4; */\n        if (message.ruthlessness !== 0)\n            writer.tag(4, WireType.Varint).int32(message.ruthlessness);\n        /* int32 quickening = 5; */\n        if (message.quickening !== 0)\n            writer.tag(5, WireType.Varint).int32(message.quickening);\n        /* int32 puncturing_wounds = 6; */\n        if (message.puncturingWounds !== 0)\n            writer.tag(6, WireType.Varint).int32(message.puncturingWounds);\n        /* int32 blackjack = 7; */\n        if (message.blackjack !== 0)\n            writer.tag(7, WireType.Varint).int32(message.blackjack);\n        /* int32 deadly_brew = 8; */\n        if (message.deadlyBrew !== 0)\n            writer.tag(8, WireType.Varint).int32(message.deadlyBrew);\n        /* bool cold_blood = 9; */\n        if (message.coldBlood !== false)\n            writer.tag(9, WireType.Varint).bool(message.coldBlood);\n        /* int32 vile_poisons = 10; */\n        if (message.vilePoisons !== 0)\n            writer.tag(10, WireType.Varint).int32(message.vilePoisons);\n        /* int32 deadened_nerves = 11; */\n        if (message.deadenedNerves !== 0)\n            writer.tag(11, WireType.Varint).int32(message.deadenedNerves);\n        /* int32 seal_fate = 12; */\n        if (message.sealFate !== 0)\n            writer.tag(12, WireType.Varint).int32(message.sealFate);\n        /* int32 murderous_intent = 13; */\n        if (message.murderousIntent !== 0)\n            writer.tag(13, WireType.Varint).int32(message.murderousIntent);\n        /* bool overkill = 14; */\n        if (message.overkill !== false)\n            writer.tag(14, WireType.Varint).bool(message.overkill);\n        /* bool master_poisoner = 15; */\n        if (message.masterPoisoner !== false)\n            writer.tag(15, WireType.Varint).bool(message.masterPoisoner);\n        /* int32 improved_expose_armor = 16; */\n        if (message.improvedExposeArmor !== 0)\n            writer.tag(16, WireType.Varint).int32(message.improvedExposeArmor);\n        /* int32 cut_to_the_chase = 17; */\n        if (message.cutToTheChase !== 0)\n            writer.tag(17, WireType.Varint).int32(message.cutToTheChase);\n        /* int32 venomous_wounds = 18; */\n        if (message.venomousWounds !== 0)\n            writer.tag(18, WireType.Varint).int32(message.venomousWounds);\n        /* bool vendetta = 19; */\n        if (message.vendetta !== false)\n            writer.tag(19, WireType.Varint).bool(message.vendetta);\n        /* int32 improved_recuperate = 20; */\n        if (message.improvedRecuperate !== 0)\n            writer.tag(20, WireType.Varint).int32(message.improvedRecuperate);\n        /* int32 improved_sinister_strike = 21; */\n        if (message.improvedSinisterStrike !== 0)\n            writer.tag(21, WireType.Varint).int32(message.improvedSinisterStrike);\n        /* int32 precision = 22; */\n        if (message.precision !== 0)\n            writer.tag(22, WireType.Varint).int32(message.precision);\n        /* int32 improved_slice_and_dice = 23; */\n        if (message.improvedSliceAndDice !== 0)\n            writer.tag(23, WireType.Varint).int32(message.improvedSliceAndDice);\n        /* int32 improved_sprint = 24; */\n        if (message.improvedSprint !== 0)\n            writer.tag(24, WireType.Varint).int32(message.improvedSprint);\n        /* int32 aggression = 25; */\n        if (message.aggression !== 0)\n            writer.tag(25, WireType.Varint).int32(message.aggression);\n        /* int32 improved_kick = 26; */\n        if (message.improvedKick !== 0)\n            writer.tag(26, WireType.Varint).int32(message.improvedKick);\n        /* int32 lightning_reflexes = 27; */\n        if (message.lightningReflexes !== 0)\n            writer.tag(27, WireType.Varint).int32(message.lightningReflexes);\n        /* bool revealing_strike = 28; */\n        if (message.revealingStrike !== false)\n            writer.tag(28, WireType.Varint).bool(message.revealingStrike);\n        /* int32 reinforced_leather = 29; */\n        if (message.reinforcedLeather !== 0)\n            writer.tag(29, WireType.Varint).int32(message.reinforcedLeather);\n        /* int32 improved_gouge = 30; */\n        if (message.improvedGouge !== 0)\n            writer.tag(30, WireType.Varint).int32(message.improvedGouge);\n        /* int32 combat_potency = 31; */\n        if (message.combatPotency !== 0)\n            writer.tag(31, WireType.Varint).int32(message.combatPotency);\n        /* int32 blade_twisting = 32; */\n        if (message.bladeTwisting !== 0)\n            writer.tag(32, WireType.Varint).int32(message.bladeTwisting);\n        /* int32 throwing_specialization = 33; */\n        if (message.throwingSpecialization !== 0)\n            writer.tag(33, WireType.Varint).int32(message.throwingSpecialization);\n        /* bool adrenaline_rush = 34; */\n        if (message.adrenalineRush !== false)\n            writer.tag(34, WireType.Varint).bool(message.adrenalineRush);\n        /* int32 savage_combat = 35; */\n        if (message.savageCombat !== 0)\n            writer.tag(35, WireType.Varint).int32(message.savageCombat);\n        /* int32 bandits_guile = 36; */\n        if (message.banditsGuile !== 0)\n            writer.tag(36, WireType.Varint).int32(message.banditsGuile);\n        /* int32 restless_blades = 37; */\n        if (message.restlessBlades !== 0)\n            writer.tag(37, WireType.Varint).int32(message.restlessBlades);\n        /* bool killing_spree = 38; */\n        if (message.killingSpree !== false)\n            writer.tag(38, WireType.Varint).bool(message.killingSpree);\n        /* int32 nightstalker = 39; */\n        if (message.nightstalker !== 0)\n            writer.tag(39, WireType.Varint).int32(message.nightstalker);\n        /* int32 improved_ambush = 40; */\n        if (message.improvedAmbush !== 0)\n            writer.tag(40, WireType.Varint).int32(message.improvedAmbush);\n        /* int32 relentless_strikes = 41; */\n        if (message.relentlessStrikes !== 0)\n            writer.tag(41, WireType.Varint).int32(message.relentlessStrikes);\n        /* int32 elusiveness = 42; */\n        if (message.elusiveness !== 0)\n            writer.tag(42, WireType.Varint).int32(message.elusiveness);\n        /* int32 waylay = 43; */\n        if (message.waylay !== 0)\n            writer.tag(43, WireType.Varint).int32(message.waylay);\n        /* int32 opportunity = 44; */\n        if (message.opportunity !== 0)\n            writer.tag(44, WireType.Varint).int32(message.opportunity);\n        /* int32 initiative = 45; */\n        if (message.initiative !== 0)\n            writer.tag(45, WireType.Varint).int32(message.initiative);\n        /* int32 energetic_recovery = 46; */\n        if (message.energeticRecovery !== 0)\n            writer.tag(46, WireType.Varint).int32(message.energeticRecovery);\n        /* int32 find_weakness = 47; */\n        if (message.findWeakness !== 0)\n            writer.tag(47, WireType.Varint).int32(message.findWeakness);\n        /* bool hemorrhage = 48; */\n        if (message.hemorrhage !== false)\n            writer.tag(48, WireType.Varint).bool(message.hemorrhage);\n        /* int32 honor_among_thieves = 49; */\n        if (message.honorAmongThieves !== 0)\n            writer.tag(49, WireType.Varint).int32(message.honorAmongThieves);\n        /* bool premeditation = 50; */\n        if (message.premeditation !== false)\n            writer.tag(50, WireType.Varint).bool(message.premeditation);\n        /* int32 enveloping_shadows = 51; */\n        if (message.envelopingShadows !== 0)\n            writer.tag(51, WireType.Varint).int32(message.envelopingShadows);\n        /* int32 cheat_death = 52; */\n        if (message.cheatDeath !== 0)\n            writer.tag(52, WireType.Varint).int32(message.cheatDeath);\n        /* bool preparation = 53; */\n        if (message.preparation !== false)\n            writer.tag(53, WireType.Varint).bool(message.preparation);\n        /* int32 sanguinary_vein = 54; */\n        if (message.sanguinaryVein !== 0)\n            writer.tag(54, WireType.Varint).int32(message.sanguinaryVein);\n        /* int32 slaughter_from_the_shadows = 55; */\n        if (message.slaughterFromTheShadows !== 0)\n            writer.tag(55, WireType.Varint).int32(message.slaughterFromTheShadows);\n        /* int32 serrated_blades = 56; */\n        if (message.serratedBlades !== 0)\n            writer.tag(56, WireType.Varint).int32(message.serratedBlades);\n        /* bool shadow_dance = 57; */\n        if (message.shadowDance !== false)\n            writer.tag(57, WireType.Varint).bool(message.shadowDance);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RogueTalents\n */\nexport const RogueTalents = new RogueTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RogueOptions$Type extends MessageType<RogueOptions> {\n    constructor() {\n        super(\"proto.RogueOptions\", [\n            { no: 1, name: \"tricks_of_the_trade_target\", kind: \"message\", T: () => UnitReference },\n            { no: 2, name: \"mh_imbue\", kind: \"enum\", T: () => [\"proto.RogueOptions.PoisonImbue\", RogueOptions_PoisonImbue] },\n            { no: 3, name: \"oh_imbue\", kind: \"enum\", T: () => [\"proto.RogueOptions.PoisonImbue\", RogueOptions_PoisonImbue] },\n            { no: 4, name: \"th_imbue\", kind: \"enum\", T: () => [\"proto.RogueOptions.PoisonImbue\", RogueOptions_PoisonImbue] },\n            { no: 5, name: \"starting_overkill_duration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"apply_poisons_manually\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"assume_bleed_active\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"vanish_break_time\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RogueOptions>): RogueOptions {\n        const message = { mhImbue: 0, ohImbue: 0, thImbue: 0, startingOverkillDuration: 0, applyPoisonsManually: false, assumeBleedActive: false, vanishBreakTime: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RogueOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueOptions): RogueOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference tricks_of_the_trade_target */ 1:\n                    message.tricksOfTheTradeTarget = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.tricksOfTheTradeTarget);\n                    break;\n                case /* proto.RogueOptions.PoisonImbue mh_imbue */ 2:\n                    message.mhImbue = reader.int32();\n                    break;\n                case /* proto.RogueOptions.PoisonImbue oh_imbue */ 3:\n                    message.ohImbue = reader.int32();\n                    break;\n                case /* proto.RogueOptions.PoisonImbue th_imbue */ 4:\n                    message.thImbue = reader.int32();\n                    break;\n                case /* int32 starting_overkill_duration */ 5:\n                    message.startingOverkillDuration = reader.int32();\n                    break;\n                case /* bool apply_poisons_manually */ 6:\n                    message.applyPoisonsManually = reader.bool();\n                    break;\n                case /* bool assume_bleed_active */ 7:\n                    message.assumeBleedActive = reader.bool();\n                    break;\n                case /* float vanish_break_time */ 8:\n                    message.vanishBreakTime = reader.float();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RogueOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference tricks_of_the_trade_target = 1; */\n        if (message.tricksOfTheTradeTarget)\n            UnitReference.internalBinaryWrite(message.tricksOfTheTradeTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RogueOptions.PoisonImbue mh_imbue = 2; */\n        if (message.mhImbue !== 0)\n            writer.tag(2, WireType.Varint).int32(message.mhImbue);\n        /* proto.RogueOptions.PoisonImbue oh_imbue = 3; */\n        if (message.ohImbue !== 0)\n            writer.tag(3, WireType.Varint).int32(message.ohImbue);\n        /* proto.RogueOptions.PoisonImbue th_imbue = 4; */\n        if (message.thImbue !== 0)\n            writer.tag(4, WireType.Varint).int32(message.thImbue);\n        /* int32 starting_overkill_duration = 5; */\n        if (message.startingOverkillDuration !== 0)\n            writer.tag(5, WireType.Varint).int32(message.startingOverkillDuration);\n        /* bool apply_poisons_manually = 6; */\n        if (message.applyPoisonsManually !== false)\n            writer.tag(6, WireType.Varint).bool(message.applyPoisonsManually);\n        /* bool assume_bleed_active = 7; */\n        if (message.assumeBleedActive !== false)\n            writer.tag(7, WireType.Varint).bool(message.assumeBleedActive);\n        /* float vanish_break_time = 8; */\n        if (message.vanishBreakTime !== 0)\n            writer.tag(8, WireType.Bit32).float(message.vanishBreakTime);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RogueOptions\n */\nexport const RogueOptions = new RogueOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AssassinationRogue$Type extends MessageType<AssassinationRogue> {\n    constructor() {\n        super(\"proto.AssassinationRogue\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => AssassinationRogue_Options }\n        ]);\n    }\n    create(value?: PartialMessage<AssassinationRogue>): AssassinationRogue {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AssassinationRogue>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssassinationRogue): AssassinationRogue {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.AssassinationRogue.Options options */ 1:\n                    message.options = AssassinationRogue_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AssassinationRogue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.AssassinationRogue.Options options = 1; */\n        if (message.options)\n            AssassinationRogue_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AssassinationRogue\n */\nexport const AssassinationRogue = new AssassinationRogue$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AssassinationRogue_Rotation$Type extends MessageType<AssassinationRogue_Rotation> {\n    constructor() {\n        super(\"proto.AssassinationRogue.Rotation\", []);\n    }\n    create(value?: PartialMessage<AssassinationRogue_Rotation>): AssassinationRogue_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AssassinationRogue_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssassinationRogue_Rotation): AssassinationRogue_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: AssassinationRogue_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AssassinationRogue.Rotation\n */\nexport const AssassinationRogue_Rotation = new AssassinationRogue_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AssassinationRogue_Options$Type extends MessageType<AssassinationRogue_Options> {\n    constructor() {\n        super(\"proto.AssassinationRogue.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => RogueOptions }\n        ]);\n    }\n    create(value?: PartialMessage<AssassinationRogue_Options>): AssassinationRogue_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AssassinationRogue_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssassinationRogue_Options): AssassinationRogue_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RogueOptions class_options */ 1:\n                    message.classOptions = RogueOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AssassinationRogue_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RogueOptions class_options = 1; */\n        if (message.classOptions)\n            RogueOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AssassinationRogue.Options\n */\nexport const AssassinationRogue_Options = new AssassinationRogue_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CombatRogue$Type extends MessageType<CombatRogue> {\n    constructor() {\n        super(\"proto.CombatRogue\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => CombatRogue_Options }\n        ]);\n    }\n    create(value?: PartialMessage<CombatRogue>): CombatRogue {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<CombatRogue>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CombatRogue): CombatRogue {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.CombatRogue.Options options */ 1:\n                    message.options = CombatRogue_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: CombatRogue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.CombatRogue.Options options = 1; */\n        if (message.options)\n            CombatRogue_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.CombatRogue\n */\nexport const CombatRogue = new CombatRogue$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CombatRogue_Rotation$Type extends MessageType<CombatRogue_Rotation> {\n    constructor() {\n        super(\"proto.CombatRogue.Rotation\", []);\n    }\n    create(value?: PartialMessage<CombatRogue_Rotation>): CombatRogue_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<CombatRogue_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CombatRogue_Rotation): CombatRogue_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: CombatRogue_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.CombatRogue.Rotation\n */\nexport const CombatRogue_Rotation = new CombatRogue_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CombatRogue_Options$Type extends MessageType<CombatRogue_Options> {\n    constructor() {\n        super(\"proto.CombatRogue.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => RogueOptions }\n        ]);\n    }\n    create(value?: PartialMessage<CombatRogue_Options>): CombatRogue_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<CombatRogue_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CombatRogue_Options): CombatRogue_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RogueOptions class_options */ 1:\n                    message.classOptions = RogueOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: CombatRogue_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RogueOptions class_options = 1; */\n        if (message.classOptions)\n            RogueOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.CombatRogue.Options\n */\nexport const CombatRogue_Options = new CombatRogue_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubtletyRogue$Type extends MessageType<SubtletyRogue> {\n    constructor() {\n        super(\"proto.SubtletyRogue\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => SubtletyRogue_Options }\n        ]);\n    }\n    create(value?: PartialMessage<SubtletyRogue>): SubtletyRogue {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SubtletyRogue>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubtletyRogue): SubtletyRogue {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SubtletyRogue.Options options */ 1:\n                    message.options = SubtletyRogue_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SubtletyRogue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SubtletyRogue.Options options = 1; */\n        if (message.options)\n            SubtletyRogue_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SubtletyRogue\n */\nexport const SubtletyRogue = new SubtletyRogue$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubtletyRogue_Rotation$Type extends MessageType<SubtletyRogue_Rotation> {\n    constructor() {\n        super(\"proto.SubtletyRogue.Rotation\", []);\n    }\n    create(value?: PartialMessage<SubtletyRogue_Rotation>): SubtletyRogue_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SubtletyRogue_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubtletyRogue_Rotation): SubtletyRogue_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: SubtletyRogue_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SubtletyRogue.Rotation\n */\nexport const SubtletyRogue_Rotation = new SubtletyRogue_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubtletyRogue_Options$Type extends MessageType<SubtletyRogue_Options> {\n    constructor() {\n        super(\"proto.SubtletyRogue.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => RogueOptions },\n            { no: 6, name: \"honor_among_thieves_crit_rate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SubtletyRogue_Options>): SubtletyRogue_Options {\n        const message = { honorAmongThievesCritRate: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SubtletyRogue_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubtletyRogue_Options): SubtletyRogue_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RogueOptions class_options */ 1:\n                    message.classOptions = RogueOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* int32 honor_among_thieves_crit_rate */ 6:\n                    message.honorAmongThievesCritRate = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SubtletyRogue_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RogueOptions class_options = 1; */\n        if (message.classOptions)\n            RogueOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* int32 honor_among_thieves_crit_rate = 6; */\n        if (message.honorAmongThievesCritRate !== 0)\n            writer.tag(6, WireType.Varint).int32(message.honorAmongThievesCritRate);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SubtletyRogue.Options\n */\nexport const SubtletyRogue_Options = new SubtletyRogue_Options$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"priest.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { UnitReference } from \"./common\";\n/**\n * @generated from protobuf message proto.PriestTalents\n */\nexport interface PriestTalents {\n    /**\n     * Discipline\n     *\n     * @generated from protobuf field: int32 improved_power_word_shield = 1;\n     */\n    improvedPowerWordShield: number;\n    /**\n     * @generated from protobuf field: int32 twin_disciplines = 2;\n     */\n    twinDisciplines: number;\n    /**\n     * @generated from protobuf field: int32 mental_agility = 3;\n     */\n    mentalAgility: number;\n    /**\n     * @generated from protobuf field: int32 evangelism = 4;\n     */\n    evangelism: number;\n    /**\n     * @generated from protobuf field: bool archangel = 5;\n     */\n    archangel: boolean;\n    /**\n     * @generated from protobuf field: int32 inner_sanctum = 6;\n     */\n    innerSanctum: number;\n    /**\n     * @generated from protobuf field: int32 soul_warding = 7;\n     */\n    soulWarding: number;\n    /**\n     * @generated from protobuf field: int32 renewed_hope = 8;\n     */\n    renewedHope: number;\n    /**\n     * @generated from protobuf field: bool power_infusion = 9;\n     */\n    powerInfusion: boolean;\n    /**\n     * @generated from protobuf field: int32 atonement = 10;\n     */\n    atonement: number;\n    /**\n     * @generated from protobuf field: bool inner_focus = 11;\n     */\n    innerFocus: boolean;\n    /**\n     * @generated from protobuf field: int32 rapture = 12;\n     */\n    rapture: number;\n    /**\n     * @generated from protobuf field: int32 borrowed_time = 13;\n     */\n    borrowedTime: number;\n    /**\n     * @generated from protobuf field: int32 reflective_shield = 14;\n     */\n    reflectiveShield: number;\n    /**\n     * @generated from protobuf field: int32 strength_of_soul = 15;\n     */\n    strengthOfSoul: number;\n    /**\n     * @generated from protobuf field: int32 divine_aegis = 16;\n     */\n    divineAegis: number;\n    /**\n     * @generated from protobuf field: bool pain_suppression = 17;\n     */\n    painSuppression: boolean;\n    /**\n     * @generated from protobuf field: int32 train_of_thought = 18;\n     */\n    trainOfThought: number;\n    /**\n     * @generated from protobuf field: int32 focused_will = 19;\n     */\n    focusedWill: number;\n    /**\n     * @generated from protobuf field: int32 grace = 20;\n     */\n    grace: number;\n    /**\n     * @generated from protobuf field: bool power_word_barrier = 21;\n     */\n    powerWordBarrier: boolean;\n    /**\n     * Holy\n     *\n     * @generated from protobuf field: int32 improved_renew = 22;\n     */\n    improvedRenew: number;\n    /**\n     * @generated from protobuf field: int32 empowered_healing = 23;\n     */\n    empoweredHealing: number;\n    /**\n     * @generated from protobuf field: int32 divine_fury = 24;\n     */\n    divineFury: number;\n    /**\n     * @generated from protobuf field: bool desperate_prayer = 25;\n     */\n    desperatePrayer: boolean;\n    /**\n     * @generated from protobuf field: int32 surge_of_light = 26;\n     */\n    surgeOfLight: number;\n    /**\n     * @generated from protobuf field: int32 inspiration = 27;\n     */\n    inspiration: number;\n    /**\n     * @generated from protobuf field: int32 divine_touch = 28;\n     */\n    divineTouch: number;\n    /**\n     * @generated from protobuf field: int32 holy_concentration = 29;\n     */\n    holyConcentration: number;\n    /**\n     * @generated from protobuf field: bool lightwell = 30;\n     */\n    lightwell: boolean;\n    /**\n     * @generated from protobuf field: int32 tome_of_light = 31;\n     */\n    tomeOfLight: number;\n    /**\n     * @generated from protobuf field: bool rapid_renewal = 32;\n     */\n    rapidRenewal: boolean;\n    /**\n     * @generated from protobuf field: bool spirit_of_redemption = 33;\n     */\n    spiritOfRedemption: boolean;\n    /**\n     * @generated from protobuf field: int32 serendipity = 34;\n     */\n    serendipity: number;\n    /**\n     * @generated from protobuf field: int32 body_and_soul = 35;\n     */\n    bodyAndSoul: number;\n    /**\n     * @generated from protobuf field: bool chakra = 36;\n     */\n    chakra: boolean;\n    /**\n     * @generated from protobuf field: bool revelations = 37;\n     */\n    revelations: boolean;\n    /**\n     * @generated from protobuf field: int32 blessed_resilience = 38;\n     */\n    blessedResilience: number;\n    /**\n     * @generated from protobuf field: int32 test_of_faith = 39;\n     */\n    testOfFaith: number;\n    /**\n     * @generated from protobuf field: int32 heavenly_voice = 40;\n     */\n    heavenlyVoice: number;\n    /**\n     * @generated from protobuf field: bool circle_of_healing = 41;\n     */\n    circleOfHealing: boolean;\n    /**\n     * @generated from protobuf field: bool guardian_spirit = 42;\n     */\n    guardianSpirit: boolean;\n    /**\n     * Shadow\n     *\n     * @generated from protobuf field: int32 darkness = 43;\n     */\n    darkness: number;\n    /**\n     * @generated from protobuf field: int32 improved_shadow_word_pain = 44;\n     */\n    improvedShadowWordPain: number;\n    /**\n     * @generated from protobuf field: int32 veiled_shadows = 45;\n     */\n    veiledShadows: number;\n    /**\n     * @generated from protobuf field: int32 improved_psychic_scream = 46;\n     */\n    improvedPsychicScream: number;\n    /**\n     * @generated from protobuf field: int32 improved_mind_blast = 47;\n     */\n    improvedMindBlast: number;\n    /**\n     * @generated from protobuf field: int32 improved_devouring_plague = 48;\n     */\n    improvedDevouringPlague: number;\n    /**\n     * @generated from protobuf field: int32 twisted_faith = 49;\n     */\n    twistedFaith: number;\n    /**\n     * @generated from protobuf field: bool shadowform = 50;\n     */\n    shadowform: boolean;\n    /**\n     * @generated from protobuf field: int32 phantasm = 51;\n     */\n    phantasm: number;\n    /**\n     * @generated from protobuf field: int32 harnessed_shadows = 52;\n     */\n    harnessedShadows: number;\n    /**\n     * @generated from protobuf field: bool silence = 53;\n     */\n    silence: boolean;\n    /**\n     * @generated from protobuf field: bool vampiric_embrace = 54;\n     */\n    vampiricEmbrace: boolean;\n    /**\n     * @generated from protobuf field: int32 masochism = 55;\n     */\n    masochism: number;\n    /**\n     * @generated from protobuf field: int32 mind_melt = 56;\n     */\n    mindMelt: number;\n    /**\n     * @generated from protobuf field: int32 pain_and_suffering = 57;\n     */\n    painAndSuffering: number;\n    /**\n     * @generated from protobuf field: bool vampiric_touch = 58;\n     */\n    vampiricTouch: boolean;\n    /**\n     * @generated from protobuf field: int32 paralysis = 59;\n     */\n    paralysis: number;\n    /**\n     * @generated from protobuf field: bool psychic_horror = 60;\n     */\n    psychicHorror: boolean;\n    /**\n     * @generated from protobuf field: int32 sin_and_punishment = 61;\n     */\n    sinAndPunishment: number;\n    /**\n     * @generated from protobuf field: int32 shadowy_apparition = 62;\n     */\n    shadowyApparition: number;\n    /**\n     * @generated from protobuf field: bool dispersion = 63;\n     */\n    dispersion: boolean;\n}\n/**\n * @generated from protobuf message proto.PriestOptions\n */\nexport interface PriestOptions {\n    /**\n     * @generated from protobuf field: proto.PriestOptions.Armor armor = 1;\n     */\n    armor: PriestOptions_Armor;\n    /**\n     * @generated from protobuf field: bool use_shadowfiend = 2;\n     */\n    useShadowfiend: boolean;\n}\n/**\n * @generated from protobuf enum proto.PriestOptions.Armor\n */\nexport enum PriestOptions_Armor {\n    /**\n     * @generated from protobuf enum value: NoArmor = 0;\n     */\n    NoArmor = 0,\n    /**\n     * @generated from protobuf enum value: InnerFire = 1;\n     */\n    InnerFire = 1\n}\n/**\n * @generated from protobuf message proto.DisciplinePriest\n */\nexport interface DisciplinePriest {\n    /**\n     * @generated from protobuf field: proto.DisciplinePriest.Options options = 3;\n     */\n    options?: DisciplinePriest_Options;\n}\n/**\n * @generated from protobuf message proto.DisciplinePriest.Rotation\n */\nexport interface DisciplinePriest_Rotation {\n}\n/**\n * @generated from protobuf message proto.DisciplinePriest.Options\n */\nexport interface DisciplinePriest_Options {\n    /**\n     * @generated from protobuf field: proto.PriestOptions class_options = 1;\n     */\n    classOptions?: PriestOptions;\n    /**\n     * @generated from protobuf field: proto.UnitReference power_infusion_target = 2;\n     */\n    powerInfusionTarget?: UnitReference;\n}\n/**\n * @generated from protobuf message proto.HolyPriest\n */\nexport interface HolyPriest {\n    /**\n     * @generated from protobuf field: proto.HolyPriest.Options options = 3;\n     */\n    options?: HolyPriest_Options;\n}\n/**\n * @generated from protobuf message proto.HolyPriest.Rotation\n */\nexport interface HolyPriest_Rotation {\n}\n/**\n * @generated from protobuf message proto.HolyPriest.Options\n */\nexport interface HolyPriest_Options {\n    /**\n     * @generated from protobuf field: proto.PriestOptions class_options = 1;\n     */\n    classOptions?: PriestOptions;\n}\n/**\n * @generated from protobuf message proto.ShadowPriest\n */\nexport interface ShadowPriest {\n    /**\n     * @generated from protobuf field: proto.ShadowPriest.Options options = 3;\n     */\n    options?: ShadowPriest_Options;\n}\n/**\n * @generated from protobuf message proto.ShadowPriest.Rotation\n */\nexport interface ShadowPriest_Rotation {\n}\n/**\n * @generated from protobuf message proto.ShadowPriest.Options\n */\nexport interface ShadowPriest_Options {\n    /**\n     * @generated from protobuf field: proto.PriestOptions class_options = 1;\n     */\n    classOptions?: PriestOptions;\n    /**\n     * @generated from protobuf field: proto.UnitReference power_infusion_target = 2;\n     */\n    powerInfusionTarget?: UnitReference;\n}\n/**\n * @generated from protobuf enum proto.PriestPrimeGlyph\n */\nexport enum PriestPrimeGlyph {\n    /**\n     * @generated from protobuf enum value: PriestPrimeGlyphNone = 0;\n     */\n    PriestPrimeGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfDispersion = 45753;\n     */\n    GlyphOfDispersion = 45753,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlashHeal = 42400;\n     */\n    GlyphOfFlashHeal = 42400,\n    /**\n     * @generated from protobuf enum value: GlyphOfGuardianSpirit = 45755;\n     */\n    GlyphOfGuardianSpirit = 45755,\n    /**\n     * @generated from protobuf enum value: GlyphOfLightwell = 42403;\n     */\n    GlyphOfLightwell = 42403,\n    /**\n     * @generated from protobuf enum value: GlyphOfMindFlay = 42415;\n     */\n    GlyphOfMindFlay = 42415,\n    /**\n     * @generated from protobuf enum value: GlyphOfPenance = 45756;\n     */\n    GlyphOfPenance = 45756,\n    /**\n     * @generated from protobuf enum value: GlyphOfPowerWordBarrier = 42407;\n     */\n    GlyphOfPowerWordBarrier = 42407,\n    /**\n     * @generated from protobuf enum value: GlyphOfPowerWordShield = 42408;\n     */\n    GlyphOfPowerWordShield = 42408,\n    /**\n     * @generated from protobuf enum value: GlyphOfPrayerOfHealing = 42409;\n     */\n    GlyphOfPrayerOfHealing = 42409,\n    /**\n     * @generated from protobuf enum value: GlyphOfRenew = 42411;\n     */\n    GlyphOfRenew = 42411,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowWordDeath = 42414;\n     */\n    GlyphOfShadowWordDeath = 42414,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowWordPain = 42406;\n     */\n    GlyphOfShadowWordPain = 42406\n}\n/**\n * @generated from protobuf enum proto.PriestMajorGlyph\n */\nexport enum PriestMajorGlyph {\n    /**\n     * @generated from protobuf enum value: PriestMajorGlyphNone = 0;\n     */\n    PriestMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfCircleOfHealing = 42396;\n     */\n    GlyphOfCircleOfHealing = 42396,\n    /**\n     * @generated from protobuf enum value: GlyphOfDesperation = 45760;\n     */\n    GlyphOfDesperation = 45760,\n    /**\n     * @generated from protobuf enum value: GlyphOfDispelMagic = 42397;\n     */\n    GlyphOfDispelMagic = 42397,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivineAccuracy = 45758;\n     */\n    GlyphOfDivineAccuracy = 45758,\n    /**\n     * @generated from protobuf enum value: GlyphOfFade = 42398;\n     */\n    GlyphOfFade = 42398,\n    /**\n     * @generated from protobuf enum value: GlyphOfFearWard = 42399;\n     */\n    GlyphOfFearWard = 42399,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyNova = 42401;\n     */\n    GlyphOfHolyNova = 42401,\n    /**\n     * @generated from protobuf enum value: GlyphOfInnerFire = 42402;\n     */\n    GlyphOfInnerFire = 42402,\n    /**\n     * @generated from protobuf enum value: GlyphOfMassDispel = 42404;\n     */\n    GlyphOfMassDispel = 42404,\n    /**\n     * @generated from protobuf enum value: GlyphOfPrayerOfMending = 42417;\n     */\n    GlyphOfPrayerOfMending = 42417,\n    /**\n     * @generated from protobuf enum value: GlyphOfPsychicHorror = 42405;\n     */\n    GlyphOfPsychicHorror = 42405,\n    /**\n     * @generated from protobuf enum value: GlyphOfPsychicScream = 42410;\n     */\n    GlyphOfPsychicScream = 42410,\n    /**\n     * @generated from protobuf enum value: GlyphOfScourgeImprisonment = 42412;\n     */\n    GlyphOfScourgeImprisonment = 42412,\n    /**\n     * @generated from protobuf enum value: GlyphOfSmite = 42416;\n     */\n    GlyphOfSmite = 42416,\n    /**\n     * @generated from protobuf enum value: GlyphOfSpiritTap = 45757;\n     */\n    GlyphOfSpiritTap = 45757\n}\n/**\n * @generated from protobuf enum proto.PriestMinorGlyph\n */\nexport enum PriestMinorGlyph {\n    /**\n     * @generated from protobuf enum value: PriestMinorGlyphNone = 0;\n     */\n    PriestMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfFading = 43342;\n     */\n    GlyphOfFading = 43342,\n    /**\n     * @generated from protobuf enum value: GlyphOfFortitude = 43371;\n     */\n    GlyphOfFortitude = 43371,\n    /**\n     * @generated from protobuf enum value: GlyphOfLevitate = 43370;\n     */\n    GlyphOfLevitate = 43370,\n    /**\n     * @generated from protobuf enum value: GlyphOfShackleUndead = 43373;\n     */\n    GlyphOfShackleUndead = 43373,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadow = 77101;\n     */\n    GlyphOfShadow = 77101,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowProtection = 43372;\n     */\n    GlyphOfShadowProtection = 43372,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowfiend = 43374;\n     */\n    GlyphOfShadowfiend = 43374\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass PriestTalents$Type extends MessageType<PriestTalents> {\n    constructor() {\n        super(\"proto.PriestTalents\", [\n            { no: 1, name: \"improved_power_word_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"twin_disciplines\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"mental_agility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"evangelism\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"archangel\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"inner_sanctum\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"soul_warding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"renewed_hope\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"power_infusion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"atonement\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"inner_focus\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"rapture\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"borrowed_time\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"reflective_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"strength_of_soul\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"divine_aegis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"pain_suppression\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"train_of_thought\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"focused_will\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"power_word_barrier\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"improved_renew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"empowered_healing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"divine_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"desperate_prayer\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"surge_of_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"inspiration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"divine_touch\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"holy_concentration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"lightwell\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 31, name: \"tome_of_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"rapid_renewal\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"spirit_of_redemption\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"serendipity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"body_and_soul\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"chakra\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"revelations\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 38, name: \"blessed_resilience\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"test_of_faith\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"heavenly_voice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"circle_of_healing\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 42, name: \"guardian_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 43, name: \"darkness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"improved_shadow_word_pain\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"veiled_shadows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"improved_psychic_scream\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"improved_mind_blast\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"improved_devouring_plague\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"twisted_faith\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"shadowform\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"phantasm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"harnessed_shadows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"silence\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 54, name: \"vampiric_embrace\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"masochism\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"mind_melt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"pain_and_suffering\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"vampiric_touch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 59, name: \"paralysis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"psychic_horror\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 61, name: \"sin_and_punishment\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"shadowy_apparition\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"dispersion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PriestTalents>): PriestTalents {\n        const message = { improvedPowerWordShield: 0, twinDisciplines: 0, mentalAgility: 0, evangelism: 0, archangel: false, innerSanctum: 0, soulWarding: 0, renewedHope: 0, powerInfusion: false, atonement: 0, innerFocus: false, rapture: 0, borrowedTime: 0, reflectiveShield: 0, strengthOfSoul: 0, divineAegis: 0, painSuppression: false, trainOfThought: 0, focusedWill: 0, grace: 0, powerWordBarrier: false, improvedRenew: 0, empoweredHealing: 0, divineFury: 0, desperatePrayer: false, surgeOfLight: 0, inspiration: 0, divineTouch: 0, holyConcentration: 0, lightwell: false, tomeOfLight: 0, rapidRenewal: false, spiritOfRedemption: false, serendipity: 0, bodyAndSoul: 0, chakra: false, revelations: false, blessedResilience: 0, testOfFaith: 0, heavenlyVoice: 0, circleOfHealing: false, guardianSpirit: false, darkness: 0, improvedShadowWordPain: 0, veiledShadows: 0, improvedPsychicScream: 0, improvedMindBlast: 0, improvedDevouringPlague: 0, twistedFaith: 0, shadowform: false, phantasm: 0, harnessedShadows: 0, silence: false, vampiricEmbrace: false, masochism: 0, mindMelt: 0, painAndSuffering: 0, vampiricTouch: false, paralysis: 0, psychicHorror: false, sinAndPunishment: 0, shadowyApparition: 0, dispersion: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PriestTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PriestTalents): PriestTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 improved_power_word_shield */ 1:\n                    message.improvedPowerWordShield = reader.int32();\n                    break;\n                case /* int32 twin_disciplines */ 2:\n                    message.twinDisciplines = reader.int32();\n                    break;\n                case /* int32 mental_agility */ 3:\n                    message.mentalAgility = reader.int32();\n                    break;\n                case /* int32 evangelism */ 4:\n                    message.evangelism = reader.int32();\n                    break;\n                case /* bool archangel */ 5:\n                    message.archangel = reader.bool();\n                    break;\n                case /* int32 inner_sanctum */ 6:\n                    message.innerSanctum = reader.int32();\n                    break;\n                case /* int32 soul_warding */ 7:\n                    message.soulWarding = reader.int32();\n                    break;\n                case /* int32 renewed_hope */ 8:\n                    message.renewedHope = reader.int32();\n                    break;\n                case /* bool power_infusion */ 9:\n                    message.powerInfusion = reader.bool();\n                    break;\n                case /* int32 atonement */ 10:\n                    message.atonement = reader.int32();\n                    break;\n                case /* bool inner_focus */ 11:\n                    message.innerFocus = reader.bool();\n                    break;\n                case /* int32 rapture */ 12:\n                    message.rapture = reader.int32();\n                    break;\n                case /* int32 borrowed_time */ 13:\n                    message.borrowedTime = reader.int32();\n                    break;\n                case /* int32 reflective_shield */ 14:\n                    message.reflectiveShield = reader.int32();\n                    break;\n                case /* int32 strength_of_soul */ 15:\n                    message.strengthOfSoul = reader.int32();\n                    break;\n                case /* int32 divine_aegis */ 16:\n                    message.divineAegis = reader.int32();\n                    break;\n                case /* bool pain_suppression */ 17:\n                    message.painSuppression = reader.bool();\n                    break;\n                case /* int32 train_of_thought */ 18:\n                    message.trainOfThought = reader.int32();\n                    break;\n                case /* int32 focused_will */ 19:\n                    message.focusedWill = reader.int32();\n                    break;\n                case /* int32 grace */ 20:\n                    message.grace = reader.int32();\n                    break;\n                case /* bool power_word_barrier */ 21:\n                    message.powerWordBarrier = reader.bool();\n                    break;\n                case /* int32 improved_renew */ 22:\n                    message.improvedRenew = reader.int32();\n                    break;\n                case /* int32 empowered_healing */ 23:\n                    message.empoweredHealing = reader.int32();\n                    break;\n                case /* int32 divine_fury */ 24:\n                    message.divineFury = reader.int32();\n                    break;\n                case /* bool desperate_prayer */ 25:\n                    message.desperatePrayer = reader.bool();\n                    break;\n                case /* int32 surge_of_light */ 26:\n                    message.surgeOfLight = reader.int32();\n                    break;\n                case /* int32 inspiration */ 27:\n                    message.inspiration = reader.int32();\n                    break;\n                case /* int32 divine_touch */ 28:\n                    message.divineTouch = reader.int32();\n                    break;\n                case /* int32 holy_concentration */ 29:\n                    message.holyConcentration = reader.int32();\n                    break;\n                case /* bool lightwell */ 30:\n                    message.lightwell = reader.bool();\n                    break;\n                case /* int32 tome_of_light */ 31:\n                    message.tomeOfLight = reader.int32();\n                    break;\n                case /* bool rapid_renewal */ 32:\n                    message.rapidRenewal = reader.bool();\n                    break;\n                case /* bool spirit_of_redemption */ 33:\n                    message.spiritOfRedemption = reader.bool();\n                    break;\n                case /* int32 serendipity */ 34:\n                    message.serendipity = reader.int32();\n                    break;\n                case /* int32 body_and_soul */ 35:\n                    message.bodyAndSoul = reader.int32();\n                    break;\n                case /* bool chakra */ 36:\n                    message.chakra = reader.bool();\n                    break;\n                case /* bool revelations */ 37:\n                    message.revelations = reader.bool();\n                    break;\n                case /* int32 blessed_resilience */ 38:\n                    message.blessedResilience = reader.int32();\n                    break;\n                case /* int32 test_of_faith */ 39:\n                    message.testOfFaith = reader.int32();\n                    break;\n                case /* int32 heavenly_voice */ 40:\n                    message.heavenlyVoice = reader.int32();\n                    break;\n                case /* bool circle_of_healing */ 41:\n                    message.circleOfHealing = reader.bool();\n                    break;\n                case /* bool guardian_spirit */ 42:\n                    message.guardianSpirit = reader.bool();\n                    break;\n                case /* int32 darkness */ 43:\n                    message.darkness = reader.int32();\n                    break;\n                case /* int32 improved_shadow_word_pain */ 44:\n                    message.improvedShadowWordPain = reader.int32();\n                    break;\n                case /* int32 veiled_shadows */ 45:\n                    message.veiledShadows = reader.int32();\n                    break;\n                case /* int32 improved_psychic_scream */ 46:\n                    message.improvedPsychicScream = reader.int32();\n                    break;\n                case /* int32 improved_mind_blast */ 47:\n                    message.improvedMindBlast = reader.int32();\n                    break;\n                case /* int32 improved_devouring_plague */ 48:\n                    message.improvedDevouringPlague = reader.int32();\n                    break;\n                case /* int32 twisted_faith */ 49:\n                    message.twistedFaith = reader.int32();\n                    break;\n                case /* bool shadowform */ 50:\n                    message.shadowform = reader.bool();\n                    break;\n                case /* int32 phantasm */ 51:\n                    message.phantasm = reader.int32();\n                    break;\n                case /* int32 harnessed_shadows */ 52:\n                    message.harnessedShadows = reader.int32();\n                    break;\n                case /* bool silence */ 53:\n                    message.silence = reader.bool();\n                    break;\n                case /* bool vampiric_embrace */ 54:\n                    message.vampiricEmbrace = reader.bool();\n                    break;\n                case /* int32 masochism */ 55:\n                    message.masochism = reader.int32();\n                    break;\n                case /* int32 mind_melt */ 56:\n                    message.mindMelt = reader.int32();\n                    break;\n                case /* int32 pain_and_suffering */ 57:\n                    message.painAndSuffering = reader.int32();\n                    break;\n                case /* bool vampiric_touch */ 58:\n                    message.vampiricTouch = reader.bool();\n                    break;\n                case /* int32 paralysis */ 59:\n                    message.paralysis = reader.int32();\n                    break;\n                case /* bool psychic_horror */ 60:\n                    message.psychicHorror = reader.bool();\n                    break;\n                case /* int32 sin_and_punishment */ 61:\n                    message.sinAndPunishment = reader.int32();\n                    break;\n                case /* int32 shadowy_apparition */ 62:\n                    message.shadowyApparition = reader.int32();\n                    break;\n                case /* bool dispersion */ 63:\n                    message.dispersion = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PriestTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 improved_power_word_shield = 1; */\n        if (message.improvedPowerWordShield !== 0)\n            writer.tag(1, WireType.Varint).int32(message.improvedPowerWordShield);\n        /* int32 twin_disciplines = 2; */\n        if (message.twinDisciplines !== 0)\n            writer.tag(2, WireType.Varint).int32(message.twinDisciplines);\n        /* int32 mental_agility = 3; */\n        if (message.mentalAgility !== 0)\n            writer.tag(3, WireType.Varint).int32(message.mentalAgility);\n        /* int32 evangelism = 4; */\n        if (message.evangelism !== 0)\n            writer.tag(4, WireType.Varint).int32(message.evangelism);\n        /* bool archangel = 5; */\n        if (message.archangel !== false)\n            writer.tag(5, WireType.Varint).bool(message.archangel);\n        /* int32 inner_sanctum = 6; */\n        if (message.innerSanctum !== 0)\n            writer.tag(6, WireType.Varint).int32(message.innerSanctum);\n        /* int32 soul_warding = 7; */\n        if (message.soulWarding !== 0)\n            writer.tag(7, WireType.Varint).int32(message.soulWarding);\n        /* int32 renewed_hope = 8; */\n        if (message.renewedHope !== 0)\n            writer.tag(8, WireType.Varint).int32(message.renewedHope);\n        /* bool power_infusion = 9; */\n        if (message.powerInfusion !== false)\n            writer.tag(9, WireType.Varint).bool(message.powerInfusion);\n        /* int32 atonement = 10; */\n        if (message.atonement !== 0)\n            writer.tag(10, WireType.Varint).int32(message.atonement);\n        /* bool inner_focus = 11; */\n        if (message.innerFocus !== false)\n            writer.tag(11, WireType.Varint).bool(message.innerFocus);\n        /* int32 rapture = 12; */\n        if (message.rapture !== 0)\n            writer.tag(12, WireType.Varint).int32(message.rapture);\n        /* int32 borrowed_time = 13; */\n        if (message.borrowedTime !== 0)\n            writer.tag(13, WireType.Varint).int32(message.borrowedTime);\n        /* int32 reflective_shield = 14; */\n        if (message.reflectiveShield !== 0)\n            writer.tag(14, WireType.Varint).int32(message.reflectiveShield);\n        /* int32 strength_of_soul = 15; */\n        if (message.strengthOfSoul !== 0)\n            writer.tag(15, WireType.Varint).int32(message.strengthOfSoul);\n        /* int32 divine_aegis = 16; */\n        if (message.divineAegis !== 0)\n            writer.tag(16, WireType.Varint).int32(message.divineAegis);\n        /* bool pain_suppression = 17; */\n        if (message.painSuppression !== false)\n            writer.tag(17, WireType.Varint).bool(message.painSuppression);\n        /* int32 train_of_thought = 18; */\n        if (message.trainOfThought !== 0)\n            writer.tag(18, WireType.Varint).int32(message.trainOfThought);\n        /* int32 focused_will = 19; */\n        if (message.focusedWill !== 0)\n            writer.tag(19, WireType.Varint).int32(message.focusedWill);\n        /* int32 grace = 20; */\n        if (message.grace !== 0)\n            writer.tag(20, WireType.Varint).int32(message.grace);\n        /* bool power_word_barrier = 21; */\n        if (message.powerWordBarrier !== false)\n            writer.tag(21, WireType.Varint).bool(message.powerWordBarrier);\n        /* int32 improved_renew = 22; */\n        if (message.improvedRenew !== 0)\n            writer.tag(22, WireType.Varint).int32(message.improvedRenew);\n        /* int32 empowered_healing = 23; */\n        if (message.empoweredHealing !== 0)\n            writer.tag(23, WireType.Varint).int32(message.empoweredHealing);\n        /* int32 divine_fury = 24; */\n        if (message.divineFury !== 0)\n            writer.tag(24, WireType.Varint).int32(message.divineFury);\n        /* bool desperate_prayer = 25; */\n        if (message.desperatePrayer !== false)\n            writer.tag(25, WireType.Varint).bool(message.desperatePrayer);\n        /* int32 surge_of_light = 26; */\n        if (message.surgeOfLight !== 0)\n            writer.tag(26, WireType.Varint).int32(message.surgeOfLight);\n        /* int32 inspiration = 27; */\n        if (message.inspiration !== 0)\n            writer.tag(27, WireType.Varint).int32(message.inspiration);\n        /* int32 divine_touch = 28; */\n        if (message.divineTouch !== 0)\n            writer.tag(28, WireType.Varint).int32(message.divineTouch);\n        /* int32 holy_concentration = 29; */\n        if (message.holyConcentration !== 0)\n            writer.tag(29, WireType.Varint).int32(message.holyConcentration);\n        /* bool lightwell = 30; */\n        if (message.lightwell !== false)\n            writer.tag(30, WireType.Varint).bool(message.lightwell);\n        /* int32 tome_of_light = 31; */\n        if (message.tomeOfLight !== 0)\n            writer.tag(31, WireType.Varint).int32(message.tomeOfLight);\n        /* bool rapid_renewal = 32; */\n        if (message.rapidRenewal !== false)\n            writer.tag(32, WireType.Varint).bool(message.rapidRenewal);\n        /* bool spirit_of_redemption = 33; */\n        if (message.spiritOfRedemption !== false)\n            writer.tag(33, WireType.Varint).bool(message.spiritOfRedemption);\n        /* int32 serendipity = 34; */\n        if (message.serendipity !== 0)\n            writer.tag(34, WireType.Varint).int32(message.serendipity);\n        /* int32 body_and_soul = 35; */\n        if (message.bodyAndSoul !== 0)\n            writer.tag(35, WireType.Varint).int32(message.bodyAndSoul);\n        /* bool chakra = 36; */\n        if (message.chakra !== false)\n            writer.tag(36, WireType.Varint).bool(message.chakra);\n        /* bool revelations = 37; */\n        if (message.revelations !== false)\n            writer.tag(37, WireType.Varint).bool(message.revelations);\n        /* int32 blessed_resilience = 38; */\n        if (message.blessedResilience !== 0)\n            writer.tag(38, WireType.Varint).int32(message.blessedResilience);\n        /* int32 test_of_faith = 39; */\n        if (message.testOfFaith !== 0)\n            writer.tag(39, WireType.Varint).int32(message.testOfFaith);\n        /* int32 heavenly_voice = 40; */\n        if (message.heavenlyVoice !== 0)\n            writer.tag(40, WireType.Varint).int32(message.heavenlyVoice);\n        /* bool circle_of_healing = 41; */\n        if (message.circleOfHealing !== false)\n            writer.tag(41, WireType.Varint).bool(message.circleOfHealing);\n        /* bool guardian_spirit = 42; */\n        if (message.guardianSpirit !== false)\n            writer.tag(42, WireType.Varint).bool(message.guardianSpirit);\n        /* int32 darkness = 43; */\n        if (message.darkness !== 0)\n            writer.tag(43, WireType.Varint).int32(message.darkness);\n        /* int32 improved_shadow_word_pain = 44; */\n        if (message.improvedShadowWordPain !== 0)\n            writer.tag(44, WireType.Varint).int32(message.improvedShadowWordPain);\n        /* int32 veiled_shadows = 45; */\n        if (message.veiledShadows !== 0)\n            writer.tag(45, WireType.Varint).int32(message.veiledShadows);\n        /* int32 improved_psychic_scream = 46; */\n        if (message.improvedPsychicScream !== 0)\n            writer.tag(46, WireType.Varint).int32(message.improvedPsychicScream);\n        /* int32 improved_mind_blast = 47; */\n        if (message.improvedMindBlast !== 0)\n            writer.tag(47, WireType.Varint).int32(message.improvedMindBlast);\n        /* int32 improved_devouring_plague = 48; */\n        if (message.improvedDevouringPlague !== 0)\n            writer.tag(48, WireType.Varint).int32(message.improvedDevouringPlague);\n        /* int32 twisted_faith = 49; */\n        if (message.twistedFaith !== 0)\n            writer.tag(49, WireType.Varint).int32(message.twistedFaith);\n        /* bool shadowform = 50; */\n        if (message.shadowform !== false)\n            writer.tag(50, WireType.Varint).bool(message.shadowform);\n        /* int32 phantasm = 51; */\n        if (message.phantasm !== 0)\n            writer.tag(51, WireType.Varint).int32(message.phantasm);\n        /* int32 harnessed_shadows = 52; */\n        if (message.harnessedShadows !== 0)\n            writer.tag(52, WireType.Varint).int32(message.harnessedShadows);\n        /* bool silence = 53; */\n        if (message.silence !== false)\n            writer.tag(53, WireType.Varint).bool(message.silence);\n        /* bool vampiric_embrace = 54; */\n        if (message.vampiricEmbrace !== false)\n            writer.tag(54, WireType.Varint).bool(message.vampiricEmbrace);\n        /* int32 masochism = 55; */\n        if (message.masochism !== 0)\n            writer.tag(55, WireType.Varint).int32(message.masochism);\n        /* int32 mind_melt = 56; */\n        if (message.mindMelt !== 0)\n            writer.tag(56, WireType.Varint).int32(message.mindMelt);\n        /* int32 pain_and_suffering = 57; */\n        if (message.painAndSuffering !== 0)\n            writer.tag(57, WireType.Varint).int32(message.painAndSuffering);\n        /* bool vampiric_touch = 58; */\n        if (message.vampiricTouch !== false)\n            writer.tag(58, WireType.Varint).bool(message.vampiricTouch);\n        /* int32 paralysis = 59; */\n        if (message.paralysis !== 0)\n            writer.tag(59, WireType.Varint).int32(message.paralysis);\n        /* bool psychic_horror = 60; */\n        if (message.psychicHorror !== false)\n            writer.tag(60, WireType.Varint).bool(message.psychicHorror);\n        /* int32 sin_and_punishment = 61; */\n        if (message.sinAndPunishment !== 0)\n            writer.tag(61, WireType.Varint).int32(message.sinAndPunishment);\n        /* int32 shadowy_apparition = 62; */\n        if (message.shadowyApparition !== 0)\n            writer.tag(62, WireType.Varint).int32(message.shadowyApparition);\n        /* bool dispersion = 63; */\n        if (message.dispersion !== false)\n            writer.tag(63, WireType.Varint).bool(message.dispersion);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PriestTalents\n */\nexport const PriestTalents = new PriestTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PriestOptions$Type extends MessageType<PriestOptions> {\n    constructor() {\n        super(\"proto.PriestOptions\", [\n            { no: 1, name: \"armor\", kind: \"enum\", T: () => [\"proto.PriestOptions.Armor\", PriestOptions_Armor] },\n            { no: 2, name: \"use_shadowfiend\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PriestOptions>): PriestOptions {\n        const message = { armor: 0, useShadowfiend: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PriestOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PriestOptions): PriestOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PriestOptions.Armor armor */ 1:\n                    message.armor = reader.int32();\n                    break;\n                case /* bool use_shadowfiend */ 2:\n                    message.useShadowfiend = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PriestOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PriestOptions.Armor armor = 1; */\n        if (message.armor !== 0)\n            writer.tag(1, WireType.Varint).int32(message.armor);\n        /* bool use_shadowfiend = 2; */\n        if (message.useShadowfiend !== false)\n            writer.tag(2, WireType.Varint).bool(message.useShadowfiend);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PriestOptions\n */\nexport const PriestOptions = new PriestOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DisciplinePriest$Type extends MessageType<DisciplinePriest> {\n    constructor() {\n        super(\"proto.DisciplinePriest\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => DisciplinePriest_Options }\n        ]);\n    }\n    create(value?: PartialMessage<DisciplinePriest>): DisciplinePriest {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DisciplinePriest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisciplinePriest): DisciplinePriest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DisciplinePriest.Options options */ 3:\n                    message.options = DisciplinePriest_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DisciplinePriest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DisciplinePriest.Options options = 3; */\n        if (message.options)\n            DisciplinePriest_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DisciplinePriest\n */\nexport const DisciplinePriest = new DisciplinePriest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DisciplinePriest_Rotation$Type extends MessageType<DisciplinePriest_Rotation> {\n    constructor() {\n        super(\"proto.DisciplinePriest.Rotation\", []);\n    }\n    create(value?: PartialMessage<DisciplinePriest_Rotation>): DisciplinePriest_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DisciplinePriest_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisciplinePriest_Rotation): DisciplinePriest_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: DisciplinePriest_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DisciplinePriest.Rotation\n */\nexport const DisciplinePriest_Rotation = new DisciplinePriest_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DisciplinePriest_Options$Type extends MessageType<DisciplinePriest_Options> {\n    constructor() {\n        super(\"proto.DisciplinePriest.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => PriestOptions },\n            { no: 2, name: \"power_infusion_target\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<DisciplinePriest_Options>): DisciplinePriest_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DisciplinePriest_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisciplinePriest_Options): DisciplinePriest_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PriestOptions class_options */ 1:\n                    message.classOptions = PriestOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* proto.UnitReference power_infusion_target */ 2:\n                    message.powerInfusionTarget = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.powerInfusionTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DisciplinePriest_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PriestOptions class_options = 1; */\n        if (message.classOptions)\n            PriestOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitReference power_infusion_target = 2; */\n        if (message.powerInfusionTarget)\n            UnitReference.internalBinaryWrite(message.powerInfusionTarget, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DisciplinePriest.Options\n */\nexport const DisciplinePriest_Options = new DisciplinePriest_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HolyPriest$Type extends MessageType<HolyPriest> {\n    constructor() {\n        super(\"proto.HolyPriest\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => HolyPriest_Options }\n        ]);\n    }\n    create(value?: PartialMessage<HolyPriest>): HolyPriest {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HolyPriest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HolyPriest): HolyPriest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.HolyPriest.Options options */ 3:\n                    message.options = HolyPriest_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HolyPriest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.HolyPriest.Options options = 3; */\n        if (message.options)\n            HolyPriest_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HolyPriest\n */\nexport const HolyPriest = new HolyPriest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HolyPriest_Rotation$Type extends MessageType<HolyPriest_Rotation> {\n    constructor() {\n        super(\"proto.HolyPriest.Rotation\", []);\n    }\n    create(value?: PartialMessage<HolyPriest_Rotation>): HolyPriest_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HolyPriest_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HolyPriest_Rotation): HolyPriest_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: HolyPriest_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HolyPriest.Rotation\n */\nexport const HolyPriest_Rotation = new HolyPriest_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HolyPriest_Options$Type extends MessageType<HolyPriest_Options> {\n    constructor() {\n        super(\"proto.HolyPriest.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => PriestOptions }\n        ]);\n    }\n    create(value?: PartialMessage<HolyPriest_Options>): HolyPriest_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HolyPriest_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HolyPriest_Options): HolyPriest_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PriestOptions class_options */ 1:\n                    message.classOptions = PriestOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HolyPriest_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PriestOptions class_options = 1; */\n        if (message.classOptions)\n            PriestOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HolyPriest.Options\n */\nexport const HolyPriest_Options = new HolyPriest_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShadowPriest$Type extends MessageType<ShadowPriest> {\n    constructor() {\n        super(\"proto.ShadowPriest\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => ShadowPriest_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ShadowPriest>): ShadowPriest {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShadowPriest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShadowPriest): ShadowPriest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShadowPriest.Options options */ 3:\n                    message.options = ShadowPriest_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShadowPriest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShadowPriest.Options options = 3; */\n        if (message.options)\n            ShadowPriest_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShadowPriest\n */\nexport const ShadowPriest = new ShadowPriest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShadowPriest_Rotation$Type extends MessageType<ShadowPriest_Rotation> {\n    constructor() {\n        super(\"proto.ShadowPriest.Rotation\", []);\n    }\n    create(value?: PartialMessage<ShadowPriest_Rotation>): ShadowPriest_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShadowPriest_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShadowPriest_Rotation): ShadowPriest_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: ShadowPriest_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShadowPriest.Rotation\n */\nexport const ShadowPriest_Rotation = new ShadowPriest_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShadowPriest_Options$Type extends MessageType<ShadowPriest_Options> {\n    constructor() {\n        super(\"proto.ShadowPriest.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => PriestOptions },\n            { no: 2, name: \"power_infusion_target\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<ShadowPriest_Options>): ShadowPriest_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShadowPriest_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShadowPriest_Options): ShadowPriest_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PriestOptions class_options */ 1:\n                    message.classOptions = PriestOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* proto.UnitReference power_infusion_target */ 2:\n                    message.powerInfusionTarget = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.powerInfusionTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShadowPriest_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PriestOptions class_options = 1; */\n        if (message.classOptions)\n            PriestOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitReference power_infusion_target = 2; */\n        if (message.powerInfusionTarget)\n            UnitReference.internalBinaryWrite(message.powerInfusionTarget, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShadowPriest.Options\n */\nexport const ShadowPriest_Options = new ShadowPriest_Options$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"paladin.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message proto.PaladinTalents\n */\nexport interface PaladinTalents {\n    /**\n     * Holy\n     *\n     * @generated from protobuf field: int32 arbiter_of_the_light = 1;\n     */\n    arbiterOfTheLight: number;\n    /**\n     * @generated from protobuf field: int32 protector_of_the_innocent = 2;\n     */\n    protectorOfTheInnocent: number;\n    /**\n     * @generated from protobuf field: int32 judgements_of_the_pure = 3;\n     */\n    judgementsOfThePure: number;\n    /**\n     * @generated from protobuf field: int32 clarity_of_purpose = 4;\n     */\n    clarityOfPurpose: number;\n    /**\n     * @generated from protobuf field: int32 last_word = 5;\n     */\n    lastWord: number;\n    /**\n     * @generated from protobuf field: int32 blazing_light = 6;\n     */\n    blazingLight: number;\n    /**\n     * @generated from protobuf field: int32 denounce = 7;\n     */\n    denounce: number;\n    /**\n     * @generated from protobuf field: bool divine_favor = 8;\n     */\n    divineFavor: boolean;\n    /**\n     * @generated from protobuf field: int32 infusion_of_light = 9;\n     */\n    infusionOfLight: number;\n    /**\n     * @generated from protobuf field: int32 daybreak = 10;\n     */\n    daybreak: number;\n    /**\n     * @generated from protobuf field: int32 enlightened_judgements = 11;\n     */\n    enlightenedJudgements: number;\n    /**\n     * @generated from protobuf field: bool beacon_of_light = 12;\n     */\n    beaconOfLight: boolean;\n    /**\n     * @generated from protobuf field: int32 speed_of_light = 13;\n     */\n    speedOfLight: number;\n    /**\n     * @generated from protobuf field: bool sacred_cleansing = 14;\n     */\n    sacredCleansing: boolean;\n    /**\n     * @generated from protobuf field: int32 conviction = 15;\n     */\n    conviction: number;\n    /**\n     * @generated from protobuf field: bool aura_mastery = 16;\n     */\n    auraMastery: boolean;\n    /**\n     * @generated from protobuf field: int32 paragon_of_virtue = 17;\n     */\n    paragonOfVirtue: number;\n    /**\n     * @generated from protobuf field: int32 tower_of_radiance = 18;\n     */\n    towerOfRadiance: number;\n    /**\n     * @generated from protobuf field: int32 blessed_life = 19;\n     */\n    blessedLife: number;\n    /**\n     * @generated from protobuf field: bool light_of_dawn = 20;\n     */\n    lightOfDawn: boolean;\n    /**\n     * Protection\n     *\n     * @generated from protobuf field: int32 divinity = 21;\n     */\n    divinity: number;\n    /**\n     * @generated from protobuf field: int32 seals_of_the_pure = 22;\n     */\n    sealsOfThePure: number;\n    /**\n     * @generated from protobuf field: int32 eternal_glory = 23;\n     */\n    eternalGlory: number;\n    /**\n     * @generated from protobuf field: int32 judgements_of_the_just = 24;\n     */\n    judgementsOfTheJust: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 25;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 improved_hammer_of_justice = 26;\n     */\n    improvedHammerOfJustice: number;\n    /**\n     * @generated from protobuf field: int32 hallowed_ground = 27;\n     */\n    hallowedGround: number;\n    /**\n     * @generated from protobuf field: int32 sanctuary = 28;\n     */\n    sanctuary: number;\n    /**\n     * @generated from protobuf field: bool hammer_of_the_righteous = 29;\n     */\n    hammerOfTheRighteous: boolean;\n    /**\n     * @generated from protobuf field: int32 wrath_of_the_lightbringer = 30;\n     */\n    wrathOfTheLightbringer: number;\n    /**\n     * @generated from protobuf field: int32 reckoning = 31;\n     */\n    reckoning: number;\n    /**\n     * @generated from protobuf field: bool shield_of_the_righteous = 32;\n     */\n    shieldOfTheRighteous: boolean;\n    /**\n     * @generated from protobuf field: int32 grand_crusader = 33;\n     */\n    grandCrusader: number;\n    /**\n     * @generated from protobuf field: bool vindication = 34;\n     */\n    vindication: boolean;\n    /**\n     * @generated from protobuf field: bool holy_shield = 35;\n     */\n    holyShield: boolean;\n    /**\n     * @generated from protobuf field: int32 guarded_by_the_light = 36;\n     */\n    guardedByTheLight: number;\n    /**\n     * @generated from protobuf field: bool divine_guardian = 37;\n     */\n    divineGuardian: boolean;\n    /**\n     * @generated from protobuf field: int32 sacred_duty = 38;\n     */\n    sacredDuty: number;\n    /**\n     * @generated from protobuf field: int32 shield_of_the_templar = 39;\n     */\n    shieldOfTheTemplar: number;\n    /**\n     * @generated from protobuf field: bool ardent_defender = 40;\n     */\n    ardentDefender: boolean;\n    /**\n     * Retribution\n     *\n     * @generated from protobuf field: int32 eye_for_an_eye = 41;\n     */\n    eyeForAnEye: number;\n    /**\n     * @generated from protobuf field: int32 crusade = 42;\n     */\n    crusade: number;\n    /**\n     * @generated from protobuf field: int32 improved_judgement = 43;\n     */\n    improvedJudgement: number;\n    /**\n     * @generated from protobuf field: int32 guardians_favor = 44;\n     */\n    guardiansFavor: number;\n    /**\n     * @generated from protobuf field: int32 rule_of_law = 45;\n     */\n    ruleOfLaw: number;\n    /**\n     * @generated from protobuf field: int32 pursuit_of_justice = 46;\n     */\n    pursuitOfJustice: number;\n    /**\n     * @generated from protobuf field: bool communion = 47;\n     */\n    communion: boolean;\n    /**\n     * @generated from protobuf field: int32 the_art_of_war = 48;\n     */\n    theArtOfWar: number;\n    /**\n     * @generated from protobuf field: int32 long_arm_of_the_law = 49;\n     */\n    longArmOfTheLaw: number;\n    /**\n     * @generated from protobuf field: bool divine_storm = 50;\n     */\n    divineStorm: boolean;\n    /**\n     * @generated from protobuf field: bool sacred_shield = 51;\n     */\n    sacredShield: boolean;\n    /**\n     * @generated from protobuf field: bool sanctity_of_battle = 52;\n     */\n    sanctityOfBattle: boolean;\n    /**\n     * @generated from protobuf field: bool seals_of_command = 53;\n     */\n    sealsOfCommand: boolean;\n    /**\n     * @generated from protobuf field: int32 sanctified_wrath = 54;\n     */\n    sanctifiedWrath: number;\n    /**\n     * @generated from protobuf field: int32 selfless_healer = 55;\n     */\n    selflessHealer: number;\n    /**\n     * @generated from protobuf field: bool repentance = 56;\n     */\n    repentance: boolean;\n    /**\n     * @generated from protobuf field: int32 divine_purpose = 57;\n     */\n    divinePurpose: number;\n    /**\n     * @generated from protobuf field: int32 inquiry_of_faith = 58;\n     */\n    inquiryOfFaith: number;\n    /**\n     * @generated from protobuf field: int32 acts_of_sacrifice = 59;\n     */\n    actsOfSacrifice: number;\n    /**\n     * @generated from protobuf field: bool zealotry = 60;\n     */\n    zealotry: boolean;\n}\n/**\n * @generated from protobuf message proto.PaladinOptions\n */\nexport interface PaladinOptions {\n    /**\n     * @generated from protobuf field: proto.PaladinJudgement judgement = 1;\n     */\n    judgement: PaladinJudgement;\n    /**\n     * @generated from protobuf field: proto.PaladinSeal seal = 2;\n     */\n    seal: PaladinSeal;\n    /**\n     * @generated from protobuf field: proto.PaladinAura aura = 3;\n     */\n    aura: PaladinAura;\n    /**\n     * @generated from protobuf field: bool use_avenging_wrath = 4;\n     */\n    useAvengingWrath: boolean;\n}\n/**\n * @generated from protobuf message proto.RetributionPaladin\n */\nexport interface RetributionPaladin {\n    /**\n     * @generated from protobuf field: proto.RetributionPaladin.Options options = 3;\n     */\n    options?: RetributionPaladin_Options;\n}\n/**\n * @generated from protobuf message proto.RetributionPaladin.Rotation\n */\nexport interface RetributionPaladin_Rotation {\n}\n/**\n * @generated from protobuf message proto.RetributionPaladin.Options\n */\nexport interface RetributionPaladin_Options {\n    /**\n     * @generated from protobuf field: proto.PaladinOptions class_options = 1;\n     */\n    classOptions?: PaladinOptions;\n}\n/**\n * @generated from protobuf message proto.ProtectionPaladin\n */\nexport interface ProtectionPaladin {\n    /**\n     * @generated from protobuf field: proto.ProtectionPaladin.Options options = 3;\n     */\n    options?: ProtectionPaladin_Options;\n}\n/**\n * @generated from protobuf message proto.ProtectionPaladin.Rotation\n */\nexport interface ProtectionPaladin_Rotation {\n}\n/**\n * @generated from protobuf message proto.ProtectionPaladin.Options\n */\nexport interface ProtectionPaladin_Options {\n    /**\n     * @generated from protobuf field: proto.PaladinOptions class_options = 1;\n     */\n    classOptions?: PaladinOptions;\n}\n/**\n * @generated from protobuf message proto.HolyPaladin\n */\nexport interface HolyPaladin {\n    /**\n     * @generated from protobuf field: proto.HolyPaladin.Options options = 3;\n     */\n    options?: HolyPaladin_Options;\n}\n/**\n * @generated from protobuf message proto.HolyPaladin.Rotation\n */\nexport interface HolyPaladin_Rotation {\n}\n/**\n * @generated from protobuf message proto.HolyPaladin.Options\n */\nexport interface HolyPaladin_Options {\n    /**\n     * @generated from protobuf field: proto.PaladinOptions class_options = 2;\n     */\n    classOptions?: PaladinOptions;\n}\n/**\n * @generated from protobuf enum proto.PaladinPrimeGlyph\n */\nexport enum PaladinPrimeGlyph {\n    /**\n     * @generated from protobuf enum value: PaladinPrimeGlyphNone = 0;\n     */\n    PaladinPrimeGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfCrusaderStrike = 41098;\n     */\n    GlyphOfCrusaderStrike = 41098,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivineFavor = 41106;\n     */\n    GlyphOfDivineFavor = 41106,\n    /**\n     * @generated from protobuf enum value: GlyphOfExorcism = 41103;\n     */\n    GlyphOfExorcism = 41103,\n    /**\n     * @generated from protobuf enum value: GlyphOfHammerOfTheRighteous = 45742;\n     */\n    GlyphOfHammerOfTheRighteous = 45742,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyShock = 45746;\n     */\n    GlyphOfHolyShock = 45746,\n    /**\n     * @generated from protobuf enum value: GlyphOfJudgement = 41092;\n     */\n    GlyphOfJudgement = 41092,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfInsight = 41110;\n     */\n    GlyphOfSealOfInsight = 41110,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfTruth = 43869;\n     */\n    GlyphOfSealOfTruth = 43869,\n    /**\n     * @generated from protobuf enum value: GlyphOfShieldOfTheRighteous = 45744;\n     */\n    GlyphOfShieldOfTheRighteous = 45744,\n    /**\n     * @generated from protobuf enum value: GlyphOfTemplarSVerdict = 45743;\n     */\n    GlyphOfTemplarSVerdict = 45743,\n    /**\n     * @generated from protobuf enum value: GlyphOfWordOfGlory = 41105;\n     */\n    GlyphOfWordOfGlory = 41105\n}\n/**\n * @generated from protobuf enum proto.PaladinMajorGlyph\n */\nexport enum PaladinMajorGlyph {\n    /**\n     * @generated from protobuf enum value: PaladinMajorGlyphNone = 0;\n     */\n    PaladinMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBeaconOfLight = 45741;\n     */\n    GlyphOfBeaconOfLight = 45741,\n    /**\n     * @generated from protobuf enum value: GlyphOfCleansing = 41104;\n     */\n    GlyphOfCleansing = 41104,\n    /**\n     * @generated from protobuf enum value: GlyphOfConsecration = 41099;\n     */\n    GlyphOfConsecration = 41099,\n    /**\n     * @generated from protobuf enum value: GlyphOfDazingShield = 43868;\n     */\n    GlyphOfDazingShield = 43868,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivinePlea = 45745;\n     */\n    GlyphOfDivinePlea = 45745,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivineProtection = 41096;\n     */\n    GlyphOfDivineProtection = 41096,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivinity = 41108;\n     */\n    GlyphOfDivinity = 41108,\n    /**\n     * @generated from protobuf enum value: GlyphOfFocusedShield = 41101;\n     */\n    GlyphOfFocusedShield = 41101,\n    /**\n     * @generated from protobuf enum value: GlyphOfHammerOfJustice = 41095;\n     */\n    GlyphOfHammerOfJustice = 41095,\n    /**\n     * @generated from protobuf enum value: GlyphOfHammerOfWrath = 41097;\n     */\n    GlyphOfHammerOfWrath = 41097,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyWrath = 43867;\n     */\n    GlyphOfHolyWrath = 43867,\n    /**\n     * @generated from protobuf enum value: GlyphOfLayOnHands = 43367;\n     */\n    GlyphOfLayOnHands = 43367,\n    /**\n     * @generated from protobuf enum value: GlyphOfLightOfDawn = 41109;\n     */\n    GlyphOfLightOfDawn = 41109,\n    /**\n     * @generated from protobuf enum value: GlyphOfRebuke = 41094;\n     */\n    GlyphOfRebuke = 41094,\n    /**\n     * @generated from protobuf enum value: GlyphOfReckoning = 204385;\n     */\n    GlyphOfReckoning = 204385,\n    /**\n     * @generated from protobuf enum value: GlyphOfSalvation = 45747;\n     */\n    GlyphOfSalvation = 45747,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheAsceticCrusader = 41107;\n     */\n    GlyphOfTheAsceticCrusader = 41107,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheLongWord = 66918;\n     */\n    GlyphOfTheLongWord = 66918,\n    /**\n     * @generated from protobuf enum value: GlyphOfTurnEvil = 41102;\n     */\n    GlyphOfTurnEvil = 41102\n}\n/**\n * @generated from protobuf enum proto.PaladinMinorGlyph\n */\nexport enum PaladinMinorGlyph {\n    /**\n     * @generated from protobuf enum value: PaladinMinorGlyphNone = 0;\n     */\n    PaladinMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlessingOfKings = 43365;\n     */\n    GlyphOfBlessingOfKings = 43365,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlessingOfMight = 43340;\n     */\n    GlyphOfBlessingOfMight = 43340,\n    /**\n     * @generated from protobuf enum value: GlyphOfInsight = 43366;\n     */\n    GlyphOfInsight = 43366,\n    /**\n     * @generated from protobuf enum value: GlyphOfJustice = 43369;\n     */\n    GlyphOfJustice = 43369,\n    /**\n     * @generated from protobuf enum value: GlyphOfRighteousness = 41100;\n     */\n    GlyphOfRighteousness = 41100,\n    /**\n     * @generated from protobuf enum value: GlyphOfTruth = 43368;\n     */\n    GlyphOfTruth = 43368\n}\n/**\n * @generated from protobuf enum proto.Blessings\n */\nexport enum Blessings {\n    /**\n     * @generated from protobuf enum value: BlessingUnknown = 0;\n     */\n    BlessingUnknown = 0,\n    /**\n     * @generated from protobuf enum value: BlessingOfKings = 1;\n     */\n    BlessingOfKings = 1,\n    /**\n     * @generated from protobuf enum value: BlessingOfMight = 2;\n     */\n    BlessingOfMight = 2\n}\n/**\n * @generated from protobuf enum proto.PaladinAura\n */\nexport enum PaladinAura {\n    /**\n     * @generated from protobuf enum value: NoPaladinAura = 0;\n     */\n    NoPaladinAura = 0,\n    /**\n     * @generated from protobuf enum value: DevotionAura = 2;\n     */\n    DevotionAura = 2,\n    /**\n     * @generated from protobuf enum value: RetributionAura = 3;\n     */\n    RetributionAura = 3\n}\n/**\n * @generated from protobuf enum proto.PaladinSeal\n */\nexport enum PaladinSeal {\n    /**\n     * @generated from protobuf enum value: Vengeance = 0;\n     */\n    Vengeance = 0,\n    /**\n     * @generated from protobuf enum value: Command = 1;\n     */\n    Command = 1,\n    /**\n     * @generated from protobuf enum value: Righteousness = 2;\n     */\n    Righteousness = 2\n}\n/**\n * @generated from protobuf enum proto.PaladinJudgement\n */\nexport enum PaladinJudgement {\n    /**\n     * @generated from protobuf enum value: JudgementOfWisdom = 0;\n     */\n    JudgementOfWisdom = 0,\n    /**\n     * @generated from protobuf enum value: JudgementOfLight = 1;\n     */\n    JudgementOfLight = 1,\n    /**\n     * @generated from protobuf enum value: NoJudgement = 2;\n     */\n    NoJudgement = 2\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass PaladinTalents$Type extends MessageType<PaladinTalents> {\n    constructor() {\n        super(\"proto.PaladinTalents\", [\n            { no: 1, name: \"arbiter_of_the_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"protector_of_the_innocent\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"judgements_of_the_pure\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"clarity_of_purpose\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"last_word\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"blazing_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"denounce\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"divine_favor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"infusion_of_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"daybreak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"enlightened_judgements\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"beacon_of_light\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"speed_of_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"sacred_cleansing\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"conviction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"aura_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"paragon_of_virtue\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"tower_of_radiance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"blessed_life\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"light_of_dawn\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 21, name: \"divinity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"seals_of_the_pure\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"eternal_glory\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"judgements_of_the_just\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"improved_hammer_of_justice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"hallowed_ground\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"sanctuary\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"hammer_of_the_righteous\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"wrath_of_the_lightbringer\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"reckoning\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"shield_of_the_righteous\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"grand_crusader\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"vindication\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"holy_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"guarded_by_the_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"divine_guardian\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 38, name: \"sacred_duty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"shield_of_the_templar\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"ardent_defender\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 41, name: \"eye_for_an_eye\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"crusade\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"improved_judgement\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"guardians_favor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"rule_of_law\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"pursuit_of_justice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"communion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 48, name: \"the_art_of_war\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"long_arm_of_the_law\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"divine_storm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"sacred_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 52, name: \"sanctity_of_battle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"seals_of_command\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 54, name: \"sanctified_wrath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"selfless_healer\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"repentance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 57, name: \"divine_purpose\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"inquiry_of_faith\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"acts_of_sacrifice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"zealotry\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PaladinTalents>): PaladinTalents {\n        const message = { arbiterOfTheLight: 0, protectorOfTheInnocent: 0, judgementsOfThePure: 0, clarityOfPurpose: 0, lastWord: 0, blazingLight: 0, denounce: 0, divineFavor: false, infusionOfLight: 0, daybreak: 0, enlightenedJudgements: 0, beaconOfLight: false, speedOfLight: 0, sacredCleansing: false, conviction: 0, auraMastery: false, paragonOfVirtue: 0, towerOfRadiance: 0, blessedLife: 0, lightOfDawn: false, divinity: 0, sealsOfThePure: 0, eternalGlory: 0, judgementsOfTheJust: 0, toughness: 0, improvedHammerOfJustice: 0, hallowedGround: 0, sanctuary: 0, hammerOfTheRighteous: false, wrathOfTheLightbringer: 0, reckoning: 0, shieldOfTheRighteous: false, grandCrusader: 0, vindication: false, holyShield: false, guardedByTheLight: 0, divineGuardian: false, sacredDuty: 0, shieldOfTheTemplar: 0, ardentDefender: false, eyeForAnEye: 0, crusade: 0, improvedJudgement: 0, guardiansFavor: 0, ruleOfLaw: 0, pursuitOfJustice: 0, communion: false, theArtOfWar: 0, longArmOfTheLaw: 0, divineStorm: false, sacredShield: false, sanctityOfBattle: false, sealsOfCommand: false, sanctifiedWrath: 0, selflessHealer: 0, repentance: false, divinePurpose: 0, inquiryOfFaith: 0, actsOfSacrifice: 0, zealotry: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PaladinTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaladinTalents): PaladinTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 arbiter_of_the_light */ 1:\n                    message.arbiterOfTheLight = reader.int32();\n                    break;\n                case /* int32 protector_of_the_innocent */ 2:\n                    message.protectorOfTheInnocent = reader.int32();\n                    break;\n                case /* int32 judgements_of_the_pure */ 3:\n                    message.judgementsOfThePure = reader.int32();\n                    break;\n                case /* int32 clarity_of_purpose */ 4:\n                    message.clarityOfPurpose = reader.int32();\n                    break;\n                case /* int32 last_word */ 5:\n                    message.lastWord = reader.int32();\n                    break;\n                case /* int32 blazing_light */ 6:\n                    message.blazingLight = reader.int32();\n                    break;\n                case /* int32 denounce */ 7:\n                    message.denounce = reader.int32();\n                    break;\n                case /* bool divine_favor */ 8:\n                    message.divineFavor = reader.bool();\n                    break;\n                case /* int32 infusion_of_light */ 9:\n                    message.infusionOfLight = reader.int32();\n                    break;\n                case /* int32 daybreak */ 10:\n                    message.daybreak = reader.int32();\n                    break;\n                case /* int32 enlightened_judgements */ 11:\n                    message.enlightenedJudgements = reader.int32();\n                    break;\n                case /* bool beacon_of_light */ 12:\n                    message.beaconOfLight = reader.bool();\n                    break;\n                case /* int32 speed_of_light */ 13:\n                    message.speedOfLight = reader.int32();\n                    break;\n                case /* bool sacred_cleansing */ 14:\n                    message.sacredCleansing = reader.bool();\n                    break;\n                case /* int32 conviction */ 15:\n                    message.conviction = reader.int32();\n                    break;\n                case /* bool aura_mastery */ 16:\n                    message.auraMastery = reader.bool();\n                    break;\n                case /* int32 paragon_of_virtue */ 17:\n                    message.paragonOfVirtue = reader.int32();\n                    break;\n                case /* int32 tower_of_radiance */ 18:\n                    message.towerOfRadiance = reader.int32();\n                    break;\n                case /* int32 blessed_life */ 19:\n                    message.blessedLife = reader.int32();\n                    break;\n                case /* bool light_of_dawn */ 20:\n                    message.lightOfDawn = reader.bool();\n                    break;\n                case /* int32 divinity */ 21:\n                    message.divinity = reader.int32();\n                    break;\n                case /* int32 seals_of_the_pure */ 22:\n                    message.sealsOfThePure = reader.int32();\n                    break;\n                case /* int32 eternal_glory */ 23:\n                    message.eternalGlory = reader.int32();\n                    break;\n                case /* int32 judgements_of_the_just */ 24:\n                    message.judgementsOfTheJust = reader.int32();\n                    break;\n                case /* int32 toughness */ 25:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 improved_hammer_of_justice */ 26:\n                    message.improvedHammerOfJustice = reader.int32();\n                    break;\n                case /* int32 hallowed_ground */ 27:\n                    message.hallowedGround = reader.int32();\n                    break;\n                case /* int32 sanctuary */ 28:\n                    message.sanctuary = reader.int32();\n                    break;\n                case /* bool hammer_of_the_righteous */ 29:\n                    message.hammerOfTheRighteous = reader.bool();\n                    break;\n                case /* int32 wrath_of_the_lightbringer */ 30:\n                    message.wrathOfTheLightbringer = reader.int32();\n                    break;\n                case /* int32 reckoning */ 31:\n                    message.reckoning = reader.int32();\n                    break;\n                case /* bool shield_of_the_righteous */ 32:\n                    message.shieldOfTheRighteous = reader.bool();\n                    break;\n                case /* int32 grand_crusader */ 33:\n                    message.grandCrusader = reader.int32();\n                    break;\n                case /* bool vindication */ 34:\n                    message.vindication = reader.bool();\n                    break;\n                case /* bool holy_shield */ 35:\n                    message.holyShield = reader.bool();\n                    break;\n                case /* int32 guarded_by_the_light */ 36:\n                    message.guardedByTheLight = reader.int32();\n                    break;\n                case /* bool divine_guardian */ 37:\n                    message.divineGuardian = reader.bool();\n                    break;\n                case /* int32 sacred_duty */ 38:\n                    message.sacredDuty = reader.int32();\n                    break;\n                case /* int32 shield_of_the_templar */ 39:\n                    message.shieldOfTheTemplar = reader.int32();\n                    break;\n                case /* bool ardent_defender */ 40:\n                    message.ardentDefender = reader.bool();\n                    break;\n                case /* int32 eye_for_an_eye */ 41:\n                    message.eyeForAnEye = reader.int32();\n                    break;\n                case /* int32 crusade */ 42:\n                    message.crusade = reader.int32();\n                    break;\n                case /* int32 improved_judgement */ 43:\n                    message.improvedJudgement = reader.int32();\n                    break;\n                case /* int32 guardians_favor */ 44:\n                    message.guardiansFavor = reader.int32();\n                    break;\n                case /* int32 rule_of_law */ 45:\n                    message.ruleOfLaw = reader.int32();\n                    break;\n                case /* int32 pursuit_of_justice */ 46:\n                    message.pursuitOfJustice = reader.int32();\n                    break;\n                case /* bool communion */ 47:\n                    message.communion = reader.bool();\n                    break;\n                case /* int32 the_art_of_war */ 48:\n                    message.theArtOfWar = reader.int32();\n                    break;\n                case /* int32 long_arm_of_the_law */ 49:\n                    message.longArmOfTheLaw = reader.int32();\n                    break;\n                case /* bool divine_storm */ 50:\n                    message.divineStorm = reader.bool();\n                    break;\n                case /* bool sacred_shield */ 51:\n                    message.sacredShield = reader.bool();\n                    break;\n                case /* bool sanctity_of_battle */ 52:\n                    message.sanctityOfBattle = reader.bool();\n                    break;\n                case /* bool seals_of_command */ 53:\n                    message.sealsOfCommand = reader.bool();\n                    break;\n                case /* int32 sanctified_wrath */ 54:\n                    message.sanctifiedWrath = reader.int32();\n                    break;\n                case /* int32 selfless_healer */ 55:\n                    message.selflessHealer = reader.int32();\n                    break;\n                case /* bool repentance */ 56:\n                    message.repentance = reader.bool();\n                    break;\n                case /* int32 divine_purpose */ 57:\n                    message.divinePurpose = reader.int32();\n                    break;\n                case /* int32 inquiry_of_faith */ 58:\n                    message.inquiryOfFaith = reader.int32();\n                    break;\n                case /* int32 acts_of_sacrifice */ 59:\n                    message.actsOfSacrifice = reader.int32();\n                    break;\n                case /* bool zealotry */ 60:\n                    message.zealotry = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PaladinTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 arbiter_of_the_light = 1; */\n        if (message.arbiterOfTheLight !== 0)\n            writer.tag(1, WireType.Varint).int32(message.arbiterOfTheLight);\n        /* int32 protector_of_the_innocent = 2; */\n        if (message.protectorOfTheInnocent !== 0)\n            writer.tag(2, WireType.Varint).int32(message.protectorOfTheInnocent);\n        /* int32 judgements_of_the_pure = 3; */\n        if (message.judgementsOfThePure !== 0)\n            writer.tag(3, WireType.Varint).int32(message.judgementsOfThePure);\n        /* int32 clarity_of_purpose = 4; */\n        if (message.clarityOfPurpose !== 0)\n            writer.tag(4, WireType.Varint).int32(message.clarityOfPurpose);\n        /* int32 last_word = 5; */\n        if (message.lastWord !== 0)\n            writer.tag(5, WireType.Varint).int32(message.lastWord);\n        /* int32 blazing_light = 6; */\n        if (message.blazingLight !== 0)\n            writer.tag(6, WireType.Varint).int32(message.blazingLight);\n        /* int32 denounce = 7; */\n        if (message.denounce !== 0)\n            writer.tag(7, WireType.Varint).int32(message.denounce);\n        /* bool divine_favor = 8; */\n        if (message.divineFavor !== false)\n            writer.tag(8, WireType.Varint).bool(message.divineFavor);\n        /* int32 infusion_of_light = 9; */\n        if (message.infusionOfLight !== 0)\n            writer.tag(9, WireType.Varint).int32(message.infusionOfLight);\n        /* int32 daybreak = 10; */\n        if (message.daybreak !== 0)\n            writer.tag(10, WireType.Varint).int32(message.daybreak);\n        /* int32 enlightened_judgements = 11; */\n        if (message.enlightenedJudgements !== 0)\n            writer.tag(11, WireType.Varint).int32(message.enlightenedJudgements);\n        /* bool beacon_of_light = 12; */\n        if (message.beaconOfLight !== false)\n            writer.tag(12, WireType.Varint).bool(message.beaconOfLight);\n        /* int32 speed_of_light = 13; */\n        if (message.speedOfLight !== 0)\n            writer.tag(13, WireType.Varint).int32(message.speedOfLight);\n        /* bool sacred_cleansing = 14; */\n        if (message.sacredCleansing !== false)\n            writer.tag(14, WireType.Varint).bool(message.sacredCleansing);\n        /* int32 conviction = 15; */\n        if (message.conviction !== 0)\n            writer.tag(15, WireType.Varint).int32(message.conviction);\n        /* bool aura_mastery = 16; */\n        if (message.auraMastery !== false)\n            writer.tag(16, WireType.Varint).bool(message.auraMastery);\n        /* int32 paragon_of_virtue = 17; */\n        if (message.paragonOfVirtue !== 0)\n            writer.tag(17, WireType.Varint).int32(message.paragonOfVirtue);\n        /* int32 tower_of_radiance = 18; */\n        if (message.towerOfRadiance !== 0)\n            writer.tag(18, WireType.Varint).int32(message.towerOfRadiance);\n        /* int32 blessed_life = 19; */\n        if (message.blessedLife !== 0)\n            writer.tag(19, WireType.Varint).int32(message.blessedLife);\n        /* bool light_of_dawn = 20; */\n        if (message.lightOfDawn !== false)\n            writer.tag(20, WireType.Varint).bool(message.lightOfDawn);\n        /* int32 divinity = 21; */\n        if (message.divinity !== 0)\n            writer.tag(21, WireType.Varint).int32(message.divinity);\n        /* int32 seals_of_the_pure = 22; */\n        if (message.sealsOfThePure !== 0)\n            writer.tag(22, WireType.Varint).int32(message.sealsOfThePure);\n        /* int32 eternal_glory = 23; */\n        if (message.eternalGlory !== 0)\n            writer.tag(23, WireType.Varint).int32(message.eternalGlory);\n        /* int32 judgements_of_the_just = 24; */\n        if (message.judgementsOfTheJust !== 0)\n            writer.tag(24, WireType.Varint).int32(message.judgementsOfTheJust);\n        /* int32 toughness = 25; */\n        if (message.toughness !== 0)\n            writer.tag(25, WireType.Varint).int32(message.toughness);\n        /* int32 improved_hammer_of_justice = 26; */\n        if (message.improvedHammerOfJustice !== 0)\n            writer.tag(26, WireType.Varint).int32(message.improvedHammerOfJustice);\n        /* int32 hallowed_ground = 27; */\n        if (message.hallowedGround !== 0)\n            writer.tag(27, WireType.Varint).int32(message.hallowedGround);\n        /* int32 sanctuary = 28; */\n        if (message.sanctuary !== 0)\n            writer.tag(28, WireType.Varint).int32(message.sanctuary);\n        /* bool hammer_of_the_righteous = 29; */\n        if (message.hammerOfTheRighteous !== false)\n            writer.tag(29, WireType.Varint).bool(message.hammerOfTheRighteous);\n        /* int32 wrath_of_the_lightbringer = 30; */\n        if (message.wrathOfTheLightbringer !== 0)\n            writer.tag(30, WireType.Varint).int32(message.wrathOfTheLightbringer);\n        /* int32 reckoning = 31; */\n        if (message.reckoning !== 0)\n            writer.tag(31, WireType.Varint).int32(message.reckoning);\n        /* bool shield_of_the_righteous = 32; */\n        if (message.shieldOfTheRighteous !== false)\n            writer.tag(32, WireType.Varint).bool(message.shieldOfTheRighteous);\n        /* int32 grand_crusader = 33; */\n        if (message.grandCrusader !== 0)\n            writer.tag(33, WireType.Varint).int32(message.grandCrusader);\n        /* bool vindication = 34; */\n        if (message.vindication !== false)\n            writer.tag(34, WireType.Varint).bool(message.vindication);\n        /* bool holy_shield = 35; */\n        if (message.holyShield !== false)\n            writer.tag(35, WireType.Varint).bool(message.holyShield);\n        /* int32 guarded_by_the_light = 36; */\n        if (message.guardedByTheLight !== 0)\n            writer.tag(36, WireType.Varint).int32(message.guardedByTheLight);\n        /* bool divine_guardian = 37; */\n        if (message.divineGuardian !== false)\n            writer.tag(37, WireType.Varint).bool(message.divineGuardian);\n        /* int32 sacred_duty = 38; */\n        if (message.sacredDuty !== 0)\n            writer.tag(38, WireType.Varint).int32(message.sacredDuty);\n        /* int32 shield_of_the_templar = 39; */\n        if (message.shieldOfTheTemplar !== 0)\n            writer.tag(39, WireType.Varint).int32(message.shieldOfTheTemplar);\n        /* bool ardent_defender = 40; */\n        if (message.ardentDefender !== false)\n            writer.tag(40, WireType.Varint).bool(message.ardentDefender);\n        /* int32 eye_for_an_eye = 41; */\n        if (message.eyeForAnEye !== 0)\n            writer.tag(41, WireType.Varint).int32(message.eyeForAnEye);\n        /* int32 crusade = 42; */\n        if (message.crusade !== 0)\n            writer.tag(42, WireType.Varint).int32(message.crusade);\n        /* int32 improved_judgement = 43; */\n        if (message.improvedJudgement !== 0)\n            writer.tag(43, WireType.Varint).int32(message.improvedJudgement);\n        /* int32 guardians_favor = 44; */\n        if (message.guardiansFavor !== 0)\n            writer.tag(44, WireType.Varint).int32(message.guardiansFavor);\n        /* int32 rule_of_law = 45; */\n        if (message.ruleOfLaw !== 0)\n            writer.tag(45, WireType.Varint).int32(message.ruleOfLaw);\n        /* int32 pursuit_of_justice = 46; */\n        if (message.pursuitOfJustice !== 0)\n            writer.tag(46, WireType.Varint).int32(message.pursuitOfJustice);\n        /* bool communion = 47; */\n        if (message.communion !== false)\n            writer.tag(47, WireType.Varint).bool(message.communion);\n        /* int32 the_art_of_war = 48; */\n        if (message.theArtOfWar !== 0)\n            writer.tag(48, WireType.Varint).int32(message.theArtOfWar);\n        /* int32 long_arm_of_the_law = 49; */\n        if (message.longArmOfTheLaw !== 0)\n            writer.tag(49, WireType.Varint).int32(message.longArmOfTheLaw);\n        /* bool divine_storm = 50; */\n        if (message.divineStorm !== false)\n            writer.tag(50, WireType.Varint).bool(message.divineStorm);\n        /* bool sacred_shield = 51; */\n        if (message.sacredShield !== false)\n            writer.tag(51, WireType.Varint).bool(message.sacredShield);\n        /* bool sanctity_of_battle = 52; */\n        if (message.sanctityOfBattle !== false)\n            writer.tag(52, WireType.Varint).bool(message.sanctityOfBattle);\n        /* bool seals_of_command = 53; */\n        if (message.sealsOfCommand !== false)\n            writer.tag(53, WireType.Varint).bool(message.sealsOfCommand);\n        /* int32 sanctified_wrath = 54; */\n        if (message.sanctifiedWrath !== 0)\n            writer.tag(54, WireType.Varint).int32(message.sanctifiedWrath);\n        /* int32 selfless_healer = 55; */\n        if (message.selflessHealer !== 0)\n            writer.tag(55, WireType.Varint).int32(message.selflessHealer);\n        /* bool repentance = 56; */\n        if (message.repentance !== false)\n            writer.tag(56, WireType.Varint).bool(message.repentance);\n        /* int32 divine_purpose = 57; */\n        if (message.divinePurpose !== 0)\n            writer.tag(57, WireType.Varint).int32(message.divinePurpose);\n        /* int32 inquiry_of_faith = 58; */\n        if (message.inquiryOfFaith !== 0)\n            writer.tag(58, WireType.Varint).int32(message.inquiryOfFaith);\n        /* int32 acts_of_sacrifice = 59; */\n        if (message.actsOfSacrifice !== 0)\n            writer.tag(59, WireType.Varint).int32(message.actsOfSacrifice);\n        /* bool zealotry = 60; */\n        if (message.zealotry !== false)\n            writer.tag(60, WireType.Varint).bool(message.zealotry);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PaladinTalents\n */\nexport const PaladinTalents = new PaladinTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PaladinOptions$Type extends MessageType<PaladinOptions> {\n    constructor() {\n        super(\"proto.PaladinOptions\", [\n            { no: 1, name: \"judgement\", kind: \"enum\", T: () => [\"proto.PaladinJudgement\", PaladinJudgement] },\n            { no: 2, name: \"seal\", kind: \"enum\", T: () => [\"proto.PaladinSeal\", PaladinSeal] },\n            { no: 3, name: \"aura\", kind: \"enum\", T: () => [\"proto.PaladinAura\", PaladinAura] },\n            { no: 4, name: \"use_avenging_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PaladinOptions>): PaladinOptions {\n        const message = { judgement: 0, seal: 0, aura: 0, useAvengingWrath: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PaladinOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaladinOptions): PaladinOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PaladinJudgement judgement */ 1:\n                    message.judgement = reader.int32();\n                    break;\n                case /* proto.PaladinSeal seal */ 2:\n                    message.seal = reader.int32();\n                    break;\n                case /* proto.PaladinAura aura */ 3:\n                    message.aura = reader.int32();\n                    break;\n                case /* bool use_avenging_wrath */ 4:\n                    message.useAvengingWrath = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PaladinOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PaladinJudgement judgement = 1; */\n        if (message.judgement !== 0)\n            writer.tag(1, WireType.Varint).int32(message.judgement);\n        /* proto.PaladinSeal seal = 2; */\n        if (message.seal !== 0)\n            writer.tag(2, WireType.Varint).int32(message.seal);\n        /* proto.PaladinAura aura = 3; */\n        if (message.aura !== 0)\n            writer.tag(3, WireType.Varint).int32(message.aura);\n        /* bool use_avenging_wrath = 4; */\n        if (message.useAvengingWrath !== false)\n            writer.tag(4, WireType.Varint).bool(message.useAvengingWrath);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PaladinOptions\n */\nexport const PaladinOptions = new PaladinOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetributionPaladin$Type extends MessageType<RetributionPaladin> {\n    constructor() {\n        super(\"proto.RetributionPaladin\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => RetributionPaladin_Options }\n        ]);\n    }\n    create(value?: PartialMessage<RetributionPaladin>): RetributionPaladin {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RetributionPaladin>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetributionPaladin): RetributionPaladin {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RetributionPaladin.Options options */ 3:\n                    message.options = RetributionPaladin_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetributionPaladin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RetributionPaladin.Options options = 3; */\n        if (message.options)\n            RetributionPaladin_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RetributionPaladin\n */\nexport const RetributionPaladin = new RetributionPaladin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetributionPaladin_Rotation$Type extends MessageType<RetributionPaladin_Rotation> {\n    constructor() {\n        super(\"proto.RetributionPaladin.Rotation\", []);\n    }\n    create(value?: PartialMessage<RetributionPaladin_Rotation>): RetributionPaladin_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RetributionPaladin_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetributionPaladin_Rotation): RetributionPaladin_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: RetributionPaladin_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RetributionPaladin.Rotation\n */\nexport const RetributionPaladin_Rotation = new RetributionPaladin_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetributionPaladin_Options$Type extends MessageType<RetributionPaladin_Options> {\n    constructor() {\n        super(\"proto.RetributionPaladin.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => PaladinOptions }\n        ]);\n    }\n    create(value?: PartialMessage<RetributionPaladin_Options>): RetributionPaladin_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RetributionPaladin_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetributionPaladin_Options): RetributionPaladin_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PaladinOptions class_options */ 1:\n                    message.classOptions = PaladinOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetributionPaladin_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PaladinOptions class_options = 1; */\n        if (message.classOptions)\n            PaladinOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RetributionPaladin.Options\n */\nexport const RetributionPaladin_Options = new RetributionPaladin_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionPaladin$Type extends MessageType<ProtectionPaladin> {\n    constructor() {\n        super(\"proto.ProtectionPaladin\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => ProtectionPaladin_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionPaladin>): ProtectionPaladin {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionPaladin>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionPaladin): ProtectionPaladin {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ProtectionPaladin.Options options */ 3:\n                    message.options = ProtectionPaladin_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionPaladin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ProtectionPaladin.Options options = 3; */\n        if (message.options)\n            ProtectionPaladin_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionPaladin\n */\nexport const ProtectionPaladin = new ProtectionPaladin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionPaladin_Rotation$Type extends MessageType<ProtectionPaladin_Rotation> {\n    constructor() {\n        super(\"proto.ProtectionPaladin.Rotation\", []);\n    }\n    create(value?: PartialMessage<ProtectionPaladin_Rotation>): ProtectionPaladin_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionPaladin_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionPaladin_Rotation): ProtectionPaladin_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: ProtectionPaladin_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionPaladin.Rotation\n */\nexport const ProtectionPaladin_Rotation = new ProtectionPaladin_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionPaladin_Options$Type extends MessageType<ProtectionPaladin_Options> {\n    constructor() {\n        super(\"proto.ProtectionPaladin.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => PaladinOptions }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionPaladin_Options>): ProtectionPaladin_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionPaladin_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionPaladin_Options): ProtectionPaladin_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PaladinOptions class_options */ 1:\n                    message.classOptions = PaladinOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionPaladin_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PaladinOptions class_options = 1; */\n        if (message.classOptions)\n            PaladinOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionPaladin.Options\n */\nexport const ProtectionPaladin_Options = new ProtectionPaladin_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HolyPaladin$Type extends MessageType<HolyPaladin> {\n    constructor() {\n        super(\"proto.HolyPaladin\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => HolyPaladin_Options }\n        ]);\n    }\n    create(value?: PartialMessage<HolyPaladin>): HolyPaladin {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HolyPaladin>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HolyPaladin): HolyPaladin {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.HolyPaladin.Options options */ 3:\n                    message.options = HolyPaladin_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HolyPaladin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.HolyPaladin.Options options = 3; */\n        if (message.options)\n            HolyPaladin_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HolyPaladin\n */\nexport const HolyPaladin = new HolyPaladin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HolyPaladin_Rotation$Type extends MessageType<HolyPaladin_Rotation> {\n    constructor() {\n        super(\"proto.HolyPaladin.Rotation\", []);\n    }\n    create(value?: PartialMessage<HolyPaladin_Rotation>): HolyPaladin_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HolyPaladin_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HolyPaladin_Rotation): HolyPaladin_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: HolyPaladin_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HolyPaladin.Rotation\n */\nexport const HolyPaladin_Rotation = new HolyPaladin_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HolyPaladin_Options$Type extends MessageType<HolyPaladin_Options> {\n    constructor() {\n        super(\"proto.HolyPaladin.Options\", [\n            { no: 2, name: \"class_options\", kind: \"message\", T: () => PaladinOptions }\n        ]);\n    }\n    create(value?: PartialMessage<HolyPaladin_Options>): HolyPaladin_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HolyPaladin_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HolyPaladin_Options): HolyPaladin_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PaladinOptions class_options */ 2:\n                    message.classOptions = PaladinOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HolyPaladin_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PaladinOptions class_options = 2; */\n        if (message.classOptions)\n            PaladinOptions.internalBinaryWrite(message.classOptions, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HolyPaladin.Options\n */\nexport const HolyPaladin_Options = new HolyPaladin_Options$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"mage.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { UnitReference } from \"./common\";\n/**\n * @generated from protobuf message proto.MageTalents\n */\nexport interface MageTalents {\n    /**\n     * Arcane\n     *\n     * @generated from protobuf field: int32 arcane_concentration = 1;\n     */\n    arcaneConcentration: number;\n    /**\n     * @generated from protobuf field: int32 improved_counterspell = 2;\n     */\n    improvedCounterspell: number;\n    /**\n     * @generated from protobuf field: int32 netherwind_presence = 3;\n     */\n    netherwindPresence: number;\n    /**\n     * @generated from protobuf field: int32 torment_the_weak = 4;\n     */\n    tormentTheWeak: number;\n    /**\n     * @generated from protobuf field: int32 invocation = 5;\n     */\n    invocation: number;\n    /**\n     * @generated from protobuf field: int32 improved_arcane_missiles = 6;\n     */\n    improvedArcaneMissiles: number;\n    /**\n     * @generated from protobuf field: int32 improved_blink = 7;\n     */\n    improvedBlink: number;\n    /**\n     * @generated from protobuf field: int32 arcane_flows = 8;\n     */\n    arcaneFlows: number;\n    /**\n     * @generated from protobuf field: bool presence_of_mind = 9;\n     */\n    presenceOfMind: boolean;\n    /**\n     * @generated from protobuf field: int32 missile_barrage = 10;\n     */\n    missileBarrage: number;\n    /**\n     * @generated from protobuf field: int32 prismatic_cloak = 11;\n     */\n    prismaticCloak: number;\n    /**\n     * @generated from protobuf field: int32 improved_polymorph = 12;\n     */\n    improvedPolymorph: number;\n    /**\n     * @generated from protobuf field: bool arcane_tactics = 13;\n     */\n    arcaneTactics: boolean;\n    /**\n     * @generated from protobuf field: int32 incanters_absorption = 14;\n     */\n    incantersAbsorption: number;\n    /**\n     * @generated from protobuf field: int32 improved_arcane_explosion = 15;\n     */\n    improvedArcaneExplosion: number;\n    /**\n     * @generated from protobuf field: int32 arcane_potency = 16;\n     */\n    arcanePotency: number;\n    /**\n     * @generated from protobuf field: bool slow = 17;\n     */\n    slow: boolean;\n    /**\n     * @generated from protobuf field: int32 nether_vortex = 18;\n     */\n    netherVortex: number;\n    /**\n     * @generated from protobuf field: bool focus_magic = 19;\n     */\n    focusMagic: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_mana_gem = 20;\n     */\n    improvedManaGem: number;\n    /**\n     * @generated from protobuf field: bool arcane_power = 21;\n     */\n    arcanePower: boolean;\n    /**\n     * Fire\n     *\n     * @generated from protobuf field: int32 master_of_elements = 22;\n     */\n    masterOfElements: number;\n    /**\n     * @generated from protobuf field: int32 burning_soul = 23;\n     */\n    burningSoul: number;\n    /**\n     * @generated from protobuf field: int32 improved_fire_blast = 24;\n     */\n    improvedFireBlast: number;\n    /**\n     * @generated from protobuf field: int32 ignite = 25;\n     */\n    ignite: number;\n    /**\n     * @generated from protobuf field: int32 fire_power = 26;\n     */\n    firePower: number;\n    /**\n     * @generated from protobuf field: int32 blazing_speed = 27;\n     */\n    blazingSpeed: number;\n    /**\n     * @generated from protobuf field: int32 impact = 28;\n     */\n    impact: number;\n    /**\n     * @generated from protobuf field: int32 cauterize = 29;\n     */\n    cauterize: number;\n    /**\n     * @generated from protobuf field: bool blast_wave = 30;\n     */\n    blastWave: boolean;\n    /**\n     * @generated from protobuf field: bool hot_streak = 31;\n     */\n    hotStreak: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_scorch = 32;\n     */\n    improvedScorch: number;\n    /**\n     * @generated from protobuf field: bool molten_shields = 33;\n     */\n    moltenShields: boolean;\n    /**\n     * @generated from protobuf field: bool combustion = 34;\n     */\n    combustion: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_hot_streak = 35;\n     */\n    improvedHotStreak: number;\n    /**\n     * @generated from protobuf field: bool firestarter = 36;\n     */\n    firestarter: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_flamestrike = 37;\n     */\n    improvedFlamestrike: number;\n    /**\n     * @generated from protobuf field: bool dragons_breath = 38;\n     */\n    dragonsBreath: boolean;\n    /**\n     * @generated from protobuf field: int32 molten_fury = 39;\n     */\n    moltenFury: number;\n    /**\n     * @generated from protobuf field: int32 pyromaniac = 40;\n     */\n    pyromaniac: number;\n    /**\n     * @generated from protobuf field: int32 critical_mass = 41;\n     */\n    criticalMass: number;\n    /**\n     * @generated from protobuf field: bool living_bomb = 42;\n     */\n    livingBomb: boolean;\n    /**\n     * Frost\n     *\n     * @generated from protobuf field: int32 early_frost = 43;\n     */\n    earlyFrost: number;\n    /**\n     * @generated from protobuf field: int32 piercing_ice = 44;\n     */\n    piercingIce: number;\n    /**\n     * @generated from protobuf field: int32 shatter = 45;\n     */\n    shatter: number;\n    /**\n     * @generated from protobuf field: int32 ice_floes = 46;\n     */\n    iceFloes: number;\n    /**\n     * @generated from protobuf field: int32 improved_cone_of_cold = 47;\n     */\n    improvedConeOfCold: number;\n    /**\n     * @generated from protobuf field: int32 piercing_chill = 48;\n     */\n    piercingChill: number;\n    /**\n     * @generated from protobuf field: int32 permafrost = 49;\n     */\n    permafrost: number;\n    /**\n     * @generated from protobuf field: int32 ice_shards = 50;\n     */\n    iceShards: number;\n    /**\n     * @generated from protobuf field: bool icy_veins = 51;\n     */\n    icyVeins: boolean;\n    /**\n     * @generated from protobuf field: int32 fingers_of_frost = 52;\n     */\n    fingersOfFrost: number;\n    /**\n     * @generated from protobuf field: int32 improved_freeze = 53;\n     */\n    improvedFreeze: number;\n    /**\n     * @generated from protobuf field: int32 enduring_winter = 54;\n     */\n    enduringWinter: number;\n    /**\n     * @generated from protobuf field: bool cold_snap = 55;\n     */\n    coldSnap: boolean;\n    /**\n     * @generated from protobuf field: int32 brain_freeze = 56;\n     */\n    brainFreeze: number;\n    /**\n     * @generated from protobuf field: int32 shattered_barrier = 57;\n     */\n    shatteredBarrier: number;\n    /**\n     * @generated from protobuf field: bool ice_barrier = 58;\n     */\n    iceBarrier: boolean;\n    /**\n     * @generated from protobuf field: int32 reactive_barrier = 59;\n     */\n    reactiveBarrier: number;\n    /**\n     * @generated from protobuf field: int32 frostfire_orb = 60;\n     */\n    frostfireOrb: number;\n    /**\n     * @generated from protobuf field: bool deep_freeze = 61;\n     */\n    deepFreeze: boolean;\n}\n/**\n * @generated from protobuf message proto.MageOptions\n */\nexport interface MageOptions {\n}\n/**\n * @generated from protobuf message proto.ArcaneMage\n */\nexport interface ArcaneMage {\n    /**\n     * @generated from protobuf field: proto.ArcaneMage.Options options = 1;\n     */\n    options?: ArcaneMage_Options;\n}\n/**\n * @generated from protobuf message proto.ArcaneMage.Rotation\n */\nexport interface ArcaneMage_Rotation {\n}\n/**\n * @generated from protobuf message proto.ArcaneMage.Options\n */\nexport interface ArcaneMage_Options {\n    /**\n     * @generated from protobuf field: proto.MageOptions class_options = 1;\n     */\n    classOptions?: MageOptions;\n    /**\n     * @generated from protobuf field: int32 focus_magic_percent_uptime = 2;\n     */\n    focusMagicPercentUptime: number;\n    /**\n     * @generated from protobuf field: proto.UnitReference focus_magic_target = 3;\n     */\n    focusMagicTarget?: UnitReference;\n}\n/**\n * @generated from protobuf message proto.FireMage\n */\nexport interface FireMage {\n    /**\n     * @generated from protobuf field: proto.FireMage.Options options = 1;\n     */\n    options?: FireMage_Options;\n}\n/**\n * @generated from protobuf message proto.FireMage.Rotation\n */\nexport interface FireMage_Rotation {\n}\n/**\n * @generated from protobuf message proto.FireMage.Options\n */\nexport interface FireMage_Options {\n    /**\n     * @generated from protobuf field: proto.MageOptions class_options = 1;\n     */\n    classOptions?: MageOptions;\n}\n/**\n * @generated from protobuf message proto.FrostMage\n */\nexport interface FrostMage {\n    /**\n     * @generated from protobuf field: proto.FrostMage.Options options = 1;\n     */\n    options?: FrostMage_Options;\n}\n/**\n * @generated from protobuf message proto.FrostMage.Rotation\n */\nexport interface FrostMage_Rotation {\n}\n/**\n * @generated from protobuf message proto.FrostMage.Options\n */\nexport interface FrostMage_Options {\n    /**\n     * @generated from protobuf field: proto.MageOptions class_options = 1;\n     */\n    classOptions?: MageOptions;\n    /**\n     * Chance for water elemental to disobey, doing nothing rather than cast.\n     *\n     * @generated from protobuf field: double water_elemental_disobey_chance = 2;\n     */\n    waterElementalDisobeyChance: number;\n}\n/**\n * @generated from protobuf enum proto.MagePrimeGlyph\n */\nexport enum MagePrimeGlyph {\n    /**\n     * @generated from protobuf enum value: MagePrimeGlyphNone = 0;\n     */\n    MagePrimeGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneBarrage = 45738;\n     */\n    GlyphOfArcaneBarrage = 45738,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneBlast = 44955;\n     */\n    GlyphOfArcaneBlast = 44955,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneMissiles = 42735;\n     */\n    GlyphOfArcaneMissiles = 42735,\n    /**\n     * @generated from protobuf enum value: GlyphOfConeOfCold = 42753;\n     */\n    GlyphOfConeOfCold = 42753,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeepFreeze = 45736;\n     */\n    GlyphOfDeepFreeze = 45736,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireball = 42739;\n     */\n    GlyphOfFireball = 42739,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostbolt = 42742;\n     */\n    GlyphOfFrostbolt = 42742,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostfire = 44684;\n     */\n    GlyphOfFrostfire = 44684,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceLance = 42745;\n     */\n    GlyphOfIceLance = 42745,\n    /**\n     * @generated from protobuf enum value: GlyphOfLivingBomb = 63539;\n     */\n    GlyphOfLivingBomb = 63539,\n    /**\n     * @generated from protobuf enum value: GlyphOfMageArmor = 42749;\n     */\n    GlyphOfMageArmor = 42749,\n    /**\n     * @generated from protobuf enum value: GlyphOfMoltenArmor = 42751;\n     */\n    GlyphOfMoltenArmor = 42751,\n    /**\n     * @generated from protobuf enum value: GlyphOfPyroblast = 42743;\n     */\n    GlyphOfPyroblast = 42743\n}\n/**\n * @generated from protobuf enum proto.MageMajorGlyph\n */\nexport enum MageMajorGlyph {\n    /**\n     * @generated from protobuf enum value: MageMajorGlyphNone = 0;\n     */\n    MageMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcanePower = 42736;\n     */\n    GlyphOfArcanePower = 42736,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlastWave = 44920;\n     */\n    GlyphOfBlastWave = 44920,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlink = 42737;\n     */\n    GlyphOfBlink = 42737,\n    /**\n     * @generated from protobuf enum value: GlyphOfDragonSBreath = 42754;\n     */\n    GlyphOfDragonSBreath = 42754,\n    /**\n     * @generated from protobuf enum value: GlyphOfEvocation = 42738;\n     */\n    GlyphOfEvocation = 42738,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostArmor = 69773;\n     */\n    GlyphOfFrostArmor = 69773,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostNova = 42741;\n     */\n    GlyphOfFrostNova = 42741,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceBarrier = 45740;\n     */\n    GlyphOfIceBarrier = 45740,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceBlock = 42744;\n     */\n    GlyphOfIceBlock = 42744,\n    /**\n     * @generated from protobuf enum value: GlyphOfIcyVeins = 42746;\n     */\n    GlyphOfIcyVeins = 42746,\n    /**\n     * @generated from protobuf enum value: GlyphOfInvisibility = 42748;\n     */\n    GlyphOfInvisibility = 42748,\n    /**\n     * @generated from protobuf enum value: GlyphOfManaShield = 50045;\n     */\n    GlyphOfManaShield = 50045,\n    /**\n     * @generated from protobuf enum value: GlyphOfPolymorph = 42752;\n     */\n    GlyphOfPolymorph = 42752,\n    /**\n     * @generated from protobuf enum value: GlyphOfSlow = 45737;\n     */\n    GlyphOfSlow = 45737\n}\n/**\n * @generated from protobuf enum proto.MageMinorGlyph\n */\nexport enum MageMinorGlyph {\n    /**\n     * @generated from protobuf enum value: MageMinorGlyphNone = 0;\n     */\n    MageMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneBrilliance = 43339;\n     */\n    GlyphOfArcaneBrilliance = 43339,\n    /**\n     * @generated from protobuf enum value: GlyphOfArmors = 63416;\n     */\n    GlyphOfArmors = 63416,\n    /**\n     * @generated from protobuf enum value: GlyphOfConjuring = 43359;\n     */\n    GlyphOfConjuring = 43359,\n    /**\n     * @generated from protobuf enum value: GlyphOfMirrorImage = 45739;\n     */\n    GlyphOfMirrorImage = 45739,\n    /**\n     * @generated from protobuf enum value: GlyphOfSlowFall = 43364;\n     */\n    GlyphOfSlowFall = 43364,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheMonkey = 43360;\n     */\n    GlyphOfTheMonkey = 43360,\n    /**\n     * @generated from protobuf enum value: GlyphOfThePenguin = 43361;\n     */\n    GlyphOfThePenguin = 43361\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass MageTalents$Type extends MessageType<MageTalents> {\n    constructor() {\n        super(\"proto.MageTalents\", [\n            { no: 1, name: \"arcane_concentration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"improved_counterspell\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"netherwind_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"torment_the_weak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"invocation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"improved_arcane_missiles\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"improved_blink\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"arcane_flows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"presence_of_mind\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"missile_barrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"prismatic_cloak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"improved_polymorph\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"arcane_tactics\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"incanters_absorption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"improved_arcane_explosion\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"arcane_potency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"slow\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"nether_vortex\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"focus_magic\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"improved_mana_gem\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"arcane_power\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"master_of_elements\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"burning_soul\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"improved_fire_blast\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"ignite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"fire_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"blazing_speed\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"impact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"cauterize\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"blast_wave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 31, name: \"hot_streak\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 32, name: \"improved_scorch\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"molten_shields\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"combustion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"improved_hot_streak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"firestarter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"improved_flamestrike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"dragons_breath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"molten_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"pyromaniac\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"critical_mass\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"living_bomb\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 43, name: \"early_frost\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"piercing_ice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"shatter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"ice_floes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"improved_cone_of_cold\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"piercing_chill\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"permafrost\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"ice_shards\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"icy_veins\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 52, name: \"fingers_of_frost\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"improved_freeze\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"enduring_winter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"cold_snap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"brain_freeze\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"shattered_barrier\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"ice_barrier\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 59, name: \"reactive_barrier\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"frostfire_orb\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"deep_freeze\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<MageTalents>): MageTalents {\n        const message = { arcaneConcentration: 0, improvedCounterspell: 0, netherwindPresence: 0, tormentTheWeak: 0, invocation: 0, improvedArcaneMissiles: 0, improvedBlink: 0, arcaneFlows: 0, presenceOfMind: false, missileBarrage: 0, prismaticCloak: 0, improvedPolymorph: 0, arcaneTactics: false, incantersAbsorption: 0, improvedArcaneExplosion: 0, arcanePotency: 0, slow: false, netherVortex: 0, focusMagic: false, improvedManaGem: 0, arcanePower: false, masterOfElements: 0, burningSoul: 0, improvedFireBlast: 0, ignite: 0, firePower: 0, blazingSpeed: 0, impact: 0, cauterize: 0, blastWave: false, hotStreak: false, improvedScorch: 0, moltenShields: false, combustion: false, improvedHotStreak: 0, firestarter: false, improvedFlamestrike: 0, dragonsBreath: false, moltenFury: 0, pyromaniac: 0, criticalMass: 0, livingBomb: false, earlyFrost: 0, piercingIce: 0, shatter: 0, iceFloes: 0, improvedConeOfCold: 0, piercingChill: 0, permafrost: 0, iceShards: 0, icyVeins: false, fingersOfFrost: 0, improvedFreeze: 0, enduringWinter: 0, coldSnap: false, brainFreeze: 0, shatteredBarrier: 0, iceBarrier: false, reactiveBarrier: 0, frostfireOrb: 0, deepFreeze: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<MageTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MageTalents): MageTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 arcane_concentration */ 1:\n                    message.arcaneConcentration = reader.int32();\n                    break;\n                case /* int32 improved_counterspell */ 2:\n                    message.improvedCounterspell = reader.int32();\n                    break;\n                case /* int32 netherwind_presence */ 3:\n                    message.netherwindPresence = reader.int32();\n                    break;\n                case /* int32 torment_the_weak */ 4:\n                    message.tormentTheWeak = reader.int32();\n                    break;\n                case /* int32 invocation */ 5:\n                    message.invocation = reader.int32();\n                    break;\n                case /* int32 improved_arcane_missiles */ 6:\n                    message.improvedArcaneMissiles = reader.int32();\n                    break;\n                case /* int32 improved_blink */ 7:\n                    message.improvedBlink = reader.int32();\n                    break;\n                case /* int32 arcane_flows */ 8:\n                    message.arcaneFlows = reader.int32();\n                    break;\n                case /* bool presence_of_mind */ 9:\n                    message.presenceOfMind = reader.bool();\n                    break;\n                case /* int32 missile_barrage */ 10:\n                    message.missileBarrage = reader.int32();\n                    break;\n                case /* int32 prismatic_cloak */ 11:\n                    message.prismaticCloak = reader.int32();\n                    break;\n                case /* int32 improved_polymorph */ 12:\n                    message.improvedPolymorph = reader.int32();\n                    break;\n                case /* bool arcane_tactics */ 13:\n                    message.arcaneTactics = reader.bool();\n                    break;\n                case /* int32 incanters_absorption */ 14:\n                    message.incantersAbsorption = reader.int32();\n                    break;\n                case /* int32 improved_arcane_explosion */ 15:\n                    message.improvedArcaneExplosion = reader.int32();\n                    break;\n                case /* int32 arcane_potency */ 16:\n                    message.arcanePotency = reader.int32();\n                    break;\n                case /* bool slow */ 17:\n                    message.slow = reader.bool();\n                    break;\n                case /* int32 nether_vortex */ 18:\n                    message.netherVortex = reader.int32();\n                    break;\n                case /* bool focus_magic */ 19:\n                    message.focusMagic = reader.bool();\n                    break;\n                case /* int32 improved_mana_gem */ 20:\n                    message.improvedManaGem = reader.int32();\n                    break;\n                case /* bool arcane_power */ 21:\n                    message.arcanePower = reader.bool();\n                    break;\n                case /* int32 master_of_elements */ 22:\n                    message.masterOfElements = reader.int32();\n                    break;\n                case /* int32 burning_soul */ 23:\n                    message.burningSoul = reader.int32();\n                    break;\n                case /* int32 improved_fire_blast */ 24:\n                    message.improvedFireBlast = reader.int32();\n                    break;\n                case /* int32 ignite */ 25:\n                    message.ignite = reader.int32();\n                    break;\n                case /* int32 fire_power */ 26:\n                    message.firePower = reader.int32();\n                    break;\n                case /* int32 blazing_speed */ 27:\n                    message.blazingSpeed = reader.int32();\n                    break;\n                case /* int32 impact */ 28:\n                    message.impact = reader.int32();\n                    break;\n                case /* int32 cauterize */ 29:\n                    message.cauterize = reader.int32();\n                    break;\n                case /* bool blast_wave */ 30:\n                    message.blastWave = reader.bool();\n                    break;\n                case /* bool hot_streak */ 31:\n                    message.hotStreak = reader.bool();\n                    break;\n                case /* int32 improved_scorch */ 32:\n                    message.improvedScorch = reader.int32();\n                    break;\n                case /* bool molten_shields */ 33:\n                    message.moltenShields = reader.bool();\n                    break;\n                case /* bool combustion */ 34:\n                    message.combustion = reader.bool();\n                    break;\n                case /* int32 improved_hot_streak */ 35:\n                    message.improvedHotStreak = reader.int32();\n                    break;\n                case /* bool firestarter */ 36:\n                    message.firestarter = reader.bool();\n                    break;\n                case /* int32 improved_flamestrike */ 37:\n                    message.improvedFlamestrike = reader.int32();\n                    break;\n                case /* bool dragons_breath */ 38:\n                    message.dragonsBreath = reader.bool();\n                    break;\n                case /* int32 molten_fury */ 39:\n                    message.moltenFury = reader.int32();\n                    break;\n                case /* int32 pyromaniac */ 40:\n                    message.pyromaniac = reader.int32();\n                    break;\n                case /* int32 critical_mass */ 41:\n                    message.criticalMass = reader.int32();\n                    break;\n                case /* bool living_bomb */ 42:\n                    message.livingBomb = reader.bool();\n                    break;\n                case /* int32 early_frost */ 43:\n                    message.earlyFrost = reader.int32();\n                    break;\n                case /* int32 piercing_ice */ 44:\n                    message.piercingIce = reader.int32();\n                    break;\n                case /* int32 shatter */ 45:\n                    message.shatter = reader.int32();\n                    break;\n                case /* int32 ice_floes */ 46:\n                    message.iceFloes = reader.int32();\n                    break;\n                case /* int32 improved_cone_of_cold */ 47:\n                    message.improvedConeOfCold = reader.int32();\n                    break;\n                case /* int32 piercing_chill */ 48:\n                    message.piercingChill = reader.int32();\n                    break;\n                case /* int32 permafrost */ 49:\n                    message.permafrost = reader.int32();\n                    break;\n                case /* int32 ice_shards */ 50:\n                    message.iceShards = reader.int32();\n                    break;\n                case /* bool icy_veins */ 51:\n                    message.icyVeins = reader.bool();\n                    break;\n                case /* int32 fingers_of_frost */ 52:\n                    message.fingersOfFrost = reader.int32();\n                    break;\n                case /* int32 improved_freeze */ 53:\n                    message.improvedFreeze = reader.int32();\n                    break;\n                case /* int32 enduring_winter */ 54:\n                    message.enduringWinter = reader.int32();\n                    break;\n                case /* bool cold_snap */ 55:\n                    message.coldSnap = reader.bool();\n                    break;\n                case /* int32 brain_freeze */ 56:\n                    message.brainFreeze = reader.int32();\n                    break;\n                case /* int32 shattered_barrier */ 57:\n                    message.shatteredBarrier = reader.int32();\n                    break;\n                case /* bool ice_barrier */ 58:\n                    message.iceBarrier = reader.bool();\n                    break;\n                case /* int32 reactive_barrier */ 59:\n                    message.reactiveBarrier = reader.int32();\n                    break;\n                case /* int32 frostfire_orb */ 60:\n                    message.frostfireOrb = reader.int32();\n                    break;\n                case /* bool deep_freeze */ 61:\n                    message.deepFreeze = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: MageTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 arcane_concentration = 1; */\n        if (message.arcaneConcentration !== 0)\n            writer.tag(1, WireType.Varint).int32(message.arcaneConcentration);\n        /* int32 improved_counterspell = 2; */\n        if (message.improvedCounterspell !== 0)\n            writer.tag(2, WireType.Varint).int32(message.improvedCounterspell);\n        /* int32 netherwind_presence = 3; */\n        if (message.netherwindPresence !== 0)\n            writer.tag(3, WireType.Varint).int32(message.netherwindPresence);\n        /* int32 torment_the_weak = 4; */\n        if (message.tormentTheWeak !== 0)\n            writer.tag(4, WireType.Varint).int32(message.tormentTheWeak);\n        /* int32 invocation = 5; */\n        if (message.invocation !== 0)\n            writer.tag(5, WireType.Varint).int32(message.invocation);\n        /* int32 improved_arcane_missiles = 6; */\n        if (message.improvedArcaneMissiles !== 0)\n            writer.tag(6, WireType.Varint).int32(message.improvedArcaneMissiles);\n        /* int32 improved_blink = 7; */\n        if (message.improvedBlink !== 0)\n            writer.tag(7, WireType.Varint).int32(message.improvedBlink);\n        /* int32 arcane_flows = 8; */\n        if (message.arcaneFlows !== 0)\n            writer.tag(8, WireType.Varint).int32(message.arcaneFlows);\n        /* bool presence_of_mind = 9; */\n        if (message.presenceOfMind !== false)\n            writer.tag(9, WireType.Varint).bool(message.presenceOfMind);\n        /* int32 missile_barrage = 10; */\n        if (message.missileBarrage !== 0)\n            writer.tag(10, WireType.Varint).int32(message.missileBarrage);\n        /* int32 prismatic_cloak = 11; */\n        if (message.prismaticCloak !== 0)\n            writer.tag(11, WireType.Varint).int32(message.prismaticCloak);\n        /* int32 improved_polymorph = 12; */\n        if (message.improvedPolymorph !== 0)\n            writer.tag(12, WireType.Varint).int32(message.improvedPolymorph);\n        /* bool arcane_tactics = 13; */\n        if (message.arcaneTactics !== false)\n            writer.tag(13, WireType.Varint).bool(message.arcaneTactics);\n        /* int32 incanters_absorption = 14; */\n        if (message.incantersAbsorption !== 0)\n            writer.tag(14, WireType.Varint).int32(message.incantersAbsorption);\n        /* int32 improved_arcane_explosion = 15; */\n        if (message.improvedArcaneExplosion !== 0)\n            writer.tag(15, WireType.Varint).int32(message.improvedArcaneExplosion);\n        /* int32 arcane_potency = 16; */\n        if (message.arcanePotency !== 0)\n            writer.tag(16, WireType.Varint).int32(message.arcanePotency);\n        /* bool slow = 17; */\n        if (message.slow !== false)\n            writer.tag(17, WireType.Varint).bool(message.slow);\n        /* int32 nether_vortex = 18; */\n        if (message.netherVortex !== 0)\n            writer.tag(18, WireType.Varint).int32(message.netherVortex);\n        /* bool focus_magic = 19; */\n        if (message.focusMagic !== false)\n            writer.tag(19, WireType.Varint).bool(message.focusMagic);\n        /* int32 improved_mana_gem = 20; */\n        if (message.improvedManaGem !== 0)\n            writer.tag(20, WireType.Varint).int32(message.improvedManaGem);\n        /* bool arcane_power = 21; */\n        if (message.arcanePower !== false)\n            writer.tag(21, WireType.Varint).bool(message.arcanePower);\n        /* int32 master_of_elements = 22; */\n        if (message.masterOfElements !== 0)\n            writer.tag(22, WireType.Varint).int32(message.masterOfElements);\n        /* int32 burning_soul = 23; */\n        if (message.burningSoul !== 0)\n            writer.tag(23, WireType.Varint).int32(message.burningSoul);\n        /* int32 improved_fire_blast = 24; */\n        if (message.improvedFireBlast !== 0)\n            writer.tag(24, WireType.Varint).int32(message.improvedFireBlast);\n        /* int32 ignite = 25; */\n        if (message.ignite !== 0)\n            writer.tag(25, WireType.Varint).int32(message.ignite);\n        /* int32 fire_power = 26; */\n        if (message.firePower !== 0)\n            writer.tag(26, WireType.Varint).int32(message.firePower);\n        /* int32 blazing_speed = 27; */\n        if (message.blazingSpeed !== 0)\n            writer.tag(27, WireType.Varint).int32(message.blazingSpeed);\n        /* int32 impact = 28; */\n        if (message.impact !== 0)\n            writer.tag(28, WireType.Varint).int32(message.impact);\n        /* int32 cauterize = 29; */\n        if (message.cauterize !== 0)\n            writer.tag(29, WireType.Varint).int32(message.cauterize);\n        /* bool blast_wave = 30; */\n        if (message.blastWave !== false)\n            writer.tag(30, WireType.Varint).bool(message.blastWave);\n        /* bool hot_streak = 31; */\n        if (message.hotStreak !== false)\n            writer.tag(31, WireType.Varint).bool(message.hotStreak);\n        /* int32 improved_scorch = 32; */\n        if (message.improvedScorch !== 0)\n            writer.tag(32, WireType.Varint).int32(message.improvedScorch);\n        /* bool molten_shields = 33; */\n        if (message.moltenShields !== false)\n            writer.tag(33, WireType.Varint).bool(message.moltenShields);\n        /* bool combustion = 34; */\n        if (message.combustion !== false)\n            writer.tag(34, WireType.Varint).bool(message.combustion);\n        /* int32 improved_hot_streak = 35; */\n        if (message.improvedHotStreak !== 0)\n            writer.tag(35, WireType.Varint).int32(message.improvedHotStreak);\n        /* bool firestarter = 36; */\n        if (message.firestarter !== false)\n            writer.tag(36, WireType.Varint).bool(message.firestarter);\n        /* int32 improved_flamestrike = 37; */\n        if (message.improvedFlamestrike !== 0)\n            writer.tag(37, WireType.Varint).int32(message.improvedFlamestrike);\n        /* bool dragons_breath = 38; */\n        if (message.dragonsBreath !== false)\n            writer.tag(38, WireType.Varint).bool(message.dragonsBreath);\n        /* int32 molten_fury = 39; */\n        if (message.moltenFury !== 0)\n            writer.tag(39, WireType.Varint).int32(message.moltenFury);\n        /* int32 pyromaniac = 40; */\n        if (message.pyromaniac !== 0)\n            writer.tag(40, WireType.Varint).int32(message.pyromaniac);\n        /* int32 critical_mass = 41; */\n        if (message.criticalMass !== 0)\n            writer.tag(41, WireType.Varint).int32(message.criticalMass);\n        /* bool living_bomb = 42; */\n        if (message.livingBomb !== false)\n            writer.tag(42, WireType.Varint).bool(message.livingBomb);\n        /* int32 early_frost = 43; */\n        if (message.earlyFrost !== 0)\n            writer.tag(43, WireType.Varint).int32(message.earlyFrost);\n        /* int32 piercing_ice = 44; */\n        if (message.piercingIce !== 0)\n            writer.tag(44, WireType.Varint).int32(message.piercingIce);\n        /* int32 shatter = 45; */\n        if (message.shatter !== 0)\n            writer.tag(45, WireType.Varint).int32(message.shatter);\n        /* int32 ice_floes = 46; */\n        if (message.iceFloes !== 0)\n            writer.tag(46, WireType.Varint).int32(message.iceFloes);\n        /* int32 improved_cone_of_cold = 47; */\n        if (message.improvedConeOfCold !== 0)\n            writer.tag(47, WireType.Varint).int32(message.improvedConeOfCold);\n        /* int32 piercing_chill = 48; */\n        if (message.piercingChill !== 0)\n            writer.tag(48, WireType.Varint).int32(message.piercingChill);\n        /* int32 permafrost = 49; */\n        if (message.permafrost !== 0)\n            writer.tag(49, WireType.Varint).int32(message.permafrost);\n        /* int32 ice_shards = 50; */\n        if (message.iceShards !== 0)\n            writer.tag(50, WireType.Varint).int32(message.iceShards);\n        /* bool icy_veins = 51; */\n        if (message.icyVeins !== false)\n            writer.tag(51, WireType.Varint).bool(message.icyVeins);\n        /* int32 fingers_of_frost = 52; */\n        if (message.fingersOfFrost !== 0)\n            writer.tag(52, WireType.Varint).int32(message.fingersOfFrost);\n        /* int32 improved_freeze = 53; */\n        if (message.improvedFreeze !== 0)\n            writer.tag(53, WireType.Varint).int32(message.improvedFreeze);\n        /* int32 enduring_winter = 54; */\n        if (message.enduringWinter !== 0)\n            writer.tag(54, WireType.Varint).int32(message.enduringWinter);\n        /* bool cold_snap = 55; */\n        if (message.coldSnap !== false)\n            writer.tag(55, WireType.Varint).bool(message.coldSnap);\n        /* int32 brain_freeze = 56; */\n        if (message.brainFreeze !== 0)\n            writer.tag(56, WireType.Varint).int32(message.brainFreeze);\n        /* int32 shattered_barrier = 57; */\n        if (message.shatteredBarrier !== 0)\n            writer.tag(57, WireType.Varint).int32(message.shatteredBarrier);\n        /* bool ice_barrier = 58; */\n        if (message.iceBarrier !== false)\n            writer.tag(58, WireType.Varint).bool(message.iceBarrier);\n        /* int32 reactive_barrier = 59; */\n        if (message.reactiveBarrier !== 0)\n            writer.tag(59, WireType.Varint).int32(message.reactiveBarrier);\n        /* int32 frostfire_orb = 60; */\n        if (message.frostfireOrb !== 0)\n            writer.tag(60, WireType.Varint).int32(message.frostfireOrb);\n        /* bool deep_freeze = 61; */\n        if (message.deepFreeze !== false)\n            writer.tag(61, WireType.Varint).bool(message.deepFreeze);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.MageTalents\n */\nexport const MageTalents = new MageTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MageOptions$Type extends MessageType<MageOptions> {\n    constructor() {\n        super(\"proto.MageOptions\", []);\n    }\n    create(value?: PartialMessage<MageOptions>): MageOptions {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<MageOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MageOptions): MageOptions {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: MageOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.MageOptions\n */\nexport const MageOptions = new MageOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ArcaneMage$Type extends MessageType<ArcaneMage> {\n    constructor() {\n        super(\"proto.ArcaneMage\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => ArcaneMage_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ArcaneMage>): ArcaneMage {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ArcaneMage>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArcaneMage): ArcaneMage {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ArcaneMage.Options options */ 1:\n                    message.options = ArcaneMage_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ArcaneMage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ArcaneMage.Options options = 1; */\n        if (message.options)\n            ArcaneMage_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ArcaneMage\n */\nexport const ArcaneMage = new ArcaneMage$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ArcaneMage_Rotation$Type extends MessageType<ArcaneMage_Rotation> {\n    constructor() {\n        super(\"proto.ArcaneMage.Rotation\", []);\n    }\n    create(value?: PartialMessage<ArcaneMage_Rotation>): ArcaneMage_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ArcaneMage_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArcaneMage_Rotation): ArcaneMage_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: ArcaneMage_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ArcaneMage.Rotation\n */\nexport const ArcaneMage_Rotation = new ArcaneMage_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ArcaneMage_Options$Type extends MessageType<ArcaneMage_Options> {\n    constructor() {\n        super(\"proto.ArcaneMage.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => MageOptions },\n            { no: 2, name: \"focus_magic_percent_uptime\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"focus_magic_target\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<ArcaneMage_Options>): ArcaneMage_Options {\n        const message = { focusMagicPercentUptime: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ArcaneMage_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArcaneMage_Options): ArcaneMage_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.MageOptions class_options */ 1:\n                    message.classOptions = MageOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* int32 focus_magic_percent_uptime */ 2:\n                    message.focusMagicPercentUptime = reader.int32();\n                    break;\n                case /* proto.UnitReference focus_magic_target */ 3:\n                    message.focusMagicTarget = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.focusMagicTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ArcaneMage_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.MageOptions class_options = 1; */\n        if (message.classOptions)\n            MageOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* int32 focus_magic_percent_uptime = 2; */\n        if (message.focusMagicPercentUptime !== 0)\n            writer.tag(2, WireType.Varint).int32(message.focusMagicPercentUptime);\n        /* proto.UnitReference focus_magic_target = 3; */\n        if (message.focusMagicTarget)\n            UnitReference.internalBinaryWrite(message.focusMagicTarget, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ArcaneMage.Options\n */\nexport const ArcaneMage_Options = new ArcaneMage_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FireMage$Type extends MessageType<FireMage> {\n    constructor() {\n        super(\"proto.FireMage\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => FireMage_Options }\n        ]);\n    }\n    create(value?: PartialMessage<FireMage>): FireMage {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FireMage>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FireMage): FireMage {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FireMage.Options options */ 1:\n                    message.options = FireMage_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FireMage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FireMage.Options options = 1; */\n        if (message.options)\n            FireMage_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FireMage\n */\nexport const FireMage = new FireMage$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FireMage_Rotation$Type extends MessageType<FireMage_Rotation> {\n    constructor() {\n        super(\"proto.FireMage.Rotation\", []);\n    }\n    create(value?: PartialMessage<FireMage_Rotation>): FireMage_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FireMage_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FireMage_Rotation): FireMage_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: FireMage_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FireMage.Rotation\n */\nexport const FireMage_Rotation = new FireMage_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FireMage_Options$Type extends MessageType<FireMage_Options> {\n    constructor() {\n        super(\"proto.FireMage.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => MageOptions }\n        ]);\n    }\n    create(value?: PartialMessage<FireMage_Options>): FireMage_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FireMage_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FireMage_Options): FireMage_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.MageOptions class_options */ 1:\n                    message.classOptions = MageOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FireMage_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.MageOptions class_options = 1; */\n        if (message.classOptions)\n            MageOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FireMage.Options\n */\nexport const FireMage_Options = new FireMage_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FrostMage$Type extends MessageType<FrostMage> {\n    constructor() {\n        super(\"proto.FrostMage\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => FrostMage_Options }\n        ]);\n    }\n    create(value?: PartialMessage<FrostMage>): FrostMage {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FrostMage>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FrostMage): FrostMage {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FrostMage.Options options */ 1:\n                    message.options = FrostMage_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FrostMage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FrostMage.Options options = 1; */\n        if (message.options)\n            FrostMage_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FrostMage\n */\nexport const FrostMage = new FrostMage$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FrostMage_Rotation$Type extends MessageType<FrostMage_Rotation> {\n    constructor() {\n        super(\"proto.FrostMage.Rotation\", []);\n    }\n    create(value?: PartialMessage<FrostMage_Rotation>): FrostMage_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FrostMage_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FrostMage_Rotation): FrostMage_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: FrostMage_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FrostMage.Rotation\n */\nexport const FrostMage_Rotation = new FrostMage_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FrostMage_Options$Type extends MessageType<FrostMage_Options> {\n    constructor() {\n        super(\"proto.FrostMage.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => MageOptions },\n            { no: 2, name: \"water_elemental_disobey_chance\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FrostMage_Options>): FrostMage_Options {\n        const message = { waterElementalDisobeyChance: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FrostMage_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FrostMage_Options): FrostMage_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.MageOptions class_options */ 1:\n                    message.classOptions = MageOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* double water_elemental_disobey_chance */ 2:\n                    message.waterElementalDisobeyChance = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FrostMage_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.MageOptions class_options = 1; */\n        if (message.classOptions)\n            MageOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double water_elemental_disobey_chance = 2; */\n        if (message.waterElementalDisobeyChance !== 0)\n            writer.tag(2, WireType.Bit64).double(message.waterElementalDisobeyChance);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FrostMage.Options\n */\nexport const FrostMage_Options = new FrostMage_Options$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"hunter.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RotationType } from \"./common\";\n/**\n * @generated from protobuf message proto.HunterTalents\n */\nexport interface HunterTalents {\n    /**\n     * Beast Mastery\n     *\n     * @generated from protobuf field: int32 improved_kill_command = 1;\n     */\n    improvedKillCommand: number;\n    /**\n     * @generated from protobuf field: int32 one_with_nature = 2;\n     */\n    oneWithNature: number;\n    /**\n     * @generated from protobuf field: int32 bestial_discipline = 3;\n     */\n    bestialDiscipline: number;\n    /**\n     * @generated from protobuf field: int32 pathfinding = 4;\n     */\n    pathfinding: number;\n    /**\n     * @generated from protobuf field: int32 spirit_bond = 5;\n     */\n    spiritBond: number;\n    /**\n     * @generated from protobuf field: int32 frenzy = 6;\n     */\n    frenzy: number;\n    /**\n     * @generated from protobuf field: int32 improved_mend_pet = 7;\n     */\n    improvedMendPet: number;\n    /**\n     * @generated from protobuf field: int32 cobra_strikes = 8;\n     */\n    cobraStrikes: number;\n    /**\n     * @generated from protobuf field: bool fervor = 9;\n     */\n    fervor: boolean;\n    /**\n     * @generated from protobuf field: bool focus_fire = 10;\n     */\n    focusFire: boolean;\n    /**\n     * @generated from protobuf field: int32 longevity = 11;\n     */\n    longevity: number;\n    /**\n     * @generated from protobuf field: int32 killing_streak = 12;\n     */\n    killingStreak: number;\n    /**\n     * @generated from protobuf field: int32 crouching_tiger_hidden_chimera = 13;\n     */\n    crouchingTigerHiddenChimera: number;\n    /**\n     * @generated from protobuf field: bool bestial_wrath = 14;\n     */\n    bestialWrath: boolean;\n    /**\n     * @generated from protobuf field: bool ferocious_inspiration = 15;\n     */\n    ferociousInspiration: boolean;\n    /**\n     * @generated from protobuf field: int32 kindred_spirits = 16;\n     */\n    kindredSpirits: number;\n    /**\n     * @generated from protobuf field: bool the_beast_within = 17;\n     */\n    theBeastWithin: boolean;\n    /**\n     * @generated from protobuf field: int32 invigoration = 18;\n     */\n    invigoration: number;\n    /**\n     * @generated from protobuf field: bool beast_mastery = 19;\n     */\n    beastMastery: boolean;\n    /**\n     * Marksmanship\n     *\n     * @generated from protobuf field: int32 go_for_the_throat = 20;\n     */\n    goForTheThroat: number;\n    /**\n     * @generated from protobuf field: int32 efficiency = 21;\n     */\n    efficiency: number;\n    /**\n     * @generated from protobuf field: int32 rapid_killing = 22;\n     */\n    rapidKilling: number;\n    /**\n     * @generated from protobuf field: int32 sic_em = 23;\n     */\n    sicEm: number;\n    /**\n     * @generated from protobuf field: int32 improved_steady_shot = 24;\n     */\n    improvedSteadyShot: number;\n    /**\n     * @generated from protobuf field: int32 careful_aim = 25;\n     */\n    carefulAim: number;\n    /**\n     * @generated from protobuf field: bool silencing_shot = 26;\n     */\n    silencingShot: boolean;\n    /**\n     * @generated from protobuf field: int32 concussive_barrage = 27;\n     */\n    concussiveBarrage: number;\n    /**\n     * @generated from protobuf field: int32 piercing_shots = 28;\n     */\n    piercingShots: number;\n    /**\n     * @generated from protobuf field: int32 bombardment = 29;\n     */\n    bombardment: number;\n    /**\n     * @generated from protobuf field: bool trueshot_aura = 30;\n     */\n    trueshotAura: boolean;\n    /**\n     * @generated from protobuf field: int32 termination = 31;\n     */\n    termination: number;\n    /**\n     * @generated from protobuf field: int32 resistance_is_futile = 32;\n     */\n    resistanceIsFutile: number;\n    /**\n     * @generated from protobuf field: int32 rapid_recuperation = 33;\n     */\n    rapidRecuperation: number;\n    /**\n     * @generated from protobuf field: int32 master_marksman = 34;\n     */\n    masterMarksman: number;\n    /**\n     * @generated from protobuf field: bool readiness = 35;\n     */\n    readiness: boolean;\n    /**\n     * @generated from protobuf field: int32 posthaste = 36;\n     */\n    posthaste: number;\n    /**\n     * @generated from protobuf field: int32 marked_for_death = 37;\n     */\n    markedForDeath: number;\n    /**\n     * @generated from protobuf field: bool chimera_shot = 38;\n     */\n    chimeraShot: boolean;\n    /**\n     * Survival\n     *\n     * @generated from protobuf field: int32 hunter_vs_wild = 39;\n     */\n    hunterVsWild: number;\n    /**\n     * @generated from protobuf field: int32 pathing = 40;\n     */\n    pathing: number;\n    /**\n     * @generated from protobuf field: int32 improved_serpent_sting = 41;\n     */\n    improvedSerpentSting: number;\n    /**\n     * @generated from protobuf field: int32 survival_tactics = 42;\n     */\n    survivalTactics: number;\n    /**\n     * @generated from protobuf field: int32 trap_mastery = 43;\n     */\n    trapMastery: number;\n    /**\n     * @generated from protobuf field: int32 entrapment = 44;\n     */\n    entrapment: number;\n    /**\n     * @generated from protobuf field: int32 point_of_no_escape = 45;\n     */\n    pointOfNoEscape: number;\n    /**\n     * @generated from protobuf field: int32 thrill_of_the_hunt = 46;\n     */\n    thrillOfTheHunt: number;\n    /**\n     * @generated from protobuf field: bool counterattack = 47;\n     */\n    counterattack: boolean;\n    /**\n     * @generated from protobuf field: int32 lock_and_load = 48;\n     */\n    lockAndLoad: number;\n    /**\n     * @generated from protobuf field: int32 resourcefulness = 49;\n     */\n    resourcefulness: number;\n    /**\n     * @generated from protobuf field: int32 mirrored_blades = 50;\n     */\n    mirroredBlades: number;\n    /**\n     * @generated from protobuf field: int32 t_n_t = 51;\n     */\n    tNT: number;\n    /**\n     * @generated from protobuf field: int32 toxicology = 52;\n     */\n    toxicology: number;\n    /**\n     * @generated from protobuf field: bool wyvern_sting = 53;\n     */\n    wyvernSting: boolean;\n    /**\n     * @generated from protobuf field: int32 noxious_stings = 54;\n     */\n    noxiousStings: number;\n    /**\n     * @generated from protobuf field: bool hunting_party = 55;\n     */\n    huntingParty: boolean;\n    /**\n     * @generated from protobuf field: int32 sniper_training = 56;\n     */\n    sniperTraining: number;\n    /**\n     * @generated from protobuf field: int32 serpent_spread = 57;\n     */\n    serpentSpread: number;\n    /**\n     * @generated from protobuf field: bool black_arrow = 58;\n     */\n    blackArrow: boolean;\n}\n/**\n * @generated from protobuf message proto.HunterPetTalents\n */\nexport interface HunterPetTalents {\n    /**\n     * Ferocity\n     *\n     * @generated from protobuf field: int32 serpent_swiftness = 1;\n     */\n    serpentSwiftness: number;\n    /**\n     * @generated from protobuf field: bool dash = 2;\n     */\n    dash: boolean;\n    /**\n     * @generated from protobuf field: int32 great_stamina = 3;\n     */\n    greatStamina: number;\n    /**\n     * @generated from protobuf field: int32 natural_armor = 4;\n     */\n    naturalArmor: number;\n    /**\n     * @generated from protobuf field: int32 improved_cower = 5;\n     */\n    improvedCower: number;\n    /**\n     * @generated from protobuf field: int32 bloodthirsty = 6;\n     */\n    bloodthirsty: number;\n    /**\n     * @generated from protobuf field: int32 spiked_collar = 7;\n     */\n    spikedCollar: number;\n    /**\n     * @generated from protobuf field: bool boars_speed = 8;\n     */\n    boarsSpeed: boolean;\n    /**\n     * @generated from protobuf field: int32 culling_the_herd = 9;\n     */\n    cullingTheHerd: number;\n    /**\n     * @generated from protobuf field: int32 lionhearted = 10;\n     */\n    lionhearted: number;\n    /**\n     * @generated from protobuf field: bool charge = 11;\n     */\n    charge: boolean;\n    /**\n     * @generated from protobuf field: bool heart_of_the_phoenix = 12;\n     */\n    heartOfThePhoenix: boolean;\n    /**\n     * @generated from protobuf field: int32 spiders_bite = 13;\n     */\n    spidersBite: number;\n    /**\n     * @generated from protobuf field: int32 great_resistance = 14;\n     */\n    greatResistance: number;\n    /**\n     * @generated from protobuf field: bool rabid = 15;\n     */\n    rabid: boolean;\n    /**\n     * @generated from protobuf field: bool lick_your_wounds = 16;\n     */\n    lickYourWounds: boolean;\n    /**\n     * @generated from protobuf field: bool call_of_the_wild = 17;\n     */\n    callOfTheWild: boolean;\n    /**\n     * @generated from protobuf field: int32 shark_attack = 18;\n     */\n    sharkAttack: number;\n    /**\n     * @generated from protobuf field: int32 wild_hunt = 19;\n     */\n    wildHunt: number;\n    /**\n     * Tenacity\n     *\n     * @generated from protobuf field: int32 blood_of_the_rhino = 20;\n     */\n    bloodOfTheRhino: number;\n    /**\n     * @generated from protobuf field: int32 pet_barding = 21;\n     */\n    petBarding: number;\n    /**\n     * @generated from protobuf field: int32 guard_dog = 22;\n     */\n    guardDog: number;\n    /**\n     * @generated from protobuf field: bool thunderstomp = 23;\n     */\n    thunderstomp: boolean;\n    /**\n     * @generated from protobuf field: int32 grace_of_the_mantis = 24;\n     */\n    graceOfTheMantis: number;\n    /**\n     * @generated from protobuf field: bool last_stand = 25;\n     */\n    lastStand: boolean;\n    /**\n     * @generated from protobuf field: bool taunt = 26;\n     */\n    taunt: boolean;\n    /**\n     * @generated from protobuf field: bool roar_of_sacrifice = 27;\n     */\n    roarOfSacrifice: boolean;\n    /**\n     * @generated from protobuf field: bool intervene = 28;\n     */\n    intervene: boolean;\n    /**\n     * @generated from protobuf field: int32 silverback = 29;\n     */\n    silverback: number;\n    /**\n     * Cunning\n     *\n     * @generated from protobuf field: bool dive = 30;\n     */\n    dive: boolean;\n    /**\n     * @generated from protobuf field: int32 mobility = 31;\n     */\n    mobility: number;\n    /**\n     * @generated from protobuf field: int32 owls_focus = 32;\n     */\n    owlsFocus: number;\n    /**\n     * @generated from protobuf field: bool carrion_feeder = 33;\n     */\n    carrionFeeder: boolean;\n    /**\n     * @generated from protobuf field: int32 cornered = 34;\n     */\n    cornered: number;\n    /**\n     * @generated from protobuf field: int32 feeding_frenzy = 35;\n     */\n    feedingFrenzy: number;\n    /**\n     * @generated from protobuf field: bool wolverine_bite = 36;\n     */\n    wolverineBite: boolean;\n    /**\n     * @generated from protobuf field: bool roar_of_recovery = 37;\n     */\n    roarOfRecovery: boolean;\n    /**\n     * @generated from protobuf field: bool bullheaded = 38;\n     */\n    bullheaded: boolean;\n}\n/**\n * @generated from protobuf message proto.HunterOptions\n */\nexport interface HunterOptions {\n    /**\n     * @generated from protobuf field: proto.HunterOptions.Ammo ammo = 1;\n     */\n    ammo: HunterOptions_Ammo;\n    /**\n     * @generated from protobuf field: proto.HunterOptions.PetType pet_type = 2;\n     */\n    petType: HunterOptions_PetType;\n    /**\n     * @generated from protobuf field: proto.HunterPetTalents pet_talents = 3;\n     */\n    petTalents?: HunterPetTalents;\n    /**\n     * @generated from protobuf field: double pet_uptime = 4;\n     */\n    petUptime: number;\n    /**\n     * @generated from protobuf field: double time_to_trap_weave_ms = 5;\n     */\n    timeToTrapWeaveMs: number;\n    /**\n     * @generated from protobuf field: bool use_hunters_mark = 6;\n     */\n    useHuntersMark: boolean;\n}\n/**\n * @generated from protobuf enum proto.HunterOptions.Ammo\n */\nexport enum HunterOptions_Ammo {\n    /**\n     * @generated from protobuf enum value: AmmoNone = 0;\n     */\n    AmmoNone = 0,\n    /**\n     * @generated from protobuf enum value: IcebladeArrow = 1;\n     */\n    IcebladeArrow = 1,\n    /**\n     * @generated from protobuf enum value: SaroniteRazorheads = 2;\n     */\n    SaroniteRazorheads = 2,\n    /**\n     * @generated from protobuf enum value: TerrorshaftArrow = 3;\n     */\n    TerrorshaftArrow = 3,\n    /**\n     * @generated from protobuf enum value: TimelessArrow = 4;\n     */\n    TimelessArrow = 4,\n    /**\n     * @generated from protobuf enum value: MysteriousArrow = 5;\n     */\n    MysteriousArrow = 5,\n    /**\n     * @generated from protobuf enum value: AdamantiteStinger = 6;\n     */\n    AdamantiteStinger = 6,\n    /**\n     * @generated from protobuf enum value: BlackflightArrow = 7;\n     */\n    BlackflightArrow = 7\n}\n/**\n * @generated from protobuf enum proto.HunterOptions.PetType\n */\nexport enum HunterOptions_PetType {\n    /**\n     * @generated from protobuf enum value: PetNone = 0;\n     */\n    PetNone = 0,\n    /**\n     * @generated from protobuf enum value: Bat = 1;\n     */\n    Bat = 1,\n    /**\n     * @generated from protobuf enum value: Bear = 2;\n     */\n    Bear = 2,\n    /**\n     * @generated from protobuf enum value: BirdOfPrey = 3;\n     */\n    BirdOfPrey = 3,\n    /**\n     * @generated from protobuf enum value: Boar = 4;\n     */\n    Boar = 4,\n    /**\n     * @generated from protobuf enum value: CarrionBird = 5;\n     */\n    CarrionBird = 5,\n    /**\n     * @generated from protobuf enum value: Cat = 6;\n     */\n    Cat = 6,\n    /**\n     * @generated from protobuf enum value: Chimaera = 7;\n     */\n    Chimaera = 7,\n    /**\n     * @generated from protobuf enum value: CoreHound = 8;\n     */\n    CoreHound = 8,\n    /**\n     * @generated from protobuf enum value: Crab = 9;\n     */\n    Crab = 9,\n    /**\n     * @generated from protobuf enum value: Crocolisk = 10;\n     */\n    Crocolisk = 10,\n    /**\n     * @generated from protobuf enum value: Devilsaur = 11;\n     */\n    Devilsaur = 11,\n    /**\n     * @generated from protobuf enum value: Dragonhawk = 12;\n     */\n    Dragonhawk = 12,\n    /**\n     * @generated from protobuf enum value: Gorilla = 13;\n     */\n    Gorilla = 13,\n    /**\n     * @generated from protobuf enum value: Hyena = 14;\n     */\n    Hyena = 14,\n    /**\n     * @generated from protobuf enum value: Moth = 15;\n     */\n    Moth = 15,\n    /**\n     * @generated from protobuf enum value: NetherRay = 16;\n     */\n    NetherRay = 16,\n    /**\n     * @generated from protobuf enum value: Raptor = 17;\n     */\n    Raptor = 17,\n    /**\n     * @generated from protobuf enum value: Ravager = 18;\n     */\n    Ravager = 18,\n    /**\n     * @generated from protobuf enum value: Rhino = 19;\n     */\n    Rhino = 19,\n    /**\n     * @generated from protobuf enum value: Scorpid = 20;\n     */\n    Scorpid = 20,\n    /**\n     * @generated from protobuf enum value: Serpent = 21;\n     */\n    Serpent = 21,\n    /**\n     * @generated from protobuf enum value: Silithid = 22;\n     */\n    Silithid = 22,\n    /**\n     * @generated from protobuf enum value: Spider = 23;\n     */\n    Spider = 23,\n    /**\n     * @generated from protobuf enum value: SpiritBeast = 24;\n     */\n    SpiritBeast = 24,\n    /**\n     * @generated from protobuf enum value: SporeBat = 25;\n     */\n    SporeBat = 25,\n    /**\n     * @generated from protobuf enum value: Tallstrider = 26;\n     */\n    Tallstrider = 26,\n    /**\n     * @generated from protobuf enum value: Turtle = 27;\n     */\n    Turtle = 27,\n    /**\n     * @generated from protobuf enum value: WarpStalker = 28;\n     */\n    WarpStalker = 28,\n    /**\n     * @generated from protobuf enum value: Wasp = 29;\n     */\n    Wasp = 29,\n    /**\n     * @generated from protobuf enum value: WindSerpent = 30;\n     */\n    WindSerpent = 30,\n    /**\n     * @generated from protobuf enum value: Wolf = 31;\n     */\n    Wolf = 31,\n    /**\n     * @generated from protobuf enum value: Worm = 32;\n     */\n    Worm = 32,\n    /**\n     * @generated from protobuf enum value: ShaleSpider = 33;\n     */\n    ShaleSpider = 33,\n    /**\n     * @generated from protobuf enum value: Fox = 34;\n     */\n    Fox = 34\n}\n/**\n * @generated from protobuf message proto.BeastMasteryHunter\n */\nexport interface BeastMasteryHunter {\n    /**\n     * @generated from protobuf field: proto.BeastMasteryHunter.Options options = 1;\n     */\n    options?: BeastMasteryHunter_Options;\n}\n/**\n * @generated from protobuf message proto.BeastMasteryHunter.Rotation\n */\nexport interface BeastMasteryHunter_Rotation {\n    /**\n     * @generated from protobuf field: proto.RotationType type = 9;\n     */\n    type: RotationType;\n    /**\n     * @generated from protobuf field: proto.HunterStingType sting = 5;\n     */\n    sting: HunterStingType;\n    /**\n     * @generated from protobuf field: bool trap_weave = 1;\n     */\n    trapWeave: boolean;\n    /**\n     * Switch to Aspect of the Viper when mana goes below this percent.\n     *\n     * @generated from protobuf field: double viper_start_mana_percent = 6;\n     */\n    viperStartManaPercent: number;\n    /**\n     * Switch back to Aspect of the Hawk when mana goes above this percent.\n     *\n     * @generated from protobuf field: double viper_stop_mana_percent = 7;\n     */\n    viperStopManaPercent: number;\n    /**\n     * Allow use of Explosive Shot Rank 3 during LNL procs.\n     *\n     * @generated from protobuf field: bool allow_explosive_shot_downrank = 10;\n     */\n    allowExplosiveShotDownrank: boolean;\n    /**\n     * @generated from protobuf field: bool multi_dot_serpent_sting = 11;\n     */\n    multiDotSerpentSting: boolean;\n}\n/**\n * @generated from protobuf message proto.BeastMasteryHunter.Options\n */\nexport interface BeastMasteryHunter_Options {\n    /**\n     * @generated from protobuf field: proto.HunterOptions class_options = 1;\n     */\n    classOptions?: HunterOptions;\n}\n/**\n * @generated from protobuf message proto.MarksmanshipHunter\n */\nexport interface MarksmanshipHunter {\n    /**\n     * @generated from protobuf field: proto.MarksmanshipHunter.Options options = 1;\n     */\n    options?: MarksmanshipHunter_Options;\n}\n/**\n * @generated from protobuf message proto.MarksmanshipHunter.Rotation\n */\nexport interface MarksmanshipHunter_Rotation {\n    /**\n     * @generated from protobuf field: proto.RotationType type = 9;\n     */\n    type: RotationType;\n    /**\n     * @generated from protobuf field: proto.HunterStingType sting = 5;\n     */\n    sting: HunterStingType;\n    /**\n     * @generated from protobuf field: bool trap_weave = 1;\n     */\n    trapWeave: boolean;\n    /**\n     * Switch to Aspect of the Viper when mana goes below this percent.\n     *\n     * @generated from protobuf field: double viper_start_mana_percent = 6;\n     */\n    viperStartManaPercent: number;\n    /**\n     * Switch back to Aspect of the Hawk when mana goes above this percent.\n     *\n     * @generated from protobuf field: double viper_stop_mana_percent = 7;\n     */\n    viperStopManaPercent: number;\n    /**\n     * Allow use of Explosive Shot Rank 3 during LNL procs.\n     *\n     * @generated from protobuf field: bool allow_explosive_shot_downrank = 10;\n     */\n    allowExplosiveShotDownrank: boolean;\n    /**\n     * @generated from protobuf field: bool multi_dot_serpent_sting = 11;\n     */\n    multiDotSerpentSting: boolean;\n}\n/**\n * @generated from protobuf message proto.MarksmanshipHunter.Options\n */\nexport interface MarksmanshipHunter_Options {\n    /**\n     * @generated from protobuf field: proto.HunterOptions class_options = 1;\n     */\n    classOptions?: HunterOptions;\n}\n/**\n * @generated from protobuf message proto.SurvivalHunter\n */\nexport interface SurvivalHunter {\n    /**\n     * @generated from protobuf field: proto.SurvivalHunter.Options options = 1;\n     */\n    options?: SurvivalHunter_Options;\n}\n/**\n * @generated from protobuf message proto.SurvivalHunter.Rotation\n */\nexport interface SurvivalHunter_Rotation {\n    /**\n     * @generated from protobuf field: proto.RotationType type = 9;\n     */\n    type: RotationType;\n    /**\n     * @generated from protobuf field: proto.HunterStingType sting = 5;\n     */\n    sting: HunterStingType;\n    /**\n     * @generated from protobuf field: bool trap_weave = 1;\n     */\n    trapWeave: boolean;\n    /**\n     * Switch to Aspect of the Viper when mana goes below this percent.\n     *\n     * @generated from protobuf field: double viper_start_mana_percent = 6;\n     */\n    viperStartManaPercent: number;\n    /**\n     * Switch back to Aspect of the Hawk when mana goes above this percent.\n     *\n     * @generated from protobuf field: double viper_stop_mana_percent = 7;\n     */\n    viperStopManaPercent: number;\n    /**\n     * Allow use of Explosive Shot Rank 3 during LNL procs.\n     *\n     * @generated from protobuf field: bool allow_explosive_shot_downrank = 10;\n     */\n    allowExplosiveShotDownrank: boolean;\n    /**\n     * @generated from protobuf field: bool multi_dot_serpent_sting = 11;\n     */\n    multiDotSerpentSting: boolean;\n}\n/**\n * @generated from protobuf message proto.SurvivalHunter.Options\n */\nexport interface SurvivalHunter_Options {\n    /**\n     * @generated from protobuf field: proto.HunterOptions class_options = 1;\n     */\n    classOptions?: HunterOptions;\n    /**\n     * @generated from protobuf field: double sniper_training_uptime = 2;\n     */\n    sniperTrainingUptime: number;\n}\n/**\n * @generated from protobuf enum proto.HunterPrimeGlyph\n */\nexport enum HunterPrimeGlyph {\n    /**\n     * @generated from protobuf enum value: HunterPrimeGlyphNone = 0;\n     */\n    HunterPrimeGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAimedShot = 42897;\n     */\n    GlyphOfAimedShot = 42897,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneShot = 42898;\n     */\n    GlyphOfArcaneShot = 42898,\n    /**\n     * @generated from protobuf enum value: GlyphOfChimeraShot = 45625;\n     */\n    GlyphOfChimeraShot = 45625,\n    /**\n     * @generated from protobuf enum value: GlyphOfDazzledPrey = 42909;\n     */\n    GlyphOfDazzledPrey = 42909,\n    /**\n     * @generated from protobuf enum value: GlyphOfExplosiveShot = 45731;\n     */\n    GlyphOfExplosiveShot = 45731,\n    /**\n     * @generated from protobuf enum value: GlyphOfKillCommand = 42915;\n     */\n    GlyphOfKillCommand = 42915,\n    /**\n     * @generated from protobuf enum value: GlyphOfKillShot = 45732;\n     */\n    GlyphOfKillShot = 45732,\n    /**\n     * @generated from protobuf enum value: GlyphOfRapidFire = 42911;\n     */\n    GlyphOfRapidFire = 42911,\n    /**\n     * @generated from protobuf enum value: GlyphOfSerpentSting = 42912;\n     */\n    GlyphOfSerpentSting = 42912,\n    /**\n     * @generated from protobuf enum value: GlyphOfSteadyShot = 42914;\n     */\n    GlyphOfSteadyShot = 42914\n}\n/**\n * @generated from protobuf enum proto.HunterMajorGlyph\n */\nexport enum HunterMajorGlyph {\n    /**\n     * @generated from protobuf enum value: HunterMajorGlyphNone = 0;\n     */\n    HunterMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBestialWrath = 42902;\n     */\n    GlyphOfBestialWrath = 42902,\n    /**\n     * @generated from protobuf enum value: GlyphOfConcussiveShot = 42901;\n     */\n    GlyphOfConcussiveShot = 42901,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeterrence = 42903;\n     */\n    GlyphOfDeterrence = 42903,\n    /**\n     * @generated from protobuf enum value: GlyphOfDisengage = 42904;\n     */\n    GlyphOfDisengage = 42904,\n    /**\n     * @generated from protobuf enum value: GlyphOfFreezingTrap = 42905;\n     */\n    GlyphOfFreezingTrap = 42905,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceTrap = 42906;\n     */\n    GlyphOfIceTrap = 42906,\n    /**\n     * @generated from protobuf enum value: GlyphOfImmolationTrap = 42908;\n     */\n    GlyphOfImmolationTrap = 42908,\n    /**\n     * @generated from protobuf enum value: GlyphOfMasterSCall = 45733;\n     */\n    GlyphOfMasterSCall = 45733,\n    /**\n     * @generated from protobuf enum value: GlyphOfMending = 42900;\n     */\n    GlyphOfMending = 42900,\n    /**\n     * @generated from protobuf enum value: GlyphOfMisdirection = 42907;\n     */\n    GlyphOfMisdirection = 42907,\n    /**\n     * @generated from protobuf enum value: GlyphOfRaptorStrike = 45735;\n     */\n    GlyphOfRaptorStrike = 45735,\n    /**\n     * @generated from protobuf enum value: GlyphOfScatterShot = 45734;\n     */\n    GlyphOfScatterShot = 45734,\n    /**\n     * @generated from protobuf enum value: GlyphOfSilencingShot = 42910;\n     */\n    GlyphOfSilencingShot = 42910,\n    /**\n     * @generated from protobuf enum value: GlyphOfSnakeTrap = 42913;\n     */\n    GlyphOfSnakeTrap = 42913,\n    /**\n     * @generated from protobuf enum value: GlyphOfTrapLauncher = 42899;\n     */\n    GlyphOfTrapLauncher = 42899,\n    /**\n     * @generated from protobuf enum value: GlyphOfWyvernSting = 42917;\n     */\n    GlyphOfWyvernSting = 42917\n}\n/**\n * @generated from protobuf enum proto.HunterMinorGlyph\n */\nexport enum HunterMinorGlyph {\n    /**\n     * @generated from protobuf enum value: HunterMinorGlyphNone = 0;\n     */\n    HunterMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAspectOfThePack = 43355;\n     */\n    GlyphOfAspectOfThePack = 43355,\n    /**\n     * @generated from protobuf enum value: GlyphOfFeignDeath = 43351;\n     */\n    GlyphOfFeignDeath = 43351,\n    /**\n     * @generated from protobuf enum value: GlyphOfLesserProportion = 43350;\n     */\n    GlyphOfLesserProportion = 43350,\n    /**\n     * @generated from protobuf enum value: GlyphOfRevivePet = 43338;\n     */\n    GlyphOfRevivePet = 43338,\n    /**\n     * @generated from protobuf enum value: GlyphOfScareBeast = 43356;\n     */\n    GlyphOfScareBeast = 43356\n}\n/**\n * @generated from protobuf enum proto.HunterStingType\n */\nexport enum HunterStingType {\n    /**\n     * @generated from protobuf enum value: NoSting = 0;\n     */\n    NoSting = 0,\n    /**\n     * @generated from protobuf enum value: ScorpidSting = 1;\n     */\n    ScorpidSting = 1,\n    /**\n     * @generated from protobuf enum value: SerpentSting = 2;\n     */\n    SerpentSting = 2\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass HunterTalents$Type extends MessageType<HunterTalents> {\n    constructor() {\n        super(\"proto.HunterTalents\", [\n            { no: 1, name: \"improved_kill_command\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"one_with_nature\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"bestial_discipline\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"pathfinding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"spirit_bond\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"improved_mend_pet\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"cobra_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"fervor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"focus_fire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"longevity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"killing_streak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"crouching_tiger_hidden_chimera\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"bestial_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"ferocious_inspiration\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"kindred_spirits\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"the_beast_within\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"invigoration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"beast_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"go_for_the_throat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"efficiency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"rapid_killing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"sic_em\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"improved_steady_shot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"careful_aim\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"silencing_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"concussive_barrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"piercing_shots\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"bombardment\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"trueshot_aura\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 31, name: \"termination\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"resistance_is_futile\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"rapid_recuperation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"master_marksman\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"readiness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"posthaste\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"marked_for_death\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"chimera_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"hunter_vs_wild\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"pathing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"improved_serpent_sting\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"survival_tactics\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"trap_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"entrapment\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"point_of_no_escape\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"thrill_of_the_hunt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"counterattack\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 48, name: \"lock_and_load\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"resourcefulness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"mirrored_blades\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"t_n_t\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"toxicology\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"wyvern_sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 54, name: \"noxious_stings\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"hunting_party\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"sniper_training\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"serpent_spread\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"black_arrow\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HunterTalents>): HunterTalents {\n        const message = { improvedKillCommand: 0, oneWithNature: 0, bestialDiscipline: 0, pathfinding: 0, spiritBond: 0, frenzy: 0, improvedMendPet: 0, cobraStrikes: 0, fervor: false, focusFire: false, longevity: 0, killingStreak: 0, crouchingTigerHiddenChimera: 0, bestialWrath: false, ferociousInspiration: false, kindredSpirits: 0, theBeastWithin: false, invigoration: 0, beastMastery: false, goForTheThroat: 0, efficiency: 0, rapidKilling: 0, sicEm: 0, improvedSteadyShot: 0, carefulAim: 0, silencingShot: false, concussiveBarrage: 0, piercingShots: 0, bombardment: 0, trueshotAura: false, termination: 0, resistanceIsFutile: 0, rapidRecuperation: 0, masterMarksman: 0, readiness: false, posthaste: 0, markedForDeath: 0, chimeraShot: false, hunterVsWild: 0, pathing: 0, improvedSerpentSting: 0, survivalTactics: 0, trapMastery: 0, entrapment: 0, pointOfNoEscape: 0, thrillOfTheHunt: 0, counterattack: false, lockAndLoad: 0, resourcefulness: 0, mirroredBlades: 0, tNT: 0, toxicology: 0, wyvernSting: false, noxiousStings: 0, huntingParty: false, sniperTraining: 0, serpentSpread: 0, blackArrow: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HunterTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HunterTalents): HunterTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 improved_kill_command */ 1:\n                    message.improvedKillCommand = reader.int32();\n                    break;\n                case /* int32 one_with_nature */ 2:\n                    message.oneWithNature = reader.int32();\n                    break;\n                case /* int32 bestial_discipline */ 3:\n                    message.bestialDiscipline = reader.int32();\n                    break;\n                case /* int32 pathfinding */ 4:\n                    message.pathfinding = reader.int32();\n                    break;\n                case /* int32 spirit_bond */ 5:\n                    message.spiritBond = reader.int32();\n                    break;\n                case /* int32 frenzy */ 6:\n                    message.frenzy = reader.int32();\n                    break;\n                case /* int32 improved_mend_pet */ 7:\n                    message.improvedMendPet = reader.int32();\n                    break;\n                case /* int32 cobra_strikes */ 8:\n                    message.cobraStrikes = reader.int32();\n                    break;\n                case /* bool fervor */ 9:\n                    message.fervor = reader.bool();\n                    break;\n                case /* bool focus_fire */ 10:\n                    message.focusFire = reader.bool();\n                    break;\n                case /* int32 longevity */ 11:\n                    message.longevity = reader.int32();\n                    break;\n                case /* int32 killing_streak */ 12:\n                    message.killingStreak = reader.int32();\n                    break;\n                case /* int32 crouching_tiger_hidden_chimera */ 13:\n                    message.crouchingTigerHiddenChimera = reader.int32();\n                    break;\n                case /* bool bestial_wrath */ 14:\n                    message.bestialWrath = reader.bool();\n                    break;\n                case /* bool ferocious_inspiration */ 15:\n                    message.ferociousInspiration = reader.bool();\n                    break;\n                case /* int32 kindred_spirits */ 16:\n                    message.kindredSpirits = reader.int32();\n                    break;\n                case /* bool the_beast_within */ 17:\n                    message.theBeastWithin = reader.bool();\n                    break;\n                case /* int32 invigoration */ 18:\n                    message.invigoration = reader.int32();\n                    break;\n                case /* bool beast_mastery */ 19:\n                    message.beastMastery = reader.bool();\n                    break;\n                case /* int32 go_for_the_throat */ 20:\n                    message.goForTheThroat = reader.int32();\n                    break;\n                case /* int32 efficiency */ 21:\n                    message.efficiency = reader.int32();\n                    break;\n                case /* int32 rapid_killing */ 22:\n                    message.rapidKilling = reader.int32();\n                    break;\n                case /* int32 sic_em */ 23:\n                    message.sicEm = reader.int32();\n                    break;\n                case /* int32 improved_steady_shot */ 24:\n                    message.improvedSteadyShot = reader.int32();\n                    break;\n                case /* int32 careful_aim */ 25:\n                    message.carefulAim = reader.int32();\n                    break;\n                case /* bool silencing_shot */ 26:\n                    message.silencingShot = reader.bool();\n                    break;\n                case /* int32 concussive_barrage */ 27:\n                    message.concussiveBarrage = reader.int32();\n                    break;\n                case /* int32 piercing_shots */ 28:\n                    message.piercingShots = reader.int32();\n                    break;\n                case /* int32 bombardment */ 29:\n                    message.bombardment = reader.int32();\n                    break;\n                case /* bool trueshot_aura */ 30:\n                    message.trueshotAura = reader.bool();\n                    break;\n                case /* int32 termination */ 31:\n                    message.termination = reader.int32();\n                    break;\n                case /* int32 resistance_is_futile */ 32:\n                    message.resistanceIsFutile = reader.int32();\n                    break;\n                case /* int32 rapid_recuperation */ 33:\n                    message.rapidRecuperation = reader.int32();\n                    break;\n                case /* int32 master_marksman */ 34:\n                    message.masterMarksman = reader.int32();\n                    break;\n                case /* bool readiness */ 35:\n                    message.readiness = reader.bool();\n                    break;\n                case /* int32 posthaste */ 36:\n                    message.posthaste = reader.int32();\n                    break;\n                case /* int32 marked_for_death */ 37:\n                    message.markedForDeath = reader.int32();\n                    break;\n                case /* bool chimera_shot */ 38:\n                    message.chimeraShot = reader.bool();\n                    break;\n                case /* int32 hunter_vs_wild */ 39:\n                    message.hunterVsWild = reader.int32();\n                    break;\n                case /* int32 pathing */ 40:\n                    message.pathing = reader.int32();\n                    break;\n                case /* int32 improved_serpent_sting */ 41:\n                    message.improvedSerpentSting = reader.int32();\n                    break;\n                case /* int32 survival_tactics */ 42:\n                    message.survivalTactics = reader.int32();\n                    break;\n                case /* int32 trap_mastery */ 43:\n                    message.trapMastery = reader.int32();\n                    break;\n                case /* int32 entrapment */ 44:\n                    message.entrapment = reader.int32();\n                    break;\n                case /* int32 point_of_no_escape */ 45:\n                    message.pointOfNoEscape = reader.int32();\n                    break;\n                case /* int32 thrill_of_the_hunt */ 46:\n                    message.thrillOfTheHunt = reader.int32();\n                    break;\n                case /* bool counterattack */ 47:\n                    message.counterattack = reader.bool();\n                    break;\n                case /* int32 lock_and_load */ 48:\n                    message.lockAndLoad = reader.int32();\n                    break;\n                case /* int32 resourcefulness */ 49:\n                    message.resourcefulness = reader.int32();\n                    break;\n                case /* int32 mirrored_blades */ 50:\n                    message.mirroredBlades = reader.int32();\n                    break;\n                case /* int32 t_n_t */ 51:\n                    message.tNT = reader.int32();\n                    break;\n                case /* int32 toxicology */ 52:\n                    message.toxicology = reader.int32();\n                    break;\n                case /* bool wyvern_sting */ 53:\n                    message.wyvernSting = reader.bool();\n                    break;\n                case /* int32 noxious_stings */ 54:\n                    message.noxiousStings = reader.int32();\n                    break;\n                case /* bool hunting_party */ 55:\n                    message.huntingParty = reader.bool();\n                    break;\n                case /* int32 sniper_training */ 56:\n                    message.sniperTraining = reader.int32();\n                    break;\n                case /* int32 serpent_spread */ 57:\n                    message.serpentSpread = reader.int32();\n                    break;\n                case /* bool black_arrow */ 58:\n                    message.blackArrow = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HunterTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 improved_kill_command = 1; */\n        if (message.improvedKillCommand !== 0)\n            writer.tag(1, WireType.Varint).int32(message.improvedKillCommand);\n        /* int32 one_with_nature = 2; */\n        if (message.oneWithNature !== 0)\n            writer.tag(2, WireType.Varint).int32(message.oneWithNature);\n        /* int32 bestial_discipline = 3; */\n        if (message.bestialDiscipline !== 0)\n            writer.tag(3, WireType.Varint).int32(message.bestialDiscipline);\n        /* int32 pathfinding = 4; */\n        if (message.pathfinding !== 0)\n            writer.tag(4, WireType.Varint).int32(message.pathfinding);\n        /* int32 spirit_bond = 5; */\n        if (message.spiritBond !== 0)\n            writer.tag(5, WireType.Varint).int32(message.spiritBond);\n        /* int32 frenzy = 6; */\n        if (message.frenzy !== 0)\n            writer.tag(6, WireType.Varint).int32(message.frenzy);\n        /* int32 improved_mend_pet = 7; */\n        if (message.improvedMendPet !== 0)\n            writer.tag(7, WireType.Varint).int32(message.improvedMendPet);\n        /* int32 cobra_strikes = 8; */\n        if (message.cobraStrikes !== 0)\n            writer.tag(8, WireType.Varint).int32(message.cobraStrikes);\n        /* bool fervor = 9; */\n        if (message.fervor !== false)\n            writer.tag(9, WireType.Varint).bool(message.fervor);\n        /* bool focus_fire = 10; */\n        if (message.focusFire !== false)\n            writer.tag(10, WireType.Varint).bool(message.focusFire);\n        /* int32 longevity = 11; */\n        if (message.longevity !== 0)\n            writer.tag(11, WireType.Varint).int32(message.longevity);\n        /* int32 killing_streak = 12; */\n        if (message.killingStreak !== 0)\n            writer.tag(12, WireType.Varint).int32(message.killingStreak);\n        /* int32 crouching_tiger_hidden_chimera = 13; */\n        if (message.crouchingTigerHiddenChimera !== 0)\n            writer.tag(13, WireType.Varint).int32(message.crouchingTigerHiddenChimera);\n        /* bool bestial_wrath = 14; */\n        if (message.bestialWrath !== false)\n            writer.tag(14, WireType.Varint).bool(message.bestialWrath);\n        /* bool ferocious_inspiration = 15; */\n        if (message.ferociousInspiration !== false)\n            writer.tag(15, WireType.Varint).bool(message.ferociousInspiration);\n        /* int32 kindred_spirits = 16; */\n        if (message.kindredSpirits !== 0)\n            writer.tag(16, WireType.Varint).int32(message.kindredSpirits);\n        /* bool the_beast_within = 17; */\n        if (message.theBeastWithin !== false)\n            writer.tag(17, WireType.Varint).bool(message.theBeastWithin);\n        /* int32 invigoration = 18; */\n        if (message.invigoration !== 0)\n            writer.tag(18, WireType.Varint).int32(message.invigoration);\n        /* bool beast_mastery = 19; */\n        if (message.beastMastery !== false)\n            writer.tag(19, WireType.Varint).bool(message.beastMastery);\n        /* int32 go_for_the_throat = 20; */\n        if (message.goForTheThroat !== 0)\n            writer.tag(20, WireType.Varint).int32(message.goForTheThroat);\n        /* int32 efficiency = 21; */\n        if (message.efficiency !== 0)\n            writer.tag(21, WireType.Varint).int32(message.efficiency);\n        /* int32 rapid_killing = 22; */\n        if (message.rapidKilling !== 0)\n            writer.tag(22, WireType.Varint).int32(message.rapidKilling);\n        /* int32 sic_em = 23; */\n        if (message.sicEm !== 0)\n            writer.tag(23, WireType.Varint).int32(message.sicEm);\n        /* int32 improved_steady_shot = 24; */\n        if (message.improvedSteadyShot !== 0)\n            writer.tag(24, WireType.Varint).int32(message.improvedSteadyShot);\n        /* int32 careful_aim = 25; */\n        if (message.carefulAim !== 0)\n            writer.tag(25, WireType.Varint).int32(message.carefulAim);\n        /* bool silencing_shot = 26; */\n        if (message.silencingShot !== false)\n            writer.tag(26, WireType.Varint).bool(message.silencingShot);\n        /* int32 concussive_barrage = 27; */\n        if (message.concussiveBarrage !== 0)\n            writer.tag(27, WireType.Varint).int32(message.concussiveBarrage);\n        /* int32 piercing_shots = 28; */\n        if (message.piercingShots !== 0)\n            writer.tag(28, WireType.Varint).int32(message.piercingShots);\n        /* int32 bombardment = 29; */\n        if (message.bombardment !== 0)\n            writer.tag(29, WireType.Varint).int32(message.bombardment);\n        /* bool trueshot_aura = 30; */\n        if (message.trueshotAura !== false)\n            writer.tag(30, WireType.Varint).bool(message.trueshotAura);\n        /* int32 termination = 31; */\n        if (message.termination !== 0)\n            writer.tag(31, WireType.Varint).int32(message.termination);\n        /* int32 resistance_is_futile = 32; */\n        if (message.resistanceIsFutile !== 0)\n            writer.tag(32, WireType.Varint).int32(message.resistanceIsFutile);\n        /* int32 rapid_recuperation = 33; */\n        if (message.rapidRecuperation !== 0)\n            writer.tag(33, WireType.Varint).int32(message.rapidRecuperation);\n        /* int32 master_marksman = 34; */\n        if (message.masterMarksman !== 0)\n            writer.tag(34, WireType.Varint).int32(message.masterMarksman);\n        /* bool readiness = 35; */\n        if (message.readiness !== false)\n            writer.tag(35, WireType.Varint).bool(message.readiness);\n        /* int32 posthaste = 36; */\n        if (message.posthaste !== 0)\n            writer.tag(36, WireType.Varint).int32(message.posthaste);\n        /* int32 marked_for_death = 37; */\n        if (message.markedForDeath !== 0)\n            writer.tag(37, WireType.Varint).int32(message.markedForDeath);\n        /* bool chimera_shot = 38; */\n        if (message.chimeraShot !== false)\n            writer.tag(38, WireType.Varint).bool(message.chimeraShot);\n        /* int32 hunter_vs_wild = 39; */\n        if (message.hunterVsWild !== 0)\n            writer.tag(39, WireType.Varint).int32(message.hunterVsWild);\n        /* int32 pathing = 40; */\n        if (message.pathing !== 0)\n            writer.tag(40, WireType.Varint).int32(message.pathing);\n        /* int32 improved_serpent_sting = 41; */\n        if (message.improvedSerpentSting !== 0)\n            writer.tag(41, WireType.Varint).int32(message.improvedSerpentSting);\n        /* int32 survival_tactics = 42; */\n        if (message.survivalTactics !== 0)\n            writer.tag(42, WireType.Varint).int32(message.survivalTactics);\n        /* int32 trap_mastery = 43; */\n        if (message.trapMastery !== 0)\n            writer.tag(43, WireType.Varint).int32(message.trapMastery);\n        /* int32 entrapment = 44; */\n        if (message.entrapment !== 0)\n            writer.tag(44, WireType.Varint).int32(message.entrapment);\n        /* int32 point_of_no_escape = 45; */\n        if (message.pointOfNoEscape !== 0)\n            writer.tag(45, WireType.Varint).int32(message.pointOfNoEscape);\n        /* int32 thrill_of_the_hunt = 46; */\n        if (message.thrillOfTheHunt !== 0)\n            writer.tag(46, WireType.Varint).int32(message.thrillOfTheHunt);\n        /* bool counterattack = 47; */\n        if (message.counterattack !== false)\n            writer.tag(47, WireType.Varint).bool(message.counterattack);\n        /* int32 lock_and_load = 48; */\n        if (message.lockAndLoad !== 0)\n            writer.tag(48, WireType.Varint).int32(message.lockAndLoad);\n        /* int32 resourcefulness = 49; */\n        if (message.resourcefulness !== 0)\n            writer.tag(49, WireType.Varint).int32(message.resourcefulness);\n        /* int32 mirrored_blades = 50; */\n        if (message.mirroredBlades !== 0)\n            writer.tag(50, WireType.Varint).int32(message.mirroredBlades);\n        /* int32 t_n_t = 51; */\n        if (message.tNT !== 0)\n            writer.tag(51, WireType.Varint).int32(message.tNT);\n        /* int32 toxicology = 52; */\n        if (message.toxicology !== 0)\n            writer.tag(52, WireType.Varint).int32(message.toxicology);\n        /* bool wyvern_sting = 53; */\n        if (message.wyvernSting !== false)\n            writer.tag(53, WireType.Varint).bool(message.wyvernSting);\n        /* int32 noxious_stings = 54; */\n        if (message.noxiousStings !== 0)\n            writer.tag(54, WireType.Varint).int32(message.noxiousStings);\n        /* bool hunting_party = 55; */\n        if (message.huntingParty !== false)\n            writer.tag(55, WireType.Varint).bool(message.huntingParty);\n        /* int32 sniper_training = 56; */\n        if (message.sniperTraining !== 0)\n            writer.tag(56, WireType.Varint).int32(message.sniperTraining);\n        /* int32 serpent_spread = 57; */\n        if (message.serpentSpread !== 0)\n            writer.tag(57, WireType.Varint).int32(message.serpentSpread);\n        /* bool black_arrow = 58; */\n        if (message.blackArrow !== false)\n            writer.tag(58, WireType.Varint).bool(message.blackArrow);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HunterTalents\n */\nexport const HunterTalents = new HunterTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HunterPetTalents$Type extends MessageType<HunterPetTalents> {\n    constructor() {\n        super(\"proto.HunterPetTalents\", [\n            { no: 1, name: \"serpent_swiftness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"dash\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"great_stamina\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"natural_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"improved_cower\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"bloodthirsty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"spiked_collar\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"boars_speed\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"culling_the_herd\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"lionhearted\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"charge\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"heart_of_the_phoenix\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"spiders_bite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"great_resistance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"rabid\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"lick_your_wounds\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"call_of_the_wild\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"shark_attack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"wild_hunt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"blood_of_the_rhino\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"pet_barding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"guard_dog\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"thunderstomp\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"grace_of_the_mantis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"last_stand\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"taunt\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"roar_of_sacrifice\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 28, name: \"intervene\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"silverback\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"dive\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 31, name: \"mobility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"owls_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"carrion_feeder\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"cornered\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"feeding_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"wolverine_bite\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"roar_of_recovery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 38, name: \"bullheaded\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HunterPetTalents>): HunterPetTalents {\n        const message = { serpentSwiftness: 0, dash: false, greatStamina: 0, naturalArmor: 0, improvedCower: 0, bloodthirsty: 0, spikedCollar: 0, boarsSpeed: false, cullingTheHerd: 0, lionhearted: 0, charge: false, heartOfThePhoenix: false, spidersBite: 0, greatResistance: 0, rabid: false, lickYourWounds: false, callOfTheWild: false, sharkAttack: 0, wildHunt: 0, bloodOfTheRhino: 0, petBarding: 0, guardDog: 0, thunderstomp: false, graceOfTheMantis: 0, lastStand: false, taunt: false, roarOfSacrifice: false, intervene: false, silverback: 0, dive: false, mobility: 0, owlsFocus: 0, carrionFeeder: false, cornered: 0, feedingFrenzy: 0, wolverineBite: false, roarOfRecovery: false, bullheaded: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HunterPetTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HunterPetTalents): HunterPetTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 serpent_swiftness */ 1:\n                    message.serpentSwiftness = reader.int32();\n                    break;\n                case /* bool dash */ 2:\n                    message.dash = reader.bool();\n                    break;\n                case /* int32 great_stamina */ 3:\n                    message.greatStamina = reader.int32();\n                    break;\n                case /* int32 natural_armor */ 4:\n                    message.naturalArmor = reader.int32();\n                    break;\n                case /* int32 improved_cower */ 5:\n                    message.improvedCower = reader.int32();\n                    break;\n                case /* int32 bloodthirsty */ 6:\n                    message.bloodthirsty = reader.int32();\n                    break;\n                case /* int32 spiked_collar */ 7:\n                    message.spikedCollar = reader.int32();\n                    break;\n                case /* bool boars_speed */ 8:\n                    message.boarsSpeed = reader.bool();\n                    break;\n                case /* int32 culling_the_herd */ 9:\n                    message.cullingTheHerd = reader.int32();\n                    break;\n                case /* int32 lionhearted */ 10:\n                    message.lionhearted = reader.int32();\n                    break;\n                case /* bool charge */ 11:\n                    message.charge = reader.bool();\n                    break;\n                case /* bool heart_of_the_phoenix */ 12:\n                    message.heartOfThePhoenix = reader.bool();\n                    break;\n                case /* int32 spiders_bite */ 13:\n                    message.spidersBite = reader.int32();\n                    break;\n                case /* int32 great_resistance */ 14:\n                    message.greatResistance = reader.int32();\n                    break;\n                case /* bool rabid */ 15:\n                    message.rabid = reader.bool();\n                    break;\n                case /* bool lick_your_wounds */ 16:\n                    message.lickYourWounds = reader.bool();\n                    break;\n                case /* bool call_of_the_wild */ 17:\n                    message.callOfTheWild = reader.bool();\n                    break;\n                case /* int32 shark_attack */ 18:\n                    message.sharkAttack = reader.int32();\n                    break;\n                case /* int32 wild_hunt */ 19:\n                    message.wildHunt = reader.int32();\n                    break;\n                case /* int32 blood_of_the_rhino */ 20:\n                    message.bloodOfTheRhino = reader.int32();\n                    break;\n                case /* int32 pet_barding */ 21:\n                    message.petBarding = reader.int32();\n                    break;\n                case /* int32 guard_dog */ 22:\n                    message.guardDog = reader.int32();\n                    break;\n                case /* bool thunderstomp */ 23:\n                    message.thunderstomp = reader.bool();\n                    break;\n                case /* int32 grace_of_the_mantis */ 24:\n                    message.graceOfTheMantis = reader.int32();\n                    break;\n                case /* bool last_stand */ 25:\n                    message.lastStand = reader.bool();\n                    break;\n                case /* bool taunt */ 26:\n                    message.taunt = reader.bool();\n                    break;\n                case /* bool roar_of_sacrifice */ 27:\n                    message.roarOfSacrifice = reader.bool();\n                    break;\n                case /* bool intervene */ 28:\n                    message.intervene = reader.bool();\n                    break;\n                case /* int32 silverback */ 29:\n                    message.silverback = reader.int32();\n                    break;\n                case /* bool dive */ 30:\n                    message.dive = reader.bool();\n                    break;\n                case /* int32 mobility */ 31:\n                    message.mobility = reader.int32();\n                    break;\n                case /* int32 owls_focus */ 32:\n                    message.owlsFocus = reader.int32();\n                    break;\n                case /* bool carrion_feeder */ 33:\n                    message.carrionFeeder = reader.bool();\n                    break;\n                case /* int32 cornered */ 34:\n                    message.cornered = reader.int32();\n                    break;\n                case /* int32 feeding_frenzy */ 35:\n                    message.feedingFrenzy = reader.int32();\n                    break;\n                case /* bool wolverine_bite */ 36:\n                    message.wolverineBite = reader.bool();\n                    break;\n                case /* bool roar_of_recovery */ 37:\n                    message.roarOfRecovery = reader.bool();\n                    break;\n                case /* bool bullheaded */ 38:\n                    message.bullheaded = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HunterPetTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 serpent_swiftness = 1; */\n        if (message.serpentSwiftness !== 0)\n            writer.tag(1, WireType.Varint).int32(message.serpentSwiftness);\n        /* bool dash = 2; */\n        if (message.dash !== false)\n            writer.tag(2, WireType.Varint).bool(message.dash);\n        /* int32 great_stamina = 3; */\n        if (message.greatStamina !== 0)\n            writer.tag(3, WireType.Varint).int32(message.greatStamina);\n        /* int32 natural_armor = 4; */\n        if (message.naturalArmor !== 0)\n            writer.tag(4, WireType.Varint).int32(message.naturalArmor);\n        /* int32 improved_cower = 5; */\n        if (message.improvedCower !== 0)\n            writer.tag(5, WireType.Varint).int32(message.improvedCower);\n        /* int32 bloodthirsty = 6; */\n        if (message.bloodthirsty !== 0)\n            writer.tag(6, WireType.Varint).int32(message.bloodthirsty);\n        /* int32 spiked_collar = 7; */\n        if (message.spikedCollar !== 0)\n            writer.tag(7, WireType.Varint).int32(message.spikedCollar);\n        /* bool boars_speed = 8; */\n        if (message.boarsSpeed !== false)\n            writer.tag(8, WireType.Varint).bool(message.boarsSpeed);\n        /* int32 culling_the_herd = 9; */\n        if (message.cullingTheHerd !== 0)\n            writer.tag(9, WireType.Varint).int32(message.cullingTheHerd);\n        /* int32 lionhearted = 10; */\n        if (message.lionhearted !== 0)\n            writer.tag(10, WireType.Varint).int32(message.lionhearted);\n        /* bool charge = 11; */\n        if (message.charge !== false)\n            writer.tag(11, WireType.Varint).bool(message.charge);\n        /* bool heart_of_the_phoenix = 12; */\n        if (message.heartOfThePhoenix !== false)\n            writer.tag(12, WireType.Varint).bool(message.heartOfThePhoenix);\n        /* int32 spiders_bite = 13; */\n        if (message.spidersBite !== 0)\n            writer.tag(13, WireType.Varint).int32(message.spidersBite);\n        /* int32 great_resistance = 14; */\n        if (message.greatResistance !== 0)\n            writer.tag(14, WireType.Varint).int32(message.greatResistance);\n        /* bool rabid = 15; */\n        if (message.rabid !== false)\n            writer.tag(15, WireType.Varint).bool(message.rabid);\n        /* bool lick_your_wounds = 16; */\n        if (message.lickYourWounds !== false)\n            writer.tag(16, WireType.Varint).bool(message.lickYourWounds);\n        /* bool call_of_the_wild = 17; */\n        if (message.callOfTheWild !== false)\n            writer.tag(17, WireType.Varint).bool(message.callOfTheWild);\n        /* int32 shark_attack = 18; */\n        if (message.sharkAttack !== 0)\n            writer.tag(18, WireType.Varint).int32(message.sharkAttack);\n        /* int32 wild_hunt = 19; */\n        if (message.wildHunt !== 0)\n            writer.tag(19, WireType.Varint).int32(message.wildHunt);\n        /* int32 blood_of_the_rhino = 20; */\n        if (message.bloodOfTheRhino !== 0)\n            writer.tag(20, WireType.Varint).int32(message.bloodOfTheRhino);\n        /* int32 pet_barding = 21; */\n        if (message.petBarding !== 0)\n            writer.tag(21, WireType.Varint).int32(message.petBarding);\n        /* int32 guard_dog = 22; */\n        if (message.guardDog !== 0)\n            writer.tag(22, WireType.Varint).int32(message.guardDog);\n        /* bool thunderstomp = 23; */\n        if (message.thunderstomp !== false)\n            writer.tag(23, WireType.Varint).bool(message.thunderstomp);\n        /* int32 grace_of_the_mantis = 24; */\n        if (message.graceOfTheMantis !== 0)\n            writer.tag(24, WireType.Varint).int32(message.graceOfTheMantis);\n        /* bool last_stand = 25; */\n        if (message.lastStand !== false)\n            writer.tag(25, WireType.Varint).bool(message.lastStand);\n        /* bool taunt = 26; */\n        if (message.taunt !== false)\n            writer.tag(26, WireType.Varint).bool(message.taunt);\n        /* bool roar_of_sacrifice = 27; */\n        if (message.roarOfSacrifice !== false)\n            writer.tag(27, WireType.Varint).bool(message.roarOfSacrifice);\n        /* bool intervene = 28; */\n        if (message.intervene !== false)\n            writer.tag(28, WireType.Varint).bool(message.intervene);\n        /* int32 silverback = 29; */\n        if (message.silverback !== 0)\n            writer.tag(29, WireType.Varint).int32(message.silverback);\n        /* bool dive = 30; */\n        if (message.dive !== false)\n            writer.tag(30, WireType.Varint).bool(message.dive);\n        /* int32 mobility = 31; */\n        if (message.mobility !== 0)\n            writer.tag(31, WireType.Varint).int32(message.mobility);\n        /* int32 owls_focus = 32; */\n        if (message.owlsFocus !== 0)\n            writer.tag(32, WireType.Varint).int32(message.owlsFocus);\n        /* bool carrion_feeder = 33; */\n        if (message.carrionFeeder !== false)\n            writer.tag(33, WireType.Varint).bool(message.carrionFeeder);\n        /* int32 cornered = 34; */\n        if (message.cornered !== 0)\n            writer.tag(34, WireType.Varint).int32(message.cornered);\n        /* int32 feeding_frenzy = 35; */\n        if (message.feedingFrenzy !== 0)\n            writer.tag(35, WireType.Varint).int32(message.feedingFrenzy);\n        /* bool wolverine_bite = 36; */\n        if (message.wolverineBite !== false)\n            writer.tag(36, WireType.Varint).bool(message.wolverineBite);\n        /* bool roar_of_recovery = 37; */\n        if (message.roarOfRecovery !== false)\n            writer.tag(37, WireType.Varint).bool(message.roarOfRecovery);\n        /* bool bullheaded = 38; */\n        if (message.bullheaded !== false)\n            writer.tag(38, WireType.Varint).bool(message.bullheaded);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HunterPetTalents\n */\nexport const HunterPetTalents = new HunterPetTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HunterOptions$Type extends MessageType<HunterOptions> {\n    constructor() {\n        super(\"proto.HunterOptions\", [\n            { no: 1, name: \"ammo\", kind: \"enum\", T: () => [\"proto.HunterOptions.Ammo\", HunterOptions_Ammo] },\n            { no: 2, name: \"pet_type\", kind: \"enum\", T: () => [\"proto.HunterOptions.PetType\", HunterOptions_PetType] },\n            { no: 3, name: \"pet_talents\", kind: \"message\", T: () => HunterPetTalents },\n            { no: 4, name: \"pet_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"time_to_trap_weave_ms\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"use_hunters_mark\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HunterOptions>): HunterOptions {\n        const message = { ammo: 0, petType: 0, petUptime: 0, timeToTrapWeaveMs: 0, useHuntersMark: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HunterOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HunterOptions): HunterOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.HunterOptions.Ammo ammo */ 1:\n                    message.ammo = reader.int32();\n                    break;\n                case /* proto.HunterOptions.PetType pet_type */ 2:\n                    message.petType = reader.int32();\n                    break;\n                case /* proto.HunterPetTalents pet_talents */ 3:\n                    message.petTalents = HunterPetTalents.internalBinaryRead(reader, reader.uint32(), options, message.petTalents);\n                    break;\n                case /* double pet_uptime */ 4:\n                    message.petUptime = reader.double();\n                    break;\n                case /* double time_to_trap_weave_ms */ 5:\n                    message.timeToTrapWeaveMs = reader.double();\n                    break;\n                case /* bool use_hunters_mark */ 6:\n                    message.useHuntersMark = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HunterOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.HunterOptions.Ammo ammo = 1; */\n        if (message.ammo !== 0)\n            writer.tag(1, WireType.Varint).int32(message.ammo);\n        /* proto.HunterOptions.PetType pet_type = 2; */\n        if (message.petType !== 0)\n            writer.tag(2, WireType.Varint).int32(message.petType);\n        /* proto.HunterPetTalents pet_talents = 3; */\n        if (message.petTalents)\n            HunterPetTalents.internalBinaryWrite(message.petTalents, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* double pet_uptime = 4; */\n        if (message.petUptime !== 0)\n            writer.tag(4, WireType.Bit64).double(message.petUptime);\n        /* double time_to_trap_weave_ms = 5; */\n        if (message.timeToTrapWeaveMs !== 0)\n            writer.tag(5, WireType.Bit64).double(message.timeToTrapWeaveMs);\n        /* bool use_hunters_mark = 6; */\n        if (message.useHuntersMark !== false)\n            writer.tag(6, WireType.Varint).bool(message.useHuntersMark);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HunterOptions\n */\nexport const HunterOptions = new HunterOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BeastMasteryHunter$Type extends MessageType<BeastMasteryHunter> {\n    constructor() {\n        super(\"proto.BeastMasteryHunter\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => BeastMasteryHunter_Options }\n        ]);\n    }\n    create(value?: PartialMessage<BeastMasteryHunter>): BeastMasteryHunter {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BeastMasteryHunter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BeastMasteryHunter): BeastMasteryHunter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.BeastMasteryHunter.Options options */ 1:\n                    message.options = BeastMasteryHunter_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BeastMasteryHunter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.BeastMasteryHunter.Options options = 1; */\n        if (message.options)\n            BeastMasteryHunter_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BeastMasteryHunter\n */\nexport const BeastMasteryHunter = new BeastMasteryHunter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BeastMasteryHunter_Rotation$Type extends MessageType<BeastMasteryHunter_Rotation> {\n    constructor() {\n        super(\"proto.BeastMasteryHunter.Rotation\", [\n            { no: 9, name: \"type\", kind: \"enum\", T: () => [\"proto.RotationType\", RotationType] },\n            { no: 5, name: \"sting\", kind: \"enum\", T: () => [\"proto.HunterStingType\", HunterStingType] },\n            { no: 1, name: \"trap_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"viper_start_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"viper_stop_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"allow_explosive_shot_downrank\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"multi_dot_serpent_sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<BeastMasteryHunter_Rotation>): BeastMasteryHunter_Rotation {\n        const message = { type: 0, sting: 0, trapWeave: false, viperStartManaPercent: 0, viperStopManaPercent: 0, allowExplosiveShotDownrank: false, multiDotSerpentSting: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BeastMasteryHunter_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BeastMasteryHunter_Rotation): BeastMasteryHunter_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RotationType type */ 9:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.HunterStingType sting */ 5:\n                    message.sting = reader.int32();\n                    break;\n                case /* bool trap_weave */ 1:\n                    message.trapWeave = reader.bool();\n                    break;\n                case /* double viper_start_mana_percent */ 6:\n                    message.viperStartManaPercent = reader.double();\n                    break;\n                case /* double viper_stop_mana_percent */ 7:\n                    message.viperStopManaPercent = reader.double();\n                    break;\n                case /* bool allow_explosive_shot_downrank */ 10:\n                    message.allowExplosiveShotDownrank = reader.bool();\n                    break;\n                case /* bool multi_dot_serpent_sting */ 11:\n                    message.multiDotSerpentSting = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BeastMasteryHunter_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RotationType type = 9; */\n        if (message.type !== 0)\n            writer.tag(9, WireType.Varint).int32(message.type);\n        /* proto.HunterStingType sting = 5; */\n        if (message.sting !== 0)\n            writer.tag(5, WireType.Varint).int32(message.sting);\n        /* bool trap_weave = 1; */\n        if (message.trapWeave !== false)\n            writer.tag(1, WireType.Varint).bool(message.trapWeave);\n        /* double viper_start_mana_percent = 6; */\n        if (message.viperStartManaPercent !== 0)\n            writer.tag(6, WireType.Bit64).double(message.viperStartManaPercent);\n        /* double viper_stop_mana_percent = 7; */\n        if (message.viperStopManaPercent !== 0)\n            writer.tag(7, WireType.Bit64).double(message.viperStopManaPercent);\n        /* bool allow_explosive_shot_downrank = 10; */\n        if (message.allowExplosiveShotDownrank !== false)\n            writer.tag(10, WireType.Varint).bool(message.allowExplosiveShotDownrank);\n        /* bool multi_dot_serpent_sting = 11; */\n        if (message.multiDotSerpentSting !== false)\n            writer.tag(11, WireType.Varint).bool(message.multiDotSerpentSting);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BeastMasteryHunter.Rotation\n */\nexport const BeastMasteryHunter_Rotation = new BeastMasteryHunter_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BeastMasteryHunter_Options$Type extends MessageType<BeastMasteryHunter_Options> {\n    constructor() {\n        super(\"proto.BeastMasteryHunter.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => HunterOptions }\n        ]);\n    }\n    create(value?: PartialMessage<BeastMasteryHunter_Options>): BeastMasteryHunter_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BeastMasteryHunter_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BeastMasteryHunter_Options): BeastMasteryHunter_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.HunterOptions class_options */ 1:\n                    message.classOptions = HunterOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BeastMasteryHunter_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.HunterOptions class_options = 1; */\n        if (message.classOptions)\n            HunterOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BeastMasteryHunter.Options\n */\nexport const BeastMasteryHunter_Options = new BeastMasteryHunter_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MarksmanshipHunter$Type extends MessageType<MarksmanshipHunter> {\n    constructor() {\n        super(\"proto.MarksmanshipHunter\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => MarksmanshipHunter_Options }\n        ]);\n    }\n    create(value?: PartialMessage<MarksmanshipHunter>): MarksmanshipHunter {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<MarksmanshipHunter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarksmanshipHunter): MarksmanshipHunter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.MarksmanshipHunter.Options options */ 1:\n                    message.options = MarksmanshipHunter_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: MarksmanshipHunter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.MarksmanshipHunter.Options options = 1; */\n        if (message.options)\n            MarksmanshipHunter_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.MarksmanshipHunter\n */\nexport const MarksmanshipHunter = new MarksmanshipHunter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MarksmanshipHunter_Rotation$Type extends MessageType<MarksmanshipHunter_Rotation> {\n    constructor() {\n        super(\"proto.MarksmanshipHunter.Rotation\", [\n            { no: 9, name: \"type\", kind: \"enum\", T: () => [\"proto.RotationType\", RotationType] },\n            { no: 5, name: \"sting\", kind: \"enum\", T: () => [\"proto.HunterStingType\", HunterStingType] },\n            { no: 1, name: \"trap_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"viper_start_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"viper_stop_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"allow_explosive_shot_downrank\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"multi_dot_serpent_sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<MarksmanshipHunter_Rotation>): MarksmanshipHunter_Rotation {\n        const message = { type: 0, sting: 0, trapWeave: false, viperStartManaPercent: 0, viperStopManaPercent: 0, allowExplosiveShotDownrank: false, multiDotSerpentSting: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<MarksmanshipHunter_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarksmanshipHunter_Rotation): MarksmanshipHunter_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RotationType type */ 9:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.HunterStingType sting */ 5:\n                    message.sting = reader.int32();\n                    break;\n                case /* bool trap_weave */ 1:\n                    message.trapWeave = reader.bool();\n                    break;\n                case /* double viper_start_mana_percent */ 6:\n                    message.viperStartManaPercent = reader.double();\n                    break;\n                case /* double viper_stop_mana_percent */ 7:\n                    message.viperStopManaPercent = reader.double();\n                    break;\n                case /* bool allow_explosive_shot_downrank */ 10:\n                    message.allowExplosiveShotDownrank = reader.bool();\n                    break;\n                case /* bool multi_dot_serpent_sting */ 11:\n                    message.multiDotSerpentSting = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: MarksmanshipHunter_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RotationType type = 9; */\n        if (message.type !== 0)\n            writer.tag(9, WireType.Varint).int32(message.type);\n        /* proto.HunterStingType sting = 5; */\n        if (message.sting !== 0)\n            writer.tag(5, WireType.Varint).int32(message.sting);\n        /* bool trap_weave = 1; */\n        if (message.trapWeave !== false)\n            writer.tag(1, WireType.Varint).bool(message.trapWeave);\n        /* double viper_start_mana_percent = 6; */\n        if (message.viperStartManaPercent !== 0)\n            writer.tag(6, WireType.Bit64).double(message.viperStartManaPercent);\n        /* double viper_stop_mana_percent = 7; */\n        if (message.viperStopManaPercent !== 0)\n            writer.tag(7, WireType.Bit64).double(message.viperStopManaPercent);\n        /* bool allow_explosive_shot_downrank = 10; */\n        if (message.allowExplosiveShotDownrank !== false)\n            writer.tag(10, WireType.Varint).bool(message.allowExplosiveShotDownrank);\n        /* bool multi_dot_serpent_sting = 11; */\n        if (message.multiDotSerpentSting !== false)\n            writer.tag(11, WireType.Varint).bool(message.multiDotSerpentSting);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.MarksmanshipHunter.Rotation\n */\nexport const MarksmanshipHunter_Rotation = new MarksmanshipHunter_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MarksmanshipHunter_Options$Type extends MessageType<MarksmanshipHunter_Options> {\n    constructor() {\n        super(\"proto.MarksmanshipHunter.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => HunterOptions }\n        ]);\n    }\n    create(value?: PartialMessage<MarksmanshipHunter_Options>): MarksmanshipHunter_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<MarksmanshipHunter_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarksmanshipHunter_Options): MarksmanshipHunter_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.HunterOptions class_options */ 1:\n                    message.classOptions = HunterOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: MarksmanshipHunter_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.HunterOptions class_options = 1; */\n        if (message.classOptions)\n            HunterOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.MarksmanshipHunter.Options\n */\nexport const MarksmanshipHunter_Options = new MarksmanshipHunter_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SurvivalHunter$Type extends MessageType<SurvivalHunter> {\n    constructor() {\n        super(\"proto.SurvivalHunter\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => SurvivalHunter_Options }\n        ]);\n    }\n    create(value?: PartialMessage<SurvivalHunter>): SurvivalHunter {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SurvivalHunter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SurvivalHunter): SurvivalHunter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SurvivalHunter.Options options */ 1:\n                    message.options = SurvivalHunter_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SurvivalHunter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SurvivalHunter.Options options = 1; */\n        if (message.options)\n            SurvivalHunter_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SurvivalHunter\n */\nexport const SurvivalHunter = new SurvivalHunter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SurvivalHunter_Rotation$Type extends MessageType<SurvivalHunter_Rotation> {\n    constructor() {\n        super(\"proto.SurvivalHunter.Rotation\", [\n            { no: 9, name: \"type\", kind: \"enum\", T: () => [\"proto.RotationType\", RotationType] },\n            { no: 5, name: \"sting\", kind: \"enum\", T: () => [\"proto.HunterStingType\", HunterStingType] },\n            { no: 1, name: \"trap_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"viper_start_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"viper_stop_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"allow_explosive_shot_downrank\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"multi_dot_serpent_sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SurvivalHunter_Rotation>): SurvivalHunter_Rotation {\n        const message = { type: 0, sting: 0, trapWeave: false, viperStartManaPercent: 0, viperStopManaPercent: 0, allowExplosiveShotDownrank: false, multiDotSerpentSting: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SurvivalHunter_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SurvivalHunter_Rotation): SurvivalHunter_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RotationType type */ 9:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.HunterStingType sting */ 5:\n                    message.sting = reader.int32();\n                    break;\n                case /* bool trap_weave */ 1:\n                    message.trapWeave = reader.bool();\n                    break;\n                case /* double viper_start_mana_percent */ 6:\n                    message.viperStartManaPercent = reader.double();\n                    break;\n                case /* double viper_stop_mana_percent */ 7:\n                    message.viperStopManaPercent = reader.double();\n                    break;\n                case /* bool allow_explosive_shot_downrank */ 10:\n                    message.allowExplosiveShotDownrank = reader.bool();\n                    break;\n                case /* bool multi_dot_serpent_sting */ 11:\n                    message.multiDotSerpentSting = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SurvivalHunter_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RotationType type = 9; */\n        if (message.type !== 0)\n            writer.tag(9, WireType.Varint).int32(message.type);\n        /* proto.HunterStingType sting = 5; */\n        if (message.sting !== 0)\n            writer.tag(5, WireType.Varint).int32(message.sting);\n        /* bool trap_weave = 1; */\n        if (message.trapWeave !== false)\n            writer.tag(1, WireType.Varint).bool(message.trapWeave);\n        /* double viper_start_mana_percent = 6; */\n        if (message.viperStartManaPercent !== 0)\n            writer.tag(6, WireType.Bit64).double(message.viperStartManaPercent);\n        /* double viper_stop_mana_percent = 7; */\n        if (message.viperStopManaPercent !== 0)\n            writer.tag(7, WireType.Bit64).double(message.viperStopManaPercent);\n        /* bool allow_explosive_shot_downrank = 10; */\n        if (message.allowExplosiveShotDownrank !== false)\n            writer.tag(10, WireType.Varint).bool(message.allowExplosiveShotDownrank);\n        /* bool multi_dot_serpent_sting = 11; */\n        if (message.multiDotSerpentSting !== false)\n            writer.tag(11, WireType.Varint).bool(message.multiDotSerpentSting);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SurvivalHunter.Rotation\n */\nexport const SurvivalHunter_Rotation = new SurvivalHunter_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SurvivalHunter_Options$Type extends MessageType<SurvivalHunter_Options> {\n    constructor() {\n        super(\"proto.SurvivalHunter.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => HunterOptions },\n            { no: 2, name: \"sniper_training_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SurvivalHunter_Options>): SurvivalHunter_Options {\n        const message = { sniperTrainingUptime: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SurvivalHunter_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SurvivalHunter_Options): SurvivalHunter_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.HunterOptions class_options */ 1:\n                    message.classOptions = HunterOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* double sniper_training_uptime */ 2:\n                    message.sniperTrainingUptime = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SurvivalHunter_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.HunterOptions class_options = 1; */\n        if (message.classOptions)\n            HunterOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double sniper_training_uptime = 2; */\n        if (message.sniperTrainingUptime !== 0)\n            writer.tag(2, WireType.Bit64).double(message.sniperTrainingUptime);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SurvivalHunter.Options\n */\nexport const SurvivalHunter_Options = new SurvivalHunter_Options$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"death_knight.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { UnitReference } from \"./common\";\n/**\n * @generated from protobuf message proto.DeathKnightTalents\n */\nexport interface DeathKnightTalents {\n    /**\n     * Blood\n     *\n     * @generated from protobuf field: int32 butchery = 1;\n     */\n    butchery: number;\n    /**\n     * @generated from protobuf field: int32 blade_barrier = 2;\n     */\n    bladeBarrier: number;\n    /**\n     * @generated from protobuf field: int32 bladed_armor = 3;\n     */\n    bladedArmor: number;\n    /**\n     * @generated from protobuf field: int32 improved_blood_tap = 4;\n     */\n    improvedBloodTap: number;\n    /**\n     * @generated from protobuf field: int32 scent_of_blood = 5;\n     */\n    scentOfBlood: number;\n    /**\n     * @generated from protobuf field: int32 scarlet_fever = 6;\n     */\n    scarletFever: number;\n    /**\n     * @generated from protobuf field: int32 hand_of_doom = 7;\n     */\n    handOfDoom: number;\n    /**\n     * @generated from protobuf field: int32 blood_caked_blade = 8;\n     */\n    bloodCakedBlade: number;\n    /**\n     * @generated from protobuf field: bool bone_shield = 9;\n     */\n    boneShield: boolean;\n    /**\n     * @generated from protobuf field: int32 toughness = 10;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 abominations_might = 11;\n     */\n    abominationsMight: number;\n    /**\n     * @generated from protobuf field: int32 sanguine_fortitude = 12;\n     */\n    sanguineFortitude: number;\n    /**\n     * @generated from protobuf field: int32 blood_parasite = 13;\n     */\n    bloodParasite: number;\n    /**\n     * @generated from protobuf field: int32 improved_blood_presence = 14;\n     */\n    improvedBloodPresence: number;\n    /**\n     * @generated from protobuf field: int32 will_of_the_necropolis = 15;\n     */\n    willOfTheNecropolis: number;\n    /**\n     * @generated from protobuf field: bool rune_tap = 16;\n     */\n    runeTap: boolean;\n    /**\n     * @generated from protobuf field: bool vampiric_blood = 17;\n     */\n    vampiricBlood: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_death_strike = 18;\n     */\n    improvedDeathStrike: number;\n    /**\n     * @generated from protobuf field: int32 crimson_scourge = 19;\n     */\n    crimsonScourge: number;\n    /**\n     * @generated from protobuf field: bool dancing_rune_weapon = 20;\n     */\n    dancingRuneWeapon: boolean;\n    /**\n     * Frost\n     *\n     * @generated from protobuf field: int32 runic_power_mastery = 21;\n     */\n    runicPowerMastery: number;\n    /**\n     * @generated from protobuf field: int32 icy_reach = 22;\n     */\n    icyReach: number;\n    /**\n     * @generated from protobuf field: int32 nerves_of_cold_steel = 23;\n     */\n    nervesOfColdSteel: number;\n    /**\n     * @generated from protobuf field: int32 annihilation = 24;\n     */\n    annihilation: number;\n    /**\n     * @generated from protobuf field: bool lichborne = 25;\n     */\n    lichborne: boolean;\n    /**\n     * @generated from protobuf field: int32 on_a_pale_horse = 26;\n     */\n    onAPaleHorse: number;\n    /**\n     * @generated from protobuf field: int32 endless_winter = 27;\n     */\n    endlessWinter: number;\n    /**\n     * @generated from protobuf field: int32 merciless_combat = 28;\n     */\n    mercilessCombat: number;\n    /**\n     * @generated from protobuf field: int32 chill_of_the_grave = 29;\n     */\n    chillOfTheGrave: number;\n    /**\n     * @generated from protobuf field: int32 killing_machine = 30;\n     */\n    killingMachine: number;\n    /**\n     * @generated from protobuf field: int32 rime = 31;\n     */\n    rime: number;\n    /**\n     * @generated from protobuf field: bool pillar_of_frost = 32;\n     */\n    pillarOfFrost: boolean;\n    /**\n     * @generated from protobuf field: bool improved_icy_talons = 33;\n     */\n    improvedIcyTalons: boolean;\n    /**\n     * @generated from protobuf field: int32 brittle_bones = 34;\n     */\n    brittleBones: number;\n    /**\n     * @generated from protobuf field: int32 chilblains = 35;\n     */\n    chilblains: number;\n    /**\n     * @generated from protobuf field: bool hungering_cold = 36;\n     */\n    hungeringCold: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_frost_presence = 37;\n     */\n    improvedFrostPresence: number;\n    /**\n     * @generated from protobuf field: int32 threat_of_thassarian = 38;\n     */\n    threatOfThassarian: number;\n    /**\n     * @generated from protobuf field: int32 might_of_the_frozen_wastes = 39;\n     */\n    mightOfTheFrozenWastes: number;\n    /**\n     * @generated from protobuf field: bool howling_blast = 40;\n     */\n    howlingBlast: boolean;\n    /**\n     * Unholy\n     *\n     * @generated from protobuf field: int32 unholy_command = 41;\n     */\n    unholyCommand: number;\n    /**\n     * @generated from protobuf field: int32 virulence = 42;\n     */\n    virulence: number;\n    /**\n     * @generated from protobuf field: int32 epidemic = 43;\n     */\n    epidemic: number;\n    /**\n     * @generated from protobuf field: int32 desecration = 44;\n     */\n    desecration: number;\n    /**\n     * @generated from protobuf field: int32 resilient_infection = 45;\n     */\n    resilientInfection: number;\n    /**\n     * @generated from protobuf field: int32 morbidity = 46;\n     */\n    morbidity: number;\n    /**\n     * @generated from protobuf field: int32 runic_corruption = 47;\n     */\n    runicCorruption: number;\n    /**\n     * @generated from protobuf field: bool unholy_frenzy = 48;\n     */\n    unholyFrenzy: boolean;\n    /**\n     * @generated from protobuf field: int32 contagion = 49;\n     */\n    contagion: number;\n    /**\n     * @generated from protobuf field: int32 shadow_infusion = 50;\n     */\n    shadowInfusion: number;\n    /**\n     * @generated from protobuf field: int32 deaths_advance = 51;\n     */\n    deathsAdvance: number;\n    /**\n     * @generated from protobuf field: int32 magic_suppression = 52;\n     */\n    magicSuppression: number;\n    /**\n     * @generated from protobuf field: int32 rage_of_rivendare = 53;\n     */\n    rageOfRivendare: number;\n    /**\n     * @generated from protobuf field: bool unholy_blight = 54;\n     */\n    unholyBlight: boolean;\n    /**\n     * @generated from protobuf field: bool anti_magic_zone = 55;\n     */\n    antiMagicZone: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_unholy_presence = 56;\n     */\n    improvedUnholyPresence: number;\n    /**\n     * @generated from protobuf field: bool dark_transformation = 57;\n     */\n    darkTransformation: boolean;\n    /**\n     * @generated from protobuf field: int32 ebon_plaguebringer = 58;\n     */\n    ebonPlaguebringer: number;\n    /**\n     * @generated from protobuf field: int32 sudden_doom = 59;\n     */\n    suddenDoom: number;\n    /**\n     * @generated from protobuf field: bool summon_gargoyle = 60;\n     */\n    summonGargoyle: boolean;\n}\n/**\n * @generated from protobuf message proto.DeathKnightOptions\n */\nexport interface DeathKnightOptions {\n    /**\n     * @generated from protobuf field: double starting_runic_power = 1;\n     */\n    startingRunicPower: number;\n    /**\n     * @generated from protobuf field: double pet_uptime = 2;\n     */\n    petUptime: number;\n}\n/**\n * @generated from protobuf message proto.BloodDeathKnight\n */\nexport interface BloodDeathKnight {\n    /**\n     * @generated from protobuf field: proto.BloodDeathKnight.Rotation rotation = 1;\n     */\n    rotation?: BloodDeathKnight_Rotation;\n    /**\n     * @generated from protobuf field: proto.BloodDeathKnight.Options options = 3;\n     */\n    options?: BloodDeathKnight_Options;\n}\n/**\n * @generated from protobuf message proto.BloodDeathKnight.Rotation\n */\nexport interface BloodDeathKnight_Rotation {\n    /**\n     * @generated from protobuf field: proto.BloodDeathKnight.Rotation.Opener opener = 1;\n     */\n    opener: BloodDeathKnight_Rotation_Opener;\n    /**\n     * @generated from protobuf field: proto.BloodDeathKnight.Rotation.OptimizationSetting optimization_setting = 2;\n     */\n    optimizationSetting: BloodDeathKnight_Rotation_OptimizationSetting;\n    /**\n     * @generated from protobuf field: proto.BloodDeathKnight.Rotation.BloodSpell blood_spell = 3;\n     */\n    bloodSpell: BloodDeathKnight_Rotation_BloodSpell;\n    /**\n     * @generated from protobuf field: proto.BloodDeathKnight.Rotation.Presence presence = 4;\n     */\n    presence: BloodDeathKnight_Rotation_Presence;\n    /**\n     * @generated from protobuf field: proto.BloodDeathKnight.Rotation.BloodTapPrio blood_tap_prio = 5;\n     */\n    bloodTapPrio: BloodDeathKnight_Rotation_BloodTapPrio;\n}\n/**\n * @generated from protobuf enum proto.BloodDeathKnight.Rotation.Opener\n */\nexport enum BloodDeathKnight_Rotation_Opener {\n    /**\n     * @generated from protobuf enum value: Regular = 0;\n     */\n    Regular = 0,\n    /**\n     * @generated from protobuf enum value: Threat = 1;\n     */\n    Threat = 1\n}\n/**\n * @generated from protobuf enum proto.BloodDeathKnight.Rotation.OptimizationSetting\n */\nexport enum BloodDeathKnight_Rotation_OptimizationSetting {\n    /**\n     * @generated from protobuf enum value: Hps = 0;\n     */\n    Hps = 0,\n    /**\n     * @generated from protobuf enum value: Tps = 1;\n     */\n    Tps = 1\n}\n/**\n * @generated from protobuf enum proto.BloodDeathKnight.Rotation.BloodSpell\n */\nexport enum BloodDeathKnight_Rotation_BloodSpell {\n    /**\n     * @generated from protobuf enum value: BloodStrike = 0;\n     */\n    BloodStrike = 0,\n    /**\n     * @generated from protobuf enum value: BloodBoil = 1;\n     */\n    BloodBoil = 1,\n    /**\n     * @generated from protobuf enum value: HeartStrike = 2;\n     */\n    HeartStrike = 2\n}\n/**\n * @generated from protobuf enum proto.BloodDeathKnight.Rotation.BloodTapPrio\n */\nexport enum BloodDeathKnight_Rotation_BloodTapPrio {\n    /**\n     * @generated from protobuf enum value: Defensive = 0;\n     */\n    Defensive = 0,\n    /**\n     * @generated from protobuf enum value: Offensive = 1;\n     */\n    Offensive = 1\n}\n/**\n * @generated from protobuf enum proto.BloodDeathKnight.Rotation.Presence\n */\nexport enum BloodDeathKnight_Rotation_Presence {\n    /**\n     * @generated from protobuf enum value: Blood = 0;\n     */\n    Blood = 0,\n    /**\n     * @generated from protobuf enum value: Frost = 1;\n     */\n    Frost = 1,\n    /**\n     * @generated from protobuf enum value: Unholy = 2;\n     */\n    Unholy = 2\n}\n/**\n * @generated from protobuf message proto.BloodDeathKnight.Options\n */\nexport interface BloodDeathKnight_Options {\n    /**\n     * @generated from protobuf field: proto.DeathKnightOptions class_options = 1;\n     */\n    classOptions?: DeathKnightOptions;\n    /**\n     * @generated from protobuf field: double defensive_delay = 2;\n     */\n    defensiveDelay: number;\n    /**\n     * @generated from protobuf field: bool drw_pesti_apply = 3;\n     */\n    drwPestiApply: boolean;\n}\n/**\n * @generated from protobuf message proto.FrostDeathKnight\n */\nexport interface FrostDeathKnight {\n    /**\n     * @generated from protobuf field: proto.FrostDeathKnight.Options options = 3;\n     */\n    options?: FrostDeathKnight_Options;\n}\n/**\n * @generated from protobuf message proto.FrostDeathKnight.Rotation\n */\nexport interface FrostDeathKnight_Rotation {\n}\n/**\n * @generated from protobuf message proto.FrostDeathKnight.Options\n */\nexport interface FrostDeathKnight_Options {\n    /**\n     * @generated from protobuf field: proto.DeathKnightOptions class_options = 1;\n     */\n    classOptions?: DeathKnightOptions;\n    /**\n     * @generated from protobuf field: bool use_ams = 2;\n     */\n    useAms: boolean;\n    /**\n     * @generated from protobuf field: double avg_ams_success_rate = 3;\n     */\n    avgAmsSuccessRate: number;\n    /**\n     * @generated from protobuf field: double avg_ams_hit = 4;\n     */\n    avgAmsHit: number;\n}\n/**\n * @generated from protobuf message proto.UnholyDeathKnight\n */\nexport interface UnholyDeathKnight {\n    /**\n     * @generated from protobuf field: proto.UnholyDeathKnight.Options options = 3;\n     */\n    options?: UnholyDeathKnight_Options;\n}\n/**\n * @generated from protobuf message proto.UnholyDeathKnight.Rotation\n */\nexport interface UnholyDeathKnight_Rotation {\n}\n/**\n * @generated from protobuf message proto.UnholyDeathKnight.Options\n */\nexport interface UnholyDeathKnight_Options {\n    /**\n     * @generated from protobuf field: proto.DeathKnightOptions class_options = 1;\n     */\n    classOptions?: DeathKnightOptions;\n    /**\n     * @generated from protobuf field: proto.UnitReference unholy_frenzy_target = 2;\n     */\n    unholyFrenzyTarget?: UnitReference;\n    /**\n     * @generated from protobuf field: bool use_ams = 3;\n     */\n    useAms: boolean;\n    /**\n     * @generated from protobuf field: double avg_ams_success_rate = 4;\n     */\n    avgAmsSuccessRate: number;\n    /**\n     * @generated from protobuf field: double avg_ams_hit = 5;\n     */\n    avgAmsHit: number;\n}\n/**\n * @generated from protobuf enum proto.DeathKnightPrimeGlyph\n */\nexport enum DeathKnightPrimeGlyph {\n    /**\n     * @generated from protobuf enum value: DeathKnightPrimeGlyphNone = 0;\n     */\n    DeathKnightPrimeGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathAndDecay = 43542;\n     */\n    GlyphOfDeathAndDecay = 43542,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathCoil = 45804;\n     */\n    GlyphOfDeathCoil = 45804,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathStrike = 43827;\n     */\n    GlyphOfDeathStrike = 43827,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostStrike = 43543;\n     */\n    GlyphOfFrostStrike = 43543,\n    /**\n     * @generated from protobuf enum value: GlyphOfHeartStrike = 43534;\n     */\n    GlyphOfHeartStrike = 43534,\n    /**\n     * @generated from protobuf enum value: GlyphOfHowlingBlast = 45806;\n     */\n    GlyphOfHowlingBlast = 45806,\n    /**\n     * @generated from protobuf enum value: GlyphOfIcyTouch = 43546;\n     */\n    GlyphOfIcyTouch = 43546,\n    /**\n     * @generated from protobuf enum value: GlyphOfObliterate = 43547;\n     */\n    GlyphOfObliterate = 43547,\n    /**\n     * @generated from protobuf enum value: GlyphOfRaiseDead = 43549;\n     */\n    GlyphOfRaiseDead = 43549,\n    /**\n     * @generated from protobuf enum value: GlyphOfRuneStrike = 43550;\n     */\n    GlyphOfRuneStrike = 43550,\n    /**\n     * @generated from protobuf enum value: GlyphOfScourgeStrike = 43551;\n     */\n    GlyphOfScourgeStrike = 43551\n}\n/**\n * @generated from protobuf enum proto.DeathKnightMajorGlyph\n */\nexport enum DeathKnightMajorGlyph {\n    /**\n     * @generated from protobuf enum value: DeathKnightMajorGlyphNone = 0;\n     */\n    DeathKnightMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAntiMagicShell = 43533;\n     */\n    GlyphOfAntiMagicShell = 43533,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodBoil = 43826;\n     */\n    GlyphOfBloodBoil = 43826,\n    /**\n     * @generated from protobuf enum value: GlyphOfBoneShield = 43536;\n     */\n    GlyphOfBoneShield = 43536,\n    /**\n     * @generated from protobuf enum value: GlyphOfChainsOfIce = 43537;\n     */\n    GlyphOfChainsOfIce = 43537,\n    /**\n     * @generated from protobuf enum value: GlyphOfDancingRuneWeapon = 45799;\n     */\n    GlyphOfDancingRuneWeapon = 45799,\n    /**\n     * @generated from protobuf enum value: GlyphOfDarkSuccor = 68793;\n     */\n    GlyphOfDarkSuccor = 68793,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathGrip = 43541;\n     */\n    GlyphOfDeathGrip = 43541,\n    /**\n     * @generated from protobuf enum value: GlyphOfHungeringCold = 45800;\n     */\n    GlyphOfHungeringCold = 45800,\n    /**\n     * @generated from protobuf enum value: GlyphOfPestilence = 43548;\n     */\n    GlyphOfPestilence = 43548,\n    /**\n     * @generated from protobuf enum value: GlyphOfPillarOfFrost = 43553;\n     */\n    GlyphOfPillarOfFrost = 43553,\n    /**\n     * @generated from protobuf enum value: GlyphOfRuneTap = 43825;\n     */\n    GlyphOfRuneTap = 43825,\n    /**\n     * @generated from protobuf enum value: GlyphOfStrangulate = 43552;\n     */\n    GlyphOfStrangulate = 43552,\n    /**\n     * @generated from protobuf enum value: GlyphOfVampiricBlood = 43554;\n     */\n    GlyphOfVampiricBlood = 43554\n}\n/**\n * @generated from protobuf enum proto.DeathKnightMinorGlyph\n */\nexport enum DeathKnightMinorGlyph {\n    /**\n     * @generated from protobuf enum value: DeathKnightMinorGlyphNone = 0;\n     */\n    DeathKnightMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodTap = 43535;\n     */\n    GlyphOfBloodTap = 43535,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathGate = 43673;\n     */\n    GlyphOfDeathGate = 43673,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathSEmbrace = 43539;\n     */\n    GlyphOfDeathSEmbrace = 43539,\n    /**\n     * @generated from protobuf enum value: GlyphOfHornOfWinter = 43544;\n     */\n    GlyphOfHornOfWinter = 43544,\n    /**\n     * @generated from protobuf enum value: GlyphOfPathOfFrost = 43671;\n     */\n    GlyphOfPathOfFrost = 43671,\n    /**\n     * @generated from protobuf enum value: GlyphOfResilientGrip = 43672;\n     */\n    GlyphOfResilientGrip = 43672\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass DeathKnightTalents$Type extends MessageType<DeathKnightTalents> {\n    constructor() {\n        super(\"proto.DeathKnightTalents\", [\n            { no: 1, name: \"butchery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"blade_barrier\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"bladed_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"improved_blood_tap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"scent_of_blood\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"scarlet_fever\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"hand_of_doom\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"blood_caked_blade\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"bone_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"abominations_might\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"sanguine_fortitude\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"blood_parasite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"improved_blood_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"will_of_the_necropolis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"rune_tap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"vampiric_blood\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"improved_death_strike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"crimson_scourge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"dancing_rune_weapon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 21, name: \"runic_power_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"icy_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"nerves_of_cold_steel\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"annihilation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"lichborne\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"on_a_pale_horse\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"endless_winter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"merciless_combat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"chill_of_the_grave\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"killing_machine\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"rime\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"pillar_of_frost\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"improved_icy_talons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"brittle_bones\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"chilblains\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"hungering_cold\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"improved_frost_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"threat_of_thassarian\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"might_of_the_frozen_wastes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"howling_blast\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 41, name: \"unholy_command\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"virulence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"epidemic\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"desecration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"resilient_infection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"morbidity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"runic_corruption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"unholy_frenzy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 49, name: \"contagion\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"shadow_infusion\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"deaths_advance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"magic_suppression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"rage_of_rivendare\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"unholy_blight\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"anti_magic_zone\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"improved_unholy_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"dark_transformation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 58, name: \"ebon_plaguebringer\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"sudden_doom\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"summon_gargoyle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DeathKnightTalents>): DeathKnightTalents {\n        const message = { butchery: 0, bladeBarrier: 0, bladedArmor: 0, improvedBloodTap: 0, scentOfBlood: 0, scarletFever: 0, handOfDoom: 0, bloodCakedBlade: 0, boneShield: false, toughness: 0, abominationsMight: 0, sanguineFortitude: 0, bloodParasite: 0, improvedBloodPresence: 0, willOfTheNecropolis: 0, runeTap: false, vampiricBlood: false, improvedDeathStrike: 0, crimsonScourge: 0, dancingRuneWeapon: false, runicPowerMastery: 0, icyReach: 0, nervesOfColdSteel: 0, annihilation: 0, lichborne: false, onAPaleHorse: 0, endlessWinter: 0, mercilessCombat: 0, chillOfTheGrave: 0, killingMachine: 0, rime: 0, pillarOfFrost: false, improvedIcyTalons: false, brittleBones: 0, chilblains: 0, hungeringCold: false, improvedFrostPresence: 0, threatOfThassarian: 0, mightOfTheFrozenWastes: 0, howlingBlast: false, unholyCommand: 0, virulence: 0, epidemic: 0, desecration: 0, resilientInfection: 0, morbidity: 0, runicCorruption: 0, unholyFrenzy: false, contagion: 0, shadowInfusion: 0, deathsAdvance: 0, magicSuppression: 0, rageOfRivendare: 0, unholyBlight: false, antiMagicZone: false, improvedUnholyPresence: 0, darkTransformation: false, ebonPlaguebringer: 0, suddenDoom: 0, summonGargoyle: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DeathKnightTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeathKnightTalents): DeathKnightTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 butchery */ 1:\n                    message.butchery = reader.int32();\n                    break;\n                case /* int32 blade_barrier */ 2:\n                    message.bladeBarrier = reader.int32();\n                    break;\n                case /* int32 bladed_armor */ 3:\n                    message.bladedArmor = reader.int32();\n                    break;\n                case /* int32 improved_blood_tap */ 4:\n                    message.improvedBloodTap = reader.int32();\n                    break;\n                case /* int32 scent_of_blood */ 5:\n                    message.scentOfBlood = reader.int32();\n                    break;\n                case /* int32 scarlet_fever */ 6:\n                    message.scarletFever = reader.int32();\n                    break;\n                case /* int32 hand_of_doom */ 7:\n                    message.handOfDoom = reader.int32();\n                    break;\n                case /* int32 blood_caked_blade */ 8:\n                    message.bloodCakedBlade = reader.int32();\n                    break;\n                case /* bool bone_shield */ 9:\n                    message.boneShield = reader.bool();\n                    break;\n                case /* int32 toughness */ 10:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 abominations_might */ 11:\n                    message.abominationsMight = reader.int32();\n                    break;\n                case /* int32 sanguine_fortitude */ 12:\n                    message.sanguineFortitude = reader.int32();\n                    break;\n                case /* int32 blood_parasite */ 13:\n                    message.bloodParasite = reader.int32();\n                    break;\n                case /* int32 improved_blood_presence */ 14:\n                    message.improvedBloodPresence = reader.int32();\n                    break;\n                case /* int32 will_of_the_necropolis */ 15:\n                    message.willOfTheNecropolis = reader.int32();\n                    break;\n                case /* bool rune_tap */ 16:\n                    message.runeTap = reader.bool();\n                    break;\n                case /* bool vampiric_blood */ 17:\n                    message.vampiricBlood = reader.bool();\n                    break;\n                case /* int32 improved_death_strike */ 18:\n                    message.improvedDeathStrike = reader.int32();\n                    break;\n                case /* int32 crimson_scourge */ 19:\n                    message.crimsonScourge = reader.int32();\n                    break;\n                case /* bool dancing_rune_weapon */ 20:\n                    message.dancingRuneWeapon = reader.bool();\n                    break;\n                case /* int32 runic_power_mastery */ 21:\n                    message.runicPowerMastery = reader.int32();\n                    break;\n                case /* int32 icy_reach */ 22:\n                    message.icyReach = reader.int32();\n                    break;\n                case /* int32 nerves_of_cold_steel */ 23:\n                    message.nervesOfColdSteel = reader.int32();\n                    break;\n                case /* int32 annihilation */ 24:\n                    message.annihilation = reader.int32();\n                    break;\n                case /* bool lichborne */ 25:\n                    message.lichborne = reader.bool();\n                    break;\n                case /* int32 on_a_pale_horse */ 26:\n                    message.onAPaleHorse = reader.int32();\n                    break;\n                case /* int32 endless_winter */ 27:\n                    message.endlessWinter = reader.int32();\n                    break;\n                case /* int32 merciless_combat */ 28:\n                    message.mercilessCombat = reader.int32();\n                    break;\n                case /* int32 chill_of_the_grave */ 29:\n                    message.chillOfTheGrave = reader.int32();\n                    break;\n                case /* int32 killing_machine */ 30:\n                    message.killingMachine = reader.int32();\n                    break;\n                case /* int32 rime */ 31:\n                    message.rime = reader.int32();\n                    break;\n                case /* bool pillar_of_frost */ 32:\n                    message.pillarOfFrost = reader.bool();\n                    break;\n                case /* bool improved_icy_talons */ 33:\n                    message.improvedIcyTalons = reader.bool();\n                    break;\n                case /* int32 brittle_bones */ 34:\n                    message.brittleBones = reader.int32();\n                    break;\n                case /* int32 chilblains */ 35:\n                    message.chilblains = reader.int32();\n                    break;\n                case /* bool hungering_cold */ 36:\n                    message.hungeringCold = reader.bool();\n                    break;\n                case /* int32 improved_frost_presence */ 37:\n                    message.improvedFrostPresence = reader.int32();\n                    break;\n                case /* int32 threat_of_thassarian */ 38:\n                    message.threatOfThassarian = reader.int32();\n                    break;\n                case /* int32 might_of_the_frozen_wastes */ 39:\n                    message.mightOfTheFrozenWastes = reader.int32();\n                    break;\n                case /* bool howling_blast */ 40:\n                    message.howlingBlast = reader.bool();\n                    break;\n                case /* int32 unholy_command */ 41:\n                    message.unholyCommand = reader.int32();\n                    break;\n                case /* int32 virulence */ 42:\n                    message.virulence = reader.int32();\n                    break;\n                case /* int32 epidemic */ 43:\n                    message.epidemic = reader.int32();\n                    break;\n                case /* int32 desecration */ 44:\n                    message.desecration = reader.int32();\n                    break;\n                case /* int32 resilient_infection */ 45:\n                    message.resilientInfection = reader.int32();\n                    break;\n                case /* int32 morbidity */ 46:\n                    message.morbidity = reader.int32();\n                    break;\n                case /* int32 runic_corruption */ 47:\n                    message.runicCorruption = reader.int32();\n                    break;\n                case /* bool unholy_frenzy */ 48:\n                    message.unholyFrenzy = reader.bool();\n                    break;\n                case /* int32 contagion */ 49:\n                    message.contagion = reader.int32();\n                    break;\n                case /* int32 shadow_infusion */ 50:\n                    message.shadowInfusion = reader.int32();\n                    break;\n                case /* int32 deaths_advance */ 51:\n                    message.deathsAdvance = reader.int32();\n                    break;\n                case /* int32 magic_suppression */ 52:\n                    message.magicSuppression = reader.int32();\n                    break;\n                case /* int32 rage_of_rivendare */ 53:\n                    message.rageOfRivendare = reader.int32();\n                    break;\n                case /* bool unholy_blight */ 54:\n                    message.unholyBlight = reader.bool();\n                    break;\n                case /* bool anti_magic_zone */ 55:\n                    message.antiMagicZone = reader.bool();\n                    break;\n                case /* int32 improved_unholy_presence */ 56:\n                    message.improvedUnholyPresence = reader.int32();\n                    break;\n                case /* bool dark_transformation */ 57:\n                    message.darkTransformation = reader.bool();\n                    break;\n                case /* int32 ebon_plaguebringer */ 58:\n                    message.ebonPlaguebringer = reader.int32();\n                    break;\n                case /* int32 sudden_doom */ 59:\n                    message.suddenDoom = reader.int32();\n                    break;\n                case /* bool summon_gargoyle */ 60:\n                    message.summonGargoyle = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DeathKnightTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 butchery = 1; */\n        if (message.butchery !== 0)\n            writer.tag(1, WireType.Varint).int32(message.butchery);\n        /* int32 blade_barrier = 2; */\n        if (message.bladeBarrier !== 0)\n            writer.tag(2, WireType.Varint).int32(message.bladeBarrier);\n        /* int32 bladed_armor = 3; */\n        if (message.bladedArmor !== 0)\n            writer.tag(3, WireType.Varint).int32(message.bladedArmor);\n        /* int32 improved_blood_tap = 4; */\n        if (message.improvedBloodTap !== 0)\n            writer.tag(4, WireType.Varint).int32(message.improvedBloodTap);\n        /* int32 scent_of_blood = 5; */\n        if (message.scentOfBlood !== 0)\n            writer.tag(5, WireType.Varint).int32(message.scentOfBlood);\n        /* int32 scarlet_fever = 6; */\n        if (message.scarletFever !== 0)\n            writer.tag(6, WireType.Varint).int32(message.scarletFever);\n        /* int32 hand_of_doom = 7; */\n        if (message.handOfDoom !== 0)\n            writer.tag(7, WireType.Varint).int32(message.handOfDoom);\n        /* int32 blood_caked_blade = 8; */\n        if (message.bloodCakedBlade !== 0)\n            writer.tag(8, WireType.Varint).int32(message.bloodCakedBlade);\n        /* bool bone_shield = 9; */\n        if (message.boneShield !== false)\n            writer.tag(9, WireType.Varint).bool(message.boneShield);\n        /* int32 toughness = 10; */\n        if (message.toughness !== 0)\n            writer.tag(10, WireType.Varint).int32(message.toughness);\n        /* int32 abominations_might = 11; */\n        if (message.abominationsMight !== 0)\n            writer.tag(11, WireType.Varint).int32(message.abominationsMight);\n        /* int32 sanguine_fortitude = 12; */\n        if (message.sanguineFortitude !== 0)\n            writer.tag(12, WireType.Varint).int32(message.sanguineFortitude);\n        /* int32 blood_parasite = 13; */\n        if (message.bloodParasite !== 0)\n            writer.tag(13, WireType.Varint).int32(message.bloodParasite);\n        /* int32 improved_blood_presence = 14; */\n        if (message.improvedBloodPresence !== 0)\n            writer.tag(14, WireType.Varint).int32(message.improvedBloodPresence);\n        /* int32 will_of_the_necropolis = 15; */\n        if (message.willOfTheNecropolis !== 0)\n            writer.tag(15, WireType.Varint).int32(message.willOfTheNecropolis);\n        /* bool rune_tap = 16; */\n        if (message.runeTap !== false)\n            writer.tag(16, WireType.Varint).bool(message.runeTap);\n        /* bool vampiric_blood = 17; */\n        if (message.vampiricBlood !== false)\n            writer.tag(17, WireType.Varint).bool(message.vampiricBlood);\n        /* int32 improved_death_strike = 18; */\n        if (message.improvedDeathStrike !== 0)\n            writer.tag(18, WireType.Varint).int32(message.improvedDeathStrike);\n        /* int32 crimson_scourge = 19; */\n        if (message.crimsonScourge !== 0)\n            writer.tag(19, WireType.Varint).int32(message.crimsonScourge);\n        /* bool dancing_rune_weapon = 20; */\n        if (message.dancingRuneWeapon !== false)\n            writer.tag(20, WireType.Varint).bool(message.dancingRuneWeapon);\n        /* int32 runic_power_mastery = 21; */\n        if (message.runicPowerMastery !== 0)\n            writer.tag(21, WireType.Varint).int32(message.runicPowerMastery);\n        /* int32 icy_reach = 22; */\n        if (message.icyReach !== 0)\n            writer.tag(22, WireType.Varint).int32(message.icyReach);\n        /* int32 nerves_of_cold_steel = 23; */\n        if (message.nervesOfColdSteel !== 0)\n            writer.tag(23, WireType.Varint).int32(message.nervesOfColdSteel);\n        /* int32 annihilation = 24; */\n        if (message.annihilation !== 0)\n            writer.tag(24, WireType.Varint).int32(message.annihilation);\n        /* bool lichborne = 25; */\n        if (message.lichborne !== false)\n            writer.tag(25, WireType.Varint).bool(message.lichborne);\n        /* int32 on_a_pale_horse = 26; */\n        if (message.onAPaleHorse !== 0)\n            writer.tag(26, WireType.Varint).int32(message.onAPaleHorse);\n        /* int32 endless_winter = 27; */\n        if (message.endlessWinter !== 0)\n            writer.tag(27, WireType.Varint).int32(message.endlessWinter);\n        /* int32 merciless_combat = 28; */\n        if (message.mercilessCombat !== 0)\n            writer.tag(28, WireType.Varint).int32(message.mercilessCombat);\n        /* int32 chill_of_the_grave = 29; */\n        if (message.chillOfTheGrave !== 0)\n            writer.tag(29, WireType.Varint).int32(message.chillOfTheGrave);\n        /* int32 killing_machine = 30; */\n        if (message.killingMachine !== 0)\n            writer.tag(30, WireType.Varint).int32(message.killingMachine);\n        /* int32 rime = 31; */\n        if (message.rime !== 0)\n            writer.tag(31, WireType.Varint).int32(message.rime);\n        /* bool pillar_of_frost = 32; */\n        if (message.pillarOfFrost !== false)\n            writer.tag(32, WireType.Varint).bool(message.pillarOfFrost);\n        /* bool improved_icy_talons = 33; */\n        if (message.improvedIcyTalons !== false)\n            writer.tag(33, WireType.Varint).bool(message.improvedIcyTalons);\n        /* int32 brittle_bones = 34; */\n        if (message.brittleBones !== 0)\n            writer.tag(34, WireType.Varint).int32(message.brittleBones);\n        /* int32 chilblains = 35; */\n        if (message.chilblains !== 0)\n            writer.tag(35, WireType.Varint).int32(message.chilblains);\n        /* bool hungering_cold = 36; */\n        if (message.hungeringCold !== false)\n            writer.tag(36, WireType.Varint).bool(message.hungeringCold);\n        /* int32 improved_frost_presence = 37; */\n        if (message.improvedFrostPresence !== 0)\n            writer.tag(37, WireType.Varint).int32(message.improvedFrostPresence);\n        /* int32 threat_of_thassarian = 38; */\n        if (message.threatOfThassarian !== 0)\n            writer.tag(38, WireType.Varint).int32(message.threatOfThassarian);\n        /* int32 might_of_the_frozen_wastes = 39; */\n        if (message.mightOfTheFrozenWastes !== 0)\n            writer.tag(39, WireType.Varint).int32(message.mightOfTheFrozenWastes);\n        /* bool howling_blast = 40; */\n        if (message.howlingBlast !== false)\n            writer.tag(40, WireType.Varint).bool(message.howlingBlast);\n        /* int32 unholy_command = 41; */\n        if (message.unholyCommand !== 0)\n            writer.tag(41, WireType.Varint).int32(message.unholyCommand);\n        /* int32 virulence = 42; */\n        if (message.virulence !== 0)\n            writer.tag(42, WireType.Varint).int32(message.virulence);\n        /* int32 epidemic = 43; */\n        if (message.epidemic !== 0)\n            writer.tag(43, WireType.Varint).int32(message.epidemic);\n        /* int32 desecration = 44; */\n        if (message.desecration !== 0)\n            writer.tag(44, WireType.Varint).int32(message.desecration);\n        /* int32 resilient_infection = 45; */\n        if (message.resilientInfection !== 0)\n            writer.tag(45, WireType.Varint).int32(message.resilientInfection);\n        /* int32 morbidity = 46; */\n        if (message.morbidity !== 0)\n            writer.tag(46, WireType.Varint).int32(message.morbidity);\n        /* int32 runic_corruption = 47; */\n        if (message.runicCorruption !== 0)\n            writer.tag(47, WireType.Varint).int32(message.runicCorruption);\n        /* bool unholy_frenzy = 48; */\n        if (message.unholyFrenzy !== false)\n            writer.tag(48, WireType.Varint).bool(message.unholyFrenzy);\n        /* int32 contagion = 49; */\n        if (message.contagion !== 0)\n            writer.tag(49, WireType.Varint).int32(message.contagion);\n        /* int32 shadow_infusion = 50; */\n        if (message.shadowInfusion !== 0)\n            writer.tag(50, WireType.Varint).int32(message.shadowInfusion);\n        /* int32 deaths_advance = 51; */\n        if (message.deathsAdvance !== 0)\n            writer.tag(51, WireType.Varint).int32(message.deathsAdvance);\n        /* int32 magic_suppression = 52; */\n        if (message.magicSuppression !== 0)\n            writer.tag(52, WireType.Varint).int32(message.magicSuppression);\n        /* int32 rage_of_rivendare = 53; */\n        if (message.rageOfRivendare !== 0)\n            writer.tag(53, WireType.Varint).int32(message.rageOfRivendare);\n        /* bool unholy_blight = 54; */\n        if (message.unholyBlight !== false)\n            writer.tag(54, WireType.Varint).bool(message.unholyBlight);\n        /* bool anti_magic_zone = 55; */\n        if (message.antiMagicZone !== false)\n            writer.tag(55, WireType.Varint).bool(message.antiMagicZone);\n        /* int32 improved_unholy_presence = 56; */\n        if (message.improvedUnholyPresence !== 0)\n            writer.tag(56, WireType.Varint).int32(message.improvedUnholyPresence);\n        /* bool dark_transformation = 57; */\n        if (message.darkTransformation !== false)\n            writer.tag(57, WireType.Varint).bool(message.darkTransformation);\n        /* int32 ebon_plaguebringer = 58; */\n        if (message.ebonPlaguebringer !== 0)\n            writer.tag(58, WireType.Varint).int32(message.ebonPlaguebringer);\n        /* int32 sudden_doom = 59; */\n        if (message.suddenDoom !== 0)\n            writer.tag(59, WireType.Varint).int32(message.suddenDoom);\n        /* bool summon_gargoyle = 60; */\n        if (message.summonGargoyle !== false)\n            writer.tag(60, WireType.Varint).bool(message.summonGargoyle);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DeathKnightTalents\n */\nexport const DeathKnightTalents = new DeathKnightTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DeathKnightOptions$Type extends MessageType<DeathKnightOptions> {\n    constructor() {\n        super(\"proto.DeathKnightOptions\", [\n            { no: 1, name: \"starting_runic_power\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"pet_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DeathKnightOptions>): DeathKnightOptions {\n        const message = { startingRunicPower: 0, petUptime: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DeathKnightOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeathKnightOptions): DeathKnightOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double starting_runic_power */ 1:\n                    message.startingRunicPower = reader.double();\n                    break;\n                case /* double pet_uptime */ 2:\n                    message.petUptime = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DeathKnightOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double starting_runic_power = 1; */\n        if (message.startingRunicPower !== 0)\n            writer.tag(1, WireType.Bit64).double(message.startingRunicPower);\n        /* double pet_uptime = 2; */\n        if (message.petUptime !== 0)\n            writer.tag(2, WireType.Bit64).double(message.petUptime);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DeathKnightOptions\n */\nexport const DeathKnightOptions = new DeathKnightOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BloodDeathKnight$Type extends MessageType<BloodDeathKnight> {\n    constructor() {\n        super(\"proto.BloodDeathKnight\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => BloodDeathKnight_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => BloodDeathKnight_Options }\n        ]);\n    }\n    create(value?: PartialMessage<BloodDeathKnight>): BloodDeathKnight {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BloodDeathKnight>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BloodDeathKnight): BloodDeathKnight {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.BloodDeathKnight.Rotation rotation */ 1:\n                    message.rotation = BloodDeathKnight_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.BloodDeathKnight.Options options */ 3:\n                    message.options = BloodDeathKnight_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BloodDeathKnight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.BloodDeathKnight.Rotation rotation = 1; */\n        if (message.rotation)\n            BloodDeathKnight_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BloodDeathKnight.Options options = 3; */\n        if (message.options)\n            BloodDeathKnight_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BloodDeathKnight\n */\nexport const BloodDeathKnight = new BloodDeathKnight$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BloodDeathKnight_Rotation$Type extends MessageType<BloodDeathKnight_Rotation> {\n    constructor() {\n        super(\"proto.BloodDeathKnight.Rotation\", [\n            { no: 1, name: \"opener\", kind: \"enum\", T: () => [\"proto.BloodDeathKnight.Rotation.Opener\", BloodDeathKnight_Rotation_Opener] },\n            { no: 2, name: \"optimization_setting\", kind: \"enum\", T: () => [\"proto.BloodDeathKnight.Rotation.OptimizationSetting\", BloodDeathKnight_Rotation_OptimizationSetting] },\n            { no: 3, name: \"blood_spell\", kind: \"enum\", T: () => [\"proto.BloodDeathKnight.Rotation.BloodSpell\", BloodDeathKnight_Rotation_BloodSpell] },\n            { no: 4, name: \"presence\", kind: \"enum\", T: () => [\"proto.BloodDeathKnight.Rotation.Presence\", BloodDeathKnight_Rotation_Presence] },\n            { no: 5, name: \"blood_tap_prio\", kind: \"enum\", T: () => [\"proto.BloodDeathKnight.Rotation.BloodTapPrio\", BloodDeathKnight_Rotation_BloodTapPrio] }\n        ]);\n    }\n    create(value?: PartialMessage<BloodDeathKnight_Rotation>): BloodDeathKnight_Rotation {\n        const message = { opener: 0, optimizationSetting: 0, bloodSpell: 0, presence: 0, bloodTapPrio: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BloodDeathKnight_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BloodDeathKnight_Rotation): BloodDeathKnight_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.BloodDeathKnight.Rotation.Opener opener */ 1:\n                    message.opener = reader.int32();\n                    break;\n                case /* proto.BloodDeathKnight.Rotation.OptimizationSetting optimization_setting */ 2:\n                    message.optimizationSetting = reader.int32();\n                    break;\n                case /* proto.BloodDeathKnight.Rotation.BloodSpell blood_spell */ 3:\n                    message.bloodSpell = reader.int32();\n                    break;\n                case /* proto.BloodDeathKnight.Rotation.Presence presence */ 4:\n                    message.presence = reader.int32();\n                    break;\n                case /* proto.BloodDeathKnight.Rotation.BloodTapPrio blood_tap_prio */ 5:\n                    message.bloodTapPrio = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BloodDeathKnight_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.BloodDeathKnight.Rotation.Opener opener = 1; */\n        if (message.opener !== 0)\n            writer.tag(1, WireType.Varint).int32(message.opener);\n        /* proto.BloodDeathKnight.Rotation.OptimizationSetting optimization_setting = 2; */\n        if (message.optimizationSetting !== 0)\n            writer.tag(2, WireType.Varint).int32(message.optimizationSetting);\n        /* proto.BloodDeathKnight.Rotation.BloodSpell blood_spell = 3; */\n        if (message.bloodSpell !== 0)\n            writer.tag(3, WireType.Varint).int32(message.bloodSpell);\n        /* proto.BloodDeathKnight.Rotation.Presence presence = 4; */\n        if (message.presence !== 0)\n            writer.tag(4, WireType.Varint).int32(message.presence);\n        /* proto.BloodDeathKnight.Rotation.BloodTapPrio blood_tap_prio = 5; */\n        if (message.bloodTapPrio !== 0)\n            writer.tag(5, WireType.Varint).int32(message.bloodTapPrio);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BloodDeathKnight.Rotation\n */\nexport const BloodDeathKnight_Rotation = new BloodDeathKnight_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BloodDeathKnight_Options$Type extends MessageType<BloodDeathKnight_Options> {\n    constructor() {\n        super(\"proto.BloodDeathKnight.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => DeathKnightOptions },\n            { no: 2, name: \"defensive_delay\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"drw_pesti_apply\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<BloodDeathKnight_Options>): BloodDeathKnight_Options {\n        const message = { defensiveDelay: 0, drwPestiApply: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BloodDeathKnight_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BloodDeathKnight_Options): BloodDeathKnight_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DeathKnightOptions class_options */ 1:\n                    message.classOptions = DeathKnightOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* double defensive_delay */ 2:\n                    message.defensiveDelay = reader.double();\n                    break;\n                case /* bool drw_pesti_apply */ 3:\n                    message.drwPestiApply = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BloodDeathKnight_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DeathKnightOptions class_options = 1; */\n        if (message.classOptions)\n            DeathKnightOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double defensive_delay = 2; */\n        if (message.defensiveDelay !== 0)\n            writer.tag(2, WireType.Bit64).double(message.defensiveDelay);\n        /* bool drw_pesti_apply = 3; */\n        if (message.drwPestiApply !== false)\n            writer.tag(3, WireType.Varint).bool(message.drwPestiApply);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BloodDeathKnight.Options\n */\nexport const BloodDeathKnight_Options = new BloodDeathKnight_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FrostDeathKnight$Type extends MessageType<FrostDeathKnight> {\n    constructor() {\n        super(\"proto.FrostDeathKnight\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => FrostDeathKnight_Options }\n        ]);\n    }\n    create(value?: PartialMessage<FrostDeathKnight>): FrostDeathKnight {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FrostDeathKnight>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FrostDeathKnight): FrostDeathKnight {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FrostDeathKnight.Options options */ 3:\n                    message.options = FrostDeathKnight_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FrostDeathKnight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FrostDeathKnight.Options options = 3; */\n        if (message.options)\n            FrostDeathKnight_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FrostDeathKnight\n */\nexport const FrostDeathKnight = new FrostDeathKnight$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FrostDeathKnight_Rotation$Type extends MessageType<FrostDeathKnight_Rotation> {\n    constructor() {\n        super(\"proto.FrostDeathKnight.Rotation\", []);\n    }\n    create(value?: PartialMessage<FrostDeathKnight_Rotation>): FrostDeathKnight_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FrostDeathKnight_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FrostDeathKnight_Rotation): FrostDeathKnight_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: FrostDeathKnight_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FrostDeathKnight.Rotation\n */\nexport const FrostDeathKnight_Rotation = new FrostDeathKnight_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FrostDeathKnight_Options$Type extends MessageType<FrostDeathKnight_Options> {\n    constructor() {\n        super(\"proto.FrostDeathKnight.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => DeathKnightOptions },\n            { no: 2, name: \"use_ams\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"avg_ams_success_rate\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"avg_ams_hit\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FrostDeathKnight_Options>): FrostDeathKnight_Options {\n        const message = { useAms: false, avgAmsSuccessRate: 0, avgAmsHit: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FrostDeathKnight_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FrostDeathKnight_Options): FrostDeathKnight_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DeathKnightOptions class_options */ 1:\n                    message.classOptions = DeathKnightOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* bool use_ams */ 2:\n                    message.useAms = reader.bool();\n                    break;\n                case /* double avg_ams_success_rate */ 3:\n                    message.avgAmsSuccessRate = reader.double();\n                    break;\n                case /* double avg_ams_hit */ 4:\n                    message.avgAmsHit = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FrostDeathKnight_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DeathKnightOptions class_options = 1; */\n        if (message.classOptions)\n            DeathKnightOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool use_ams = 2; */\n        if (message.useAms !== false)\n            writer.tag(2, WireType.Varint).bool(message.useAms);\n        /* double avg_ams_success_rate = 3; */\n        if (message.avgAmsSuccessRate !== 0)\n            writer.tag(3, WireType.Bit64).double(message.avgAmsSuccessRate);\n        /* double avg_ams_hit = 4; */\n        if (message.avgAmsHit !== 0)\n            writer.tag(4, WireType.Bit64).double(message.avgAmsHit);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FrostDeathKnight.Options\n */\nexport const FrostDeathKnight_Options = new FrostDeathKnight_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UnholyDeathKnight$Type extends MessageType<UnholyDeathKnight> {\n    constructor() {\n        super(\"proto.UnholyDeathKnight\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => UnholyDeathKnight_Options }\n        ]);\n    }\n    create(value?: PartialMessage<UnholyDeathKnight>): UnholyDeathKnight {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UnholyDeathKnight>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnholyDeathKnight): UnholyDeathKnight {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnholyDeathKnight.Options options */ 3:\n                    message.options = UnholyDeathKnight_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UnholyDeathKnight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnholyDeathKnight.Options options = 3; */\n        if (message.options)\n            UnholyDeathKnight_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UnholyDeathKnight\n */\nexport const UnholyDeathKnight = new UnholyDeathKnight$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UnholyDeathKnight_Rotation$Type extends MessageType<UnholyDeathKnight_Rotation> {\n    constructor() {\n        super(\"proto.UnholyDeathKnight.Rotation\", []);\n    }\n    create(value?: PartialMessage<UnholyDeathKnight_Rotation>): UnholyDeathKnight_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UnholyDeathKnight_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnholyDeathKnight_Rotation): UnholyDeathKnight_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: UnholyDeathKnight_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UnholyDeathKnight.Rotation\n */\nexport const UnholyDeathKnight_Rotation = new UnholyDeathKnight_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UnholyDeathKnight_Options$Type extends MessageType<UnholyDeathKnight_Options> {\n    constructor() {\n        super(\"proto.UnholyDeathKnight.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => DeathKnightOptions },\n            { no: 2, name: \"unholy_frenzy_target\", kind: \"message\", T: () => UnitReference },\n            { no: 3, name: \"use_ams\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"avg_ams_success_rate\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"avg_ams_hit\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<UnholyDeathKnight_Options>): UnholyDeathKnight_Options {\n        const message = { useAms: false, avgAmsSuccessRate: 0, avgAmsHit: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UnholyDeathKnight_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnholyDeathKnight_Options): UnholyDeathKnight_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DeathKnightOptions class_options */ 1:\n                    message.classOptions = DeathKnightOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* proto.UnitReference unholy_frenzy_target */ 2:\n                    message.unholyFrenzyTarget = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.unholyFrenzyTarget);\n                    break;\n                case /* bool use_ams */ 3:\n                    message.useAms = reader.bool();\n                    break;\n                case /* double avg_ams_success_rate */ 4:\n                    message.avgAmsSuccessRate = reader.double();\n                    break;\n                case /* double avg_ams_hit */ 5:\n                    message.avgAmsHit = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UnholyDeathKnight_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DeathKnightOptions class_options = 1; */\n        if (message.classOptions)\n            DeathKnightOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitReference unholy_frenzy_target = 2; */\n        if (message.unholyFrenzyTarget)\n            UnitReference.internalBinaryWrite(message.unholyFrenzyTarget, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* bool use_ams = 3; */\n        if (message.useAms !== false)\n            writer.tag(3, WireType.Varint).bool(message.useAms);\n        /* double avg_ams_success_rate = 4; */\n        if (message.avgAmsSuccessRate !== 0)\n            writer.tag(4, WireType.Bit64).double(message.avgAmsSuccessRate);\n        /* double avg_ams_hit = 5; */\n        if (message.avgAmsHit !== 0)\n            writer.tag(5, WireType.Bit64).double(message.avgAmsHit);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UnholyDeathKnight.Options\n */\nexport const UnholyDeathKnight_Options = new UnholyDeathKnight_Options$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"api.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { ItemSlot } from \"./common\";\nimport { ItemSpec } from \"./common\";\nimport { PseudoStat } from \"./common\";\nimport { Stat } from \"./common\";\nimport { Encounter } from \"./common\";\nimport { ActionID } from \"./common\";\nimport { UnitReference } from \"./common\";\nimport { Debuffs } from \"./common\";\nimport { RaidBuffs } from \"./common\";\nimport { PartyBuffs } from \"./common\";\nimport { SimDatabase } from \"./common\";\nimport { HealingModel } from \"./common\";\nimport { APLRotation } from \"./apl\";\nimport { Cooldowns } from \"./common\";\nimport { Profession } from \"./common\";\nimport { Glyphs } from \"./common\";\nimport { ProtectionWarrior } from \"./warrior\";\nimport { FuryWarrior } from \"./warrior\";\nimport { ArmsWarrior } from \"./warrior\";\nimport { DestructionWarlock } from \"./warlock\";\nimport { DemonologyWarlock } from \"./warlock\";\nimport { AfflictionWarlock } from \"./warlock\";\nimport { RestorationShaman } from \"./shaman\";\nimport { EnhancementShaman } from \"./shaman\";\nimport { ElementalShaman } from \"./shaman\";\nimport { SubtletyRogue } from \"./rogue\";\nimport { CombatRogue } from \"./rogue\";\nimport { AssassinationRogue } from \"./rogue\";\nimport { ShadowPriest } from \"./priest\";\nimport { HolyPriest } from \"./priest\";\nimport { DisciplinePriest } from \"./priest\";\nimport { RetributionPaladin } from \"./paladin\";\nimport { ProtectionPaladin } from \"./paladin\";\nimport { HolyPaladin } from \"./paladin\";\nimport { FrostMage } from \"./mage\";\nimport { FireMage } from \"./mage\";\nimport { ArcaneMage } from \"./mage\";\nimport { SurvivalHunter } from \"./hunter\";\nimport { MarksmanshipHunter } from \"./hunter\";\nimport { BeastMasteryHunter } from \"./hunter\";\nimport { RestorationDruid } from \"./druid\";\nimport { FeralDruid } from \"./druid\";\nimport { BalanceDruid } from \"./druid\";\nimport { UnholyDeathKnight } from \"./death_knight\";\nimport { FrostDeathKnight } from \"./death_knight\";\nimport { BloodDeathKnight } from \"./death_knight\";\nimport { IndividualBuffs } from \"./common\";\nimport { ItemSwap } from \"./common\";\nimport { UnitStats } from \"./common\";\nimport { Consumes } from \"./common\";\nimport { EquipmentSpec } from \"./common\";\nimport { Class } from \"./common\";\nimport { Race } from \"./common\";\n/**\n * NextIndex: 53\n *\n * @generated from protobuf message proto.Player\n */\nexport interface Player {\n    /**\n     * Label used for logging.\n     *\n     * @generated from protobuf field: string name = 51;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: proto.Race race = 1;\n     */\n    race: Race;\n    /**\n     * @generated from protobuf field: proto.Class class = 2;\n     */\n    class: Class;\n    /**\n     * @generated from protobuf field: proto.EquipmentSpec equipment = 3;\n     */\n    equipment?: EquipmentSpec;\n    /**\n     * @generated from protobuf field: proto.Consumes consumes = 4;\n     */\n    consumes?: Consumes;\n    /**\n     * @generated from protobuf field: proto.UnitStats bonus_stats = 5;\n     */\n    bonusStats?: UnitStats;\n    /**\n     * @generated from protobuf field: bool enable_item_swap = 6;\n     */\n    enableItemSwap: boolean;\n    /**\n     * @generated from protobuf field: proto.ItemSwap item_swap = 7;\n     */\n    itemSwap?: ItemSwap;\n    /**\n     * @generated from protobuf field: proto.IndividualBuffs buffs = 8;\n     */\n    buffs?: IndividualBuffs;\n    /**\n     * @generated from protobuf oneof: spec\n     */\n    spec: {\n        oneofKind: \"bloodDeathKnight\";\n        /**\n         * @generated from protobuf field: proto.BloodDeathKnight blood_death_knight = 9;\n         */\n        bloodDeathKnight: BloodDeathKnight;\n    } | {\n        oneofKind: \"frostDeathKnight\";\n        /**\n         * @generated from protobuf field: proto.FrostDeathKnight frost_death_knight = 10;\n         */\n        frostDeathKnight: FrostDeathKnight;\n    } | {\n        oneofKind: \"unholyDeathKnight\";\n        /**\n         * @generated from protobuf field: proto.UnholyDeathKnight unholy_death_knight = 11;\n         */\n        unholyDeathKnight: UnholyDeathKnight;\n    } | {\n        oneofKind: \"balanceDruid\";\n        /**\n         * @generated from protobuf field: proto.BalanceDruid balance_druid = 12;\n         */\n        balanceDruid: BalanceDruid;\n    } | {\n        oneofKind: \"feralDruid\";\n        /**\n         * @generated from protobuf field: proto.FeralDruid feral_druid = 13;\n         */\n        feralDruid: FeralDruid;\n    } | {\n        oneofKind: \"restorationDruid\";\n        /**\n         * @generated from protobuf field: proto.RestorationDruid restoration_druid = 14;\n         */\n        restorationDruid: RestorationDruid;\n    } | {\n        oneofKind: \"beastMasteryHunter\";\n        /**\n         * @generated from protobuf field: proto.BeastMasteryHunter beast_mastery_hunter = 15;\n         */\n        beastMasteryHunter: BeastMasteryHunter;\n    } | {\n        oneofKind: \"marksmanshipHunter\";\n        /**\n         * @generated from protobuf field: proto.MarksmanshipHunter marksmanship_hunter = 16;\n         */\n        marksmanshipHunter: MarksmanshipHunter;\n    } | {\n        oneofKind: \"survivalHunter\";\n        /**\n         * @generated from protobuf field: proto.SurvivalHunter survival_hunter = 17;\n         */\n        survivalHunter: SurvivalHunter;\n    } | {\n        oneofKind: \"arcaneMage\";\n        /**\n         * @generated from protobuf field: proto.ArcaneMage arcane_mage = 18;\n         */\n        arcaneMage: ArcaneMage;\n    } | {\n        oneofKind: \"fireMage\";\n        /**\n         * @generated from protobuf field: proto.FireMage fire_mage = 19;\n         */\n        fireMage: FireMage;\n    } | {\n        oneofKind: \"frostMage\";\n        /**\n         * @generated from protobuf field: proto.FrostMage frost_mage = 20;\n         */\n        frostMage: FrostMage;\n    } | {\n        oneofKind: \"holyPaladin\";\n        /**\n         * @generated from protobuf field: proto.HolyPaladin holy_paladin = 21;\n         */\n        holyPaladin: HolyPaladin;\n    } | {\n        oneofKind: \"protectionPaladin\";\n        /**\n         * @generated from protobuf field: proto.ProtectionPaladin protection_paladin = 22;\n         */\n        protectionPaladin: ProtectionPaladin;\n    } | {\n        oneofKind: \"retributionPaladin\";\n        /**\n         * @generated from protobuf field: proto.RetributionPaladin retribution_paladin = 23;\n         */\n        retributionPaladin: RetributionPaladin;\n    } | {\n        oneofKind: \"disciplinePriest\";\n        /**\n         * @generated from protobuf field: proto.DisciplinePriest discipline_priest = 24;\n         */\n        disciplinePriest: DisciplinePriest;\n    } | {\n        oneofKind: \"holyPriest\";\n        /**\n         * @generated from protobuf field: proto.HolyPriest holy_priest = 25;\n         */\n        holyPriest: HolyPriest;\n    } | {\n        oneofKind: \"shadowPriest\";\n        /**\n         * @generated from protobuf field: proto.ShadowPriest shadow_priest = 26;\n         */\n        shadowPriest: ShadowPriest;\n    } | {\n        oneofKind: \"assassinationRogue\";\n        /**\n         * @generated from protobuf field: proto.AssassinationRogue assassination_rogue = 27;\n         */\n        assassinationRogue: AssassinationRogue;\n    } | {\n        oneofKind: \"combatRogue\";\n        /**\n         * @generated from protobuf field: proto.CombatRogue combat_rogue = 28;\n         */\n        combatRogue: CombatRogue;\n    } | {\n        oneofKind: \"subtletyRogue\";\n        /**\n         * @generated from protobuf field: proto.SubtletyRogue subtlety_rogue = 29;\n         */\n        subtletyRogue: SubtletyRogue;\n    } | {\n        oneofKind: \"elementalShaman\";\n        /**\n         * @generated from protobuf field: proto.ElementalShaman elemental_shaman = 30;\n         */\n        elementalShaman: ElementalShaman;\n    } | {\n        oneofKind: \"enhancementShaman\";\n        /**\n         * @generated from protobuf field: proto.EnhancementShaman enhancement_shaman = 31;\n         */\n        enhancementShaman: EnhancementShaman;\n    } | {\n        oneofKind: \"restorationShaman\";\n        /**\n         * @generated from protobuf field: proto.RestorationShaman restoration_shaman = 32;\n         */\n        restorationShaman: RestorationShaman;\n    } | {\n        oneofKind: \"afflictionWarlock\";\n        /**\n         * @generated from protobuf field: proto.AfflictionWarlock affliction_warlock = 33;\n         */\n        afflictionWarlock: AfflictionWarlock;\n    } | {\n        oneofKind: \"demonologyWarlock\";\n        /**\n         * @generated from protobuf field: proto.DemonologyWarlock demonology_warlock = 34;\n         */\n        demonologyWarlock: DemonologyWarlock;\n    } | {\n        oneofKind: \"destructionWarlock\";\n        /**\n         * @generated from protobuf field: proto.DestructionWarlock destruction_warlock = 35;\n         */\n        destructionWarlock: DestructionWarlock;\n    } | {\n        oneofKind: \"armsWarrior\";\n        /**\n         * @generated from protobuf field: proto.ArmsWarrior arms_warrior = 36;\n         */\n        armsWarrior: ArmsWarrior;\n    } | {\n        oneofKind: \"furyWarrior\";\n        /**\n         * @generated from protobuf field: proto.FuryWarrior fury_warrior = 37;\n         */\n        furyWarrior: FuryWarrior;\n    } | {\n        oneofKind: \"protectionWarrior\";\n        /**\n         * @generated from protobuf field: proto.ProtectionWarrior protection_warrior = 38;\n         */\n        protectionWarrior: ProtectionWarrior;\n    } | {\n        oneofKind: undefined;\n    };\n    /**\n     * Talents in wowhead format, e.g. '01102123133-12312312-'\n     *\n     * @generated from protobuf field: string talents_string = 39;\n     */\n    talentsString: string;\n    /**\n     * @generated from protobuf field: proto.Glyphs glyphs = 40;\n     */\n    glyphs?: Glyphs;\n    /**\n     * @generated from protobuf field: proto.Profession profession1 = 41;\n     */\n    profession1: Profession;\n    /**\n     * @generated from protobuf field: proto.Profession profession2 = 42;\n     */\n    profession2: Profession;\n    /**\n     * @generated from protobuf field: proto.Cooldowns cooldowns = 43;\n     */\n    cooldowns?: Cooldowns;\n    /**\n     * @generated from protobuf field: proto.APLRotation rotation = 44;\n     */\n    rotation?: APLRotation;\n    // TODO: Move most of the remaining fields into a 'MiscellaneousPlayerOptions' message.\n    // This will remove a lot of the boilerplate code in the UI for each new field.\n\n    /**\n     * @generated from protobuf field: int32 reaction_time_ms = 45;\n     */\n    reactionTimeMs: number;\n    /**\n     * @generated from protobuf field: int32 channel_clip_delay_ms = 46;\n     */\n    channelClipDelayMs: number;\n    /**\n     * @generated from protobuf field: bool in_front_of_target = 47;\n     */\n    inFrontOfTarget: boolean;\n    /**\n     * @generated from protobuf field: double distance_from_target = 48;\n     */\n    distanceFromTarget: number;\n    /**\n     * @generated from protobuf field: double dark_intent_uptime = 52;\n     */\n    darkIntentUptime: number;\n    /**\n     * @generated from protobuf field: proto.HealingModel healing_model = 49;\n     */\n    healingModel?: HealingModel;\n    /**\n     * Items/enchants/gems/etc to include in the database.\n     *\n     * @generated from protobuf field: proto.SimDatabase database = 50;\n     */\n    database?: SimDatabase;\n}\n/**\n * @generated from protobuf message proto.Party\n */\nexport interface Party {\n    /**\n     * @generated from protobuf field: repeated proto.Player players = 1;\n     */\n    players: Player[];\n    /**\n     * @generated from protobuf field: proto.PartyBuffs buffs = 2;\n     */\n    buffs?: PartyBuffs;\n}\n/**\n * @generated from protobuf message proto.Raid\n */\nexport interface Raid {\n    /**\n     * @generated from protobuf field: repeated proto.Party parties = 1;\n     */\n    parties: Party[];\n    /**\n     * The number of parties in the raid who participate in the sim, e.g.\n     * 10-man vs 25-man raids. The remaining parties are unused but can hold\n     * bench players.\n     *\n     * If this value is 0, all parties are included.\n     *\n     * @generated from protobuf field: int32 num_active_parties = 2;\n     */\n    numActiveParties: number;\n    /**\n     * @generated from protobuf field: proto.RaidBuffs buffs = 7;\n     */\n    buffs?: RaidBuffs;\n    /**\n     * Extra debuffs provided by buff bots in this raid.\n     * This is also used for debuffs in the individual sims.\n     *\n     * @generated from protobuf field: proto.Debuffs debuffs = 5;\n     */\n    debuffs?: Debuffs;\n    /**\n     * Players who will be tanking mobs.\n     *\n     * @generated from protobuf field: repeated proto.UnitReference tanks = 4;\n     */\n    tanks: UnitReference[];\n    /**\n     * Staggers Stormstrike casts across Enhance Shaman to maximize charge usage.\n     *\n     * @generated from protobuf field: bool stagger_stormstrikes = 3;\n     */\n    staggerStormstrikes: boolean;\n    /**\n     * Extra fake players to add. Currently only used by healing sims.\n     *\n     * @generated from protobuf field: int32 target_dummies = 6;\n     */\n    targetDummies: number;\n}\n/**\n * @generated from protobuf message proto.SimOptions\n */\nexport interface SimOptions {\n    /**\n     * @generated from protobuf field: int32 iterations = 1;\n     */\n    iterations: number;\n    /**\n     * @generated from protobuf field: int64 random_seed = 2;\n     */\n    randomSeed: bigint;\n    /**\n     * @generated from protobuf field: bool debug = 3;\n     */\n    debug: boolean; // Enables debug logging.\n    /**\n     * @generated from protobuf field: bool debug_first_iteration = 6;\n     */\n    debugFirstIteration: boolean;\n    /**\n     * @generated from protobuf field: bool is_test = 5;\n     */\n    isTest: boolean; // Only used internally.\n    /**\n     * @generated from protobuf field: bool save_all_values = 7;\n     */\n    saveAllValues: boolean; // Only used internally.\n    /**\n     * @generated from protobuf field: bool interactive = 8;\n     */\n    interactive: boolean; // Enables interactive mode.\n}\n/**\n * The aggregated results from all uses of a particular action.\n *\n * @generated from protobuf message proto.ActionMetrics\n */\nexport interface ActionMetrics {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * True if a melee action, false if a spell action.\n     *\n     * @generated from protobuf field: bool is_melee = 2;\n     */\n    isMelee: boolean;\n    /**\n     * Metrics for this action for each target.\n     * Note that some spells are untargeted, these will always have a single\n     * element in this array.\n     *\n     * @generated from protobuf field: repeated proto.TargetedActionMetrics targets = 3;\n     */\n    targets: TargetedActionMetrics[];\n}\n/**\n * Metrics for a specific action, when cast at a particular target.\n *\n * @generated from protobuf message proto.TargetedActionMetrics\n */\nexport interface TargetedActionMetrics {\n    /**\n     * Raid/Target Index of the unit these metrics are targeted at.\n     *\n     * @generated from protobuf field: int32 unit_index = 12;\n     */\n    unitIndex: number;\n    /**\n     * # of times this action was used by the agent.\n     *\n     * @generated from protobuf field: int32 casts = 1;\n     */\n    casts: number;\n    /**\n     * # of times this action hit a target. For cleave spells this can be larger than casts.\n     *\n     * @generated from protobuf field: int32 hits = 2;\n     */\n    hits: number;\n    /**\n     * # of times this action was a critical strike.\n     *\n     * @generated from protobuf field: int32 crits = 3;\n     */\n    crits: number;\n    /**\n     * # of times this action was a Miss or Resist.\n     *\n     * @generated from protobuf field: int32 misses = 4;\n     */\n    misses: number;\n    /**\n     * # of times this action was a Dodge.\n     *\n     * @generated from protobuf field: int32 dodges = 5;\n     */\n    dodges: number;\n    /**\n     * # of times this action was a Parry.\n     *\n     * @generated from protobuf field: int32 parries = 6;\n     */\n    parries: number;\n    /**\n     * # of times this action was a Block.\n     *\n     * @generated from protobuf field: int32 blocks = 7;\n     */\n    blocks: number;\n    /**\n     * # of times this action was a Glance.\n     *\n     * @generated from protobuf field: int32 glances = 8;\n     */\n    glances: number;\n    /**\n     * Total damage done to this target by this action.\n     *\n     * @generated from protobuf field: double damage = 9;\n     */\n    damage: number;\n    /**\n     * Total threat done to this target by this action.\n     *\n     * @generated from protobuf field: double threat = 10;\n     */\n    threat: number;\n    /**\n     * Total healing done to this target by this action.\n     *\n     * @generated from protobuf field: double healing = 11;\n     */\n    healing: number;\n    /**\n     * Total shielding done to this target by this action.\n     *\n     * @generated from protobuf field: double shielding = 13;\n     */\n    shielding: number;\n    /**\n     * Total time spent casting this action, in milliseconds, either from hard casts, GCD, or channeling.\n     *\n     * @generated from protobuf field: double cast_time_ms = 14;\n     */\n    castTimeMs: number;\n}\n/**\n * @generated from protobuf message proto.AggregatorData\n */\nexport interface AggregatorData {\n    /**\n     * @generated from protobuf field: int32 n = 1;\n     */\n    n: number;\n    /**\n     * @generated from protobuf field: double sumSq = 2;\n     */\n    sumSq: number;\n}\n/**\n * @generated from protobuf message proto.AuraMetrics\n */\nexport interface AuraMetrics {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * @generated from protobuf field: double uptime_seconds_avg = 2;\n     */\n    uptimeSecondsAvg: number;\n    /**\n     * @generated from protobuf field: double uptime_seconds_stdev = 3;\n     */\n    uptimeSecondsStdev: number;\n    /**\n     * @generated from protobuf field: double procs_avg = 4;\n     */\n    procsAvg: number;\n    /**\n     * @generated from protobuf field: proto.AggregatorData aggregator_data = 5;\n     */\n    aggregatorData?: AggregatorData;\n}\n/**\n * @generated from protobuf message proto.ResourceMetrics\n */\nexport interface ResourceMetrics {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * @generated from protobuf field: proto.ResourceType type = 2;\n     */\n    type: ResourceType;\n    /**\n     * # of times this action was used by the agent.\n     *\n     * @generated from protobuf field: int32 events = 3;\n     */\n    events: number;\n    /**\n     * Total resource gain from this action. Will be negative for spend actions.\n     *\n     * @generated from protobuf field: double gain = 4;\n     */\n    gain: number;\n    /**\n     * Like gain, but doesn't include gains over resource cap.\n     *\n     * @generated from protobuf field: double actual_gain = 5;\n     */\n    actualGain: number;\n}\n/**\n * @generated from protobuf message proto.DistributionMetrics\n */\nexport interface DistributionMetrics {\n    /**\n     * @generated from protobuf field: double avg = 1;\n     */\n    avg: number;\n    /**\n     * @generated from protobuf field: double stdev = 2;\n     */\n    stdev: number;\n    /**\n     * @generated from protobuf field: double max = 3;\n     */\n    max: number;\n    /**\n     * @generated from protobuf field: int64 max_seed = 5;\n     */\n    maxSeed: bigint;\n    /**\n     * @generated from protobuf field: double min = 6;\n     */\n    min: number;\n    /**\n     * @generated from protobuf field: int64 min_seed = 7;\n     */\n    minSeed: bigint;\n    /**\n     * @generated from protobuf field: map<int32, int32> hist = 4;\n     */\n    hist: {\n        [key: number]: number;\n    };\n    /**\n     * @generated from protobuf field: repeated double all_values = 8;\n     */\n    allValues: number[];\n    /**\n     * @generated from protobuf field: proto.AggregatorData aggregator_data = 9;\n     */\n    aggregatorData?: AggregatorData;\n}\n/**\n * All the results for a single Unit (player, target, or pet).\n *\n * @generated from protobuf message proto.UnitMetrics\n */\nexport interface UnitMetrics {\n    /**\n     * @generated from protobuf field: string name = 9;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: int32 unit_index = 13;\n     */\n    unitIndex: number;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dps = 1;\n     */\n    dps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dpasp = 16;\n     */\n    dpasp?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics threat = 8;\n     */\n    threat?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dtps = 11;\n     */\n    dtps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics tmi = 17;\n     */\n    tmi?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics hps = 14;\n     */\n    hps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics tto = 15;\n     */\n    tto?: DistributionMetrics; // Time To OOM, in seconds.\n    /**\n     * average seconds spent oom per iteration\n     *\n     * @generated from protobuf field: double seconds_oom_avg = 3;\n     */\n    secondsOomAvg: number;\n    /**\n     * Chance (0-1) representing probability of death. Used for tank sims.\n     *\n     * @generated from protobuf field: double chance_of_death = 12;\n     */\n    chanceOfDeath: number;\n    /**\n     * @generated from protobuf field: repeated proto.ActionMetrics actions = 5;\n     */\n    actions: ActionMetrics[];\n    /**\n     * @generated from protobuf field: repeated proto.AuraMetrics auras = 6;\n     */\n    auras: AuraMetrics[];\n    /**\n     * @generated from protobuf field: repeated proto.ResourceMetrics resources = 10;\n     */\n    resources: ResourceMetrics[];\n    /**\n     * @generated from protobuf field: repeated proto.UnitMetrics pets = 7;\n     */\n    pets: UnitMetrics[];\n}\n/**\n * Results for a whole raid.\n *\n * @generated from protobuf message proto.PartyMetrics\n */\nexport interface PartyMetrics {\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dps = 1;\n     */\n    dps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics hps = 3;\n     */\n    hps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: repeated proto.UnitMetrics players = 2;\n     */\n    players: UnitMetrics[];\n}\n/**\n * Results for a whole raid.\n *\n * @generated from protobuf message proto.RaidMetrics\n */\nexport interface RaidMetrics {\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dps = 1;\n     */\n    dps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics hps = 3;\n     */\n    hps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: repeated proto.PartyMetrics parties = 2;\n     */\n    parties: PartyMetrics[];\n}\n/**\n * @generated from protobuf message proto.EncounterMetrics\n */\nexport interface EncounterMetrics {\n    /**\n     * @generated from protobuf field: repeated proto.UnitMetrics targets = 1;\n     */\n    targets: UnitMetrics[];\n}\n/**\n * RPC RaidSim\n *\n * @generated from protobuf message proto.RaidSimRequest\n */\nexport interface RaidSimRequest {\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 2;\n     */\n    encounter?: Encounter;\n    /**\n     * @generated from protobuf field: proto.SimOptions sim_options = 3;\n     */\n    simOptions?: SimOptions;\n}\n/**\n * Result from running the raid sim.\n *\n * @generated from protobuf message proto.RaidSimResult\n */\nexport interface RaidSimResult {\n    /**\n     * @generated from protobuf field: proto.RaidMetrics raid_metrics = 1;\n     */\n    raidMetrics?: RaidMetrics;\n    /**\n     * @generated from protobuf field: proto.EncounterMetrics encounter_metrics = 2;\n     */\n    encounterMetrics?: EncounterMetrics;\n    /**\n     * @generated from protobuf field: string logs = 3;\n     */\n    logs: string;\n    /**\n     * Needed for displaying the timeline properly when the duration +/- option\n     * is used.\n     *\n     * @generated from protobuf field: double first_iteration_duration = 4;\n     */\n    firstIterationDuration: number;\n    /**\n     * @generated from protobuf field: double avg_iteration_duration = 6;\n     */\n    avgIterationDuration: number;\n    /**\n     * @generated from protobuf field: string error_result = 5;\n     */\n    errorResult: string;\n}\n/**\n * RPC ComputeStats\n *\n * @generated from protobuf message proto.ComputeStatsRequest\n */\nexport interface ComputeStatsRequest {\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 2;\n     */\n    encounter?: Encounter;\n}\n/**\n * @generated from protobuf message proto.AuraStats\n */\nexport interface AuraStats {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * @generated from protobuf field: int32 max_stacks = 2;\n     */\n    maxStacks: number;\n    /**\n     * @generated from protobuf field: bool has_icd = 3;\n     */\n    hasIcd: boolean;\n    /**\n     * @generated from protobuf field: bool has_exclusive_effect = 4;\n     */\n    hasExclusiveEffect: boolean;\n}\n/**\n * @generated from protobuf message proto.SpellStats\n */\nexport interface SpellStats {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * @generated from protobuf field: bool is_castable = 2;\n     */\n    isCastable: boolean; // Whether this spell may be cast by the APL logic.\n    /**\n     * @generated from protobuf field: bool is_channeled = 7;\n     */\n    isChanneled: boolean; // Whether this spell is a channeled spell (Mind Flay, Drain Soul, etc).\n    /**\n     * @generated from protobuf field: bool is_major_cooldown = 3;\n     */\n    isMajorCooldown: boolean; // Whether this spell is a major cooldown.\n    /**\n     * @generated from protobuf field: bool has_dot = 4;\n     */\n    hasDot: boolean; // Whether this spell applies a DoT effect.\n    /**\n     * @generated from protobuf field: bool has_shield = 6;\n     */\n    hasShield: boolean; // Whether this spell applies a shield effect.\n    /**\n     * @generated from protobuf field: bool prepull_only = 5;\n     */\n    prepullOnly: boolean; // Whether this spell may only be cast during prepull.\n    /**\n     * @generated from protobuf field: bool encounter_only = 8;\n     */\n    encounterOnly: boolean; // Whether this spell may only be cast during the encounter (not prepull).\n    /**\n     * @generated from protobuf field: bool has_cast_time = 9;\n     */\n    hasCastTime: boolean; // Whether this spell has a cast time or not.\n    /**\n     * @generated from protobuf field: bool is_friendly = 10;\n     */\n    isFriendly: boolean; // Whether this spell should be cast on player units\n}\n/**\n * @generated from protobuf message proto.APLActionStats\n */\nexport interface APLActionStats {\n    /**\n     * @generated from protobuf field: repeated string warnings = 1;\n     */\n    warnings: string[];\n}\n/**\n * @generated from protobuf message proto.APLStats\n */\nexport interface APLStats {\n    /**\n     * @generated from protobuf field: repeated proto.APLActionStats prepull_actions = 1;\n     */\n    prepullActions: APLActionStats[];\n    /**\n     * @generated from protobuf field: repeated proto.APLActionStats priority_list = 2;\n     */\n    priorityList: APLActionStats[];\n}\n/**\n * @generated from protobuf message proto.UnitMetadata\n */\nexport interface UnitMetadata {\n    /**\n     * @generated from protobuf field: string name = 3;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: repeated proto.SpellStats spells = 1;\n     */\n    spells: SpellStats[];\n    /**\n     * @generated from protobuf field: repeated proto.AuraStats auras = 2;\n     */\n    auras: AuraStats[];\n}\n/**\n * @generated from protobuf message proto.PetStats\n */\nexport interface PetStats {\n    /**\n     * @generated from protobuf field: proto.UnitMetadata metadata = 1;\n     */\n    metadata?: UnitMetadata;\n}\n/**\n * @generated from protobuf message proto.PlayerStats\n */\nexport interface PlayerStats {\n    /**\n     * Stats\n     *\n     * @generated from protobuf field: proto.UnitStats base_stats = 6;\n     */\n    baseStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats gear_stats = 1;\n     */\n    gearStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats talents_stats = 7;\n     */\n    talentsStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats buffs_stats = 8;\n     */\n    buffsStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats consumes_stats = 9;\n     */\n    consumesStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats final_stats = 2;\n     */\n    finalStats?: UnitStats;\n    /**\n     * @generated from protobuf field: repeated string sets = 3;\n     */\n    sets: string[];\n    /**\n     * @generated from protobuf field: proto.IndividualBuffs buffs = 4;\n     */\n    buffs?: IndividualBuffs;\n    /**\n     * @generated from protobuf field: proto.UnitMetadata metadata = 10;\n     */\n    metadata?: UnitMetadata;\n    /**\n     * @generated from protobuf field: proto.APLStats rotation_stats = 12;\n     */\n    rotationStats?: APLStats;\n    /**\n     * @generated from protobuf field: repeated proto.PetStats pets = 11;\n     */\n    pets: PetStats[];\n}\n/**\n * @generated from protobuf message proto.PartyStats\n */\nexport interface PartyStats {\n    /**\n     * @generated from protobuf field: repeated proto.PlayerStats players = 1;\n     */\n    players: PlayerStats[];\n}\n/**\n * @generated from protobuf message proto.RaidStats\n */\nexport interface RaidStats {\n    /**\n     * @generated from protobuf field: repeated proto.PartyStats parties = 1;\n     */\n    parties: PartyStats[];\n}\n/**\n * @generated from protobuf message proto.TargetStats\n */\nexport interface TargetStats {\n    /**\n     * @generated from protobuf field: proto.UnitMetadata metadata = 1;\n     */\n    metadata?: UnitMetadata;\n}\n/**\n * @generated from protobuf message proto.EncounterStats\n */\nexport interface EncounterStats {\n    /**\n     * @generated from protobuf field: repeated proto.TargetStats targets = 1;\n     */\n    targets: TargetStats[];\n}\n/**\n * @generated from protobuf message proto.ComputeStatsResult\n */\nexport interface ComputeStatsResult {\n    /**\n     * @generated from protobuf field: proto.RaidStats raid_stats = 1;\n     */\n    raidStats?: RaidStats;\n    /**\n     * @generated from protobuf field: proto.EncounterStats encounter_stats = 3;\n     */\n    encounterStats?: EncounterStats;\n    /**\n     * @generated from protobuf field: string error_result = 2;\n     */\n    errorResult: string;\n}\n/**\n * RPC StatWeights\n *\n * @generated from protobuf message proto.StatWeightsRequest\n */\nexport interface StatWeightsRequest {\n    /**\n     * @generated from protobuf field: proto.Player player = 1;\n     */\n    player?: Player;\n    /**\n     * @generated from protobuf field: proto.RaidBuffs raid_buffs = 2;\n     */\n    raidBuffs?: RaidBuffs;\n    /**\n     * @generated from protobuf field: proto.PartyBuffs party_buffs = 3;\n     */\n    partyBuffs?: PartyBuffs;\n    /**\n     * @generated from protobuf field: proto.Debuffs debuffs = 9;\n     */\n    debuffs?: Debuffs;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 4;\n     */\n    encounter?: Encounter;\n    /**\n     * @generated from protobuf field: proto.SimOptions sim_options = 5;\n     */\n    simOptions?: SimOptions;\n    /**\n     * @generated from protobuf field: repeated proto.UnitReference tanks = 8;\n     */\n    tanks: UnitReference[];\n    /**\n     * @generated from protobuf field: repeated proto.Stat stats_to_weigh = 6;\n     */\n    statsToWeigh: Stat[];\n    /**\n     * @generated from protobuf field: repeated proto.PseudoStat pseudo_stats_to_weigh = 10;\n     */\n    pseudoStatsToWeigh: PseudoStat[];\n    /**\n     * @generated from protobuf field: proto.Stat ep_reference_stat = 7;\n     */\n    epReferenceStat: Stat;\n}\n/**\n * @generated from protobuf message proto.StatWeightsResult\n */\nexport interface StatWeightsResult {\n    /**\n     * @generated from protobuf field: proto.StatWeightValues dps = 1;\n     */\n    dps?: StatWeightValues;\n    /**\n     * @generated from protobuf field: proto.StatWeightValues hps = 4;\n     */\n    hps?: StatWeightValues;\n    /**\n     * @generated from protobuf field: proto.StatWeightValues tps = 2;\n     */\n    tps?: StatWeightValues;\n    /**\n     * @generated from protobuf field: proto.StatWeightValues dtps = 3;\n     */\n    dtps?: StatWeightValues;\n    /**\n     * @generated from protobuf field: proto.StatWeightValues tmi = 5;\n     */\n    tmi?: StatWeightValues;\n    /**\n     * @generated from protobuf field: proto.StatWeightValues p_death = 6;\n     */\n    pDeath?: StatWeightValues;\n}\n/**\n * @generated from protobuf message proto.StatWeightValues\n */\nexport interface StatWeightValues {\n    /**\n     * @generated from protobuf field: proto.UnitStats weights = 1;\n     */\n    weights?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats weights_stdev = 2;\n     */\n    weightsStdev?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats ep_values = 3;\n     */\n    epValues?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats ep_values_stdev = 4;\n     */\n    epValuesStdev?: UnitStats;\n}\n/**\n * @generated from protobuf message proto.AsyncAPIResult\n */\nexport interface AsyncAPIResult {\n    /**\n     * @generated from protobuf field: string progress_id = 1;\n     */\n    progressId: string;\n}\n/**\n * ProgressMetrics are used by all async APIs\n *\n * @generated from protobuf message proto.ProgressMetrics\n */\nexport interface ProgressMetrics {\n    /**\n     * @generated from protobuf field: int32 completed_iterations = 1;\n     */\n    completedIterations: number;\n    /**\n     * @generated from protobuf field: int32 total_iterations = 2;\n     */\n    totalIterations: number;\n    /**\n     * @generated from protobuf field: int32 completed_sims = 3;\n     */\n    completedSims: number;\n    /**\n     * @generated from protobuf field: int32 total_sims = 4;\n     */\n    totalSims: number;\n    /**\n     * @generated from protobuf field: bool presim_running = 8;\n     */\n    presimRunning: boolean;\n    /**\n     * Partial Results\n     *\n     * @generated from protobuf field: double dps = 5;\n     */\n    dps: number;\n    /**\n     * @generated from protobuf field: double hps = 9;\n     */\n    hps: number;\n    /**\n     * Final Results\n     *\n     * @generated from protobuf field: proto.RaidSimResult final_raid_result = 6;\n     */\n    finalRaidResult?: RaidSimResult; // only set when completed\n    /**\n     * @generated from protobuf field: proto.StatWeightsResult final_weight_result = 7;\n     */\n    finalWeightResult?: StatWeightsResult;\n    /**\n     * @generated from protobuf field: proto.BulkSimResult final_bulk_result = 10;\n     */\n    finalBulkResult?: BulkSimResult;\n}\n/**\n * RPC: BulkSim\n *\n * @generated from protobuf message proto.BulkSimRequest\n */\nexport interface BulkSimRequest {\n    /**\n     * @generated from protobuf field: proto.RaidSimRequest base_settings = 1;\n     */\n    baseSettings?: RaidSimRequest;\n    /**\n     * @generated from protobuf field: proto.BulkSettings bulk_settings = 2;\n     */\n    bulkSettings?: BulkSettings;\n}\n/**\n * @generated from protobuf message proto.TalentLoadout\n */\nexport interface TalentLoadout {\n    /**\n     * @generated from protobuf field: string talents_string = 1;\n     */\n    talentsString: string;\n    /**\n     * @generated from protobuf field: proto.Glyphs glyphs = 2;\n     */\n    glyphs?: Glyphs;\n    /**\n     * @generated from protobuf field: string name = 3;\n     */\n    name: string;\n}\n/**\n * @generated from protobuf message proto.BulkSettings\n */\nexport interface BulkSettings {\n    /**\n     * @generated from protobuf field: repeated proto.ItemSpec items = 1;\n     */\n    items: ItemSpec[];\n    /**\n     * @generated from protobuf field: bool combinations = 2;\n     */\n    combinations: boolean;\n    /**\n     * @generated from protobuf field: bool fast_mode = 3;\n     */\n    fastMode: boolean; // Used to run with less iterations to start and slowly increase to weed out items faster.\n    /**\n     * Use current enchant on the slot if not specified by the ItemSpec.\n     * Only works when replacement item is valid target for enchant.\n     *\n     * @generated from protobuf field: bool auto_enchant = 4;\n     */\n    autoEnchant: boolean;\n    /**\n     * Currently not used.\n     * Used to fill out gem slots that are not filled in the ItemSpec\n     *\n     * @generated from protobuf field: bool auto_gem = 5;\n     */\n    autoGem: boolean;\n    /**\n     * @generated from protobuf field: int32 default_red_gem = 6;\n     */\n    defaultRedGem: number;\n    /**\n     * @generated from protobuf field: int32 default_blue_gem = 7;\n     */\n    defaultBlueGem: number;\n    /**\n     * @generated from protobuf field: int32 default_yellow_gem = 8;\n     */\n    defaultYellowGem: number;\n    /**\n     * @generated from protobuf field: int32 default_meta_gem = 9;\n     */\n    defaultMetaGem: number;\n    /**\n     * @generated from protobuf field: bool ensure_meta_req_met = 10;\n     */\n    ensureMetaReqMet: boolean; // ensures that meta requirements are met when auto-gemming.\n    /**\n     * Number of iterations per combo.\n     * If set to 0 the sim core decides the optimal iterations.\n     *\n     * @generated from protobuf field: int32 iterations_per_combo = 11;\n     */\n    iterationsPerCombo: number;\n    /**\n     * Should sim talents as well\n     *\n     * @generated from protobuf field: bool sim_talents = 12;\n     */\n    simTalents: boolean;\n    /**\n     * @generated from protobuf field: repeated proto.TalentLoadout talents_to_sim = 13;\n     */\n    talentsToSim: TalentLoadout[];\n}\n/**\n * @generated from protobuf message proto.BulkSimResult\n */\nexport interface BulkSimResult {\n    /**\n     * @generated from protobuf field: repeated proto.BulkComboResult results = 1;\n     */\n    results: BulkComboResult[];\n    /**\n     * @generated from protobuf field: proto.BulkComboResult equipped_gear_result = 2;\n     */\n    equippedGearResult?: BulkComboResult;\n    /**\n     * @generated from protobuf field: string error_result = 3;\n     */\n    errorResult: string; // only set if sim failed.\n}\n/**\n * @generated from protobuf message proto.BulkComboResult\n */\nexport interface BulkComboResult {\n    /**\n     * @generated from protobuf field: repeated proto.ItemSpecWithSlot items_added = 1;\n     */\n    itemsAdded: ItemSpecWithSlot[];\n    /**\n     * @generated from protobuf field: proto.UnitMetrics unit_metrics = 2;\n     */\n    unitMetrics?: UnitMetrics;\n    /**\n     * @generated from protobuf field: proto.TalentLoadout talent_loadout = 3;\n     */\n    talentLoadout?: TalentLoadout;\n}\n/**\n * @generated from protobuf message proto.ItemSpecWithSlot\n */\nexport interface ItemSpecWithSlot {\n    /**\n     * @generated from protobuf field: proto.ItemSpec item = 1;\n     */\n    item?: ItemSpec;\n    /**\n     * @generated from protobuf field: proto.ItemSlot slot = 2;\n     */\n    slot: ItemSlot;\n}\n/**\n * @generated from protobuf enum proto.ResourceType\n */\nexport enum ResourceType {\n    /**\n     * @generated from protobuf enum value: ResourceTypeNone = 0;\n     */\n    ResourceTypeNone = 0,\n    /**\n     * @generated from protobuf enum value: ResourceTypeMana = 1;\n     */\n    ResourceTypeMana = 1,\n    /**\n     * @generated from protobuf enum value: ResourceTypeEnergy = 2;\n     */\n    ResourceTypeEnergy = 2,\n    /**\n     * @generated from protobuf enum value: ResourceTypeRage = 3;\n     */\n    ResourceTypeRage = 3,\n    /**\n     * @generated from protobuf enum value: ResourceTypeComboPoints = 4;\n     */\n    ResourceTypeComboPoints = 4,\n    /**\n     * @generated from protobuf enum value: ResourceTypeFocus = 5;\n     */\n    ResourceTypeFocus = 5,\n    /**\n     * @generated from protobuf enum value: ResourceTypeHealth = 6;\n     */\n    ResourceTypeHealth = 6,\n    /**\n     * @generated from protobuf enum value: ResourceTypeRunicPower = 7;\n     */\n    ResourceTypeRunicPower = 7,\n    /**\n     * @generated from protobuf enum value: ResourceTypeBloodRune = 8;\n     */\n    ResourceTypeBloodRune = 8,\n    /**\n     * @generated from protobuf enum value: ResourceTypeFrostRune = 9;\n     */\n    ResourceTypeFrostRune = 9,\n    /**\n     * @generated from protobuf enum value: ResourceTypeUnholyRune = 10;\n     */\n    ResourceTypeUnholyRune = 10,\n    /**\n     * @generated from protobuf enum value: ResourceTypeDeathRune = 11;\n     */\n    ResourceTypeDeathRune = 11,\n    /**\n     * @generated from protobuf enum value: ResourceTypeSolarEnergy = 12;\n     */\n    ResourceTypeSolarEnergy = 12,\n    /**\n     * @generated from protobuf enum value: ResourceTypeLunarEnergy = 13;\n     */\n    ResourceTypeLunarEnergy = 13\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Player$Type extends MessageType<Player> {\n    constructor() {\n        super(\"proto.Player\", [\n            { no: 51, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 1, name: \"race\", kind: \"enum\", T: () => [\"proto.Race\", Race] },\n            { no: 2, name: \"class\", kind: \"enum\", T: () => [\"proto.Class\", Class] },\n            { no: 3, name: \"equipment\", kind: \"message\", T: () => EquipmentSpec },\n            { no: 4, name: \"consumes\", kind: \"message\", T: () => Consumes },\n            { no: 5, name: \"bonus_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 6, name: \"enable_item_swap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"item_swap\", kind: \"message\", T: () => ItemSwap },\n            { no: 8, name: \"buffs\", kind: \"message\", T: () => IndividualBuffs },\n            { no: 9, name: \"blood_death_knight\", kind: \"message\", oneof: \"spec\", T: () => BloodDeathKnight },\n            { no: 10, name: \"frost_death_knight\", kind: \"message\", oneof: \"spec\", T: () => FrostDeathKnight },\n            { no: 11, name: \"unholy_death_knight\", kind: \"message\", oneof: \"spec\", T: () => UnholyDeathKnight },\n            { no: 12, name: \"balance_druid\", kind: \"message\", oneof: \"spec\", T: () => BalanceDruid },\n            { no: 13, name: \"feral_druid\", kind: \"message\", oneof: \"spec\", T: () => FeralDruid },\n            { no: 14, name: \"restoration_druid\", kind: \"message\", oneof: \"spec\", T: () => RestorationDruid },\n            { no: 15, name: \"beast_mastery_hunter\", kind: \"message\", oneof: \"spec\", T: () => BeastMasteryHunter },\n            { no: 16, name: \"marksmanship_hunter\", kind: \"message\", oneof: \"spec\", T: () => MarksmanshipHunter },\n            { no: 17, name: \"survival_hunter\", kind: \"message\", oneof: \"spec\", T: () => SurvivalHunter },\n            { no: 18, name: \"arcane_mage\", kind: \"message\", oneof: \"spec\", T: () => ArcaneMage },\n            { no: 19, name: \"fire_mage\", kind: \"message\", oneof: \"spec\", T: () => FireMage },\n            { no: 20, name: \"frost_mage\", kind: \"message\", oneof: \"spec\", T: () => FrostMage },\n            { no: 21, name: \"holy_paladin\", kind: \"message\", oneof: \"spec\", T: () => HolyPaladin },\n            { no: 22, name: \"protection_paladin\", kind: \"message\", oneof: \"spec\", T: () => ProtectionPaladin },\n            { no: 23, name: \"retribution_paladin\", kind: \"message\", oneof: \"spec\", T: () => RetributionPaladin },\n            { no: 24, name: \"discipline_priest\", kind: \"message\", oneof: \"spec\", T: () => DisciplinePriest },\n            { no: 25, name: \"holy_priest\", kind: \"message\", oneof: \"spec\", T: () => HolyPriest },\n            { no: 26, name: \"shadow_priest\", kind: \"message\", oneof: \"spec\", T: () => ShadowPriest },\n            { no: 27, name: \"assassination_rogue\", kind: \"message\", oneof: \"spec\", T: () => AssassinationRogue },\n            { no: 28, name: \"combat_rogue\", kind: \"message\", oneof: \"spec\", T: () => CombatRogue },\n            { no: 29, name: \"subtlety_rogue\", kind: \"message\", oneof: \"spec\", T: () => SubtletyRogue },\n            { no: 30, name: \"elemental_shaman\", kind: \"message\", oneof: \"spec\", T: () => ElementalShaman },\n            { no: 31, name: \"enhancement_shaman\", kind: \"message\", oneof: \"spec\", T: () => EnhancementShaman },\n            { no: 32, name: \"restoration_shaman\", kind: \"message\", oneof: \"spec\", T: () => RestorationShaman },\n            { no: 33, name: \"affliction_warlock\", kind: \"message\", oneof: \"spec\", T: () => AfflictionWarlock },\n            { no: 34, name: \"demonology_warlock\", kind: \"message\", oneof: \"spec\", T: () => DemonologyWarlock },\n            { no: 35, name: \"destruction_warlock\", kind: \"message\", oneof: \"spec\", T: () => DestructionWarlock },\n            { no: 36, name: \"arms_warrior\", kind: \"message\", oneof: \"spec\", T: () => ArmsWarrior },\n            { no: 37, name: \"fury_warrior\", kind: \"message\", oneof: \"spec\", T: () => FuryWarrior },\n            { no: 38, name: \"protection_warrior\", kind: \"message\", oneof: \"spec\", T: () => ProtectionWarrior },\n            { no: 39, name: \"talents_string\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 40, name: \"glyphs\", kind: \"message\", T: () => Glyphs },\n            { no: 41, name: \"profession1\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 42, name: \"profession2\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 43, name: \"cooldowns\", kind: \"message\", T: () => Cooldowns },\n            { no: 44, name: \"rotation\", kind: \"message\", T: () => APLRotation },\n            { no: 45, name: \"reaction_time_ms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"channel_clip_delay_ms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"in_front_of_target\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 48, name: \"distance_from_target\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 52, name: \"dark_intent_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 49, name: \"healing_model\", kind: \"message\", T: () => HealingModel },\n            { no: 50, name: \"database\", kind: \"message\", T: () => SimDatabase }\n        ]);\n    }\n    create(value?: PartialMessage<Player>): Player {\n        const message = { name: \"\", race: 0, class: 0, enableItemSwap: false, spec: { oneofKind: undefined }, talentsString: \"\", profession1: 0, profession2: 0, reactionTimeMs: 0, channelClipDelayMs: 0, inFrontOfTarget: false, distanceFromTarget: 0, darkIntentUptime: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Player>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Player): Player {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string name */ 51:\n                    message.name = reader.string();\n                    break;\n                case /* proto.Race race */ 1:\n                    message.race = reader.int32();\n                    break;\n                case /* proto.Class class */ 2:\n                    message.class = reader.int32();\n                    break;\n                case /* proto.EquipmentSpec equipment */ 3:\n                    message.equipment = EquipmentSpec.internalBinaryRead(reader, reader.uint32(), options, message.equipment);\n                    break;\n                case /* proto.Consumes consumes */ 4:\n                    message.consumes = Consumes.internalBinaryRead(reader, reader.uint32(), options, message.consumes);\n                    break;\n                case /* proto.UnitStats bonus_stats */ 5:\n                    message.bonusStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.bonusStats);\n                    break;\n                case /* bool enable_item_swap */ 6:\n                    message.enableItemSwap = reader.bool();\n                    break;\n                case /* proto.ItemSwap item_swap */ 7:\n                    message.itemSwap = ItemSwap.internalBinaryRead(reader, reader.uint32(), options, message.itemSwap);\n                    break;\n                case /* proto.IndividualBuffs buffs */ 8:\n                    message.buffs = IndividualBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                case /* proto.BloodDeathKnight blood_death_knight */ 9:\n                    message.spec = {\n                        oneofKind: \"bloodDeathKnight\",\n                        bloodDeathKnight: BloodDeathKnight.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).bloodDeathKnight)\n                    };\n                    break;\n                case /* proto.FrostDeathKnight frost_death_knight */ 10:\n                    message.spec = {\n                        oneofKind: \"frostDeathKnight\",\n                        frostDeathKnight: FrostDeathKnight.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).frostDeathKnight)\n                    };\n                    break;\n                case /* proto.UnholyDeathKnight unholy_death_knight */ 11:\n                    message.spec = {\n                        oneofKind: \"unholyDeathKnight\",\n                        unholyDeathKnight: UnholyDeathKnight.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).unholyDeathKnight)\n                    };\n                    break;\n                case /* proto.BalanceDruid balance_druid */ 12:\n                    message.spec = {\n                        oneofKind: \"balanceDruid\",\n                        balanceDruid: BalanceDruid.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).balanceDruid)\n                    };\n                    break;\n                case /* proto.FeralDruid feral_druid */ 13:\n                    message.spec = {\n                        oneofKind: \"feralDruid\",\n                        feralDruid: FeralDruid.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).feralDruid)\n                    };\n                    break;\n                case /* proto.RestorationDruid restoration_druid */ 14:\n                    message.spec = {\n                        oneofKind: \"restorationDruid\",\n                        restorationDruid: RestorationDruid.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).restorationDruid)\n                    };\n                    break;\n                case /* proto.BeastMasteryHunter beast_mastery_hunter */ 15:\n                    message.spec = {\n                        oneofKind: \"beastMasteryHunter\",\n                        beastMasteryHunter: BeastMasteryHunter.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).beastMasteryHunter)\n                    };\n                    break;\n                case /* proto.MarksmanshipHunter marksmanship_hunter */ 16:\n                    message.spec = {\n                        oneofKind: \"marksmanshipHunter\",\n                        marksmanshipHunter: MarksmanshipHunter.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).marksmanshipHunter)\n                    };\n                    break;\n                case /* proto.SurvivalHunter survival_hunter */ 17:\n                    message.spec = {\n                        oneofKind: \"survivalHunter\",\n                        survivalHunter: SurvivalHunter.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).survivalHunter)\n                    };\n                    break;\n                case /* proto.ArcaneMage arcane_mage */ 18:\n                    message.spec = {\n                        oneofKind: \"arcaneMage\",\n                        arcaneMage: ArcaneMage.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).arcaneMage)\n                    };\n                    break;\n                case /* proto.FireMage fire_mage */ 19:\n                    message.spec = {\n                        oneofKind: \"fireMage\",\n                        fireMage: FireMage.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).fireMage)\n                    };\n                    break;\n                case /* proto.FrostMage frost_mage */ 20:\n                    message.spec = {\n                        oneofKind: \"frostMage\",\n                        frostMage: FrostMage.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).frostMage)\n                    };\n                    break;\n                case /* proto.HolyPaladin holy_paladin */ 21:\n                    message.spec = {\n                        oneofKind: \"holyPaladin\",\n                        holyPaladin: HolyPaladin.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).holyPaladin)\n                    };\n                    break;\n                case /* proto.ProtectionPaladin protection_paladin */ 22:\n                    message.spec = {\n                        oneofKind: \"protectionPaladin\",\n                        protectionPaladin: ProtectionPaladin.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).protectionPaladin)\n                    };\n                    break;\n                case /* proto.RetributionPaladin retribution_paladin */ 23:\n                    message.spec = {\n                        oneofKind: \"retributionPaladin\",\n                        retributionPaladin: RetributionPaladin.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).retributionPaladin)\n                    };\n                    break;\n                case /* proto.DisciplinePriest discipline_priest */ 24:\n                    message.spec = {\n                        oneofKind: \"disciplinePriest\",\n                        disciplinePriest: DisciplinePriest.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).disciplinePriest)\n                    };\n                    break;\n                case /* proto.HolyPriest holy_priest */ 25:\n                    message.spec = {\n                        oneofKind: \"holyPriest\",\n                        holyPriest: HolyPriest.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).holyPriest)\n                    };\n                    break;\n                case /* proto.ShadowPriest shadow_priest */ 26:\n                    message.spec = {\n                        oneofKind: \"shadowPriest\",\n                        shadowPriest: ShadowPriest.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).shadowPriest)\n                    };\n                    break;\n                case /* proto.AssassinationRogue assassination_rogue */ 27:\n                    message.spec = {\n                        oneofKind: \"assassinationRogue\",\n                        assassinationRogue: AssassinationRogue.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).assassinationRogue)\n                    };\n                    break;\n                case /* proto.CombatRogue combat_rogue */ 28:\n                    message.spec = {\n                        oneofKind: \"combatRogue\",\n                        combatRogue: CombatRogue.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).combatRogue)\n                    };\n                    break;\n                case /* proto.SubtletyRogue subtlety_rogue */ 29:\n                    message.spec = {\n                        oneofKind: \"subtletyRogue\",\n                        subtletyRogue: SubtletyRogue.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).subtletyRogue)\n                    };\n                    break;\n                case /* proto.ElementalShaman elemental_shaman */ 30:\n                    message.spec = {\n                        oneofKind: \"elementalShaman\",\n                        elementalShaman: ElementalShaman.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).elementalShaman)\n                    };\n                    break;\n                case /* proto.EnhancementShaman enhancement_shaman */ 31:\n                    message.spec = {\n                        oneofKind: \"enhancementShaman\",\n                        enhancementShaman: EnhancementShaman.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).enhancementShaman)\n                    };\n                    break;\n                case /* proto.RestorationShaman restoration_shaman */ 32:\n                    message.spec = {\n                        oneofKind: \"restorationShaman\",\n                        restorationShaman: RestorationShaman.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).restorationShaman)\n                    };\n                    break;\n                case /* proto.AfflictionWarlock affliction_warlock */ 33:\n                    message.spec = {\n                        oneofKind: \"afflictionWarlock\",\n                        afflictionWarlock: AfflictionWarlock.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).afflictionWarlock)\n                    };\n                    break;\n                case /* proto.DemonologyWarlock demonology_warlock */ 34:\n                    message.spec = {\n                        oneofKind: \"demonologyWarlock\",\n                        demonologyWarlock: DemonologyWarlock.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).demonologyWarlock)\n                    };\n                    break;\n                case /* proto.DestructionWarlock destruction_warlock */ 35:\n                    message.spec = {\n                        oneofKind: \"destructionWarlock\",\n                        destructionWarlock: DestructionWarlock.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).destructionWarlock)\n                    };\n                    break;\n                case /* proto.ArmsWarrior arms_warrior */ 36:\n                    message.spec = {\n                        oneofKind: \"armsWarrior\",\n                        armsWarrior: ArmsWarrior.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).armsWarrior)\n                    };\n                    break;\n                case /* proto.FuryWarrior fury_warrior */ 37:\n                    message.spec = {\n                        oneofKind: \"furyWarrior\",\n                        furyWarrior: FuryWarrior.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).furyWarrior)\n                    };\n                    break;\n                case /* proto.ProtectionWarrior protection_warrior */ 38:\n                    message.spec = {\n                        oneofKind: \"protectionWarrior\",\n                        protectionWarrior: ProtectionWarrior.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).protectionWarrior)\n                    };\n                    break;\n                case /* string talents_string */ 39:\n                    message.talentsString = reader.string();\n                    break;\n                case /* proto.Glyphs glyphs */ 40:\n                    message.glyphs = Glyphs.internalBinaryRead(reader, reader.uint32(), options, message.glyphs);\n                    break;\n                case /* proto.Profession profession1 */ 41:\n                    message.profession1 = reader.int32();\n                    break;\n                case /* proto.Profession profession2 */ 42:\n                    message.profession2 = reader.int32();\n                    break;\n                case /* proto.Cooldowns cooldowns */ 43:\n                    message.cooldowns = Cooldowns.internalBinaryRead(reader, reader.uint32(), options, message.cooldowns);\n                    break;\n                case /* proto.APLRotation rotation */ 44:\n                    message.rotation = APLRotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* int32 reaction_time_ms */ 45:\n                    message.reactionTimeMs = reader.int32();\n                    break;\n                case /* int32 channel_clip_delay_ms */ 46:\n                    message.channelClipDelayMs = reader.int32();\n                    break;\n                case /* bool in_front_of_target */ 47:\n                    message.inFrontOfTarget = reader.bool();\n                    break;\n                case /* double distance_from_target */ 48:\n                    message.distanceFromTarget = reader.double();\n                    break;\n                case /* double dark_intent_uptime */ 52:\n                    message.darkIntentUptime = reader.double();\n                    break;\n                case /* proto.HealingModel healing_model */ 49:\n                    message.healingModel = HealingModel.internalBinaryRead(reader, reader.uint32(), options, message.healingModel);\n                    break;\n                case /* proto.SimDatabase database */ 50:\n                    message.database = SimDatabase.internalBinaryRead(reader, reader.uint32(), options, message.database);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Player, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string name = 51; */\n        if (message.name !== \"\")\n            writer.tag(51, WireType.LengthDelimited).string(message.name);\n        /* proto.Race race = 1; */\n        if (message.race !== 0)\n            writer.tag(1, WireType.Varint).int32(message.race);\n        /* proto.Class class = 2; */\n        if (message.class !== 0)\n            writer.tag(2, WireType.Varint).int32(message.class);\n        /* proto.EquipmentSpec equipment = 3; */\n        if (message.equipment)\n            EquipmentSpec.internalBinaryWrite(message.equipment, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Consumes consumes = 4; */\n        if (message.consumes)\n            Consumes.internalBinaryWrite(message.consumes, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats bonus_stats = 5; */\n        if (message.bonusStats)\n            UnitStats.internalBinaryWrite(message.bonusStats, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* bool enable_item_swap = 6; */\n        if (message.enableItemSwap !== false)\n            writer.tag(6, WireType.Varint).bool(message.enableItemSwap);\n        /* proto.ItemSwap item_swap = 7; */\n        if (message.itemSwap)\n            ItemSwap.internalBinaryWrite(message.itemSwap, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.IndividualBuffs buffs = 8; */\n        if (message.buffs)\n            IndividualBuffs.internalBinaryWrite(message.buffs, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BloodDeathKnight blood_death_knight = 9; */\n        if (message.spec.oneofKind === \"bloodDeathKnight\")\n            BloodDeathKnight.internalBinaryWrite(message.spec.bloodDeathKnight, writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FrostDeathKnight frost_death_knight = 10; */\n        if (message.spec.oneofKind === \"frostDeathKnight\")\n            FrostDeathKnight.internalBinaryWrite(message.spec.frostDeathKnight, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnholyDeathKnight unholy_death_knight = 11; */\n        if (message.spec.oneofKind === \"unholyDeathKnight\")\n            UnholyDeathKnight.internalBinaryWrite(message.spec.unholyDeathKnight, writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BalanceDruid balance_druid = 12; */\n        if (message.spec.oneofKind === \"balanceDruid\")\n            BalanceDruid.internalBinaryWrite(message.spec.balanceDruid, writer.tag(12, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FeralDruid feral_druid = 13; */\n        if (message.spec.oneofKind === \"feralDruid\")\n            FeralDruid.internalBinaryWrite(message.spec.feralDruid, writer.tag(13, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RestorationDruid restoration_druid = 14; */\n        if (message.spec.oneofKind === \"restorationDruid\")\n            RestorationDruid.internalBinaryWrite(message.spec.restorationDruid, writer.tag(14, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BeastMasteryHunter beast_mastery_hunter = 15; */\n        if (message.spec.oneofKind === \"beastMasteryHunter\")\n            BeastMasteryHunter.internalBinaryWrite(message.spec.beastMasteryHunter, writer.tag(15, WireType.LengthDelimited).fork(), options).join();\n        /* proto.MarksmanshipHunter marksmanship_hunter = 16; */\n        if (message.spec.oneofKind === \"marksmanshipHunter\")\n            MarksmanshipHunter.internalBinaryWrite(message.spec.marksmanshipHunter, writer.tag(16, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SurvivalHunter survival_hunter = 17; */\n        if (message.spec.oneofKind === \"survivalHunter\")\n            SurvivalHunter.internalBinaryWrite(message.spec.survivalHunter, writer.tag(17, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ArcaneMage arcane_mage = 18; */\n        if (message.spec.oneofKind === \"arcaneMage\")\n            ArcaneMage.internalBinaryWrite(message.spec.arcaneMage, writer.tag(18, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FireMage fire_mage = 19; */\n        if (message.spec.oneofKind === \"fireMage\")\n            FireMage.internalBinaryWrite(message.spec.fireMage, writer.tag(19, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FrostMage frost_mage = 20; */\n        if (message.spec.oneofKind === \"frostMage\")\n            FrostMage.internalBinaryWrite(message.spec.frostMage, writer.tag(20, WireType.LengthDelimited).fork(), options).join();\n        /* proto.HolyPaladin holy_paladin = 21; */\n        if (message.spec.oneofKind === \"holyPaladin\")\n            HolyPaladin.internalBinaryWrite(message.spec.holyPaladin, writer.tag(21, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ProtectionPaladin protection_paladin = 22; */\n        if (message.spec.oneofKind === \"protectionPaladin\")\n            ProtectionPaladin.internalBinaryWrite(message.spec.protectionPaladin, writer.tag(22, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RetributionPaladin retribution_paladin = 23; */\n        if (message.spec.oneofKind === \"retributionPaladin\")\n            RetributionPaladin.internalBinaryWrite(message.spec.retributionPaladin, writer.tag(23, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DisciplinePriest discipline_priest = 24; */\n        if (message.spec.oneofKind === \"disciplinePriest\")\n            DisciplinePriest.internalBinaryWrite(message.spec.disciplinePriest, writer.tag(24, WireType.LengthDelimited).fork(), options).join();\n        /* proto.HolyPriest holy_priest = 25; */\n        if (message.spec.oneofKind === \"holyPriest\")\n            HolyPriest.internalBinaryWrite(message.spec.holyPriest, writer.tag(25, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ShadowPriest shadow_priest = 26; */\n        if (message.spec.oneofKind === \"shadowPriest\")\n            ShadowPriest.internalBinaryWrite(message.spec.shadowPriest, writer.tag(26, WireType.LengthDelimited).fork(), options).join();\n        /* proto.AssassinationRogue assassination_rogue = 27; */\n        if (message.spec.oneofKind === \"assassinationRogue\")\n            AssassinationRogue.internalBinaryWrite(message.spec.assassinationRogue, writer.tag(27, WireType.LengthDelimited).fork(), options).join();\n        /* proto.CombatRogue combat_rogue = 28; */\n        if (message.spec.oneofKind === \"combatRogue\")\n            CombatRogue.internalBinaryWrite(message.spec.combatRogue, writer.tag(28, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SubtletyRogue subtlety_rogue = 29; */\n        if (message.spec.oneofKind === \"subtletyRogue\")\n            SubtletyRogue.internalBinaryWrite(message.spec.subtletyRogue, writer.tag(29, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ElementalShaman elemental_shaman = 30; */\n        if (message.spec.oneofKind === \"elementalShaman\")\n            ElementalShaman.internalBinaryWrite(message.spec.elementalShaman, writer.tag(30, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EnhancementShaman enhancement_shaman = 31; */\n        if (message.spec.oneofKind === \"enhancementShaman\")\n            EnhancementShaman.internalBinaryWrite(message.spec.enhancementShaman, writer.tag(31, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RestorationShaman restoration_shaman = 32; */\n        if (message.spec.oneofKind === \"restorationShaman\")\n            RestorationShaman.internalBinaryWrite(message.spec.restorationShaman, writer.tag(32, WireType.LengthDelimited).fork(), options).join();\n        /* proto.AfflictionWarlock affliction_warlock = 33; */\n        if (message.spec.oneofKind === \"afflictionWarlock\")\n            AfflictionWarlock.internalBinaryWrite(message.spec.afflictionWarlock, writer.tag(33, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DemonologyWarlock demonology_warlock = 34; */\n        if (message.spec.oneofKind === \"demonologyWarlock\")\n            DemonologyWarlock.internalBinaryWrite(message.spec.demonologyWarlock, writer.tag(34, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DestructionWarlock destruction_warlock = 35; */\n        if (message.spec.oneofKind === \"destructionWarlock\")\n            DestructionWarlock.internalBinaryWrite(message.spec.destructionWarlock, writer.tag(35, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ArmsWarrior arms_warrior = 36; */\n        if (message.spec.oneofKind === \"armsWarrior\")\n            ArmsWarrior.internalBinaryWrite(message.spec.armsWarrior, writer.tag(36, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FuryWarrior fury_warrior = 37; */\n        if (message.spec.oneofKind === \"furyWarrior\")\n            FuryWarrior.internalBinaryWrite(message.spec.furyWarrior, writer.tag(37, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ProtectionWarrior protection_warrior = 38; */\n        if (message.spec.oneofKind === \"protectionWarrior\")\n            ProtectionWarrior.internalBinaryWrite(message.spec.protectionWarrior, writer.tag(38, WireType.LengthDelimited).fork(), options).join();\n        /* string talents_string = 39; */\n        if (message.talentsString !== \"\")\n            writer.tag(39, WireType.LengthDelimited).string(message.talentsString);\n        /* proto.Glyphs glyphs = 40; */\n        if (message.glyphs)\n            Glyphs.internalBinaryWrite(message.glyphs, writer.tag(40, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Profession profession1 = 41; */\n        if (message.profession1 !== 0)\n            writer.tag(41, WireType.Varint).int32(message.profession1);\n        /* proto.Profession profession2 = 42; */\n        if (message.profession2 !== 0)\n            writer.tag(42, WireType.Varint).int32(message.profession2);\n        /* proto.Cooldowns cooldowns = 43; */\n        if (message.cooldowns)\n            Cooldowns.internalBinaryWrite(message.cooldowns, writer.tag(43, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLRotation rotation = 44; */\n        if (message.rotation)\n            APLRotation.internalBinaryWrite(message.rotation, writer.tag(44, WireType.LengthDelimited).fork(), options).join();\n        /* int32 reaction_time_ms = 45; */\n        if (message.reactionTimeMs !== 0)\n            writer.tag(45, WireType.Varint).int32(message.reactionTimeMs);\n        /* int32 channel_clip_delay_ms = 46; */\n        if (message.channelClipDelayMs !== 0)\n            writer.tag(46, WireType.Varint).int32(message.channelClipDelayMs);\n        /* bool in_front_of_target = 47; */\n        if (message.inFrontOfTarget !== false)\n            writer.tag(47, WireType.Varint).bool(message.inFrontOfTarget);\n        /* double distance_from_target = 48; */\n        if (message.distanceFromTarget !== 0)\n            writer.tag(48, WireType.Bit64).double(message.distanceFromTarget);\n        /* double dark_intent_uptime = 52; */\n        if (message.darkIntentUptime !== 0)\n            writer.tag(52, WireType.Bit64).double(message.darkIntentUptime);\n        /* proto.HealingModel healing_model = 49; */\n        if (message.healingModel)\n            HealingModel.internalBinaryWrite(message.healingModel, writer.tag(49, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimDatabase database = 50; */\n        if (message.database)\n            SimDatabase.internalBinaryWrite(message.database, writer.tag(50, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Player\n */\nexport const Player = new Player$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Party$Type extends MessageType<Party> {\n    constructor() {\n        super(\"proto.Party\", [\n            { no: 1, name: \"players\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Player },\n            { no: 2, name: \"buffs\", kind: \"message\", T: () => PartyBuffs }\n        ]);\n    }\n    create(value?: PartialMessage<Party>): Party {\n        const message = { players: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Party>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Party): Party {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Player players */ 1:\n                    message.players.push(Player.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.PartyBuffs buffs */ 2:\n                    message.buffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Party, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Player players = 1; */\n        for (let i = 0; i < message.players.length; i++)\n            Player.internalBinaryWrite(message.players[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs buffs = 2; */\n        if (message.buffs)\n            PartyBuffs.internalBinaryWrite(message.buffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Party\n */\nexport const Party = new Party$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Raid$Type extends MessageType<Raid> {\n    constructor() {\n        super(\"proto.Raid\", [\n            { no: 1, name: \"parties\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Party },\n            { no: 2, name: \"num_active_parties\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 5, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 4, name: \"tanks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitReference },\n            { no: 3, name: \"stagger_stormstrikes\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"target_dummies\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Raid>): Raid {\n        const message = { parties: [], numActiveParties: 0, tanks: [], staggerStormstrikes: false, targetDummies: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Raid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Raid): Raid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Party parties */ 1:\n                    message.parties.push(Party.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* int32 num_active_parties */ 2:\n                    message.numActiveParties = reader.int32();\n                    break;\n                case /* proto.RaidBuffs buffs */ 7:\n                    message.buffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 5:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* repeated proto.UnitReference tanks */ 4:\n                    message.tanks.push(UnitReference.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* bool stagger_stormstrikes */ 3:\n                    message.staggerStormstrikes = reader.bool();\n                    break;\n                case /* int32 target_dummies */ 6:\n                    message.targetDummies = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Raid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Party parties = 1; */\n        for (let i = 0; i < message.parties.length; i++)\n            Party.internalBinaryWrite(message.parties[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* int32 num_active_parties = 2; */\n        if (message.numActiveParties !== 0)\n            writer.tag(2, WireType.Varint).int32(message.numActiveParties);\n        /* proto.RaidBuffs buffs = 7; */\n        if (message.buffs)\n            RaidBuffs.internalBinaryWrite(message.buffs, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 5; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UnitReference tanks = 4; */\n        for (let i = 0; i < message.tanks.length; i++)\n            UnitReference.internalBinaryWrite(message.tanks[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* bool stagger_stormstrikes = 3; */\n        if (message.staggerStormstrikes !== false)\n            writer.tag(3, WireType.Varint).bool(message.staggerStormstrikes);\n        /* int32 target_dummies = 6; */\n        if (message.targetDummies !== 0)\n            writer.tag(6, WireType.Varint).int32(message.targetDummies);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Raid\n */\nexport const Raid = new Raid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimOptions$Type extends MessageType<SimOptions> {\n    constructor() {\n        super(\"proto.SimOptions\", [\n            { no: 1, name: \"iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"random_seed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"debug\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"debug_first_iteration\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"is_test\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"save_all_values\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"interactive\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SimOptions>): SimOptions {\n        const message = { iterations: 0, randomSeed: 0n, debug: false, debugFirstIteration: false, isTest: false, saveAllValues: false, interactive: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimOptions): SimOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 iterations */ 1:\n                    message.iterations = reader.int32();\n                    break;\n                case /* int64 random_seed */ 2:\n                    message.randomSeed = reader.int64().toBigInt();\n                    break;\n                case /* bool debug */ 3:\n                    message.debug = reader.bool();\n                    break;\n                case /* bool debug_first_iteration */ 6:\n                    message.debugFirstIteration = reader.bool();\n                    break;\n                case /* bool is_test */ 5:\n                    message.isTest = reader.bool();\n                    break;\n                case /* bool save_all_values */ 7:\n                    message.saveAllValues = reader.bool();\n                    break;\n                case /* bool interactive */ 8:\n                    message.interactive = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 iterations = 1; */\n        if (message.iterations !== 0)\n            writer.tag(1, WireType.Varint).int32(message.iterations);\n        /* int64 random_seed = 2; */\n        if (message.randomSeed !== 0n)\n            writer.tag(2, WireType.Varint).int64(message.randomSeed);\n        /* bool debug = 3; */\n        if (message.debug !== false)\n            writer.tag(3, WireType.Varint).bool(message.debug);\n        /* bool debug_first_iteration = 6; */\n        if (message.debugFirstIteration !== false)\n            writer.tag(6, WireType.Varint).bool(message.debugFirstIteration);\n        /* bool is_test = 5; */\n        if (message.isTest !== false)\n            writer.tag(5, WireType.Varint).bool(message.isTest);\n        /* bool save_all_values = 7; */\n        if (message.saveAllValues !== false)\n            writer.tag(7, WireType.Varint).bool(message.saveAllValues);\n        /* bool interactive = 8; */\n        if (message.interactive !== false)\n            writer.tag(8, WireType.Varint).bool(message.interactive);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimOptions\n */\nexport const SimOptions = new SimOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ActionMetrics$Type extends MessageType<ActionMetrics> {\n    constructor() {\n        super(\"proto.ActionMetrics\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"is_melee\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => TargetedActionMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<ActionMetrics>): ActionMetrics {\n        const message = { isMelee: false, targets: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ActionMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionMetrics): ActionMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* bool is_melee */ 2:\n                    message.isMelee = reader.bool();\n                    break;\n                case /* repeated proto.TargetedActionMetrics targets */ 3:\n                    message.targets.push(TargetedActionMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ActionMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool is_melee = 2; */\n        if (message.isMelee !== false)\n            writer.tag(2, WireType.Varint).bool(message.isMelee);\n        /* repeated proto.TargetedActionMetrics targets = 3; */\n        for (let i = 0; i < message.targets.length; i++)\n            TargetedActionMetrics.internalBinaryWrite(message.targets[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ActionMetrics\n */\nexport const ActionMetrics = new ActionMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TargetedActionMetrics$Type extends MessageType<TargetedActionMetrics> {\n    constructor() {\n        super(\"proto.TargetedActionMetrics\", [\n            { no: 12, name: \"unit_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 1, name: \"casts\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"hits\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"crits\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"misses\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"dodges\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"parries\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"blocks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"glances\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"damage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"threat\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 11, name: \"healing\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"shielding\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 14, name: \"cast_time_ms\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<TargetedActionMetrics>): TargetedActionMetrics {\n        const message = { unitIndex: 0, casts: 0, hits: 0, crits: 0, misses: 0, dodges: 0, parries: 0, blocks: 0, glances: 0, damage: 0, threat: 0, healing: 0, shielding: 0, castTimeMs: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TargetedActionMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TargetedActionMetrics): TargetedActionMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 unit_index */ 12:\n                    message.unitIndex = reader.int32();\n                    break;\n                case /* int32 casts */ 1:\n                    message.casts = reader.int32();\n                    break;\n                case /* int32 hits */ 2:\n                    message.hits = reader.int32();\n                    break;\n                case /* int32 crits */ 3:\n                    message.crits = reader.int32();\n                    break;\n                case /* int32 misses */ 4:\n                    message.misses = reader.int32();\n                    break;\n                case /* int32 dodges */ 5:\n                    message.dodges = reader.int32();\n                    break;\n                case /* int32 parries */ 6:\n                    message.parries = reader.int32();\n                    break;\n                case /* int32 blocks */ 7:\n                    message.blocks = reader.int32();\n                    break;\n                case /* int32 glances */ 8:\n                    message.glances = reader.int32();\n                    break;\n                case /* double damage */ 9:\n                    message.damage = reader.double();\n                    break;\n                case /* double threat */ 10:\n                    message.threat = reader.double();\n                    break;\n                case /* double healing */ 11:\n                    message.healing = reader.double();\n                    break;\n                case /* double shielding */ 13:\n                    message.shielding = reader.double();\n                    break;\n                case /* double cast_time_ms */ 14:\n                    message.castTimeMs = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TargetedActionMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 unit_index = 12; */\n        if (message.unitIndex !== 0)\n            writer.tag(12, WireType.Varint).int32(message.unitIndex);\n        /* int32 casts = 1; */\n        if (message.casts !== 0)\n            writer.tag(1, WireType.Varint).int32(message.casts);\n        /* int32 hits = 2; */\n        if (message.hits !== 0)\n            writer.tag(2, WireType.Varint).int32(message.hits);\n        /* int32 crits = 3; */\n        if (message.crits !== 0)\n            writer.tag(3, WireType.Varint).int32(message.crits);\n        /* int32 misses = 4; */\n        if (message.misses !== 0)\n            writer.tag(4, WireType.Varint).int32(message.misses);\n        /* int32 dodges = 5; */\n        if (message.dodges !== 0)\n            writer.tag(5, WireType.Varint).int32(message.dodges);\n        /* int32 parries = 6; */\n        if (message.parries !== 0)\n            writer.tag(6, WireType.Varint).int32(message.parries);\n        /* int32 blocks = 7; */\n        if (message.blocks !== 0)\n            writer.tag(7, WireType.Varint).int32(message.blocks);\n        /* int32 glances = 8; */\n        if (message.glances !== 0)\n            writer.tag(8, WireType.Varint).int32(message.glances);\n        /* double damage = 9; */\n        if (message.damage !== 0)\n            writer.tag(9, WireType.Bit64).double(message.damage);\n        /* double threat = 10; */\n        if (message.threat !== 0)\n            writer.tag(10, WireType.Bit64).double(message.threat);\n        /* double healing = 11; */\n        if (message.healing !== 0)\n            writer.tag(11, WireType.Bit64).double(message.healing);\n        /* double shielding = 13; */\n        if (message.shielding !== 0)\n            writer.tag(13, WireType.Bit64).double(message.shielding);\n        /* double cast_time_ms = 14; */\n        if (message.castTimeMs !== 0)\n            writer.tag(14, WireType.Bit64).double(message.castTimeMs);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TargetedActionMetrics\n */\nexport const TargetedActionMetrics = new TargetedActionMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AggregatorData$Type extends MessageType<AggregatorData> {\n    constructor() {\n        super(\"proto.AggregatorData\", [\n            { no: 1, name: \"n\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"sumSq\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<AggregatorData>): AggregatorData {\n        const message = { n: 0, sumSq: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AggregatorData>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AggregatorData): AggregatorData {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 n */ 1:\n                    message.n = reader.int32();\n                    break;\n                case /* double sumSq */ 2:\n                    message.sumSq = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AggregatorData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 n = 1; */\n        if (message.n !== 0)\n            writer.tag(1, WireType.Varint).int32(message.n);\n        /* double sumSq = 2; */\n        if (message.sumSq !== 0)\n            writer.tag(2, WireType.Bit64).double(message.sumSq);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AggregatorData\n */\nexport const AggregatorData = new AggregatorData$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AuraMetrics$Type extends MessageType<AuraMetrics> {\n    constructor() {\n        super(\"proto.AuraMetrics\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"uptime_seconds_avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"uptime_seconds_stdev\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"procs_avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"aggregator_data\", kind: \"message\", T: () => AggregatorData }\n        ]);\n    }\n    create(value?: PartialMessage<AuraMetrics>): AuraMetrics {\n        const message = { uptimeSecondsAvg: 0, uptimeSecondsStdev: 0, procsAvg: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AuraMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuraMetrics): AuraMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* double uptime_seconds_avg */ 2:\n                    message.uptimeSecondsAvg = reader.double();\n                    break;\n                case /* double uptime_seconds_stdev */ 3:\n                    message.uptimeSecondsStdev = reader.double();\n                    break;\n                case /* double procs_avg */ 4:\n                    message.procsAvg = reader.double();\n                    break;\n                case /* proto.AggregatorData aggregator_data */ 5:\n                    message.aggregatorData = AggregatorData.internalBinaryRead(reader, reader.uint32(), options, message.aggregatorData);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AuraMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double uptime_seconds_avg = 2; */\n        if (message.uptimeSecondsAvg !== 0)\n            writer.tag(2, WireType.Bit64).double(message.uptimeSecondsAvg);\n        /* double uptime_seconds_stdev = 3; */\n        if (message.uptimeSecondsStdev !== 0)\n            writer.tag(3, WireType.Bit64).double(message.uptimeSecondsStdev);\n        /* double procs_avg = 4; */\n        if (message.procsAvg !== 0)\n            writer.tag(4, WireType.Bit64).double(message.procsAvg);\n        /* proto.AggregatorData aggregator_data = 5; */\n        if (message.aggregatorData)\n            AggregatorData.internalBinaryWrite(message.aggregatorData, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AuraMetrics\n */\nexport const AuraMetrics = new AuraMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ResourceMetrics$Type extends MessageType<ResourceMetrics> {\n    constructor() {\n        super(\"proto.ResourceMetrics\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"type\", kind: \"enum\", T: () => [\"proto.ResourceType\", ResourceType] },\n            { no: 3, name: \"events\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"gain\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"actual_gain\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ResourceMetrics>): ResourceMetrics {\n        const message = { type: 0, events: 0, gain: 0, actualGain: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ResourceMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceMetrics): ResourceMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* proto.ResourceType type */ 2:\n                    message.type = reader.int32();\n                    break;\n                case /* int32 events */ 3:\n                    message.events = reader.int32();\n                    break;\n                case /* double gain */ 4:\n                    message.gain = reader.double();\n                    break;\n                case /* double actual_gain */ 5:\n                    message.actualGain = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ResourceMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ResourceType type = 2; */\n        if (message.type !== 0)\n            writer.tag(2, WireType.Varint).int32(message.type);\n        /* int32 events = 3; */\n        if (message.events !== 0)\n            writer.tag(3, WireType.Varint).int32(message.events);\n        /* double gain = 4; */\n        if (message.gain !== 0)\n            writer.tag(4, WireType.Bit64).double(message.gain);\n        /* double actual_gain = 5; */\n        if (message.actualGain !== 0)\n            writer.tag(5, WireType.Bit64).double(message.actualGain);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ResourceMetrics\n */\nexport const ResourceMetrics = new ResourceMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DistributionMetrics$Type extends MessageType<DistributionMetrics> {\n    constructor() {\n        super(\"proto.DistributionMetrics\", [\n            { no: 1, name: \"avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"stdev\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"max\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"max_seed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 6, name: \"min\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"min_seed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 4, name: \"hist\", kind: \"map\", K: 5 /*ScalarType.INT32*/, V: { kind: \"scalar\", T: 5 /*ScalarType.INT32*/ } },\n            { no: 8, name: \"all_values\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"aggregator_data\", kind: \"message\", T: () => AggregatorData }\n        ]);\n    }\n    create(value?: PartialMessage<DistributionMetrics>): DistributionMetrics {\n        const message = { avg: 0, stdev: 0, max: 0, maxSeed: 0n, min: 0, minSeed: 0n, hist: {}, allValues: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DistributionMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DistributionMetrics): DistributionMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double avg */ 1:\n                    message.avg = reader.double();\n                    break;\n                case /* double stdev */ 2:\n                    message.stdev = reader.double();\n                    break;\n                case /* double max */ 3:\n                    message.max = reader.double();\n                    break;\n                case /* int64 max_seed */ 5:\n                    message.maxSeed = reader.int64().toBigInt();\n                    break;\n                case /* double min */ 6:\n                    message.min = reader.double();\n                    break;\n                case /* int64 min_seed */ 7:\n                    message.minSeed = reader.int64().toBigInt();\n                    break;\n                case /* map<int32, int32> hist */ 4:\n                    this.binaryReadMap4(message.hist, reader, options);\n                    break;\n                case /* repeated double all_values */ 8:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.allValues.push(reader.double());\n                    else\n                        message.allValues.push(reader.double());\n                    break;\n                case /* proto.AggregatorData aggregator_data */ 9:\n                    message.aggregatorData = AggregatorData.internalBinaryRead(reader, reader.uint32(), options, message.aggregatorData);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    private binaryReadMap4(map: DistributionMetrics[\"hist\"], reader: IBinaryReader, options: BinaryReadOptions): void {\n        let len = reader.uint32(), end = reader.pos + len, key: keyof DistributionMetrics[\"hist\"] | undefined, val: DistributionMetrics[\"hist\"][any] | undefined;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case 1:\n                    key = reader.int32();\n                    break;\n                case 2:\n                    val = reader.int32();\n                    break;\n                default: throw new globalThis.Error(\"unknown map entry field for field proto.DistributionMetrics.hist\");\n            }\n        }\n        map[key ?? 0] = val ?? 0;\n    }\n    internalBinaryWrite(message: DistributionMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double avg = 1; */\n        if (message.avg !== 0)\n            writer.tag(1, WireType.Bit64).double(message.avg);\n        /* double stdev = 2; */\n        if (message.stdev !== 0)\n            writer.tag(2, WireType.Bit64).double(message.stdev);\n        /* double max = 3; */\n        if (message.max !== 0)\n            writer.tag(3, WireType.Bit64).double(message.max);\n        /* int64 max_seed = 5; */\n        if (message.maxSeed !== 0n)\n            writer.tag(5, WireType.Varint).int64(message.maxSeed);\n        /* double min = 6; */\n        if (message.min !== 0)\n            writer.tag(6, WireType.Bit64).double(message.min);\n        /* int64 min_seed = 7; */\n        if (message.minSeed !== 0n)\n            writer.tag(7, WireType.Varint).int64(message.minSeed);\n        /* map<int32, int32> hist = 4; */\n        for (let k of Object.keys(message.hist))\n            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k)).tag(2, WireType.Varint).int32(message.hist[k as any]).join();\n        /* repeated double all_values = 8; */\n        if (message.allValues.length) {\n            writer.tag(8, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.allValues.length; i++)\n                writer.double(message.allValues[i]);\n            writer.join();\n        }\n        /* proto.AggregatorData aggregator_data = 9; */\n        if (message.aggregatorData)\n            AggregatorData.internalBinaryWrite(message.aggregatorData, writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DistributionMetrics\n */\nexport const DistributionMetrics = new DistributionMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UnitMetrics$Type extends MessageType<UnitMetrics> {\n    constructor() {\n        super(\"proto.UnitMetrics\", [\n            { no: 9, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 13, name: \"unit_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 1, name: \"dps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 16, name: \"dpasp\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 8, name: \"threat\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 11, name: \"dtps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 17, name: \"tmi\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 14, name: \"hps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 15, name: \"tto\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 3, name: \"seconds_oom_avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 12, name: \"chance_of_death\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"actions\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ActionMetrics },\n            { no: 6, name: \"auras\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => AuraMetrics },\n            { no: 10, name: \"resources\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ResourceMetrics },\n            { no: 7, name: \"pets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<UnitMetrics>): UnitMetrics {\n        const message = { name: \"\", unitIndex: 0, secondsOomAvg: 0, chanceOfDeath: 0, actions: [], auras: [], resources: [], pets: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UnitMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnitMetrics): UnitMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string name */ 9:\n                    message.name = reader.string();\n                    break;\n                case /* int32 unit_index */ 13:\n                    message.unitIndex = reader.int32();\n                    break;\n                case /* proto.DistributionMetrics dps */ 1:\n                    message.dps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.DistributionMetrics dpasp */ 16:\n                    message.dpasp = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dpasp);\n                    break;\n                case /* proto.DistributionMetrics threat */ 8:\n                    message.threat = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.threat);\n                    break;\n                case /* proto.DistributionMetrics dtps */ 11:\n                    message.dtps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dtps);\n                    break;\n                case /* proto.DistributionMetrics tmi */ 17:\n                    message.tmi = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.tmi);\n                    break;\n                case /* proto.DistributionMetrics hps */ 14:\n                    message.hps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.hps);\n                    break;\n                case /* proto.DistributionMetrics tto */ 15:\n                    message.tto = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.tto);\n                    break;\n                case /* double seconds_oom_avg */ 3:\n                    message.secondsOomAvg = reader.double();\n                    break;\n                case /* double chance_of_death */ 12:\n                    message.chanceOfDeath = reader.double();\n                    break;\n                case /* repeated proto.ActionMetrics actions */ 5:\n                    message.actions.push(ActionMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.AuraMetrics auras */ 6:\n                    message.auras.push(AuraMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.ResourceMetrics resources */ 10:\n                    message.resources.push(ResourceMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.UnitMetrics pets */ 7:\n                    message.pets.push(UnitMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UnitMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string name = 9; */\n        if (message.name !== \"\")\n            writer.tag(9, WireType.LengthDelimited).string(message.name);\n        /* int32 unit_index = 13; */\n        if (message.unitIndex !== 0)\n            writer.tag(13, WireType.Varint).int32(message.unitIndex);\n        /* proto.DistributionMetrics dps = 1; */\n        if (message.dps)\n            DistributionMetrics.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics dpasp = 16; */\n        if (message.dpasp)\n            DistributionMetrics.internalBinaryWrite(message.dpasp, writer.tag(16, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics threat = 8; */\n        if (message.threat)\n            DistributionMetrics.internalBinaryWrite(message.threat, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics dtps = 11; */\n        if (message.dtps)\n            DistributionMetrics.internalBinaryWrite(message.dtps, writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics tmi = 17; */\n        if (message.tmi)\n            DistributionMetrics.internalBinaryWrite(message.tmi, writer.tag(17, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics hps = 14; */\n        if (message.hps)\n            DistributionMetrics.internalBinaryWrite(message.hps, writer.tag(14, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics tto = 15; */\n        if (message.tto)\n            DistributionMetrics.internalBinaryWrite(message.tto, writer.tag(15, WireType.LengthDelimited).fork(), options).join();\n        /* double seconds_oom_avg = 3; */\n        if (message.secondsOomAvg !== 0)\n            writer.tag(3, WireType.Bit64).double(message.secondsOomAvg);\n        /* double chance_of_death = 12; */\n        if (message.chanceOfDeath !== 0)\n            writer.tag(12, WireType.Bit64).double(message.chanceOfDeath);\n        /* repeated proto.ActionMetrics actions = 5; */\n        for (let i = 0; i < message.actions.length; i++)\n            ActionMetrics.internalBinaryWrite(message.actions[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.AuraMetrics auras = 6; */\n        for (let i = 0; i < message.auras.length; i++)\n            AuraMetrics.internalBinaryWrite(message.auras[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.ResourceMetrics resources = 10; */\n        for (let i = 0; i < message.resources.length; i++)\n            ResourceMetrics.internalBinaryWrite(message.resources[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UnitMetrics pets = 7; */\n        for (let i = 0; i < message.pets.length; i++)\n            UnitMetrics.internalBinaryWrite(message.pets[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UnitMetrics\n */\nexport const UnitMetrics = new UnitMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PartyMetrics$Type extends MessageType<PartyMetrics> {\n    constructor() {\n        super(\"proto.PartyMetrics\", [\n            { no: 1, name: \"dps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 3, name: \"hps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 2, name: \"players\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<PartyMetrics>): PartyMetrics {\n        const message = { players: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PartyMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PartyMetrics): PartyMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DistributionMetrics dps */ 1:\n                    message.dps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.DistributionMetrics hps */ 3:\n                    message.hps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.hps);\n                    break;\n                case /* repeated proto.UnitMetrics players */ 2:\n                    message.players.push(UnitMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PartyMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DistributionMetrics dps = 1; */\n        if (message.dps)\n            DistributionMetrics.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics hps = 3; */\n        if (message.hps)\n            DistributionMetrics.internalBinaryWrite(message.hps, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UnitMetrics players = 2; */\n        for (let i = 0; i < message.players.length; i++)\n            UnitMetrics.internalBinaryWrite(message.players[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PartyMetrics\n */\nexport const PartyMetrics = new PartyMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidMetrics$Type extends MessageType<RaidMetrics> {\n    constructor() {\n        super(\"proto.RaidMetrics\", [\n            { no: 1, name: \"dps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 3, name: \"hps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 2, name: \"parties\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PartyMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<RaidMetrics>): RaidMetrics {\n        const message = { parties: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidMetrics): RaidMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DistributionMetrics dps */ 1:\n                    message.dps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.DistributionMetrics hps */ 3:\n                    message.hps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.hps);\n                    break;\n                case /* repeated proto.PartyMetrics parties */ 2:\n                    message.parties.push(PartyMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DistributionMetrics dps = 1; */\n        if (message.dps)\n            DistributionMetrics.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics hps = 3; */\n        if (message.hps)\n            DistributionMetrics.internalBinaryWrite(message.hps, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.PartyMetrics parties = 2; */\n        for (let i = 0; i < message.parties.length; i++)\n            PartyMetrics.internalBinaryWrite(message.parties[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidMetrics\n */\nexport const RaidMetrics = new RaidMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EncounterMetrics$Type extends MessageType<EncounterMetrics> {\n    constructor() {\n        super(\"proto.EncounterMetrics\", [\n            { no: 1, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<EncounterMetrics>): EncounterMetrics {\n        const message = { targets: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EncounterMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EncounterMetrics): EncounterMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.UnitMetrics targets */ 1:\n                    message.targets.push(UnitMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EncounterMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.UnitMetrics targets = 1; */\n        for (let i = 0; i < message.targets.length; i++)\n            UnitMetrics.internalBinaryWrite(message.targets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EncounterMetrics\n */\nexport const EncounterMetrics = new EncounterMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidSimRequest$Type extends MessageType<RaidSimRequest> {\n    constructor() {\n        super(\"proto.RaidSimRequest\", [\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid },\n            { no: 2, name: \"encounter\", kind: \"message\", T: () => Encounter },\n            { no: 3, name: \"sim_options\", kind: \"message\", T: () => SimOptions }\n        ]);\n    }\n    create(value?: PartialMessage<RaidSimRequest>): RaidSimRequest {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidSimRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidSimRequest): RaidSimRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                case /* proto.Encounter encounter */ 2:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                case /* proto.SimOptions sim_options */ 3:\n                    message.simOptions = SimOptions.internalBinaryRead(reader, reader.uint32(), options, message.simOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidSimRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 2; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimOptions sim_options = 3; */\n        if (message.simOptions)\n            SimOptions.internalBinaryWrite(message.simOptions, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidSimRequest\n */\nexport const RaidSimRequest = new RaidSimRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidSimResult$Type extends MessageType<RaidSimResult> {\n    constructor() {\n        super(\"proto.RaidSimResult\", [\n            { no: 1, name: \"raid_metrics\", kind: \"message\", T: () => RaidMetrics },\n            { no: 2, name: \"encounter_metrics\", kind: \"message\", T: () => EncounterMetrics },\n            { no: 3, name: \"logs\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"first_iteration_duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"avg_iteration_duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"error_result\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RaidSimResult>): RaidSimResult {\n        const message = { logs: \"\", firstIterationDuration: 0, avgIterationDuration: 0, errorResult: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidSimResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidSimResult): RaidSimResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidMetrics raid_metrics */ 1:\n                    message.raidMetrics = RaidMetrics.internalBinaryRead(reader, reader.uint32(), options, message.raidMetrics);\n                    break;\n                case /* proto.EncounterMetrics encounter_metrics */ 2:\n                    message.encounterMetrics = EncounterMetrics.internalBinaryRead(reader, reader.uint32(), options, message.encounterMetrics);\n                    break;\n                case /* string logs */ 3:\n                    message.logs = reader.string();\n                    break;\n                case /* double first_iteration_duration */ 4:\n                    message.firstIterationDuration = reader.double();\n                    break;\n                case /* double avg_iteration_duration */ 6:\n                    message.avgIterationDuration = reader.double();\n                    break;\n                case /* string error_result */ 5:\n                    message.errorResult = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidSimResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidMetrics raid_metrics = 1; */\n        if (message.raidMetrics)\n            RaidMetrics.internalBinaryWrite(message.raidMetrics, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EncounterMetrics encounter_metrics = 2; */\n        if (message.encounterMetrics)\n            EncounterMetrics.internalBinaryWrite(message.encounterMetrics, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* string logs = 3; */\n        if (message.logs !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.logs);\n        /* double first_iteration_duration = 4; */\n        if (message.firstIterationDuration !== 0)\n            writer.tag(4, WireType.Bit64).double(message.firstIterationDuration);\n        /* double avg_iteration_duration = 6; */\n        if (message.avgIterationDuration !== 0)\n            writer.tag(6, WireType.Bit64).double(message.avgIterationDuration);\n        /* string error_result = 5; */\n        if (message.errorResult !== \"\")\n            writer.tag(5, WireType.LengthDelimited).string(message.errorResult);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidSimResult\n */\nexport const RaidSimResult = new RaidSimResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ComputeStatsRequest$Type extends MessageType<ComputeStatsRequest> {\n    constructor() {\n        super(\"proto.ComputeStatsRequest\", [\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid },\n            { no: 2, name: \"encounter\", kind: \"message\", T: () => Encounter }\n        ]);\n    }\n    create(value?: PartialMessage<ComputeStatsRequest>): ComputeStatsRequest {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ComputeStatsRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ComputeStatsRequest): ComputeStatsRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                case /* proto.Encounter encounter */ 2:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ComputeStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 2; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ComputeStatsRequest\n */\nexport const ComputeStatsRequest = new ComputeStatsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AuraStats$Type extends MessageType<AuraStats> {\n    constructor() {\n        super(\"proto.AuraStats\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"max_stacks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"has_icd\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"has_exclusive_effect\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<AuraStats>): AuraStats {\n        const message = { maxStacks: 0, hasIcd: false, hasExclusiveEffect: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AuraStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuraStats): AuraStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* int32 max_stacks */ 2:\n                    message.maxStacks = reader.int32();\n                    break;\n                case /* bool has_icd */ 3:\n                    message.hasIcd = reader.bool();\n                    break;\n                case /* bool has_exclusive_effect */ 4:\n                    message.hasExclusiveEffect = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AuraStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* int32 max_stacks = 2; */\n        if (message.maxStacks !== 0)\n            writer.tag(2, WireType.Varint).int32(message.maxStacks);\n        /* bool has_icd = 3; */\n        if (message.hasIcd !== false)\n            writer.tag(3, WireType.Varint).bool(message.hasIcd);\n        /* bool has_exclusive_effect = 4; */\n        if (message.hasExclusiveEffect !== false)\n            writer.tag(4, WireType.Varint).bool(message.hasExclusiveEffect);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AuraStats\n */\nexport const AuraStats = new AuraStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SpellStats$Type extends MessageType<SpellStats> {\n    constructor() {\n        super(\"proto.SpellStats\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"is_castable\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"is_channeled\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"is_major_cooldown\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"has_dot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"has_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"prepull_only\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"encounter_only\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"has_cast_time\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"is_friendly\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SpellStats>): SpellStats {\n        const message = { isCastable: false, isChanneled: false, isMajorCooldown: false, hasDot: false, hasShield: false, prepullOnly: false, encounterOnly: false, hasCastTime: false, isFriendly: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SpellStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SpellStats): SpellStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* bool is_castable */ 2:\n                    message.isCastable = reader.bool();\n                    break;\n                case /* bool is_channeled */ 7:\n                    message.isChanneled = reader.bool();\n                    break;\n                case /* bool is_major_cooldown */ 3:\n                    message.isMajorCooldown = reader.bool();\n                    break;\n                case /* bool has_dot */ 4:\n                    message.hasDot = reader.bool();\n                    break;\n                case /* bool has_shield */ 6:\n                    message.hasShield = reader.bool();\n                    break;\n                case /* bool prepull_only */ 5:\n                    message.prepullOnly = reader.bool();\n                    break;\n                case /* bool encounter_only */ 8:\n                    message.encounterOnly = reader.bool();\n                    break;\n                case /* bool has_cast_time */ 9:\n                    message.hasCastTime = reader.bool();\n                    break;\n                case /* bool is_friendly */ 10:\n                    message.isFriendly = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SpellStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool is_castable = 2; */\n        if (message.isCastable !== false)\n            writer.tag(2, WireType.Varint).bool(message.isCastable);\n        /* bool is_channeled = 7; */\n        if (message.isChanneled !== false)\n            writer.tag(7, WireType.Varint).bool(message.isChanneled);\n        /* bool is_major_cooldown = 3; */\n        if (message.isMajorCooldown !== false)\n            writer.tag(3, WireType.Varint).bool(message.isMajorCooldown);\n        /* bool has_dot = 4; */\n        if (message.hasDot !== false)\n            writer.tag(4, WireType.Varint).bool(message.hasDot);\n        /* bool has_shield = 6; */\n        if (message.hasShield !== false)\n            writer.tag(6, WireType.Varint).bool(message.hasShield);\n        /* bool prepull_only = 5; */\n        if (message.prepullOnly !== false)\n            writer.tag(5, WireType.Varint).bool(message.prepullOnly);\n        /* bool encounter_only = 8; */\n        if (message.encounterOnly !== false)\n            writer.tag(8, WireType.Varint).bool(message.encounterOnly);\n        /* bool has_cast_time = 9; */\n        if (message.hasCastTime !== false)\n            writer.tag(9, WireType.Varint).bool(message.hasCastTime);\n        /* bool is_friendly = 10; */\n        if (message.isFriendly !== false)\n            writer.tag(10, WireType.Varint).bool(message.isFriendly);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SpellStats\n */\nexport const SpellStats = new SpellStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionStats$Type extends MessageType<APLActionStats> {\n    constructor() {\n        super(\"proto.APLActionStats\", [\n            { no: 1, name: \"warnings\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionStats>): APLActionStats {\n        const message = { warnings: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionStats): APLActionStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated string warnings */ 1:\n                    message.warnings.push(reader.string());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated string warnings = 1; */\n        for (let i = 0; i < message.warnings.length; i++)\n            writer.tag(1, WireType.LengthDelimited).string(message.warnings[i]);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionStats\n */\nexport const APLActionStats = new APLActionStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLStats$Type extends MessageType<APLStats> {\n    constructor() {\n        super(\"proto.APLStats\", [\n            { no: 1, name: \"prepull_actions\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLActionStats },\n            { no: 2, name: \"priority_list\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLActionStats }\n        ]);\n    }\n    create(value?: PartialMessage<APLStats>): APLStats {\n        const message = { prepullActions: [], priorityList: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLStats): APLStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.APLActionStats prepull_actions */ 1:\n                    message.prepullActions.push(APLActionStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.APLActionStats priority_list */ 2:\n                    message.priorityList.push(APLActionStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.APLActionStats prepull_actions = 1; */\n        for (let i = 0; i < message.prepullActions.length; i++)\n            APLActionStats.internalBinaryWrite(message.prepullActions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.APLActionStats priority_list = 2; */\n        for (let i = 0; i < message.priorityList.length; i++)\n            APLActionStats.internalBinaryWrite(message.priorityList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLStats\n */\nexport const APLStats = new APLStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UnitMetadata$Type extends MessageType<UnitMetadata> {\n    constructor() {\n        super(\"proto.UnitMetadata\", [\n            { no: 3, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 1, name: \"spells\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => SpellStats },\n            { no: 2, name: \"auras\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => AuraStats }\n        ]);\n    }\n    create(value?: PartialMessage<UnitMetadata>): UnitMetadata {\n        const message = { name: \"\", spells: [], auras: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UnitMetadata>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnitMetadata): UnitMetadata {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string name */ 3:\n                    message.name = reader.string();\n                    break;\n                case /* repeated proto.SpellStats spells */ 1:\n                    message.spells.push(SpellStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.AuraStats auras */ 2:\n                    message.auras.push(AuraStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UnitMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string name = 3; */\n        if (message.name !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.name);\n        /* repeated proto.SpellStats spells = 1; */\n        for (let i = 0; i < message.spells.length; i++)\n            SpellStats.internalBinaryWrite(message.spells[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.AuraStats auras = 2; */\n        for (let i = 0; i < message.auras.length; i++)\n            AuraStats.internalBinaryWrite(message.auras[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UnitMetadata\n */\nexport const UnitMetadata = new UnitMetadata$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PetStats$Type extends MessageType<PetStats> {\n    constructor() {\n        super(\"proto.PetStats\", [\n            { no: 1, name: \"metadata\", kind: \"message\", T: () => UnitMetadata }\n        ]);\n    }\n    create(value?: PartialMessage<PetStats>): PetStats {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PetStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PetStats): PetStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitMetadata metadata */ 1:\n                    message.metadata = UnitMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PetStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitMetadata metadata = 1; */\n        if (message.metadata)\n            UnitMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PetStats\n */\nexport const PetStats = new PetStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PlayerStats$Type extends MessageType<PlayerStats> {\n    constructor() {\n        super(\"proto.PlayerStats\", [\n            { no: 6, name: \"base_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 1, name: \"gear_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 7, name: \"talents_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 8, name: \"buffs_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 9, name: \"consumes_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 2, name: \"final_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 3, name: \"sets\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"buffs\", kind: \"message\", T: () => IndividualBuffs },\n            { no: 10, name: \"metadata\", kind: \"message\", T: () => UnitMetadata },\n            { no: 12, name: \"rotation_stats\", kind: \"message\", T: () => APLStats },\n            { no: 11, name: \"pets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PetStats }\n        ]);\n    }\n    create(value?: PartialMessage<PlayerStats>): PlayerStats {\n        const message = { sets: [], pets: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PlayerStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerStats): PlayerStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitStats base_stats */ 6:\n                    message.baseStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.baseStats);\n                    break;\n                case /* proto.UnitStats gear_stats */ 1:\n                    message.gearStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.gearStats);\n                    break;\n                case /* proto.UnitStats talents_stats */ 7:\n                    message.talentsStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.talentsStats);\n                    break;\n                case /* proto.UnitStats buffs_stats */ 8:\n                    message.buffsStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.buffsStats);\n                    break;\n                case /* proto.UnitStats consumes_stats */ 9:\n                    message.consumesStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.consumesStats);\n                    break;\n                case /* proto.UnitStats final_stats */ 2:\n                    message.finalStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.finalStats);\n                    break;\n                case /* repeated string sets */ 3:\n                    message.sets.push(reader.string());\n                    break;\n                case /* proto.IndividualBuffs buffs */ 4:\n                    message.buffs = IndividualBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                case /* proto.UnitMetadata metadata */ 10:\n                    message.metadata = UnitMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);\n                    break;\n                case /* proto.APLStats rotation_stats */ 12:\n                    message.rotationStats = APLStats.internalBinaryRead(reader, reader.uint32(), options, message.rotationStats);\n                    break;\n                case /* repeated proto.PetStats pets */ 11:\n                    message.pets.push(PetStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PlayerStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitStats base_stats = 6; */\n        if (message.baseStats)\n            UnitStats.internalBinaryWrite(message.baseStats, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats gear_stats = 1; */\n        if (message.gearStats)\n            UnitStats.internalBinaryWrite(message.gearStats, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats talents_stats = 7; */\n        if (message.talentsStats)\n            UnitStats.internalBinaryWrite(message.talentsStats, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats buffs_stats = 8; */\n        if (message.buffsStats)\n            UnitStats.internalBinaryWrite(message.buffsStats, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats consumes_stats = 9; */\n        if (message.consumesStats)\n            UnitStats.internalBinaryWrite(message.consumesStats, writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats final_stats = 2; */\n        if (message.finalStats)\n            UnitStats.internalBinaryWrite(message.finalStats, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* repeated string sets = 3; */\n        for (let i = 0; i < message.sets.length; i++)\n            writer.tag(3, WireType.LengthDelimited).string(message.sets[i]);\n        /* proto.IndividualBuffs buffs = 4; */\n        if (message.buffs)\n            IndividualBuffs.internalBinaryWrite(message.buffs, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitMetadata metadata = 10; */\n        if (message.metadata)\n            UnitMetadata.internalBinaryWrite(message.metadata, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLStats rotation_stats = 12; */\n        if (message.rotationStats)\n            APLStats.internalBinaryWrite(message.rotationStats, writer.tag(12, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.PetStats pets = 11; */\n        for (let i = 0; i < message.pets.length; i++)\n            PetStats.internalBinaryWrite(message.pets[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PlayerStats\n */\nexport const PlayerStats = new PlayerStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PartyStats$Type extends MessageType<PartyStats> {\n    constructor() {\n        super(\"proto.PartyStats\", [\n            { no: 1, name: \"players\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayerStats }\n        ]);\n    }\n    create(value?: PartialMessage<PartyStats>): PartyStats {\n        const message = { players: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PartyStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PartyStats): PartyStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.PlayerStats players */ 1:\n                    message.players.push(PlayerStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PartyStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.PlayerStats players = 1; */\n        for (let i = 0; i < message.players.length; i++)\n            PlayerStats.internalBinaryWrite(message.players[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PartyStats\n */\nexport const PartyStats = new PartyStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidStats$Type extends MessageType<RaidStats> {\n    constructor() {\n        super(\"proto.RaidStats\", [\n            { no: 1, name: \"parties\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PartyStats }\n        ]);\n    }\n    create(value?: PartialMessage<RaidStats>): RaidStats {\n        const message = { parties: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidStats): RaidStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.PartyStats parties */ 1:\n                    message.parties.push(PartyStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.PartyStats parties = 1; */\n        for (let i = 0; i < message.parties.length; i++)\n            PartyStats.internalBinaryWrite(message.parties[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidStats\n */\nexport const RaidStats = new RaidStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TargetStats$Type extends MessageType<TargetStats> {\n    constructor() {\n        super(\"proto.TargetStats\", [\n            { no: 1, name: \"metadata\", kind: \"message\", T: () => UnitMetadata }\n        ]);\n    }\n    create(value?: PartialMessage<TargetStats>): TargetStats {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TargetStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TargetStats): TargetStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitMetadata metadata */ 1:\n                    message.metadata = UnitMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TargetStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitMetadata metadata = 1; */\n        if (message.metadata)\n            UnitMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TargetStats\n */\nexport const TargetStats = new TargetStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EncounterStats$Type extends MessageType<EncounterStats> {\n    constructor() {\n        super(\"proto.EncounterStats\", [\n            { no: 1, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => TargetStats }\n        ]);\n    }\n    create(value?: PartialMessage<EncounterStats>): EncounterStats {\n        const message = { targets: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EncounterStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EncounterStats): EncounterStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.TargetStats targets */ 1:\n                    message.targets.push(TargetStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EncounterStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.TargetStats targets = 1; */\n        for (let i = 0; i < message.targets.length; i++)\n            TargetStats.internalBinaryWrite(message.targets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EncounterStats\n */\nexport const EncounterStats = new EncounterStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ComputeStatsResult$Type extends MessageType<ComputeStatsResult> {\n    constructor() {\n        super(\"proto.ComputeStatsResult\", [\n            { no: 1, name: \"raid_stats\", kind: \"message\", T: () => RaidStats },\n            { no: 3, name: \"encounter_stats\", kind: \"message\", T: () => EncounterStats },\n            { no: 2, name: \"error_result\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ComputeStatsResult>): ComputeStatsResult {\n        const message = { errorResult: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ComputeStatsResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ComputeStatsResult): ComputeStatsResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidStats raid_stats */ 1:\n                    message.raidStats = RaidStats.internalBinaryRead(reader, reader.uint32(), options, message.raidStats);\n                    break;\n                case /* proto.EncounterStats encounter_stats */ 3:\n                    message.encounterStats = EncounterStats.internalBinaryRead(reader, reader.uint32(), options, message.encounterStats);\n                    break;\n                case /* string error_result */ 2:\n                    message.errorResult = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ComputeStatsResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidStats raid_stats = 1; */\n        if (message.raidStats)\n            RaidStats.internalBinaryWrite(message.raidStats, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EncounterStats encounter_stats = 3; */\n        if (message.encounterStats)\n            EncounterStats.internalBinaryWrite(message.encounterStats, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* string error_result = 2; */\n        if (message.errorResult !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.errorResult);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ComputeStatsResult\n */\nexport const ComputeStatsResult = new ComputeStatsResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StatWeightsRequest$Type extends MessageType<StatWeightsRequest> {\n    constructor() {\n        super(\"proto.StatWeightsRequest\", [\n            { no: 1, name: \"player\", kind: \"message\", T: () => Player },\n            { no: 2, name: \"raid_buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 3, name: \"party_buffs\", kind: \"message\", T: () => PartyBuffs },\n            { no: 9, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 4, name: \"encounter\", kind: \"message\", T: () => Encounter },\n            { no: 5, name: \"sim_options\", kind: \"message\", T: () => SimOptions },\n            { no: 8, name: \"tanks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitReference },\n            { no: 6, name: \"stats_to_weigh\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Stat\", Stat] },\n            { no: 10, name: \"pseudo_stats_to_weigh\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.PseudoStat\", PseudoStat] },\n            { no: 7, name: \"ep_reference_stat\", kind: \"enum\", T: () => [\"proto.Stat\", Stat] }\n        ]);\n    }\n    create(value?: PartialMessage<StatWeightsRequest>): StatWeightsRequest {\n        const message = { tanks: [], statsToWeigh: [], pseudoStatsToWeigh: [], epReferenceStat: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<StatWeightsRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatWeightsRequest): StatWeightsRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Player player */ 1:\n                    message.player = Player.internalBinaryRead(reader, reader.uint32(), options, message.player);\n                    break;\n                case /* proto.RaidBuffs raid_buffs */ 2:\n                    message.raidBuffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.raidBuffs);\n                    break;\n                case /* proto.PartyBuffs party_buffs */ 3:\n                    message.partyBuffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.partyBuffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 9:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* proto.Encounter encounter */ 4:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                case /* proto.SimOptions sim_options */ 5:\n                    message.simOptions = SimOptions.internalBinaryRead(reader, reader.uint32(), options, message.simOptions);\n                    break;\n                case /* repeated proto.UnitReference tanks */ 8:\n                    message.tanks.push(UnitReference.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.Stat stats_to_weigh */ 6:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.statsToWeigh.push(reader.int32());\n                    else\n                        message.statsToWeigh.push(reader.int32());\n                    break;\n                case /* repeated proto.PseudoStat pseudo_stats_to_weigh */ 10:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.pseudoStatsToWeigh.push(reader.int32());\n                    else\n                        message.pseudoStatsToWeigh.push(reader.int32());\n                    break;\n                case /* proto.Stat ep_reference_stat */ 7:\n                    message.epReferenceStat = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: StatWeightsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Player player = 1; */\n        if (message.player)\n            Player.internalBinaryWrite(message.player, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidBuffs raid_buffs = 2; */\n        if (message.raidBuffs)\n            RaidBuffs.internalBinaryWrite(message.raidBuffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs party_buffs = 3; */\n        if (message.partyBuffs)\n            PartyBuffs.internalBinaryWrite(message.partyBuffs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 9; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 4; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimOptions sim_options = 5; */\n        if (message.simOptions)\n            SimOptions.internalBinaryWrite(message.simOptions, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UnitReference tanks = 8; */\n        for (let i = 0; i < message.tanks.length; i++)\n            UnitReference.internalBinaryWrite(message.tanks[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.Stat stats_to_weigh = 6; */\n        if (message.statsToWeigh.length) {\n            writer.tag(6, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.statsToWeigh.length; i++)\n                writer.int32(message.statsToWeigh[i]);\n            writer.join();\n        }\n        /* repeated proto.PseudoStat pseudo_stats_to_weigh = 10; */\n        if (message.pseudoStatsToWeigh.length) {\n            writer.tag(10, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.pseudoStatsToWeigh.length; i++)\n                writer.int32(message.pseudoStatsToWeigh[i]);\n            writer.join();\n        }\n        /* proto.Stat ep_reference_stat = 7; */\n        if (message.epReferenceStat !== 0)\n            writer.tag(7, WireType.Varint).int32(message.epReferenceStat);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.StatWeightsRequest\n */\nexport const StatWeightsRequest = new StatWeightsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StatWeightsResult$Type extends MessageType<StatWeightsResult> {\n    constructor() {\n        super(\"proto.StatWeightsResult\", [\n            { no: 1, name: \"dps\", kind: \"message\", T: () => StatWeightValues },\n            { no: 4, name: \"hps\", kind: \"message\", T: () => StatWeightValues },\n            { no: 2, name: \"tps\", kind: \"message\", T: () => StatWeightValues },\n            { no: 3, name: \"dtps\", kind: \"message\", T: () => StatWeightValues },\n            { no: 5, name: \"tmi\", kind: \"message\", T: () => StatWeightValues },\n            { no: 6, name: \"p_death\", kind: \"message\", T: () => StatWeightValues }\n        ]);\n    }\n    create(value?: PartialMessage<StatWeightsResult>): StatWeightsResult {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<StatWeightsResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatWeightsResult): StatWeightsResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.StatWeightValues dps */ 1:\n                    message.dps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.StatWeightValues hps */ 4:\n                    message.hps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.hps);\n                    break;\n                case /* proto.StatWeightValues tps */ 2:\n                    message.tps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.tps);\n                    break;\n                case /* proto.StatWeightValues dtps */ 3:\n                    message.dtps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.dtps);\n                    break;\n                case /* proto.StatWeightValues tmi */ 5:\n                    message.tmi = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.tmi);\n                    break;\n                case /* proto.StatWeightValues p_death */ 6:\n                    message.pDeath = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.pDeath);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: StatWeightsResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.StatWeightValues dps = 1; */\n        if (message.dps)\n            StatWeightValues.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightValues hps = 4; */\n        if (message.hps)\n            StatWeightValues.internalBinaryWrite(message.hps, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightValues tps = 2; */\n        if (message.tps)\n            StatWeightValues.internalBinaryWrite(message.tps, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightValues dtps = 3; */\n        if (message.dtps)\n            StatWeightValues.internalBinaryWrite(message.dtps, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightValues tmi = 5; */\n        if (message.tmi)\n            StatWeightValues.internalBinaryWrite(message.tmi, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightValues p_death = 6; */\n        if (message.pDeath)\n            StatWeightValues.internalBinaryWrite(message.pDeath, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.StatWeightsResult\n */\nexport const StatWeightsResult = new StatWeightsResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StatWeightValues$Type extends MessageType<StatWeightValues> {\n    constructor() {\n        super(\"proto.StatWeightValues\", [\n            { no: 1, name: \"weights\", kind: \"message\", T: () => UnitStats },\n            { no: 2, name: \"weights_stdev\", kind: \"message\", T: () => UnitStats },\n            { no: 3, name: \"ep_values\", kind: \"message\", T: () => UnitStats },\n            { no: 4, name: \"ep_values_stdev\", kind: \"message\", T: () => UnitStats }\n        ]);\n    }\n    create(value?: PartialMessage<StatWeightValues>): StatWeightValues {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<StatWeightValues>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatWeightValues): StatWeightValues {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitStats weights */ 1:\n                    message.weights = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.weights);\n                    break;\n                case /* proto.UnitStats weights_stdev */ 2:\n                    message.weightsStdev = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.weightsStdev);\n                    break;\n                case /* proto.UnitStats ep_values */ 3:\n                    message.epValues = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.epValues);\n                    break;\n                case /* proto.UnitStats ep_values_stdev */ 4:\n                    message.epValuesStdev = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.epValuesStdev);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: StatWeightValues, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitStats weights = 1; */\n        if (message.weights)\n            UnitStats.internalBinaryWrite(message.weights, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats weights_stdev = 2; */\n        if (message.weightsStdev)\n            UnitStats.internalBinaryWrite(message.weightsStdev, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats ep_values = 3; */\n        if (message.epValues)\n            UnitStats.internalBinaryWrite(message.epValues, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats ep_values_stdev = 4; */\n        if (message.epValuesStdev)\n            UnitStats.internalBinaryWrite(message.epValuesStdev, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.StatWeightValues\n */\nexport const StatWeightValues = new StatWeightValues$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AsyncAPIResult$Type extends MessageType<AsyncAPIResult> {\n    constructor() {\n        super(\"proto.AsyncAPIResult\", [\n            { no: 1, name: \"progress_id\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<AsyncAPIResult>): AsyncAPIResult {\n        const message = { progressId: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AsyncAPIResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AsyncAPIResult): AsyncAPIResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string progress_id */ 1:\n                    message.progressId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AsyncAPIResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string progress_id = 1; */\n        if (message.progressId !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.progressId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AsyncAPIResult\n */\nexport const AsyncAPIResult = new AsyncAPIResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProgressMetrics$Type extends MessageType<ProgressMetrics> {\n    constructor() {\n        super(\"proto.ProgressMetrics\", [\n            { no: 1, name: \"completed_iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"total_iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"completed_sims\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"total_sims\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"presim_running\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"dps\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"hps\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"final_raid_result\", kind: \"message\", T: () => RaidSimResult },\n            { no: 7, name: \"final_weight_result\", kind: \"message\", T: () => StatWeightsResult },\n            { no: 10, name: \"final_bulk_result\", kind: \"message\", T: () => BulkSimResult }\n        ]);\n    }\n    create(value?: PartialMessage<ProgressMetrics>): ProgressMetrics {\n        const message = { completedIterations: 0, totalIterations: 0, completedSims: 0, totalSims: 0, presimRunning: false, dps: 0, hps: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProgressMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProgressMetrics): ProgressMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 completed_iterations */ 1:\n                    message.completedIterations = reader.int32();\n                    break;\n                case /* int32 total_iterations */ 2:\n                    message.totalIterations = reader.int32();\n                    break;\n                case /* int32 completed_sims */ 3:\n                    message.completedSims = reader.int32();\n                    break;\n                case /* int32 total_sims */ 4:\n                    message.totalSims = reader.int32();\n                    break;\n                case /* bool presim_running */ 8:\n                    message.presimRunning = reader.bool();\n                    break;\n                case /* double dps */ 5:\n                    message.dps = reader.double();\n                    break;\n                case /* double hps */ 9:\n                    message.hps = reader.double();\n                    break;\n                case /* proto.RaidSimResult final_raid_result */ 6:\n                    message.finalRaidResult = RaidSimResult.internalBinaryRead(reader, reader.uint32(), options, message.finalRaidResult);\n                    break;\n                case /* proto.StatWeightsResult final_weight_result */ 7:\n                    message.finalWeightResult = StatWeightsResult.internalBinaryRead(reader, reader.uint32(), options, message.finalWeightResult);\n                    break;\n                case /* proto.BulkSimResult final_bulk_result */ 10:\n                    message.finalBulkResult = BulkSimResult.internalBinaryRead(reader, reader.uint32(), options, message.finalBulkResult);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProgressMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 completed_iterations = 1; */\n        if (message.completedIterations !== 0)\n            writer.tag(1, WireType.Varint).int32(message.completedIterations);\n        /* int32 total_iterations = 2; */\n        if (message.totalIterations !== 0)\n            writer.tag(2, WireType.Varint).int32(message.totalIterations);\n        /* int32 completed_sims = 3; */\n        if (message.completedSims !== 0)\n            writer.tag(3, WireType.Varint).int32(message.completedSims);\n        /* int32 total_sims = 4; */\n        if (message.totalSims !== 0)\n            writer.tag(4, WireType.Varint).int32(message.totalSims);\n        /* bool presim_running = 8; */\n        if (message.presimRunning !== false)\n            writer.tag(8, WireType.Varint).bool(message.presimRunning);\n        /* double dps = 5; */\n        if (message.dps !== 0)\n            writer.tag(5, WireType.Bit64).double(message.dps);\n        /* double hps = 9; */\n        if (message.hps !== 0)\n            writer.tag(9, WireType.Bit64).double(message.hps);\n        /* proto.RaidSimResult final_raid_result = 6; */\n        if (message.finalRaidResult)\n            RaidSimResult.internalBinaryWrite(message.finalRaidResult, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightsResult final_weight_result = 7; */\n        if (message.finalWeightResult)\n            StatWeightsResult.internalBinaryWrite(message.finalWeightResult, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BulkSimResult final_bulk_result = 10; */\n        if (message.finalBulkResult)\n            BulkSimResult.internalBinaryWrite(message.finalBulkResult, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProgressMetrics\n */\nexport const ProgressMetrics = new ProgressMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BulkSimRequest$Type extends MessageType<BulkSimRequest> {\n    constructor() {\n        super(\"proto.BulkSimRequest\", [\n            { no: 1, name: \"base_settings\", kind: \"message\", T: () => RaidSimRequest },\n            { no: 2, name: \"bulk_settings\", kind: \"message\", T: () => BulkSettings }\n        ]);\n    }\n    create(value?: PartialMessage<BulkSimRequest>): BulkSimRequest {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BulkSimRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkSimRequest): BulkSimRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidSimRequest base_settings */ 1:\n                    message.baseSettings = RaidSimRequest.internalBinaryRead(reader, reader.uint32(), options, message.baseSettings);\n                    break;\n                case /* proto.BulkSettings bulk_settings */ 2:\n                    message.bulkSettings = BulkSettings.internalBinaryRead(reader, reader.uint32(), options, message.bulkSettings);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BulkSimRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidSimRequest base_settings = 1; */\n        if (message.baseSettings)\n            RaidSimRequest.internalBinaryWrite(message.baseSettings, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BulkSettings bulk_settings = 2; */\n        if (message.bulkSettings)\n            BulkSettings.internalBinaryWrite(message.bulkSettings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BulkSimRequest\n */\nexport const BulkSimRequest = new BulkSimRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TalentLoadout$Type extends MessageType<TalentLoadout> {\n    constructor() {\n        super(\"proto.TalentLoadout\", [\n            { no: 1, name: \"talents_string\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"glyphs\", kind: \"message\", T: () => Glyphs },\n            { no: 3, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<TalentLoadout>): TalentLoadout {\n        const message = { talentsString: \"\", name: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TalentLoadout>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TalentLoadout): TalentLoadout {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string talents_string */ 1:\n                    message.talentsString = reader.string();\n                    break;\n                case /* proto.Glyphs glyphs */ 2:\n                    message.glyphs = Glyphs.internalBinaryRead(reader, reader.uint32(), options, message.glyphs);\n                    break;\n                case /* string name */ 3:\n                    message.name = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TalentLoadout, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string talents_string = 1; */\n        if (message.talentsString !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.talentsString);\n        /* proto.Glyphs glyphs = 2; */\n        if (message.glyphs)\n            Glyphs.internalBinaryWrite(message.glyphs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* string name = 3; */\n        if (message.name !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.name);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TalentLoadout\n */\nexport const TalentLoadout = new TalentLoadout$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BulkSettings$Type extends MessageType<BulkSettings> {\n    constructor() {\n        super(\"proto.BulkSettings\", [\n            { no: 1, name: \"items\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemSpec },\n            { no: 2, name: \"combinations\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"fast_mode\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"auto_enchant\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"auto_gem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"default_red_gem\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"default_blue_gem\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"default_yellow_gem\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"default_meta_gem\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"ensure_meta_req_met\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"iterations_per_combo\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"sim_talents\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"talents_to_sim\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => TalentLoadout }\n        ]);\n    }\n    create(value?: PartialMessage<BulkSettings>): BulkSettings {\n        const message = { items: [], combinations: false, fastMode: false, autoEnchant: false, autoGem: false, defaultRedGem: 0, defaultBlueGem: 0, defaultYellowGem: 0, defaultMetaGem: 0, ensureMetaReqMet: false, iterationsPerCombo: 0, simTalents: false, talentsToSim: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BulkSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkSettings): BulkSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.ItemSpec items */ 1:\n                    message.items.push(ItemSpec.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* bool combinations */ 2:\n                    message.combinations = reader.bool();\n                    break;\n                case /* bool fast_mode */ 3:\n                    message.fastMode = reader.bool();\n                    break;\n                case /* bool auto_enchant */ 4:\n                    message.autoEnchant = reader.bool();\n                    break;\n                case /* bool auto_gem */ 5:\n                    message.autoGem = reader.bool();\n                    break;\n                case /* int32 default_red_gem */ 6:\n                    message.defaultRedGem = reader.int32();\n                    break;\n                case /* int32 default_blue_gem */ 7:\n                    message.defaultBlueGem = reader.int32();\n                    break;\n                case /* int32 default_yellow_gem */ 8:\n                    message.defaultYellowGem = reader.int32();\n                    break;\n                case /* int32 default_meta_gem */ 9:\n                    message.defaultMetaGem = reader.int32();\n                    break;\n                case /* bool ensure_meta_req_met */ 10:\n                    message.ensureMetaReqMet = reader.bool();\n                    break;\n                case /* int32 iterations_per_combo */ 11:\n                    message.iterationsPerCombo = reader.int32();\n                    break;\n                case /* bool sim_talents */ 12:\n                    message.simTalents = reader.bool();\n                    break;\n                case /* repeated proto.TalentLoadout talents_to_sim */ 13:\n                    message.talentsToSim.push(TalentLoadout.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BulkSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.ItemSpec items = 1; */\n        for (let i = 0; i < message.items.length; i++)\n            ItemSpec.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool combinations = 2; */\n        if (message.combinations !== false)\n            writer.tag(2, WireType.Varint).bool(message.combinations);\n        /* bool fast_mode = 3; */\n        if (message.fastMode !== false)\n            writer.tag(3, WireType.Varint).bool(message.fastMode);\n        /* bool auto_enchant = 4; */\n        if (message.autoEnchant !== false)\n            writer.tag(4, WireType.Varint).bool(message.autoEnchant);\n        /* bool auto_gem = 5; */\n        if (message.autoGem !== false)\n            writer.tag(5, WireType.Varint).bool(message.autoGem);\n        /* int32 default_red_gem = 6; */\n        if (message.defaultRedGem !== 0)\n            writer.tag(6, WireType.Varint).int32(message.defaultRedGem);\n        /* int32 default_blue_gem = 7; */\n        if (message.defaultBlueGem !== 0)\n            writer.tag(7, WireType.Varint).int32(message.defaultBlueGem);\n        /* int32 default_yellow_gem = 8; */\n        if (message.defaultYellowGem !== 0)\n            writer.tag(8, WireType.Varint).int32(message.defaultYellowGem);\n        /* int32 default_meta_gem = 9; */\n        if (message.defaultMetaGem !== 0)\n            writer.tag(9, WireType.Varint).int32(message.defaultMetaGem);\n        /* bool ensure_meta_req_met = 10; */\n        if (message.ensureMetaReqMet !== false)\n            writer.tag(10, WireType.Varint).bool(message.ensureMetaReqMet);\n        /* int32 iterations_per_combo = 11; */\n        if (message.iterationsPerCombo !== 0)\n            writer.tag(11, WireType.Varint).int32(message.iterationsPerCombo);\n        /* bool sim_talents = 12; */\n        if (message.simTalents !== false)\n            writer.tag(12, WireType.Varint).bool(message.simTalents);\n        /* repeated proto.TalentLoadout talents_to_sim = 13; */\n        for (let i = 0; i < message.talentsToSim.length; i++)\n            TalentLoadout.internalBinaryWrite(message.talentsToSim[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BulkSettings\n */\nexport const BulkSettings = new BulkSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BulkSimResult$Type extends MessageType<BulkSimResult> {\n    constructor() {\n        super(\"proto.BulkSimResult\", [\n            { no: 1, name: \"results\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BulkComboResult },\n            { no: 2, name: \"equipped_gear_result\", kind: \"message\", T: () => BulkComboResult },\n            { no: 3, name: \"error_result\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<BulkSimResult>): BulkSimResult {\n        const message = { results: [], errorResult: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BulkSimResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkSimResult): BulkSimResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.BulkComboResult results */ 1:\n                    message.results.push(BulkComboResult.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.BulkComboResult equipped_gear_result */ 2:\n                    message.equippedGearResult = BulkComboResult.internalBinaryRead(reader, reader.uint32(), options, message.equippedGearResult);\n                    break;\n                case /* string error_result */ 3:\n                    message.errorResult = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BulkSimResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.BulkComboResult results = 1; */\n        for (let i = 0; i < message.results.length; i++)\n            BulkComboResult.internalBinaryWrite(message.results[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BulkComboResult equipped_gear_result = 2; */\n        if (message.equippedGearResult)\n            BulkComboResult.internalBinaryWrite(message.equippedGearResult, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* string error_result = 3; */\n        if (message.errorResult !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.errorResult);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BulkSimResult\n */\nexport const BulkSimResult = new BulkSimResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BulkComboResult$Type extends MessageType<BulkComboResult> {\n    constructor() {\n        super(\"proto.BulkComboResult\", [\n            { no: 1, name: \"items_added\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemSpecWithSlot },\n            { no: 2, name: \"unit_metrics\", kind: \"message\", T: () => UnitMetrics },\n            { no: 3, name: \"talent_loadout\", kind: \"message\", T: () => TalentLoadout }\n        ]);\n    }\n    create(value?: PartialMessage<BulkComboResult>): BulkComboResult {\n        const message = { itemsAdded: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BulkComboResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkComboResult): BulkComboResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.ItemSpecWithSlot items_added */ 1:\n                    message.itemsAdded.push(ItemSpecWithSlot.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.UnitMetrics unit_metrics */ 2:\n                    message.unitMetrics = UnitMetrics.internalBinaryRead(reader, reader.uint32(), options, message.unitMetrics);\n                    break;\n                case /* proto.TalentLoadout talent_loadout */ 3:\n                    message.talentLoadout = TalentLoadout.internalBinaryRead(reader, reader.uint32(), options, message.talentLoadout);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BulkComboResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.ItemSpecWithSlot items_added = 1; */\n        for (let i = 0; i < message.itemsAdded.length; i++)\n            ItemSpecWithSlot.internalBinaryWrite(message.itemsAdded[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitMetrics unit_metrics = 2; */\n        if (message.unitMetrics)\n            UnitMetrics.internalBinaryWrite(message.unitMetrics, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.TalentLoadout talent_loadout = 3; */\n        if (message.talentLoadout)\n            TalentLoadout.internalBinaryWrite(message.talentLoadout, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BulkComboResult\n */\nexport const BulkComboResult = new BulkComboResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ItemSpecWithSlot$Type extends MessageType<ItemSpecWithSlot> {\n    constructor() {\n        super(\"proto.ItemSpecWithSlot\", [\n            { no: 1, name: \"item\", kind: \"message\", T: () => ItemSpec },\n            { no: 2, name: \"slot\", kind: \"enum\", T: () => [\"proto.ItemSlot\", ItemSlot] }\n        ]);\n    }\n    create(value?: PartialMessage<ItemSpecWithSlot>): ItemSpecWithSlot {\n        const message = { slot: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ItemSpecWithSlot>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemSpecWithSlot): ItemSpecWithSlot {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ItemSpec item */ 1:\n                    message.item = ItemSpec.internalBinaryRead(reader, reader.uint32(), options, message.item);\n                    break;\n                case /* proto.ItemSlot slot */ 2:\n                    message.slot = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ItemSpecWithSlot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ItemSpec item = 1; */\n        if (message.item)\n            ItemSpec.internalBinaryWrite(message.item, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ItemSlot slot = 2; */\n        if (message.slot !== 0)\n            writer.tag(2, WireType.Varint).int32(message.slot);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ItemSpecWithSlot\n */\nexport const ItemSpecWithSlot = new ItemSpecWithSlot$Type();\n","export enum Phase {\n\tPhase1 = 1,\n\tPhase2,\n\tPhase3,\n\tPhase4,\n\tPhase5,\n}\n\nexport const CURRENT_PHASE = Phase.Phase1;\n\n// Github pages serves our site under the /cata directory (because the repo name is cata)\nexport const REPO_NAME = 'cata';\n\n// Get 'elemental_shaman', the pathname part after the repo name\nconst pathnameParts = window.location.pathname.split('/');\nconst repoPartIdx = pathnameParts.findIndex(part => part == REPO_NAME);\nexport const SPEC_DIRECTORY = repoPartIdx == -1 ? '' : pathnameParts[repoPartIdx + 1];\n\nexport const LOCAL_STORAGE_PREFIX = '__cata';\n","import { PlayerSpec } from './player_spec';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from './proto/common.js';\nexport type IconSize = 'small' | 'medium' | 'large';\n\nexport interface EligibleWeaponType {\n\tweaponType: WeaponType;\n\tcanUseTwoHand?: boolean;\n}\n\nexport abstract class PlayerClass<ClassType extends Class> {\n\tstatic classID: Class;\n\tstatic friendlyName: string;\n\tstatic hexColor: string;\n\tstatic specs: Record<string, PlayerSpec<any>>;\n\tstatic races: Race[];\n\tstatic armorTypes: ArmorType[];\n\tstatic weaponTypes: EligibleWeaponType[];\n\tstatic rangedWeaponTypes: RangedWeaponType[];\n\n\tabstract readonly classID: ClassType;\n\tabstract readonly friendlyName: string;\n\tabstract readonly hexColor: string;\n\tabstract readonly specs: Record<string, PlayerSpec<any>>;\n\tabstract readonly races: Race[];\n\tabstract readonly armorTypes: ArmorType[];\n\tabstract readonly weaponTypes: EligibleWeaponType[];\n\tabstract readonly rangedWeaponTypes: RangedWeaponType[];\n\n\tabstract getIcon(size: IconSize): string;\n}\n","import { EligibleWeaponType, IconSize } from './player_class.js';\nimport { ArmorType, Class, Race, RangedWeaponType, Spec } from './proto/common.js';\nimport { SpecClasses } from './proto_utils/utils';\n\nexport abstract class PlayerSpec<SpecType extends Spec> {\n\tstatic specID: Spec;\n\tstatic classID: Class;\n\tstatic friendlyName: string;\n\tstatic hexColor: string;\n\tstatic races: Race[] = [];\n\tstatic armorTypes: ArmorType[] = [];\n\tstatic weaponTypes: EligibleWeaponType[];\n\tstatic rangedWeaponTypes: RangedWeaponType[];\n\n\tabstract readonly specIndex: number;\n\tabstract readonly specID: SpecType;\n\tabstract readonly classID: SpecClasses<SpecType>;\n\tabstract readonly friendlyName: string;\n\tabstract readonly simLink: string;\n\n\tabstract readonly isTankSpec: boolean;\n\tabstract readonly isHealingSpec: boolean;\n\tabstract readonly isRangedDpsSpec: boolean;\n\tabstract readonly isMeleeDpsSpec: boolean;\n\n\tabstract readonly canDualWield: boolean;\n\n\tabstract getIcon(size: IconSize): string;\n}\n","import { IconSize } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { Class, Spec } from '../proto/common';\nimport { getSpecSiteUrl } from '../proto_utils/utils';\n\nexport class BloodDeathKnight extends PlayerSpec<Spec.SpecBloodDeathKnight> {\n\tstatic specIndex = 0;\n\tstatic specID = Spec.SpecBloodDeathKnight as Spec.SpecBloodDeathKnight;\n\tstatic classID = Class.ClassDeathKnight as Class.ClassDeathKnight;\n\tstatic friendlyName = 'Blood';\n\tstatic simLink = getSpecSiteUrl('death_knight', 'blood');\n\n\tstatic isTankSpec = true;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = true;\n\n\treadonly specIndex = BloodDeathKnight.specIndex;\n\treadonly specID = BloodDeathKnight.specID;\n\treadonly classID = BloodDeathKnight.classID;\n\treadonly friendlyName = BloodDeathKnight.friendlyName;\n\treadonly simLink = BloodDeathKnight.simLink;\n\n\treadonly isTankSpec = BloodDeathKnight.isTankSpec;\n\treadonly isHealingSpec = BloodDeathKnight.isHealingSpec;\n\treadonly isRangedDpsSpec = BloodDeathKnight.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = BloodDeathKnight.isMeleeDpsSpec;\n\n\treadonly canDualWield = BloodDeathKnight.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_deathknight_bloodpresence.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn BloodDeathKnight.getIcon(size);\n\t};\n}\n\nexport class FrostDeathKnight extends PlayerSpec<Spec.SpecFrostDeathKnight> {\n\tstatic specIndex = 1;\n\tstatic specID = Spec.SpecFrostDeathKnight as Spec.SpecFrostDeathKnight;\n\tstatic classID = Class.ClassDeathKnight as Class.ClassDeathKnight;\n\tstatic friendlyName = 'Frost';\n\tstatic simLink = getSpecSiteUrl('death_knight', 'frost');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = true;\n\n\tstatic canDualWield = true;\n\n\treadonly specIndex = FrostDeathKnight.specIndex;\n\treadonly specID = FrostDeathKnight.specID;\n\treadonly classID = FrostDeathKnight.classID;\n\treadonly friendlyName = FrostDeathKnight.friendlyName;\n\treadonly simLink = FrostDeathKnight.simLink;\n\n\treadonly isTankSpec = FrostDeathKnight.isTankSpec;\n\treadonly isHealingSpec = FrostDeathKnight.isHealingSpec;\n\treadonly isRangedDpsSpec = FrostDeathKnight.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = FrostDeathKnight.isMeleeDpsSpec;\n\n\treadonly canDualWield = FrostDeathKnight.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_deathknight_frostpresence.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn FrostDeathKnight.getIcon(size);\n\t};\n}\n\nexport class UnholyDeathKnight extends PlayerSpec<Spec.SpecUnholyDeathKnight> {\n\tstatic specIndex = 2;\n\tstatic specID = Spec.SpecUnholyDeathKnight as Spec.SpecUnholyDeathKnight;\n\tstatic classID = Class.ClassDeathKnight as Class.ClassDeathKnight;\n\tstatic friendlyName = 'Unholy';\n\tstatic simLink = getSpecSiteUrl('death_knight', 'unholy');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = true;\n\n\tstatic canDualWield = true;\n\n\treadonly specIndex = UnholyDeathKnight.specIndex;\n\treadonly specID = UnholyDeathKnight.specID;\n\treadonly classID = UnholyDeathKnight.classID;\n\treadonly friendlyName = UnholyDeathKnight.friendlyName;\n\treadonly simLink = UnholyDeathKnight.simLink;\n\n\treadonly isTankSpec = UnholyDeathKnight.isTankSpec;\n\treadonly isHealingSpec = UnholyDeathKnight.isHealingSpec;\n\treadonly isRangedDpsSpec = UnholyDeathKnight.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = UnholyDeathKnight.isMeleeDpsSpec;\n\n\treadonly canDualWield = UnholyDeathKnight.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_deathknight_unholypresence.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn UnholyDeathKnight.getIcon(size);\n\t};\n}\n","import { EligibleWeaponType, IconSize, PlayerClass } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { BloodDeathKnight, FrostDeathKnight, UnholyDeathKnight } from '../player_specs/death_knight';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from '../proto/common';\nimport { DeathKnightSpecs } from '../proto_utils/utils';\n\nexport class DeathKnight extends PlayerClass<Class.ClassDeathKnight> {\n\tstatic classID = Class.ClassDeathKnight as Class.ClassDeathKnight;\n\tstatic friendlyName = 'Death Knight';\n\tstatic hexColor = '#c41e3a';\n\tstatic specs: Record<string, PlayerSpec<DeathKnightSpecs>> = {\n\t\t[BloodDeathKnight.friendlyName]: BloodDeathKnight,\n\t\t[FrostDeathKnight.friendlyName]: FrostDeathKnight,\n\t\t[UnholyDeathKnight.friendlyName]: UnholyDeathKnight,\n\t};\n\tstatic races: Race[] = [\n\t\tRace.RaceBloodElf,\n\t\tRace.RaceDraenei,\n\t\tRace.RaceDwarf,\n\t\tRace.RaceHuman,\n\t\tRace.RaceGnome,\n\t\tRace.RaceGoblin,\n\t\tRace.RaceNightElf,\n\t\tRace.RaceOrc,\n\t\tRace.RaceTauren,\n\t\tRace.RaceTroll,\n\t\tRace.RaceUndead,\n\t\tRace.RaceWorgen,\n\t];\n\tstatic armorTypes: ArmorType[] = [ArmorType.ArmorTypePlate, ArmorType.ArmorTypeMail, ArmorType.ArmorTypeLeather, ArmorType.ArmorTypeCloth];\n\tstatic weaponTypes: EligibleWeaponType[] = [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n\t\t// TODO: validate proficiencies\n\t];\n\tstatic rangedWeaponTypes: RangedWeaponType[] = [RangedWeaponType.RangedWeaponTypeRelic];\n\n\treadonly classID = DeathKnight.classID;\n\treadonly friendlyName = DeathKnight.name;\n\treadonly hexColor = DeathKnight.hexColor;\n\treadonly specs = DeathKnight.specs;\n\treadonly races = DeathKnight.races;\n\treadonly armorTypes = DeathKnight.armorTypes;\n\treadonly weaponTypes = DeathKnight.weaponTypes;\n\treadonly rangedWeaponTypes = DeathKnight.rangedWeaponTypes;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/class_deathknight.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn DeathKnight.getIcon(size);\n\t};\n}\n","import { IconSize } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { Class, Spec } from '../proto/common';\nimport { getSpecSiteUrl } from '../proto_utils/utils';\n\nexport class BalanceDruid extends PlayerSpec<Spec.SpecBalanceDruid> {\n\tstatic specIndex = 0;\n\tstatic specID = Spec.SpecBalanceDruid as Spec.SpecBalanceDruid;\n\tstatic classID = Class.ClassDruid as Class.ClassDruid;\n\tstatic friendlyName = 'Balance';\n\tstatic simLink = getSpecSiteUrl('druid', 'balance');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specIndex = BalanceDruid.specIndex;\n\treadonly specID = BalanceDruid.specID;\n\treadonly classID = BalanceDruid.classID;\n\treadonly friendlyName = BalanceDruid.friendlyName;\n\treadonly simLink = BalanceDruid.simLink;\n\n\treadonly isTankSpec = BalanceDruid.isTankSpec;\n\treadonly isHealingSpec = BalanceDruid.isHealingSpec;\n\treadonly isRangedDpsSpec = BalanceDruid.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = BalanceDruid.isMeleeDpsSpec;\n\n\treadonly canDualWield = BalanceDruid.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_nature_starfall.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn BalanceDruid.getIcon(size);\n\t};\n}\n\nexport class FeralDruid extends PlayerSpec<Spec.SpecFeralDruid> {\n\tstatic specIndex = 1;\n\tstatic specID = Spec.SpecFeralDruid as Spec.SpecFeralDruid;\n\tstatic classID = Class.ClassDruid as Class.ClassDruid;\n\tstatic friendlyName = 'Feral';\n\tstatic simLink = getSpecSiteUrl('druid', 'feral');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = true;\n\n\tstatic canDualWield = false;\n\n\treadonly specIndex = FeralDruid.specIndex;\n\treadonly specID = FeralDruid.specID;\n\treadonly classID = FeralDruid.classID;\n\treadonly friendlyName = FeralDruid.friendlyName;\n\treadonly simLink = FeralDruid.simLink;\n\n\treadonly isTankSpec = FeralDruid.isTankSpec;\n\treadonly isHealingSpec = FeralDruid.isHealingSpec;\n\treadonly isRangedDpsSpec = FeralDruid.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = FeralDruid.isMeleeDpsSpec;\n\n\treadonly canDualWield = FeralDruid.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_druid_catform.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn FeralDruid.getIcon(size);\n\t};\n}\n\nexport class RestorationDruid extends PlayerSpec<Spec.SpecRestorationDruid> {\n\tstatic specIndex = 2;\n\tstatic specID = Spec.SpecRestorationDruid as Spec.SpecRestorationDruid;\n\tstatic classID = Class.ClassDruid as Class.ClassDruid;\n\tstatic friendlyName = 'Restoration';\n\tstatic simLink = getSpecSiteUrl('druid', 'Restoration');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = true;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specIndex = RestorationDruid.specIndex;\n\treadonly specID = RestorationDruid.specID;\n\treadonly classID = RestorationDruid.classID;\n\treadonly friendlyName = RestorationDruid.friendlyName;\n\treadonly simLink = RestorationDruid.simLink;\n\n\treadonly isTankSpec = RestorationDruid.isTankSpec;\n\treadonly isHealingSpec = RestorationDruid.isHealingSpec;\n\treadonly isRangedDpsSpec = RestorationDruid.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = RestorationDruid.isMeleeDpsSpec;\n\n\treadonly canDualWield = RestorationDruid.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_nature_healingtouch.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn RestorationDruid.getIcon(size);\n\t};\n}\n","import { EligibleWeaponType, IconSize, PlayerClass } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { BalanceDruid, FeralDruid, RestorationDruid } from '../player_specs/druid';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from '../proto/common';\nimport { DruidSpecs } from '../proto_utils/utils';\n\nexport class Druid extends PlayerClass<Class.ClassDruid> {\n\tstatic classID = Class.ClassDruid as Class.ClassDruid;\n\tstatic friendlyName = 'Druid';\n\tstatic hexColor = '#ff7d0a';\n\tstatic specs: Record<string, PlayerSpec<DruidSpecs>> = {\n\t\t[BalanceDruid.friendlyName]: BalanceDruid,\n\t\t[FeralDruid.friendlyName]: FeralDruid,\n\t\t[RestorationDruid.friendlyName]: RestorationDruid,\n\t};\n\n\tstatic races: Race[] = [\n\t\t// [A]\n\t\tRace.RaceNightElf,\n\t\tRace.RaceWorgen,\n\t\t// [H]\n\t\tRace.RaceTauren,\n\t\tRace.RaceTroll,\n\t];\n\tstatic armorTypes: ArmorType[] = [ArmorType.ArmorTypeLeather, ArmorType.ArmorTypeCloth];\n\tstatic weaponTypes: EligibleWeaponType[] = [\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t];\n\tstatic rangedWeaponTypes: RangedWeaponType[] = [RangedWeaponType.RangedWeaponTypeRelic];\n\n\treadonly classID = Druid.classID;\n\treadonly friendlyName = Druid.name;\n\treadonly hexColor = Druid.hexColor;\n\treadonly specs = Druid.specs;\n\treadonly races = Druid.races;\n\treadonly armorTypes = Druid.armorTypes;\n\treadonly weaponTypes = Druid.weaponTypes;\n\treadonly rangedWeaponTypes = Druid.rangedWeaponTypes;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/class_druid.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn Druid.getIcon(size);\n\t};\n}\n","import { IconSize } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { Class, Spec } from '../proto/common';\nimport { getSpecSiteUrl } from '../proto_utils/utils';\n\nexport class BeastMasteryHunter extends PlayerSpec<Spec.SpecBeastMasteryHunter> {\n\tstatic specIndex = 0;\n\tstatic specID = Spec.SpecBeastMasteryHunter as Spec.SpecBeastMasteryHunter;\n\tstatic classID = Class.ClassHunter as Class.ClassHunter;\n\tstatic friendlyName = 'Beast Mastery';\n\tstatic simLink = getSpecSiteUrl('hunter', 'beast_mastery');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = true;\n\n\treadonly specIndex = BeastMasteryHunter.specIndex;\n\treadonly specID = BeastMasteryHunter.specID;\n\treadonly classID = BeastMasteryHunter.classID;\n\treadonly friendlyName = BeastMasteryHunter.friendlyName;\n\treadonly simLink = BeastMasteryHunter.simLink;\n\n\treadonly isTankSpec = BeastMasteryHunter.isTankSpec;\n\treadonly isHealingSpec = BeastMasteryHunter.isHealingSpec;\n\treadonly isRangedDpsSpec = BeastMasteryHunter.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = BeastMasteryHunter.isMeleeDpsSpec;\n\n\treadonly canDualWield = BeastMasteryHunter.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_hunter_bestialdiscipline.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn BeastMasteryHunter.getIcon(size);\n\t};\n}\n\nexport class MarksmanshipHunter extends PlayerSpec<Spec.SpecMarksmanshipHunter> {\n\tstatic specIndex = 1;\n\tstatic specID = Spec.SpecMarksmanshipHunter as Spec.SpecMarksmanshipHunter;\n\tstatic classID = Class.ClassHunter as Class.ClassHunter;\n\tstatic friendlyName = 'Marksmanship';\n\tstatic simLink = getSpecSiteUrl('hunter', 'marksmanship');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = true;\n\n\treadonly specIndex = MarksmanshipHunter.specIndex;\n\treadonly specID = MarksmanshipHunter.specID;\n\treadonly classID = MarksmanshipHunter.classID;\n\treadonly friendlyName = MarksmanshipHunter.friendlyName;\n\treadonly simLink = MarksmanshipHunter.simLink;\n\n\treadonly isTankSpec = MarksmanshipHunter.isTankSpec;\n\treadonly isHealingSpec = MarksmanshipHunter.isHealingSpec;\n\treadonly isRangedDpsSpec = MarksmanshipHunter.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = MarksmanshipHunter.isMeleeDpsSpec;\n\n\treadonly canDualWield = MarksmanshipHunter.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_hunter_focusedaim.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn MarksmanshipHunter.getIcon(size);\n\t};\n}\n\nexport class SurvivalHunter extends PlayerSpec<Spec.SpecSurvivalHunter> {\n\tstatic specIndex = 2;\n\tstatic specID = Spec.SpecSurvivalHunter as Spec.SpecSurvivalHunter;\n\tstatic classID = Class.ClassHunter as Class.ClassHunter;\n\tstatic friendlyName = 'Survival';\n\tstatic simLink = getSpecSiteUrl('hunter', 'survival');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = true;\n\n\treadonly specIndex = SurvivalHunter.specIndex;\n\treadonly specID = SurvivalHunter.specID;\n\treadonly classID = SurvivalHunter.classID;\n\treadonly friendlyName = SurvivalHunter.friendlyName;\n\treadonly simLink = SurvivalHunter.simLink;\n\n\treadonly isTankSpec = SurvivalHunter.isTankSpec;\n\treadonly isHealingSpec = SurvivalHunter.isHealingSpec;\n\treadonly isRangedDpsSpec = SurvivalHunter.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = SurvivalHunter.isMeleeDpsSpec;\n\n\treadonly canDualWield = SurvivalHunter.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_hunter_camouflage.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn SurvivalHunter.getIcon(size);\n\t};\n}\n","import { EligibleWeaponType, IconSize, PlayerClass } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { BeastMasteryHunter, MarksmanshipHunter, SurvivalHunter } from '../player_specs/hunter';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from '../proto/common';\nimport { HunterSpecs } from '../proto_utils/utils';\n\nexport class Hunter extends PlayerClass<Class.ClassHunter> {\n\tstatic classID = Class.ClassHunter as Class.ClassHunter;\n\tstatic friendlyName = 'Hunter';\n\tstatic hexColor = '#abd473';\n\tstatic specs: Record<string, PlayerSpec<HunterSpecs>> = {\n\t\t[BeastMasteryHunter.friendlyName]: BeastMasteryHunter,\n\t\t[MarksmanshipHunter.friendlyName]: MarksmanshipHunter,\n\t\t[SurvivalHunter.friendlyName]: SurvivalHunter,\n\t};\n\tstatic races: Race[] = [\n\t\t// [A]\n\n\t\tRace.RaceWorgen,\n\t\tRace.RaceHuman,\n\t\tRace.RaceDwarf,\n\t\tRace.RaceNightElf,\n\t\tRace.RaceDraenei,\n\t\t// [H]\n\t\tRace.RaceOrc,\n\t\tRace.RaceUndead,\n\t\tRace.RaceTauren,\n\t\tRace.RaceTroll,\n\t\tRace.RaceBloodElf,\n\t\tRace.RaceGoblin,\n\t];\n\tstatic armorTypes: ArmorType[] = [ArmorType.ArmorTypeMail];\n\tstatic weaponTypes: EligibleWeaponType[] = [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t];\n\tstatic rangedWeaponTypes: RangedWeaponType[] = [\n\t\tRangedWeaponType.RangedWeaponTypeBow,\n\t\tRangedWeaponType.RangedWeaponTypeCrossbow,\n\t\tRangedWeaponType.RangedWeaponTypeGun,\n\t];\n\n\treadonly classID = Hunter.classID;\n\treadonly friendlyName = Hunter.name;\n\treadonly hexColor = Hunter.hexColor;\n\treadonly specs = Hunter.specs;\n\treadonly races = Hunter.races;\n\treadonly armorTypes = Hunter.armorTypes;\n\n\treadonly weaponTypes = Hunter.weaponTypes;\n\treadonly rangedWeaponTypes = Hunter.rangedWeaponTypes;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/class_hunter.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn Hunter.getIcon(size);\n\t};\n}\n","import { IconSize } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { Class, Spec } from '../proto/common';\nimport { getSpecSiteUrl } from '../proto_utils/utils';\n\nexport class ArcaneMage extends PlayerSpec<Spec.SpecArcaneMage> {\n\tstatic specIndex = 0;\n\tstatic specID = Spec.SpecArcaneMage as Spec.SpecArcaneMage;\n\tstatic classID = Class.ClassMage as Class.ClassMage;\n\tstatic friendlyName = 'Arcane';\n\tstatic simLink = getSpecSiteUrl('mage', 'arcane');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specIndex = ArcaneMage.specIndex;\n\treadonly specID = ArcaneMage.specID;\n\treadonly classID = ArcaneMage.classID;\n\treadonly friendlyName = ArcaneMage.friendlyName;\n\treadonly simLink = ArcaneMage.simLink;\n\n\treadonly isTankSpec = ArcaneMage.isTankSpec;\n\treadonly isHealingSpec = ArcaneMage.isHealingSpec;\n\treadonly isRangedDpsSpec = ArcaneMage.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = ArcaneMage.isMeleeDpsSpec;\n\n\treadonly canDualWield = ArcaneMage.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_holy_magicalsentry.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn ArcaneMage.getIcon(size);\n\t};\n}\n\nexport class FireMage extends PlayerSpec<Spec.SpecFireMage> {\n\tstatic specIndex = 1;\n\tstatic specID = Spec.SpecFireMage as Spec.SpecFireMage;\n\tstatic classID = Class.ClassMage as Class.ClassMage;\n\tstatic friendlyName = 'Fire';\n\tstatic simLink = getSpecSiteUrl('mage', 'fire');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specIndex = FireMage.specIndex;\n\treadonly specID = FireMage.specID;\n\treadonly classID = FireMage.classID;\n\treadonly friendlyName = FireMage.friendlyName;\n\treadonly simLink = FireMage.simLink;\n\n\treadonly isTankSpec = FireMage.isTankSpec;\n\treadonly isHealingSpec = FireMage.isHealingSpec;\n\treadonly isRangedDpsSpec = FireMage.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = FireMage.isMeleeDpsSpec;\n\n\treadonly canDualWield = FireMage.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_fire_firebolt02.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn FireMage.getIcon(size);\n\t};\n}\n\nexport class FrostMage extends PlayerSpec<Spec.SpecFrostMage> {\n\tstatic specIndex = 2;\n\tstatic specID = Spec.SpecFrostMage as Spec.SpecFrostMage;\n\tstatic classID = Class.ClassMage as Class.ClassMage;\n\tstatic friendlyName = 'Frost';\n\tstatic simLink = getSpecSiteUrl('mage', 'frost');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specIndex = FrostMage.specIndex;\n\treadonly specID = FrostMage.specID;\n\treadonly classID = FrostMage.classID;\n\treadonly friendlyName = FrostMage.friendlyName;\n\treadonly simLink = FrostMage.simLink;\n\n\treadonly isTankSpec = FrostMage.isTankSpec;\n\treadonly isHealingSpec = FrostMage.isHealingSpec;\n\treadonly isRangedDpsSpec = FrostMage.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = FrostMage.isMeleeDpsSpec;\n\n\treadonly canDualWield = FrostMage.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_frost_frostbolt02.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn FrostMage.getIcon(size);\n\t};\n}\n","import { EligibleWeaponType, IconSize, PlayerClass } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { ArcaneMage, FireMage, FrostMage } from '../player_specs/mage';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from '../proto/common';\nimport { MageSpecs } from '../proto_utils/utils';\n\nexport class Mage extends PlayerClass<Class.ClassMage> {\n\tstatic classID = Class.ClassMage as Class.ClassMage;\n\tstatic friendlyName = 'Mage';\n\tstatic hexColor = '#69ccf0';\n\tstatic specs: Record<string, PlayerSpec<MageSpecs>> = {\n\t\t[ArcaneMage.friendlyName]: ArcaneMage,\n\t\t[FireMage.friendlyName]: FireMage,\n\t\t[FrostMage.friendlyName]: FrostMage,\n\t};\n\tstatic races: Race[] = [\n\t\t// [A]\n\t\tRace.RaceHuman,\n\t\tRace.RaceDwarf,\n\t\tRace.RaceNightElf,\n\t\tRace.RaceGnome,\n\t\tRace.RaceDraenei,\n\t\tRace.RaceWorgen,\n\t\t// [H]\n\t\tRace.RaceOrc,\n\t\tRace.RaceUndead,\n\t\tRace.RaceTroll,\n\t\tRace.RaceBloodElf,\n\t\tRace.RaceGoblin,\n\t];\n\tstatic armorTypes: ArmorType[] = [ArmorType.ArmorTypeCloth];\n\tstatic weaponTypes: EligibleWeaponType[] = [\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword },\n\t];\n\tstatic rangedWeaponTypes: RangedWeaponType[] = [RangedWeaponType.RangedWeaponTypeWand];\n\n\treadonly classID = Mage.classID;\n\treadonly friendlyName = Mage.name;\n\treadonly hexColor = Mage.hexColor;\n\treadonly specs = Mage.specs;\n\treadonly races = Mage.races;\n\treadonly armorTypes = Mage.armorTypes;\n\treadonly weaponTypes = Mage.weaponTypes;\n\treadonly rangedWeaponTypes = Mage.rangedWeaponTypes;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/class_mage.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn Mage.getIcon(size);\n\t};\n}\n","import { IconSize } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { Class, Spec } from '../proto/common';\nimport { getSpecSiteUrl } from '../proto_utils/utils';\n\nexport class HolyPaladin extends PlayerSpec<Spec.SpecHolyPaladin> {\n\tstatic specIndex = 0;\n\tstatic specID = Spec.SpecHolyPaladin as Spec.SpecHolyPaladin;\n\tstatic classID = Class.ClassPaladin as Class.ClassPaladin;\n\tstatic friendlyName = 'Holy';\n\tstatic simLink = getSpecSiteUrl('paladin', 'holy');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = true;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specIndex = HolyPaladin.specIndex;\n\treadonly specID = HolyPaladin.specID;\n\treadonly classID = HolyPaladin.classID;\n\treadonly friendlyName = HolyPaladin.friendlyName;\n\treadonly simLink = HolyPaladin.simLink;\n\n\treadonly isTankSpec = HolyPaladin.isTankSpec;\n\treadonly isHealingSpec = HolyPaladin.isHealingSpec;\n\treadonly isRangedDpsSpec = HolyPaladin.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = HolyPaladin.isMeleeDpsSpec;\n\n\treadonly canDualWield = HolyPaladin.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_holy_holybolt.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn HolyPaladin.getIcon(size);\n\t};\n}\n\nexport class ProtectionPaladin extends PlayerSpec<Spec.SpecProtectionPaladin> {\n\tstatic specIndex = 1;\n\tstatic specID = Spec.SpecProtectionPaladin as Spec.SpecProtectionPaladin;\n\tstatic classID = Class.ClassPaladin as Class.ClassPaladin;\n\tstatic friendlyName = 'Protection';\n\tstatic simLink = getSpecSiteUrl('paladin', 'protection');\n\n\tstatic isTankSpec = true;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specIndex = ProtectionPaladin.specIndex;\n\treadonly specID = ProtectionPaladin.specID;\n\treadonly classID = ProtectionPaladin.classID;\n\treadonly friendlyName = ProtectionPaladin.friendlyName;\n\treadonly simLink = ProtectionPaladin.simLink;\n\n\treadonly isTankSpec = ProtectionPaladin.isTankSpec;\n\treadonly isHealingSpec = ProtectionPaladin.isHealingSpec;\n\treadonly isRangedDpsSpec = ProtectionPaladin.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = ProtectionPaladin.isMeleeDpsSpec;\n\n\treadonly canDualWield = ProtectionPaladin.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_paladin_shieldofthetemplar.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn ProtectionPaladin.getIcon(size);\n\t};\n}\n\nexport class RetributionPaladin extends PlayerSpec<Spec.SpecRetributionPaladin> {\n\tstatic specIndex = 2;\n\tstatic specID = Spec.SpecRetributionPaladin as Spec.SpecRetributionPaladin;\n\tstatic classID = Class.ClassPaladin as Class.ClassPaladin;\n\tstatic friendlyName = 'Retribution';\n\tstatic simLink = getSpecSiteUrl('paladin', 'retribution');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = true;\n\n\tstatic canDualWield = false;\n\n\treadonly specIndex = RetributionPaladin.specIndex;\n\treadonly specID = RetributionPaladin.specID;\n\treadonly classID = RetributionPaladin.classID;\n\treadonly friendlyName = RetributionPaladin.friendlyName;\n\treadonly simLink = RetributionPaladin.simLink;\n\n\treadonly isTankSpec = RetributionPaladin.isTankSpec;\n\treadonly isHealingSpec = RetributionPaladin.isHealingSpec;\n\treadonly isRangedDpsSpec = RetributionPaladin.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = RetributionPaladin.isMeleeDpsSpec;\n\n\treadonly canDualWield = RetributionPaladin.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_holy_auraoflight.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn RetributionPaladin.getIcon(size);\n\t};\n}\n","import { EligibleWeaponType, IconSize, PlayerClass } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { HolyPaladin, ProtectionPaladin, RetributionPaladin } from '../player_specs/paladin';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from '../proto/common';\nimport { PaladinSpecs } from '../proto_utils/utils';\n\nexport class Paladin extends PlayerClass<Class.ClassPaladin> {\n\tstatic classID = Class.ClassPaladin as Class.ClassPaladin;\n\tstatic friendlyName = 'Paladin';\n\tstatic cssClass = 'paladin';\n\tstatic hexColor = '#f58cba';\n\tstatic specs: Record<string, PlayerSpec<PaladinSpecs>> = {\n\t\t[HolyPaladin.friendlyName]: HolyPaladin,\n\t\t[ProtectionPaladin.friendlyName]: ProtectionPaladin,\n\t\t[RetributionPaladin.friendlyName]: RetributionPaladin,\n\t};\n\tstatic races: Race[] = [\n\t\t// [A]\n\t\tRace.RaceHuman,\n\t\tRace.RaceDwarf,\n\t\tRace.RaceDraenei,\n\t\t// [H]\n\t\tRace.RaceTauren,\n\t\tRace.RaceBloodElf,\n\t];\n\tstatic armorTypes: ArmorType[] = [ArmorType.ArmorTypePlate, ArmorType.ArmorTypeMail, ArmorType.ArmorTypeLeather, ArmorType.ArmorTypeCloth];\n\tstatic weaponTypes: EligibleWeaponType[] = [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeShield },\n\t\t{ weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n\t];\n\tstatic rangedWeaponTypes: RangedWeaponType[] = [RangedWeaponType.RangedWeaponTypeRelic];\n\n\treadonly classID = Paladin.classID;\n\treadonly friendlyName = Paladin.name;\n\treadonly cssClass = Paladin.cssClass;\n\treadonly hexColor = Paladin.hexColor;\n\treadonly specs = Paladin.specs;\n\treadonly races = Paladin.races;\n\treadonly armorTypes = Paladin.armorTypes;\n\treadonly weaponTypes = Paladin.weaponTypes;\n\treadonly rangedWeaponTypes = Paladin.rangedWeaponTypes;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/class_paladin.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn Paladin.getIcon(size);\n\t};\n}\n","import { IconSize } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { Class, Spec } from '../proto/common';\nimport { getSpecSiteUrl } from '../proto_utils/utils';\n\nexport class DisciplinePriest extends PlayerSpec<Spec.SpecDisciplinePriest> {\n\tstatic specIndex = 0;\n\tstatic specID = Spec.SpecDisciplinePriest as Spec.SpecDisciplinePriest;\n\tstatic classID = Class.ClassPriest as Class.ClassPriest;\n\tstatic friendlyName = 'Discipline';\n\tstatic simLink = getSpecSiteUrl('priest', 'discipline');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = true;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specIndex = DisciplinePriest.specIndex;\n\treadonly specID = DisciplinePriest.specID;\n\treadonly classID = DisciplinePriest.classID;\n\treadonly friendlyName = DisciplinePriest.friendlyName;\n\treadonly simLink = DisciplinePriest.simLink;\n\n\treadonly isTankSpec = DisciplinePriest.isTankSpec;\n\treadonly isHealingSpec = DisciplinePriest.isHealingSpec;\n\treadonly isRangedDpsSpec = DisciplinePriest.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = DisciplinePriest.isMeleeDpsSpec;\n\n\treadonly canDualWield = DisciplinePriest.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_holy_powerwordshield.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn DisciplinePriest.getIcon(size);\n\t};\n}\n\nexport class HolyPriest extends PlayerSpec<Spec.SpecHolyPriest> {\n\tstatic specIndex = 1;\n\tstatic specID = Spec.SpecHolyPriest as Spec.SpecHolyPriest;\n\tstatic classID = Class.ClassPriest as Class.ClassPriest;\n\tstatic friendlyName = 'Holy';\n\tstatic simLink = getSpecSiteUrl('priest', 'holy');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = true;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specIndex = HolyPriest.specIndex;\n\treadonly specID = HolyPriest.specID;\n\treadonly classID = HolyPriest.classID;\n\treadonly friendlyName = HolyPriest.friendlyName;\n\treadonly simLink = HolyPriest.simLink;\n\n\treadonly isTankSpec = HolyPriest.isTankSpec;\n\treadonly isHealingSpec = HolyPriest.isHealingSpec;\n\treadonly isRangedDpsSpec = HolyPriest.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = HolyPriest.isMeleeDpsSpec;\n\n\treadonly canDualWield = HolyPriest.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_holy_guardianspirit.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn HolyPriest.getIcon(size);\n\t};\n}\n\nexport class ShadowPriest extends PlayerSpec<Spec.SpecShadowPriest> {\n\tstatic specIndex = 2;\n\tstatic specID = Spec.SpecShadowPriest as Spec.SpecShadowPriest;\n\tstatic classID = Class.ClassPriest as Class.ClassPriest;\n\tstatic friendlyName = 'Shadow';\n\tstatic simLink = getSpecSiteUrl('priest', 'shadow');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specIndex = ShadowPriest.specIndex;\n\treadonly specID = ShadowPriest.specID;\n\treadonly classID = ShadowPriest.classID;\n\treadonly friendlyName = ShadowPriest.friendlyName;\n\treadonly simLink = ShadowPriest.simLink;\n\n\treadonly isTankSpec = ShadowPriest.isTankSpec;\n\treadonly isHealingSpec = ShadowPriest.isHealingSpec;\n\treadonly isRangedDpsSpec = ShadowPriest.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = ShadowPriest.isMeleeDpsSpec;\n\n\treadonly canDualWield = ShadowPriest.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_shadow_shadowwordpain.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn ShadowPriest.getIcon(size);\n\t};\n}\n","import { EligibleWeaponType, IconSize, PlayerClass } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { DisciplinePriest, HolyPriest, ShadowPriest } from '../player_specs/priest';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from '../proto/common';\nimport { PriestSpecs } from '../proto_utils/utils';\n\nexport class Priest extends PlayerClass<Class.ClassPriest> {\n\tstatic classID = Class.ClassPriest as Class.ClassPriest;\n\tstatic friendlyName = 'Priest';\n\tstatic hexColor = '#fff';\n\tstatic specs: Record<string, PlayerSpec<PriestSpecs>> = {\n\t\t[DisciplinePriest.friendlyName]: DisciplinePriest,\n\t\t[HolyPriest.friendlyName]: HolyPriest,\n\t\t[ShadowPriest.friendlyName]: ShadowPriest,\n\t};\n\tstatic races: Race[] = [\n\t\t// [A]\n\t\tRace.RaceHuman,\n\t\tRace.RaceDwarf,\n\t\tRace.RaceNightElf,\n\t\tRace.RaceGnome,\n\t\tRace.RaceDraenei,\n\t\tRace.RaceWorgen,\n\t\t// [H]\n\t\tRace.RaceUndead,\n\t\tRace.RaceTauren,\n\t\tRace.RaceTroll,\n\t\tRace.RaceBloodElf,\n\t\tRace.RaceGoblin,\n\t];\n\tstatic armorTypes: ArmorType[] = [ArmorType.ArmorTypeCloth];\n\tstatic weaponTypes: EligibleWeaponType[] = [\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeMace },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t];\n\tstatic rangedWeaponTypes: RangedWeaponType[] = [RangedWeaponType.RangedWeaponTypeWand];\n\n\treadonly classID = Priest.classID;\n\treadonly friendlyName = Priest.name;\n\treadonly hexColor = Priest.hexColor;\n\treadonly specs = Priest.specs;\n\treadonly races = Priest.races;\n\treadonly armorTypes = Priest.armorTypes;\n\treadonly weaponTypes = Priest.weaponTypes;\n\treadonly rangedWeaponTypes = Priest.rangedWeaponTypes;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/class_priest.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn Priest.getIcon(size);\n\t};\n}\n","import { IconSize } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { Class, Spec } from '../proto/common';\nimport { getSpecSiteUrl } from '../proto_utils/utils';\n\nexport class AssassinationRogue extends PlayerSpec<Spec.SpecAssassinationRogue> {\n\tstatic specIndex = 0;\n\tstatic specID = Spec.SpecAssassinationRogue as Spec.SpecAssassinationRogue;\n\tstatic classID = Class.ClassRogue as Class.ClassRogue;\n\tstatic friendlyName = 'Assassination';\n\tstatic simLink = getSpecSiteUrl('rogue', 'assassination');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = true;\n\n\tstatic canDualWield = true;\n\n\treadonly specIndex = AssassinationRogue.specIndex;\n\treadonly specID = AssassinationRogue.specID;\n\treadonly classID = AssassinationRogue.classID;\n\treadonly friendlyName = AssassinationRogue.friendlyName;\n\treadonly simLink = AssassinationRogue.simLink;\n\n\treadonly isTankSpec = AssassinationRogue.isTankSpec;\n\treadonly isHealingSpec = AssassinationRogue.isHealingSpec;\n\treadonly isRangedDpsSpec = AssassinationRogue.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = AssassinationRogue.isMeleeDpsSpec;\n\n\treadonly canDualWield = AssassinationRogue.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_rogue_eviscerate.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn AssassinationRogue.getIcon(size);\n\t};\n}\n\nexport class CombatRogue extends PlayerSpec<Spec.SpecCombatRogue> {\n\tstatic specIndex = 1;\n\tstatic specID = Spec.SpecCombatRogue as Spec.SpecCombatRogue;\n\tstatic classID = Class.ClassRogue as Class.ClassRogue;\n\tstatic friendlyName = 'Combat';\n\tstatic simLink = getSpecSiteUrl('rogue', 'combat');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = true;\n\n\tstatic canDualWield = true;\n\n\treadonly specIndex = CombatRogue.specIndex;\n\treadonly specID = CombatRogue.specID;\n\treadonly classID = CombatRogue.classID;\n\treadonly friendlyName = CombatRogue.friendlyName;\n\treadonly simLink = CombatRogue.simLink;\n\n\treadonly isTankSpec = CombatRogue.isTankSpec;\n\treadonly isHealingSpec = CombatRogue.isHealingSpec;\n\treadonly isRangedDpsSpec = CombatRogue.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = CombatRogue.isMeleeDpsSpec;\n\n\treadonly canDualWield = CombatRogue.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_backstab.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn CombatRogue.getIcon(size);\n\t};\n}\n\nexport class SubtletyRogue extends PlayerSpec<Spec.SpecSubtletyRogue> {\n\tstatic specIndex = 2;\n\tstatic specID = Spec.SpecSubtletyRogue as Spec.SpecSubtletyRogue;\n\tstatic classID = Class.ClassRogue as Class.ClassRogue;\n\tstatic friendlyName = 'Subtlety';\n\tstatic simLink = getSpecSiteUrl('rogue', 'subtlety');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = true;\n\n\tstatic canDualWield = true;\n\n\treadonly specIndex = SubtletyRogue.specIndex;\n\treadonly specID = SubtletyRogue.specID;\n\treadonly classID = SubtletyRogue.classID;\n\treadonly friendlyName = SubtletyRogue.friendlyName;\n\treadonly simLink = SubtletyRogue.simLink;\n\n\treadonly isTankSpec = SubtletyRogue.isTankSpec;\n\treadonly isHealingSpec = SubtletyRogue.isHealingSpec;\n\treadonly isRangedDpsSpec = SubtletyRogue.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = SubtletyRogue.isMeleeDpsSpec;\n\n\treadonly canDualWield = SubtletyRogue.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_stealth.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn SubtletyRogue.getIcon(size);\n\t};\n}\n","import { EligibleWeaponType, IconSize, PlayerClass } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { AssassinationRogue, CombatRogue, SubtletyRogue } from '../player_specs/rogue';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from '../proto/common';\nimport { RogueSpecs } from '../proto_utils/utils';\n\nexport class Rogue extends PlayerClass<Class.ClassRogue> {\n\tstatic classID = Class.ClassRogue as Class.ClassRogue;\n\tstatic friendlyName = 'Rogue';\n\tstatic hexColor = '#fff569';\n\tstatic specs: Record<string, PlayerSpec<RogueSpecs>> = {\n\t\t[AssassinationRogue.friendlyName]: AssassinationRogue,\n\t\t[CombatRogue.friendlyName]: CombatRogue,\n\t\t[SubtletyRogue.friendlyName]: SubtletyRogue,\n\t};\n\tstatic races: Race[] = [\n\t\t// [A]\n\t\tRace.RaceHuman,\n\t\tRace.RaceDwarf,\n\t\tRace.RaceNightElf,\n\t\tRace.RaceGnome,\n\t\tRace.RaceWorgen,\n\t\t// [H]\n\t\tRace.RaceOrc,\n\t\tRace.RaceUndead,\n\t\tRace.RaceTroll,\n\t\tRace.RaceBloodElf,\n\t\tRace.RaceGoblin,\n\t];\n\tstatic armorTypes: ArmorType[] = [ArmorType.ArmorTypeLeather, ArmorType.ArmorTypeCloth];\n\tstatic weaponTypes: EligibleWeaponType[] = [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: false },\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeMace },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeSword },\n\t];\n\tstatic rangedWeaponTypes: RangedWeaponType[] = [\n\t\tRangedWeaponType.RangedWeaponTypeBow,\n\t\tRangedWeaponType.RangedWeaponTypeCrossbow,\n\t\tRangedWeaponType.RangedWeaponTypeGun,\n\t\tRangedWeaponType.RangedWeaponTypeThrown,\n\t];\n\n\treadonly classID = Rogue.classID;\n\treadonly friendlyName = Rogue.name;\n\treadonly hexColor = Rogue.hexColor;\n\treadonly specs = Rogue.specs;\n\treadonly races = Rogue.races;\n\treadonly armorTypes = Rogue.armorTypes;\n\treadonly weaponTypes = Rogue.weaponTypes;\n\treadonly rangedWeaponTypes = Rogue.rangedWeaponTypes;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/class_rogue.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn Rogue.getIcon(size);\n\t};\n}\n","import { IconSize } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { Class, Spec } from '../proto/common';\nimport { getSpecSiteUrl } from '../proto_utils/utils';\n\nexport class ElementalShaman extends PlayerSpec<Spec.SpecElementalShaman> {\n\tstatic specIndex = 0;\n\tstatic specID = Spec.SpecElementalShaman as Spec.SpecElementalShaman;\n\tstatic classID = Class.ClassShaman as Class.ClassShaman;\n\tstatic friendlyName = 'Elemental';\n\tstatic simLink = getSpecSiteUrl('shaman', 'elemental');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specIndex = ElementalShaman.specIndex;\n\treadonly specID = ElementalShaman.specID;\n\treadonly classID = ElementalShaman.classID;\n\treadonly friendlyName = ElementalShaman.friendlyName;\n\treadonly simLink = ElementalShaman.simLink;\n\n\treadonly isTankSpec = ElementalShaman.isTankSpec;\n\treadonly isHealingSpec = ElementalShaman.isHealingSpec;\n\treadonly isRangedDpsSpec = ElementalShaman.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = ElementalShaman.isMeleeDpsSpec;\n\n\treadonly canDualWield = ElementalShaman.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_nature_lightning.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn ElementalShaman.getIcon(size);\n\t};\n}\n\nexport class EnhancementShaman extends PlayerSpec<Spec.SpecEnhancementShaman> {\n\tstatic specIndex = 1;\n\tstatic specID = Spec.SpecEnhancementShaman as Spec.SpecEnhancementShaman;\n\tstatic classID = Class.ClassShaman as Class.ClassShaman;\n\tstatic friendlyName = 'Enhancement';\n\tstatic simLink = getSpecSiteUrl('shaman', 'enhancement');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = true;\n\n\tstatic canDualWield = true;\n\n\treadonly specIndex = EnhancementShaman.specIndex;\n\treadonly specID = EnhancementShaman.specID;\n\treadonly classID = EnhancementShaman.classID;\n\treadonly friendlyName = EnhancementShaman.friendlyName;\n\treadonly simLink = EnhancementShaman.simLink;\n\n\treadonly isTankSpec = EnhancementShaman.isTankSpec;\n\treadonly isHealingSpec = EnhancementShaman.isHealingSpec;\n\treadonly isRangedDpsSpec = EnhancementShaman.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = EnhancementShaman.isMeleeDpsSpec;\n\n\treadonly canDualWield = EnhancementShaman.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_nature_lightningshield.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn EnhancementShaman.getIcon(size);\n\t};\n}\n\nexport class RestorationShaman extends PlayerSpec<Spec.SpecRestorationShaman> {\n\tstatic specIndex = 2;\n\tstatic specID = Spec.SpecRestorationShaman as Spec.SpecRestorationShaman;\n\tstatic classID = Class.ClassShaman as Class.ClassShaman;\n\tstatic friendlyName = 'Restoration';\n\tstatic simLink = getSpecSiteUrl('shaman', 'restoration');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = true;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specIndex = RestorationShaman.specIndex;\n\treadonly specID = RestorationShaman.specID;\n\treadonly classID = RestorationShaman.classID;\n\treadonly friendlyName = RestorationShaman.friendlyName;\n\treadonly simLink = RestorationShaman.simLink;\n\n\treadonly isTankSpec = RestorationShaman.isTankSpec;\n\treadonly isHealingSpec = RestorationShaman.isHealingSpec;\n\treadonly isRangedDpsSpec = RestorationShaman.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = RestorationShaman.isMeleeDpsSpec;\n\n\treadonly canDualWield = RestorationShaman.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_nature_magicimmunity.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn RestorationShaman.getIcon(size);\n\t};\n}\n","import { EligibleWeaponType, IconSize, PlayerClass } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { ElementalShaman, EnhancementShaman, RestorationShaman } from '../player_specs/shaman';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from '../proto/common';\nimport { ShamanSpecs } from '../proto_utils/utils';\n\nexport class Shaman extends PlayerClass<Class.ClassShaman> {\n\tstatic classID = Class.ClassShaman as Class.ClassShaman;\n\tstatic friendlyName = 'Shaman';\n\tstatic hexColor = '#2459ff';\n\tstatic specs: Record<string, PlayerSpec<ShamanSpecs>> = {\n\t\t[ElementalShaman.friendlyName]: ElementalShaman,\n\t\t[EnhancementShaman.friendlyName]: EnhancementShaman,\n\t\t[RestorationShaman.friendlyName]: RestorationShaman,\n\t};\n\tstatic races: Race[] = [\n\t\t// [A]\n\t\tRace.RaceDwarf,\n\t\tRace.RaceDraenei,\n\t\t// [H]\n\t\tRace.RaceOrc,\n\t\tRace.RaceTauren,\n\t\tRace.RaceTroll,\n\t\tRace.RaceGoblin,\n\t];\n\tstatic armorTypes: ArmorType[] = [ArmorType.ArmorTypeMail, ArmorType.ArmorTypeLeather, ArmorType.ArmorTypeCloth];\n\tstatic weaponTypes: EligibleWeaponType[] = [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeShield },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t];\n\tstatic rangedWeaponTypes: RangedWeaponType[] = [RangedWeaponType.RangedWeaponTypeRelic];\n\n\treadonly classID = Shaman.classID;\n\treadonly friendlyName = Shaman.name;\n\treadonly hexColor = Shaman.hexColor;\n\treadonly specs = Shaman.specs;\n\treadonly races = Shaman.races;\n\treadonly armorTypes = Shaman.armorTypes;\n\treadonly weaponTypes = Shaman.weaponTypes;\n\treadonly rangedWeaponTypes = Shaman.rangedWeaponTypes;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/class_shaman.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn Shaman.getIcon(size);\n\t};\n}\n","import { IconSize } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { Class, Spec } from '../proto/common';\nimport { getSpecSiteUrl } from '../proto_utils/utils';\n\nexport class AfflictionWarlock extends PlayerSpec<Spec.SpecAfflictionWarlock> {\n\tstatic specIndex = 0;\n\tstatic specID = Spec.SpecAfflictionWarlock as Spec.SpecAfflictionWarlock;\n\tstatic classID = Class.ClassWarlock as Class.ClassWarlock;\n\tstatic friendlyName = 'Affliction';\n\tstatic simLink = getSpecSiteUrl('warlock', 'affliction');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specIndex = AfflictionWarlock.specIndex;\n\treadonly specID = AfflictionWarlock.specID;\n\treadonly classID = AfflictionWarlock.classID;\n\treadonly friendlyName = AfflictionWarlock.friendlyName;\n\treadonly simLink = AfflictionWarlock.simLink;\n\n\treadonly isTankSpec = AfflictionWarlock.isTankSpec;\n\treadonly isHealingSpec = AfflictionWarlock.isHealingSpec;\n\treadonly isRangedDpsSpec = AfflictionWarlock.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = AfflictionWarlock.isMeleeDpsSpec;\n\n\treadonly canDualWield = AfflictionWarlock.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_shadow_deathcoil.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn AfflictionWarlock.getIcon(size);\n\t};\n}\n\nexport class DemonologyWarlock extends PlayerSpec<Spec.SpecDemonologyWarlock> {\n\tstatic specIndex = 1;\n\tstatic specID = Spec.SpecDemonologyWarlock as Spec.SpecDemonologyWarlock;\n\tstatic classID = Class.ClassWarlock as Class.ClassWarlock;\n\tstatic friendlyName = 'Demonology';\n\tstatic simLink = getSpecSiteUrl('warlock', 'demonology');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specIndex = DemonologyWarlock.specIndex;\n\treadonly specID = DemonologyWarlock.specID;\n\treadonly classID = DemonologyWarlock.classID;\n\treadonly friendlyName = DemonologyWarlock.friendlyName;\n\treadonly simLink = DemonologyWarlock.simLink;\n\n\treadonly isTankSpec = DemonologyWarlock.isTankSpec;\n\treadonly isHealingSpec = DemonologyWarlock.isHealingSpec;\n\treadonly isRangedDpsSpec = DemonologyWarlock.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = DemonologyWarlock.isMeleeDpsSpec;\n\n\treadonly canDualWield = DemonologyWarlock.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_shadow_metamorphosis.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn DemonologyWarlock.getIcon(size);\n\t};\n}\n\nexport class DestructionWarlock extends PlayerSpec<Spec.SpecDestructionWarlock> {\n\tstatic specIndex = 2;\n\tstatic specID = Spec.SpecDestructionWarlock as Spec.SpecDestructionWarlock;\n\tstatic classID = Class.ClassWarlock as Class.ClassWarlock;\n\tstatic friendlyName = 'Destruction';\n\tstatic simLink = getSpecSiteUrl('warlock', 'destruction');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specIndex = DestructionWarlock.specIndex;\n\treadonly specID = DestructionWarlock.specID;\n\treadonly classID = DestructionWarlock.classID;\n\treadonly friendlyName = DestructionWarlock.friendlyName;\n\treadonly simLink = DestructionWarlock.simLink;\n\n\treadonly isTankSpec = DestructionWarlock.isTankSpec;\n\treadonly isHealingSpec = DestructionWarlock.isHealingSpec;\n\treadonly isRangedDpsSpec = DestructionWarlock.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = DestructionWarlock.isMeleeDpsSpec;\n\n\treadonly canDualWield = DestructionWarlock.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_shadow_rainoffire.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn DestructionWarlock.getIcon(size);\n\t};\n}\n","import { EligibleWeaponType, IconSize, PlayerClass } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { AfflictionWarlock, DemonologyWarlock, DestructionWarlock } from '../player_specs/warlock';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from '../proto/common';\nimport { WarlockSpecs } from '../proto_utils/utils';\n\nexport class Warlock extends PlayerClass<Class.ClassWarlock> {\n\tstatic classID = Class.ClassWarlock as Class.ClassWarlock;\n\tstatic friendlyName = 'Warlock';\n\tstatic hexColor = '#9482c9';\n\tstatic specs: Record<string, PlayerSpec<WarlockSpecs>> = {\n\t\t[AfflictionWarlock.friendlyName]: AfflictionWarlock,\n\t\t[DemonologyWarlock.friendlyName]: DemonologyWarlock,\n\t\t[DestructionWarlock.friendlyName]: DestructionWarlock,\n\t};\n\tstatic races: Race[] = [\n\t\t// [A]\n\t\tRace.RaceHuman,\n\t\tRace.RaceDwarf,\n\t\tRace.RaceGnome,\n\t\tRace.RaceWorgen,\n\t\t// [H]\n\t\tRace.RaceOrc,\n\t\tRace.RaceUndead,\n\t\tRace.RaceTroll,\n\t\tRace.RaceBloodElf,\n\t\tRace.RaceGoblin,\n\t];\n\tstatic armorTypes: ArmorType[] = [ArmorType.ArmorTypeCloth];\n\tstatic weaponTypes: EligibleWeaponType[] = [\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword },\n\t];\n\tstatic rangedWeaponTypes: RangedWeaponType[] = [RangedWeaponType.RangedWeaponTypeWand];\n\n\treadonly classID = Warlock.classID;\n\treadonly friendlyName = Warlock.name;\n\treadonly hexColor = Warlock.hexColor;\n\treadonly specs = Warlock.specs;\n\treadonly races = Warlock.races;\n\treadonly armorTypes = Warlock.armorTypes;\n\treadonly weaponTypes = Warlock.weaponTypes;\n\treadonly rangedWeaponTypes = Warlock.rangedWeaponTypes;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/class_warlock.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn Warlock.getIcon(size);\n\t};\n}\n","import { IconSize } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { Class, Spec } from '../proto/common';\nimport { getSpecSiteUrl } from '../proto_utils/utils';\n\nexport class ArmsWarrior extends PlayerSpec<Spec.SpecArmsWarrior> {\n\tstatic specIndex = 0;\n\tstatic specID = Spec.SpecArmsWarrior as Spec.SpecArmsWarrior;\n\tstatic classID = Class.ClassWarrior as Class.ClassWarrior;\n\tstatic friendlyName = 'Arms';\n\tstatic simLink = getSpecSiteUrl('warrior', 'arms');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = true;\n\n\tstatic canDualWield = true;\n\n\treadonly specIndex = ArmsWarrior.specIndex;\n\treadonly specID = ArmsWarrior.specID;\n\treadonly classID = ArmsWarrior.classID;\n\treadonly friendlyName = ArmsWarrior.friendlyName;\n\treadonly simLink = ArmsWarrior.simLink;\n\n\treadonly isTankSpec = ArmsWarrior.isTankSpec;\n\treadonly isHealingSpec = ArmsWarrior.isHealingSpec;\n\treadonly isRangedDpsSpec = ArmsWarrior.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = ArmsWarrior.isMeleeDpsSpec;\n\n\treadonly canDualWield = ArmsWarrior.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_warrior_savageblow.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn ArmsWarrior.getIcon(size);\n\t};\n}\n\nexport class FuryWarrior extends PlayerSpec<Spec.SpecFuryWarrior> {\n\tstatic specIndex = 1;\n\tstatic specID = Spec.SpecFuryWarrior as Spec.SpecFuryWarrior;\n\tstatic classID = Class.ClassWarrior as Class.ClassWarrior;\n\tstatic friendlyName = 'Fury';\n\tstatic simLink = getSpecSiteUrl('warrior', 'fury');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = true;\n\n\tstatic canDualWield = true;\n\n\treadonly specIndex = FuryWarrior.specIndex;\n\treadonly specID = FuryWarrior.specID;\n\treadonly classID = FuryWarrior.classID;\n\treadonly friendlyName = FuryWarrior.friendlyName;\n\treadonly simLink = FuryWarrior.simLink;\n\n\treadonly isTankSpec = FuryWarrior.isTankSpec;\n\treadonly isHealingSpec = FuryWarrior.isHealingSpec;\n\treadonly isRangedDpsSpec = FuryWarrior.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = FuryWarrior.isMeleeDpsSpec;\n\n\treadonly canDualWield = FuryWarrior.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_warrior_innerrage.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn FuryWarrior.getIcon(size);\n\t};\n}\n\nexport class ProtectionWarrior extends PlayerSpec<Spec.SpecProtectionWarrior> {\n\tstatic specIndex = 2;\n\tstatic specID = Spec.SpecProtectionWarrior as Spec.SpecProtectionWarrior;\n\tstatic classID = Class.ClassWarrior as Class.ClassWarrior;\n\tstatic friendlyName = 'Protection';\n\tstatic simLink = getSpecSiteUrl('warrior', 'protection');\n\n\tstatic isTankSpec = true;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = true;\n\n\treadonly specIndex = ProtectionWarrior.specIndex;\n\treadonly specID = ProtectionWarrior.specID;\n\treadonly classID = ProtectionWarrior.classID;\n\treadonly friendlyName = ProtectionWarrior.friendlyName;\n\treadonly simLink = ProtectionWarrior.simLink;\n\n\treadonly isTankSpec = ProtectionWarrior.isTankSpec;\n\treadonly isHealingSpec = ProtectionWarrior.isHealingSpec;\n\treadonly isRangedDpsSpec = ProtectionWarrior.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = ProtectionWarrior.isMeleeDpsSpec;\n\n\treadonly canDualWield = ProtectionWarrior.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_warrior_defensivestance.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn ProtectionWarrior.getIcon(size);\n\t};\n}\n","import { EligibleWeaponType, IconSize, PlayerClass } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { ArmsWarrior, FuryWarrior, ProtectionWarrior } from '../player_specs/warrior';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from '../proto/common';\nimport { WarriorSpecs } from '../proto_utils/utils';\n\nexport class Warrior extends PlayerClass<Class.ClassWarrior> {\n\tstatic classID = Class.ClassWarrior as Class.ClassWarrior;\n\tstatic friendlyName = 'Warrior';\n\tstatic hexColor = '#c79c6e';\n\tstatic specs: Record<string, PlayerSpec<WarriorSpecs>> = {\n\t\t[ArmsWarrior.friendlyName]: ArmsWarrior,\n\t\t[FuryWarrior.friendlyName]: FuryWarrior,\n\t\t[ProtectionWarrior.friendlyName]: ProtectionWarrior,\n\t};\n\tstatic races: Race[] = [\n\t\t// [A]\n\t\tRace.RaceHuman,\n\t\tRace.RaceDwarf,\n\t\tRace.RaceNightElf,\n\t\tRace.RaceGnome,\n\t\tRace.RaceDraenei,\n\t\tRace.RaceWorgen,\n\t\t// [H]\n\t\tRace.RaceOrc,\n\t\tRace.RaceUndead,\n\t\tRace.RaceTauren,\n\t\tRace.RaceTroll,\n\t\tRace.RaceBloodElf,\n\t\tRace.RaceGoblin,\n\t];\n\tstatic armorTypes: ArmorType[] = [ArmorType.ArmorTypePlate, ArmorType.ArmorTypeMail, ArmorType.ArmorTypeLeather, ArmorType.ArmorTypeCloth];\n\tstatic weaponTypes: EligibleWeaponType[] = [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeShield },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n\t];\n\tstatic rangedWeaponTypes: RangedWeaponType[] = [\n\t\tRangedWeaponType.RangedWeaponTypeBow,\n\t\tRangedWeaponType.RangedWeaponTypeCrossbow,\n\t\tRangedWeaponType.RangedWeaponTypeGun,\n\t\tRangedWeaponType.RangedWeaponTypeThrown,\n\t];\n\n\treadonly classID = Warrior.classID;\n\treadonly friendlyName = Warrior.name;\n\treadonly hexColor = Warrior.hexColor;\n\treadonly specs = Warrior.specs;\n\treadonly races = Warrior.races;\n\treadonly armorTypes = Warrior.armorTypes;\n\treadonly weaponTypes = Warrior.weaponTypes;\n\treadonly rangedWeaponTypes = Warrior.rangedWeaponTypes;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/class_warrior.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn Warrior.getIcon(size);\n\t};\n}\n","import { PlayerClass } from '../player_class';\nimport { Class } from '../proto/common';\nimport { DeathKnight } from './death_knight';\nimport { Druid } from './druid';\nimport { Hunter } from './hunter';\nimport { Mage } from './mage';\nimport { Paladin } from './paladin';\nimport { Priest } from './priest';\nimport { Rogue } from './rogue';\nimport { Shaman } from './shaman';\nimport { Warlock } from './warlock';\nimport { Warrior } from './warrior';\n\nconst protoToPlayerClass: Record<Class, PlayerClass<Class> | undefined> = {\n\t[Class.ClassUnknown]: undefined,\n\t[Class.ClassDeathKnight]: DeathKnight,\n\t[Class.ClassDruid]: Druid,\n\t[Class.ClassHunter]: Hunter,\n\t[Class.ClassMage]: Mage,\n\t[Class.ClassPaladin]: Paladin,\n\t[Class.ClassPriest]: Priest,\n\t[Class.ClassRogue]: Rogue,\n\t[Class.ClassShaman]: Shaman,\n\t[Class.ClassWarlock]: Warlock,\n\t[Class.ClassWarrior]: Warrior,\n};\n\nexport const PlayerClasses = {\n\tDeathKnight,\n\tDruid,\n\tHunter,\n\tMage,\n\tPaladin,\n\tPriest,\n\tRogue,\n\tShaman,\n\tWarlock,\n\tWarrior,\n\tgetCssClass<ClassType extends Class>(playerClass: PlayerClass<ClassType>): string {\n\t\treturn playerClass.friendlyName.toLowerCase().replace(/\\s/g, '-');\n\t},\n\tfromProto: <ClassType extends Class>(protoId: ClassType): PlayerClass<ClassType> => {\n\t\tif (protoId == Class.ClassUnknown) {\n\t\t\tthrow new Error('Invalid Class');\n\t\t}\n\t\t\n\t\treturn protoToPlayerClass[protoId] as PlayerClass<ClassType>;\n\t},\n\tnaturalOrder: [DeathKnight, Druid, Hunter, Mage, Paladin, Priest, Rogue, Shaman, Warlock, Warrior],\n};\n","import { LOCAL_STORAGE_PREFIX } from '../constants/other';\nimport { PlayerClass } from '../player_class';\nimport { PlayerClasses } from '../player_classes';\nimport { PlayerSpec } from '../player_spec';\nimport { Spec } from '../proto/common';\nimport { SpecClasses } from '../proto_utils/utils';\nimport * as DeathKnightSpecs from './death_knight';\nimport * as DruidSpecs from './druid';\nimport * as HunterSpecs from './hunter';\nimport * as MageSpecs from './mage';\nimport * as PaladinSpecs from './paladin';\nimport * as PriestSpecs from './priest';\nimport * as RogueSpecs from './rogue';\nimport * as ShamanSpecs from './shaman';\nimport * as WarlockSpecs from './warlock';\nimport * as WarriorSpecs from './warrior';\n\nconst specToPlayerSpec: Record<Spec, PlayerSpec<any> | undefined> = {\n\t[Spec.SpecUnknown]: undefined,\n\t// Death Knight\n\t[Spec.SpecBloodDeathKnight]: DeathKnightSpecs.BloodDeathKnight,\n\t[Spec.SpecFrostDeathKnight]: DeathKnightSpecs.FrostDeathKnight,\n\t[Spec.SpecUnholyDeathKnight]: DeathKnightSpecs.UnholyDeathKnight,\n\t// Druid\n\t[Spec.SpecBalanceDruid]: DruidSpecs.BalanceDruid,\n\t[Spec.SpecFeralDruid]: DruidSpecs.FeralDruid,\n\t[Spec.SpecRestorationDruid]: DruidSpecs.RestorationDruid,\n\t// Hunter\n\t[Spec.SpecBeastMasteryHunter]: HunterSpecs.BeastMasteryHunter,\n\t[Spec.SpecMarksmanshipHunter]: HunterSpecs.MarksmanshipHunter,\n\t[Spec.SpecSurvivalHunter]: HunterSpecs.SurvivalHunter,\n\t// Mage\n\t[Spec.SpecArcaneMage]: MageSpecs.ArcaneMage,\n\t[Spec.SpecFireMage]: MageSpecs.FireMage,\n\t[Spec.SpecFrostMage]: MageSpecs.FrostMage,\n\t// Paladin\n\t[Spec.SpecHolyPaladin]: PaladinSpecs.HolyPaladin,\n\t[Spec.SpecProtectionPaladin]: PaladinSpecs.ProtectionPaladin,\n\t[Spec.SpecRetributionPaladin]: PaladinSpecs.RetributionPaladin,\n\t// Priest\n\t[Spec.SpecDisciplinePriest]: PriestSpecs.DisciplinePriest,\n\t[Spec.SpecHolyPriest]: PriestSpecs.HolyPriest,\n\t[Spec.SpecShadowPriest]: PriestSpecs.ShadowPriest,\n\t// Rogue\n\t[Spec.SpecAssassinationRogue]: RogueSpecs.AssassinationRogue,\n\t[Spec.SpecCombatRogue]: RogueSpecs.CombatRogue,\n\t[Spec.SpecSubtletyRogue]: RogueSpecs.SubtletyRogue,\n\t// Shaman\n\t[Spec.SpecElementalShaman]: ShamanSpecs.ElementalShaman,\n\t[Spec.SpecEnhancementShaman]: ShamanSpecs.EnhancementShaman,\n\t[Spec.SpecRestorationShaman]: ShamanSpecs.RestorationShaman,\n\t// Warlock\n\t[Spec.SpecAfflictionWarlock]: WarlockSpecs.AfflictionWarlock,\n\t[Spec.SpecDemonologyWarlock]: WarlockSpecs.DemonologyWarlock,\n\t[Spec.SpecDestructionWarlock]: WarlockSpecs.DestructionWarlock,\n\t// Warrior\n\t[Spec.SpecArmsWarrior]: WarriorSpecs.ArmsWarrior,\n\t[Spec.SpecFuryWarrior]: WarriorSpecs.FuryWarrior,\n\t[Spec.SpecProtectionWarrior]: WarriorSpecs.ProtectionWarrior,\n};\n\nconst getPlayerClass = <SpecType extends Spec>(playerSpec: PlayerSpec<SpecType>): PlayerClass<SpecClasses<SpecType>> => {\n\tif (playerSpec.specID == Spec.SpecUnknown) {\n\t\tthrow new Error('Invalid Spec');\n\t}\n\n\treturn PlayerClasses.fromProto(playerSpec.classID);\n};\n\nexport const PlayerSpecs = {\n\t...DeathKnightSpecs,\n\t...DruidSpecs,\n\t...HunterSpecs,\n\t...MageSpecs,\n\t...PaladinSpecs,\n\t...PriestSpecs,\n\t...RogueSpecs,\n\t...ShamanSpecs,\n\t...WarlockSpecs,\n\t...WarriorSpecs,\n\tgetPlayerClass,\n\tgetFullSpecName: <SpecType extends Spec>(playerSpec: PlayerSpec<SpecType>): string => {\n\t\treturn `${playerSpec.friendlyName} ${getPlayerClass(playerSpec).friendlyName}`;\n\t},\n\tgetSpecNumber: <SpecType extends Spec>(playerSpec: PlayerSpec<SpecType>): number => {\n\t\treturn Object.values(getPlayerClass(playerSpec).specs).findIndex(spec => spec == playerSpec) ?? 0;\n\t},\n\t// Prefixes used for storing browser data for each site. Even if a Spec is\n\t// renamed, DO NOT change these values or people will lose their saved data.\n\tgetLocalStorageKey: <SpecType extends Spec>(playerSpec: PlayerSpec<SpecType>): string => {\n\t\treturn `${LOCAL_STORAGE_PREFIX}_${playerSpec.friendlyName.toLowerCase().replace(/\\s/, '_')}_${getPlayerClass(playerSpec)\n\t\t\t.friendlyName.toLowerCase()\n\t\t\t.replace(/\\s/, '_')}`;\n\t},\n\tfromProto: <SpecType extends Spec>(spec: SpecType): PlayerSpec<SpecType> => {\n\t\tif (spec == Spec.SpecUnknown) {\n\t\t\tthrow new Error('Invalid Spec');\n\t\t}\n\n\t\treturn specToPlayerSpec[spec] as PlayerSpec<SpecType>;\n\t},\n};\n","// @generated by protobuf-ts 2.9.1\n// @generated from protobuf file \"ui.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RaidSimResult } from \"./api\";\nimport { RaidSimRequest } from \"./api\";\nimport { Raid } from \"./api\";\nimport { Blessings } from \"./paladin\";\nimport { APLRotation } from \"./apl\";\nimport { Glyphs } from \"./common\";\nimport { HealingModel } from \"./common\";\nimport { ItemSwap } from \"./common\";\nimport { Race } from \"./common\";\nimport { Consumes } from \"./common\";\nimport { IndividualBuffs } from \"./common\";\nimport { EquipmentSpec } from \"./common\";\nimport { Stat } from \"./common\";\nimport { UnitStats } from \"./common\";\nimport { Encounter } from \"./common\";\nimport { Player } from \"./api\";\nimport { PartyBuffs } from \"./common\";\nimport { UnitReference } from \"./common\";\nimport { Debuffs } from \"./common\";\nimport { RaidBuffs } from \"./common\";\nimport { EnchantType } from \"./common\";\nimport { Faction } from \"./common\";\nimport { Profession } from \"./common\";\nimport { Class } from \"./common\";\nimport { ItemQuality } from \"./common\";\nimport { GemColor } from \"./common\";\nimport { RangedWeaponType } from \"./common\";\nimport { HandType } from \"./common\";\nimport { WeaponType } from \"./common\";\nimport { ArmorType } from \"./common\";\nimport { ItemType } from \"./common\";\nimport { ReforgeStat } from \"./common\";\nimport { PresetEncounter } from \"./common\";\nimport { ItemRandomSuffix } from \"./common\";\n/**\n * Holds all WoW data for the UI.\n *\n * @generated from protobuf message proto.UIDatabase\n */\nexport interface UIDatabase {\n    /**\n     * @generated from protobuf field: repeated proto.UIItem items = 1;\n     */\n    items: UIItem[];\n    /**\n     * @generated from protobuf field: repeated proto.ItemRandomSuffix random_suffixes = 11;\n     */\n    randomSuffixes: ItemRandomSuffix[];\n    /**\n     * @generated from protobuf field: repeated proto.UIEnchant enchants = 2;\n     */\n    enchants: UIEnchant[];\n    /**\n     * @generated from protobuf field: repeated proto.UIGem gems = 3;\n     */\n    gems: UIGem[];\n    /**\n     * @generated from protobuf field: repeated proto.PresetEncounter encounters = 6;\n     */\n    encounters: PresetEncounter[];\n    /**\n     * @generated from protobuf field: repeated proto.UIZone zones = 8;\n     */\n    zones: UIZone[];\n    /**\n     * @generated from protobuf field: repeated proto.UINPC npcs = 9;\n     */\n    npcs: UINPC[];\n    /**\n     * Entities for which we just need a name/icon.\n     *\n     * @generated from protobuf field: repeated proto.IconData item_icons = 4;\n     */\n    itemIcons: IconData[];\n    /**\n     * @generated from protobuf field: repeated proto.IconData spell_icons = 5;\n     */\n    spellIcons: IconData[];\n    /**\n     * @generated from protobuf field: repeated proto.GlyphID glyph_ids = 7;\n     */\n    glyphIds: GlyphID[];\n    /**\n     * @generated from protobuf field: repeated proto.ReforgeStat reforge_stats = 12;\n     */\n    reforgeStats: ReforgeStat[];\n}\n/**\n * @generated from protobuf message proto.UIZone\n */\nexport interface UIZone {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: proto.Expansion expansion = 3;\n     */\n    expansion: Expansion;\n}\n/**\n * @generated from protobuf message proto.UINPC\n */\nexport interface UINPC {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: int32 zone_id = 3;\n     */\n    zoneId: number;\n}\n/**\n * Contains all information about an Item needed by the UI.\n * Generally this will include everything needed by the sim, plus some\n * additional data for displaying / filtering.\n * Next tag: 28.\n *\n * @generated from protobuf message proto.UIItem\n */\nexport interface UIItem {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: string icon = 3;\n     */\n    icon: string;\n    /**\n     * @generated from protobuf field: proto.ItemType type = 4;\n     */\n    type: ItemType;\n    /**\n     * @generated from protobuf field: proto.ArmorType armor_type = 5;\n     */\n    armorType: ArmorType;\n    /**\n     * @generated from protobuf field: proto.WeaponType weapon_type = 6;\n     */\n    weaponType: WeaponType;\n    /**\n     * @generated from protobuf field: proto.HandType hand_type = 7;\n     */\n    handType: HandType;\n    /**\n     * @generated from protobuf field: proto.RangedWeaponType ranged_weapon_type = 8;\n     */\n    rangedWeaponType: RangedWeaponType;\n    /**\n     * @generated from protobuf field: repeated double stats = 9;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: repeated proto.GemColor gem_sockets = 10;\n     */\n    gemSockets: GemColor[];\n    /**\n     * @generated from protobuf field: repeated double socketBonus = 11;\n     */\n    socketBonus: number[];\n    /**\n     * @generated from protobuf field: repeated int32 random_suffix_options = 26;\n     */\n    randomSuffixOptions: number[];\n    /**\n     * Weapon stats, needed for computing proper EP for melee weapons\n     *\n     * @generated from protobuf field: double weapon_damage_min = 12;\n     */\n    weaponDamageMin: number;\n    /**\n     * @generated from protobuf field: double weapon_damage_max = 13;\n     */\n    weaponDamageMax: number;\n    /**\n     * @generated from protobuf field: double weapon_speed = 14;\n     */\n    weaponSpeed: number;\n    /**\n     * @generated from protobuf field: int32 ilvl = 15;\n     */\n    ilvl: number;\n    /**\n     * @generated from protobuf field: int32 phase = 16;\n     */\n    phase: number;\n    /**\n     * @generated from protobuf field: proto.ItemQuality quality = 17;\n     */\n    quality: ItemQuality;\n    /**\n     * @generated from protobuf field: bool unique = 18;\n     */\n    unique: boolean;\n    /**\n     * @generated from protobuf field: bool heroic = 19;\n     */\n    heroic: boolean;\n    /**\n     * @generated from protobuf field: int32 rand_prop_points = 27;\n     */\n    randPropPoints: number;\n    /**\n     * Classes that are allowed to use the item. Empty indicates no special class restrictions.\n     *\n     * @generated from protobuf field: repeated proto.Class class_allowlist = 20;\n     */\n    classAllowlist: Class[];\n    /**\n     * @generated from protobuf field: proto.Profession required_profession = 21;\n     */\n    requiredProfession: Profession;\n    /**\n     * Name of the item set to which this item belongs, if any.\n     *\n     * @generated from protobuf field: string set_name = 22;\n     */\n    setName: string;\n    /**\n     * @generated from protobuf field: proto.Expansion expansion = 24;\n     */\n    expansion: Expansion;\n    /**\n     * @generated from protobuf field: repeated proto.UIItemSource sources = 23;\n     */\n    sources: UIItemSource[];\n    /**\n     * @generated from protobuf field: proto.UIItem.FactionRestriction faction_restriction = 25;\n     */\n    factionRestriction: UIItem_FactionRestriction;\n}\n/**\n * @generated from protobuf enum proto.UIItem.FactionRestriction\n */\nexport enum UIItem_FactionRestriction {\n    /**\n     * @generated from protobuf enum value: FACTION_RESTRICTION_UNSPECIFIED = 0;\n     */\n    UNSPECIFIED = 0,\n    /**\n     * @generated from protobuf enum value: FACTION_RESTRICTION_ALLIANCE_ONLY = 1;\n     */\n    ALLIANCE_ONLY = 1,\n    /**\n     * @generated from protobuf enum value: FACTION_RESTRICTION_HORDE_ONLY = 2;\n     */\n    HORDE_ONLY = 2\n}\n/**\n * @generated from protobuf message proto.UIItemSource\n */\nexport interface UIItemSource {\n    /**\n     * @generated from protobuf oneof: source\n     */\n    source: {\n        oneofKind: \"crafted\";\n        /**\n         * @generated from protobuf field: proto.CraftedSource crafted = 1;\n         */\n        crafted: CraftedSource;\n    } | {\n        oneofKind: \"drop\";\n        /**\n         * @generated from protobuf field: proto.DropSource drop = 2;\n         */\n        drop: DropSource;\n    } | {\n        oneofKind: \"quest\";\n        /**\n         * @generated from protobuf field: proto.QuestSource quest = 3;\n         */\n        quest: QuestSource;\n    } | {\n        oneofKind: \"soldBy\";\n        /**\n         * @generated from protobuf field: proto.SoldBySource sold_by = 4;\n         */\n        soldBy: SoldBySource;\n    } | {\n        oneofKind: \"rep\";\n        /**\n         * @generated from protobuf field: proto.RepSource rep = 5;\n         */\n        rep: RepSource;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf message proto.CraftedSource\n */\nexport interface CraftedSource {\n    /**\n     * @generated from protobuf field: proto.Profession profession = 1;\n     */\n    profession: Profession;\n    /**\n     * @generated from protobuf field: int32 spell_id = 2;\n     */\n    spellId: number;\n}\n/**\n * @generated from protobuf message proto.DropSource\n */\nexport interface DropSource {\n    /**\n     * @generated from protobuf field: proto.DungeonDifficulty difficulty = 1;\n     */\n    difficulty: DungeonDifficulty;\n    /**\n     * @generated from protobuf field: int32 npc_id = 2;\n     */\n    npcId: number;\n    /**\n     * @generated from protobuf field: int32 zone_id = 3;\n     */\n    zoneId: number;\n    /**\n     * @generated from protobuf field: string other_name = 4;\n     */\n    otherName: string; // For drops in zones from things other than NPCs, e.g. \"Trash\"\n    /**\n     * @generated from protobuf field: string category = 5;\n     */\n    category: string; // For conditions/categories of drops, e.g. 'Hard Mode' or 'Titan Rune'\n}\n/**\n * @generated from protobuf message proto.QuestSource\n */\nexport interface QuestSource {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n}\n/**\n * @generated from protobuf message proto.SoldBySource\n */\nexport interface SoldBySource {\n    /**\n     * @generated from protobuf field: int32 npc_id = 1;\n     */\n    npcId: number;\n    /**\n     * @generated from protobuf field: string npc_name = 2;\n     */\n    npcName: string;\n    /**\n     * @generated from protobuf field: int32 zone_id = 3;\n     */\n    zoneId: number;\n}\n/**\n * @generated from protobuf message proto.RepSource\n */\nexport interface RepSource {\n    /**\n     * @generated from protobuf field: proto.RepFaction rep_faction_id = 1;\n     */\n    repFactionId: RepFaction;\n    /**\n     * @generated from protobuf field: proto.RepLevel rep_level = 2;\n     */\n    repLevel: RepLevel;\n    /**\n     * @generated from protobuf field: proto.Faction faction_id = 3;\n     */\n    factionId: Faction;\n}\n/**\n * @generated from protobuf message proto.UIEnchant\n */\nexport interface UIEnchant {\n    /**\n     * All enchants have an effect ID. Some also have an item ID, others have a spell ID,\n     * and yet others have both item and spell IDs. No single ID alone is enough to\n     * uniquely identify an enchant. Uniqueness requires either effect ID + slot, or\n     * effect ID + item/spell ID.\n     *\n     * @generated from protobuf field: int32 effect_id = 1;\n     */\n    effectId: number; // ID of the effect.\n    /**\n     * @generated from protobuf field: int32 item_id = 2;\n     */\n    itemId: number; // ID of the enchant \"item\". Might be 0 if not available.\n    /**\n     * @generated from protobuf field: int32 spell_id = 3;\n     */\n    spellId: number; // ID of the enchant \"spell\". Might be 0 if not available.\n    /**\n     * @generated from protobuf field: string name = 4;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: string icon = 5;\n     */\n    icon: string;\n    /**\n     * @generated from protobuf field: proto.ItemType type = 6;\n     */\n    type: ItemType; // Which type of item this enchant can be applied to.\n    /**\n     * @generated from protobuf field: repeated proto.ItemType extra_types = 13;\n     */\n    extraTypes: ItemType[]; // Extra types for enchants that can go in multiple slots (like armor kits).\n    /**\n     * @generated from protobuf field: proto.EnchantType enchant_type = 7;\n     */\n    enchantType: EnchantType;\n    /**\n     * @generated from protobuf field: repeated double stats = 8;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: proto.ItemQuality quality = 9;\n     */\n    quality: ItemQuality;\n    /**\n     * @generated from protobuf field: int32 phase = 10;\n     */\n    phase: number;\n    /**\n     * Classes that are allowed to use the enchant. Empty indicates no special class restrictions.\n     *\n     * @generated from protobuf field: repeated proto.Class class_allowlist = 11;\n     */\n    classAllowlist: Class[];\n    /**\n     * @generated from protobuf field: proto.Profession required_profession = 12;\n     */\n    requiredProfession: Profession;\n}\n/**\n * @generated from protobuf message proto.UIGem\n */\nexport interface UIGem {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: string icon = 3;\n     */\n    icon: string;\n    /**\n     * @generated from protobuf field: proto.GemColor color = 4;\n     */\n    color: GemColor;\n    /**\n     * @generated from protobuf field: repeated double stats = 5;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: int32 phase = 6;\n     */\n    phase: number;\n    /**\n     * @generated from protobuf field: proto.ItemQuality quality = 7;\n     */\n    quality: ItemQuality;\n    /**\n     * @generated from protobuf field: bool unique = 8;\n     */\n    unique: boolean;\n    /**\n     * @generated from protobuf field: proto.Profession required_profession = 9;\n     */\n    requiredProfession: Profession;\n}\n/**\n * @generated from protobuf message proto.IconData\n */\nexport interface IconData {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: string icon = 3;\n     */\n    icon: string;\n    /**\n     * @generated from protobuf field: bool has_buff = 4;\n     */\n    hasBuff: boolean;\n}\n/**\n * @generated from protobuf message proto.GlyphID\n */\nexport interface GlyphID {\n    /**\n     * @generated from protobuf field: int32 item_id = 1;\n     */\n    itemId: number;\n    /**\n     * @generated from protobuf field: int32 spell_id = 2;\n     */\n    spellId: number;\n}\n/**\n * Next tag: 20.\n *\n * @generated from protobuf message proto.DatabaseFilters\n */\nexport interface DatabaseFilters {\n    /**\n     * @generated from protobuf field: repeated proto.ArmorType armor_types = 1;\n     */\n    armorTypes: ArmorType[];\n    /**\n     * @generated from protobuf field: repeated proto.WeaponType weapon_types = 2;\n     */\n    weaponTypes: WeaponType[];\n    /**\n     * @generated from protobuf field: repeated proto.RangedWeaponType ranged_weapon_types = 16;\n     */\n    rangedWeaponTypes: RangedWeaponType[];\n    /**\n     * @generated from protobuf field: repeated proto.SourceFilterOption sources = 17;\n     */\n    sources: SourceFilterOption[];\n    /**\n     * @generated from protobuf field: repeated proto.RaidFilterOption raids = 18;\n     */\n    raids: RaidFilterOption[];\n    /**\n     * @generated from protobuf field: proto.UIItem.FactionRestriction faction_restriction = 19;\n     */\n    factionRestriction: UIItem_FactionRestriction;\n    /**\n     * @generated from protobuf field: double min_mh_weapon_speed = 4;\n     */\n    minMhWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: double max_mh_weapon_speed = 5;\n     */\n    maxMhWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: double min_oh_weapon_speed = 9;\n     */\n    minOhWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: double max_oh_weapon_speed = 10;\n     */\n    maxOhWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: double min_ranged_weapon_speed = 14;\n     */\n    minRangedWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: double max_ranged_weapon_speed = 15;\n     */\n    maxRangedWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: bool one_handed_weapons = 6;\n     */\n    oneHandedWeapons: boolean;\n    /**\n     * @generated from protobuf field: bool two_handed_weapons = 7;\n     */\n    twoHandedWeapons: boolean;\n    /**\n     * @generated from protobuf field: bool matching_gems_only = 8;\n     */\n    matchingGemsOnly: boolean;\n    /**\n     * Item IDs for favorited items.\n     *\n     * @generated from protobuf field: repeated int32 favorite_items = 11;\n     */\n    favoriteItems: number[];\n    /**\n     * Item IDs for favorited gems.\n     *\n     * @generated from protobuf field: repeated int32 favorite_gems = 12;\n     */\n    favoriteGems: number[];\n    /**\n     * Uniquely-identifying strings for favorited enchants.\n     *\n     * @generated from protobuf field: repeated string favorite_enchants = 13;\n     */\n    favoriteEnchants: string[];\n}\n/**\n * @generated from protobuf message proto.SimSettings\n */\nexport interface SimSettings {\n    /**\n     * @generated from protobuf field: int32 iterations = 1;\n     */\n    iterations: number;\n    /**\n     * @generated from protobuf field: int32 phase = 2;\n     */\n    phase: number;\n    /**\n     * @generated from protobuf field: int64 fixed_rng_seed = 3;\n     */\n    fixedRngSeed: bigint;\n    /**\n     * @generated from protobuf field: bool show_damage_metrics = 8;\n     */\n    showDamageMetrics: boolean;\n    /**\n     * @generated from protobuf field: bool show_threat_metrics = 4;\n     */\n    showThreatMetrics: boolean;\n    /**\n     * @generated from protobuf field: bool show_healing_metrics = 7;\n     */\n    showHealingMetrics: boolean;\n    /**\n     * @generated from protobuf field: bool show_experimental = 5;\n     */\n    showExperimental: boolean;\n    /**\n     * @generated from protobuf field: bool show_quick_swap = 12;\n     */\n    showQuickSwap: boolean;\n    /**\n     * @generated from protobuf field: bool show_ep_values = 11;\n     */\n    showEpValues: boolean;\n    /**\n     * @generated from protobuf field: string language = 9;\n     */\n    language: string;\n    /**\n     * @generated from protobuf field: proto.Faction faction = 6;\n     */\n    faction: Faction;\n    /**\n     * @generated from protobuf field: proto.DatabaseFilters filters = 10;\n     */\n    filters?: DatabaseFilters;\n}\n/**\n * Contains all information that is imported/exported from an individual sim.\n *\n * @generated from protobuf message proto.IndividualSimSettings\n */\nexport interface IndividualSimSettings {\n    /**\n     * @generated from protobuf field: proto.SimSettings settings = 5;\n     */\n    settings?: SimSettings;\n    /**\n     * @generated from protobuf field: proto.RaidBuffs raid_buffs = 1;\n     */\n    raidBuffs?: RaidBuffs;\n    /**\n     * @generated from protobuf field: proto.Debuffs debuffs = 8;\n     */\n    debuffs?: Debuffs;\n    /**\n     * @generated from protobuf field: repeated proto.UnitReference tanks = 7;\n     */\n    tanks: UnitReference[];\n    /**\n     * @generated from protobuf field: proto.PartyBuffs party_buffs = 2;\n     */\n    partyBuffs?: PartyBuffs;\n    /**\n     * @generated from protobuf field: proto.Player player = 3;\n     */\n    player?: Player;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 4;\n     */\n    encounter?: Encounter;\n    /**\n     * @generated from protobuf field: int32 target_dummies = 9;\n     */\n    targetDummies: number;\n    /**\n     * @generated from protobuf field: proto.UnitStats ep_weights_stats = 10;\n     */\n    epWeightsStats?: UnitStats;\n    /**\n     * @generated from protobuf field: repeated double ep_ratios = 11;\n     */\n    epRatios: number[];\n    /**\n     * @generated from protobuf field: proto.Stat dps_ref_stat = 12;\n     */\n    dpsRefStat: Stat;\n    /**\n     * @generated from protobuf field: proto.Stat heal_ref_stat = 13;\n     */\n    healRefStat: Stat;\n    /**\n     * @generated from protobuf field: proto.Stat tank_ref_stat = 14;\n     */\n    tankRefStat: Stat;\n}\n/**\n * Local storage data for gear settings.\n *\n * @generated from protobuf message proto.SavedGearSet\n */\nexport interface SavedGearSet {\n    /**\n     * @generated from protobuf field: proto.EquipmentSpec gear = 1;\n     */\n    gear?: EquipmentSpec;\n    /**\n     * @generated from protobuf field: proto.UnitStats bonus_stats_stats = 3;\n     */\n    bonusStatsStats?: UnitStats;\n}\n/**\n * Local storage data for other settings.\n *\n * @generated from protobuf message proto.SavedSettings\n */\nexport interface SavedSettings {\n    /**\n     * @generated from protobuf field: proto.RaidBuffs raid_buffs = 1;\n     */\n    raidBuffs?: RaidBuffs;\n    /**\n     * @generated from protobuf field: proto.PartyBuffs party_buffs = 2;\n     */\n    partyBuffs?: PartyBuffs;\n    /**\n     * @generated from protobuf field: proto.Debuffs debuffs = 7;\n     */\n    debuffs?: Debuffs;\n    /**\n     * @generated from protobuf field: proto.IndividualBuffs player_buffs = 3;\n     */\n    playerBuffs?: IndividualBuffs;\n    /**\n     * @generated from protobuf field: proto.Consumes consumes = 4;\n     */\n    consumes?: Consumes;\n    /**\n     * @generated from protobuf field: proto.Race race = 5;\n     */\n    race: Race;\n    /**\n     * @generated from protobuf field: repeated proto.Profession professions = 9;\n     */\n    professions: Profession[];\n    /**\n     * @generated from protobuf field: bool enable_item_swap = 18;\n     */\n    enableItemSwap: boolean;\n    /**\n     * @generated from protobuf field: proto.ItemSwap item_swap = 17;\n     */\n    itemSwap?: ItemSwap;\n    /**\n     * @generated from protobuf field: int32 reaction_time_ms = 10;\n     */\n    reactionTimeMs: number;\n    /**\n     * @generated from protobuf field: int32 channel_clip_delay_ms = 14;\n     */\n    channelClipDelayMs: number;\n    /**\n     * @generated from protobuf field: bool in_front_of_target = 11;\n     */\n    inFrontOfTarget: boolean;\n    /**\n     * @generated from protobuf field: double distance_from_target = 12;\n     */\n    distanceFromTarget: number;\n    /**\n     * @generated from protobuf field: proto.HealingModel healing_model = 13;\n     */\n    healingModel?: HealingModel;\n    /**\n     * @generated from protobuf field: double dark_intent_uptime = 19;\n     */\n    darkIntentUptime: number;\n}\n/**\n * @generated from protobuf message proto.SavedTalents\n */\nexport interface SavedTalents {\n    /**\n     * @generated from protobuf field: string talents_string = 1;\n     */\n    talentsString: string;\n    /**\n     * @generated from protobuf field: proto.Glyphs glyphs = 2;\n     */\n    glyphs?: Glyphs;\n}\n/**\n * @generated from protobuf message proto.SavedRotation\n */\nexport interface SavedRotation {\n    /**\n     * @generated from protobuf field: proto.APLRotation rotation = 1;\n     */\n    rotation?: APLRotation;\n}\n/**\n * @generated from protobuf message proto.BlessingsAssignment\n */\nexport interface BlessingsAssignment {\n    /**\n     * Index corresponds to Spec that the blessing should be applied to.\n     *\n     * @generated from protobuf field: repeated proto.Blessings blessings = 1;\n     */\n    blessings: Blessings[];\n}\n/**\n * @generated from protobuf message proto.BlessingsAssignments\n */\nexport interface BlessingsAssignments {\n    /**\n     * Assignments for each paladin.\n     *\n     * @generated from protobuf field: repeated proto.BlessingsAssignment paladins = 1;\n     */\n    paladins: BlessingsAssignment[];\n}\n/**\n * Local storage data for a saved encounter.\n *\n * @generated from protobuf message proto.SavedEncounter\n */\nexport interface SavedEncounter {\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 1;\n     */\n    encounter?: Encounter;\n}\n/**\n * Local storage data for raid sim settings.\n *\n * @generated from protobuf message proto.SavedRaid\n */\nexport interface SavedRaid {\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n    /**\n     * @generated from protobuf field: proto.BlessingsAssignments blessings = 3;\n     */\n    blessings?: BlessingsAssignments;\n    /**\n     * @generated from protobuf field: proto.Faction faction = 4;\n     */\n    faction: Faction;\n    /**\n     * @generated from protobuf field: int32 phase = 5;\n     */\n    phase: number;\n}\n/**\n * Contains all information that is imported/exported from a raid sim.\n *\n * @generated from protobuf message proto.RaidSimSettings\n */\nexport interface RaidSimSettings {\n    /**\n     * @generated from protobuf field: proto.SimSettings settings = 5;\n     */\n    settings?: SimSettings;\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n    /**\n     * @generated from protobuf field: proto.BlessingsAssignments blessings = 3;\n     */\n    blessings?: BlessingsAssignments;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 4;\n     */\n    encounter?: Encounter;\n}\n/**\n * All the data related to running the sim once.\n *\n * @generated from protobuf message proto.SimRun\n */\nexport interface SimRun {\n    /**\n     * @generated from protobuf field: proto.RaidSimRequest request = 1;\n     */\n    request?: RaidSimRequest;\n    /**\n     * @generated from protobuf field: proto.RaidSimResult result = 2;\n     */\n    result?: RaidSimResult;\n}\n/**\n * Contains a sim run and also other context data.\n *\n * @generated from protobuf message proto.SimRunData\n */\nexport interface SimRunData {\n    /**\n     * @generated from protobuf field: proto.SimRun run = 1;\n     */\n    run?: SimRun;\n    /**\n     * The run stored as a reference, for comparison to the current run.\n     *\n     * @generated from protobuf field: proto.SimRun reference_run = 2;\n     */\n    referenceRun?: SimRun;\n}\n/**\n * Sent by the sim to the detailed results page.\n *\n * @generated from protobuf message proto.DetailedResultsUpdate\n */\nexport interface DetailedResultsUpdate {\n    /**\n     * @generated from protobuf oneof: data\n     */\n    data: {\n        oneofKind: \"runData\";\n        /**\n         * Show results from a run.\n         *\n         * @generated from protobuf field: proto.SimRunData run_data = 1;\n         */\n        runData: SimRunData;\n    } | {\n        oneofKind: \"settings\";\n        /**\n         * Update sim settings.\n         *\n         * @generated from protobuf field: proto.SimSettings settings = 2;\n         */\n        settings: SimSettings;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf enum proto.Expansion\n */\nexport enum Expansion {\n    /**\n     * @generated from protobuf enum value: ExpansionUnknown = 0;\n     */\n    ExpansionUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ExpansionVanilla = 1;\n     */\n    ExpansionVanilla = 1,\n    /**\n     * @generated from protobuf enum value: ExpansionTbc = 2;\n     */\n    ExpansionTbc = 2,\n    /**\n     * @generated from protobuf enum value: ExpansionWotlk = 3;\n     */\n    ExpansionWotlk = 3,\n    /**\n     * @generated from protobuf enum value: ExpansionCata = 4;\n     */\n    ExpansionCata = 4\n}\n/**\n * @generated from protobuf enum proto.DungeonDifficulty\n */\nexport enum DungeonDifficulty {\n    /**\n     * @generated from protobuf enum value: DifficultyUnknown = 0;\n     */\n    DifficultyUnknown = 0,\n    /**\n     * @generated from protobuf enum value: DifficultyNormal = 1;\n     */\n    DifficultyNormal = 1,\n    /**\n     * @generated from protobuf enum value: DifficultyHeroic = 2;\n     */\n    DifficultyHeroic = 2,\n    /**\n     * @generated from protobuf enum value: DifficultyTitanRuneAlpha = 7;\n     */\n    DifficultyTitanRuneAlpha = 7,\n    /**\n     * @generated from protobuf enum value: DifficultyTitanRuneBeta = 8;\n     */\n    DifficultyTitanRuneBeta = 8,\n    /**\n     * @generated from protobuf enum value: DifficultyRaid10 = 3;\n     */\n    DifficultyRaid10 = 3,\n    /**\n     * @generated from protobuf enum value: DifficultyRaid10H = 4;\n     */\n    DifficultyRaid10H = 4,\n    /**\n     * @generated from protobuf enum value: DifficultyRaid25 = 5;\n     */\n    DifficultyRaid25 = 5,\n    /**\n     * @generated from protobuf enum value: DifficultyRaid25H = 6;\n     */\n    DifficultyRaid25H = 6\n}\n/**\n * @generated from protobuf enum proto.RepLevel\n */\nexport enum RepLevel {\n    /**\n     * @generated from protobuf enum value: RepLevelUnknown = 0;\n     */\n    RepLevelUnknown = 0,\n    /**\n     * @generated from protobuf enum value: RepLevelHated = 1;\n     */\n    RepLevelHated = 1,\n    /**\n     * @generated from protobuf enum value: RepLevelHostile = 2;\n     */\n    RepLevelHostile = 2,\n    /**\n     * @generated from protobuf enum value: RepLevelUnfriendly = 3;\n     */\n    RepLevelUnfriendly = 3,\n    /**\n     * @generated from protobuf enum value: RepLevelNeutral = 4;\n     */\n    RepLevelNeutral = 4,\n    /**\n     * @generated from protobuf enum value: RepLevelFriendly = 5;\n     */\n    RepLevelFriendly = 5,\n    /**\n     * @generated from protobuf enum value: RepLevelHonored = 6;\n     */\n    RepLevelHonored = 6,\n    /**\n     * @generated from protobuf enum value: RepLevelRevered = 7;\n     */\n    RepLevelRevered = 7,\n    /**\n     * @generated from protobuf enum value: RepLevelExalted = 8;\n     */\n    RepLevelExalted = 8\n}\n/**\n * Use the faction ID for the field index\n *\n * @generated from protobuf enum proto.RepFaction\n */\nexport enum RepFaction {\n    /**\n     * @generated from protobuf enum value: RepFactionUnknown = 0;\n     */\n    RepFactionUnknown = 0,\n    /**\n     * @generated from protobuf enum value: RepFactionTheEarthenRing = 1135;\n     */\n    RepFactionTheEarthenRing = 1135,\n    /**\n     * @generated from protobuf enum value: RepFactionGuardiansOfHyjal = 1158;\n     */\n    RepFactionGuardiansOfHyjal = 1158,\n    /**\n     * @generated from protobuf enum value: RepFactionTherazane = 1171;\n     */\n    RepFactionTherazane = 1171,\n    /**\n     * @generated from protobuf enum value: RepFactionDragonmawClan = 1172;\n     */\n    RepFactionDragonmawClan = 1172,\n    /**\n     * @generated from protobuf enum value: RepFactionRamkahen = 1173;\n     */\n    RepFactionRamkahen = 1173,\n    /**\n     * @generated from protobuf enum value: RepFactionWildhammerClan = 1174;\n     */\n    RepFactionWildhammerClan = 1174,\n    /**\n     * @generated from protobuf enum value: RepFactionBaradinsWardens = 1177;\n     */\n    RepFactionBaradinsWardens = 1177,\n    /**\n     * @generated from protobuf enum value: RepFactionHellscreamsReach = 1178;\n     */\n    RepFactionHellscreamsReach = 1178,\n    /**\n     * @generated from protobuf enum value: RepFactionAvengersOfHyjal = 1204;\n     */\n    RepFactionAvengersOfHyjal = 1204\n}\n/**\n * @generated from protobuf enum proto.SourceFilterOption\n */\nexport enum SourceFilterOption {\n    /**\n     * @generated from protobuf enum value: SourceUnknown = 0;\n     */\n    SourceUnknown = 0,\n    /**\n     * @generated from protobuf enum value: SourceCrafting = 1;\n     */\n    SourceCrafting = 1,\n    /**\n     * @generated from protobuf enum value: SourceQuest = 2;\n     */\n    SourceQuest = 2,\n    /**\n     * @generated from protobuf enum value: SourceReputation = 3;\n     */\n    SourceReputation = 3,\n    /**\n     * @generated from protobuf enum value: SourcePvp = 4;\n     */\n    SourcePvp = 4,\n    /**\n     * @generated from protobuf enum value: SourceDungeon = 5;\n     */\n    SourceDungeon = 5,\n    /**\n     * @generated from protobuf enum value: SourceDungeonH = 6;\n     */\n    SourceDungeonH = 6,\n    /**\n     * @generated from protobuf enum value: SourceRaid = 7;\n     */\n    SourceRaid = 7,\n    /**\n     * @generated from protobuf enum value: SourceRaidH = 8;\n     */\n    SourceRaidH = 8\n}\n/**\n * @generated from protobuf enum proto.RaidFilterOption\n */\nexport enum RaidFilterOption {\n    /**\n     * @generated from protobuf enum value: RaidUnknown = 0;\n     */\n    RaidUnknown = 0,\n    /**\n     * @generated from protobuf enum value: RaidIcecrownCitadel = 1;\n     */\n    RaidIcecrownCitadel = 1,\n    /**\n     * @generated from protobuf enum value: RaidRubySanctum = 2;\n     */\n    RaidRubySanctum = 2,\n    /**\n     * @generated from protobuf enum value: RaidBlackwingDescent = 3;\n     */\n    RaidBlackwingDescent = 3,\n    /**\n     * @generated from protobuf enum value: RaidTheBastionOfTwilight = 4;\n     */\n    RaidTheBastionOfTwilight = 4,\n    /**\n     * @generated from protobuf enum value: RaidBaradinHold = 5;\n     */\n    RaidBaradinHold = 5,\n    /**\n     * @generated from protobuf enum value: RaidThroneOfTheFourWinds = 6;\n     */\n    RaidThroneOfTheFourWinds = 6,\n    /**\n     * @generated from protobuf enum value: RaidFirelands = 7;\n     */\n    RaidFirelands = 7,\n    /**\n     * @generated from protobuf enum value: RaidDragonSoul = 8;\n     */\n    RaidDragonSoul = 8\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIDatabase$Type extends MessageType<UIDatabase> {\n    constructor() {\n        super(\"proto.UIDatabase\", [\n            { no: 1, name: \"items\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UIItem },\n            { no: 11, name: \"random_suffixes\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemRandomSuffix },\n            { no: 2, name: \"enchants\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UIEnchant },\n            { no: 3, name: \"gems\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UIGem },\n            { no: 6, name: \"encounters\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PresetEncounter },\n            { no: 8, name: \"zones\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UIZone },\n            { no: 9, name: \"npcs\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UINPC },\n            { no: 4, name: \"item_icons\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => IconData },\n            { no: 5, name: \"spell_icons\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => IconData },\n            { no: 7, name: \"glyph_ids\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => GlyphID },\n            { no: 12, name: \"reforge_stats\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ReforgeStat }\n        ]);\n    }\n    create(value?: PartialMessage<UIDatabase>): UIDatabase {\n        const message = { items: [], randomSuffixes: [], enchants: [], gems: [], encounters: [], zones: [], npcs: [], itemIcons: [], spellIcons: [], glyphIds: [], reforgeStats: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIDatabase>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDatabase): UIDatabase {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.UIItem items */ 1:\n                    message.items.push(UIItem.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.ItemRandomSuffix random_suffixes */ 11:\n                    message.randomSuffixes.push(ItemRandomSuffix.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.UIEnchant enchants */ 2:\n                    message.enchants.push(UIEnchant.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.UIGem gems */ 3:\n                    message.gems.push(UIGem.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.PresetEncounter encounters */ 6:\n                    message.encounters.push(PresetEncounter.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.UIZone zones */ 8:\n                    message.zones.push(UIZone.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.UINPC npcs */ 9:\n                    message.npcs.push(UINPC.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.IconData item_icons */ 4:\n                    message.itemIcons.push(IconData.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.IconData spell_icons */ 5:\n                    message.spellIcons.push(IconData.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.GlyphID glyph_ids */ 7:\n                    message.glyphIds.push(GlyphID.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.ReforgeStat reforge_stats */ 12:\n                    message.reforgeStats.push(ReforgeStat.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIDatabase, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.UIItem items = 1; */\n        for (let i = 0; i < message.items.length; i++)\n            UIItem.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.ItemRandomSuffix random_suffixes = 11; */\n        for (let i = 0; i < message.randomSuffixes.length; i++)\n            ItemRandomSuffix.internalBinaryWrite(message.randomSuffixes[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UIEnchant enchants = 2; */\n        for (let i = 0; i < message.enchants.length; i++)\n            UIEnchant.internalBinaryWrite(message.enchants[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UIGem gems = 3; */\n        for (let i = 0; i < message.gems.length; i++)\n            UIGem.internalBinaryWrite(message.gems[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.PresetEncounter encounters = 6; */\n        for (let i = 0; i < message.encounters.length; i++)\n            PresetEncounter.internalBinaryWrite(message.encounters[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UIZone zones = 8; */\n        for (let i = 0; i < message.zones.length; i++)\n            UIZone.internalBinaryWrite(message.zones[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UINPC npcs = 9; */\n        for (let i = 0; i < message.npcs.length; i++)\n            UINPC.internalBinaryWrite(message.npcs[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.IconData item_icons = 4; */\n        for (let i = 0; i < message.itemIcons.length; i++)\n            IconData.internalBinaryWrite(message.itemIcons[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.IconData spell_icons = 5; */\n        for (let i = 0; i < message.spellIcons.length; i++)\n            IconData.internalBinaryWrite(message.spellIcons[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.GlyphID glyph_ids = 7; */\n        for (let i = 0; i < message.glyphIds.length; i++)\n            GlyphID.internalBinaryWrite(message.glyphIds[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.ReforgeStat reforge_stats = 12; */\n        for (let i = 0; i < message.reforgeStats.length; i++)\n            ReforgeStat.internalBinaryWrite(message.reforgeStats[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIDatabase\n */\nexport const UIDatabase = new UIDatabase$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIZone$Type extends MessageType<UIZone> {\n    constructor() {\n        super(\"proto.UIZone\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"expansion\", kind: \"enum\", T: () => [\"proto.Expansion\", Expansion] }\n        ]);\n    }\n    create(value?: PartialMessage<UIZone>): UIZone {\n        const message = { id: 0, name: \"\", expansion: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIZone>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIZone): UIZone {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* proto.Expansion expansion */ 3:\n                    message.expansion = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIZone, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* proto.Expansion expansion = 3; */\n        if (message.expansion !== 0)\n            writer.tag(3, WireType.Varint).int32(message.expansion);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIZone\n */\nexport const UIZone = new UIZone$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UINPC$Type extends MessageType<UINPC> {\n    constructor() {\n        super(\"proto.UINPC\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"zone_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<UINPC>): UINPC {\n        const message = { id: 0, name: \"\", zoneId: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UINPC>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UINPC): UINPC {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* int32 zone_id */ 3:\n                    message.zoneId = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UINPC, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* int32 zone_id = 3; */\n        if (message.zoneId !== 0)\n            writer.tag(3, WireType.Varint).int32(message.zoneId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UINPC\n */\nexport const UINPC = new UINPC$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIItem$Type extends MessageType<UIItem> {\n    constructor() {\n        super(\"proto.UIItem\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"icon\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"type\", kind: \"enum\", T: () => [\"proto.ItemType\", ItemType] },\n            { no: 5, name: \"armor_type\", kind: \"enum\", T: () => [\"proto.ArmorType\", ArmorType] },\n            { no: 6, name: \"weapon_type\", kind: \"enum\", T: () => [\"proto.WeaponType\", WeaponType] },\n            { no: 7, name: \"hand_type\", kind: \"enum\", T: () => [\"proto.HandType\", HandType] },\n            { no: 8, name: \"ranged_weapon_type\", kind: \"enum\", T: () => [\"proto.RangedWeaponType\", RangedWeaponType] },\n            { no: 9, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"gem_sockets\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.GemColor\", GemColor] },\n            { no: 11, name: \"socketBonus\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 26, name: \"random_suffix_options\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"weapon_damage_min\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"weapon_damage_max\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 14, name: \"weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 15, name: \"ilvl\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"quality\", kind: \"enum\", T: () => [\"proto.ItemQuality\", ItemQuality] },\n            { no: 18, name: \"unique\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"heroic\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"rand_prop_points\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"class_allowlist\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Class\", Class] },\n            { no: 21, name: \"required_profession\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 22, name: \"set_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 24, name: \"expansion\", kind: \"enum\", T: () => [\"proto.Expansion\", Expansion] },\n            { no: 23, name: \"sources\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UIItemSource },\n            { no: 25, name: \"faction_restriction\", kind: \"enum\", T: () => [\"proto.UIItem.FactionRestriction\", UIItem_FactionRestriction, \"FACTION_RESTRICTION_\"] }\n        ]);\n    }\n    create(value?: PartialMessage<UIItem>): UIItem {\n        const message = { id: 0, name: \"\", icon: \"\", type: 0, armorType: 0, weaponType: 0, handType: 0, rangedWeaponType: 0, stats: [], gemSockets: [], socketBonus: [], randomSuffixOptions: [], weaponDamageMin: 0, weaponDamageMax: 0, weaponSpeed: 0, ilvl: 0, phase: 0, quality: 0, unique: false, heroic: false, randPropPoints: 0, classAllowlist: [], requiredProfession: 0, setName: \"\", expansion: 0, sources: [], factionRestriction: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIItem>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIItem): UIItem {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* string icon */ 3:\n                    message.icon = reader.string();\n                    break;\n                case /* proto.ItemType type */ 4:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.ArmorType armor_type */ 5:\n                    message.armorType = reader.int32();\n                    break;\n                case /* proto.WeaponType weapon_type */ 6:\n                    message.weaponType = reader.int32();\n                    break;\n                case /* proto.HandType hand_type */ 7:\n                    message.handType = reader.int32();\n                    break;\n                case /* proto.RangedWeaponType ranged_weapon_type */ 8:\n                    message.rangedWeaponType = reader.int32();\n                    break;\n                case /* repeated double stats */ 9:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* repeated proto.GemColor gem_sockets */ 10:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.gemSockets.push(reader.int32());\n                    else\n                        message.gemSockets.push(reader.int32());\n                    break;\n                case /* repeated double socketBonus */ 11:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.socketBonus.push(reader.double());\n                    else\n                        message.socketBonus.push(reader.double());\n                    break;\n                case /* repeated int32 random_suffix_options */ 26:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.randomSuffixOptions.push(reader.int32());\n                    else\n                        message.randomSuffixOptions.push(reader.int32());\n                    break;\n                case /* double weapon_damage_min */ 12:\n                    message.weaponDamageMin = reader.double();\n                    break;\n                case /* double weapon_damage_max */ 13:\n                    message.weaponDamageMax = reader.double();\n                    break;\n                case /* double weapon_speed */ 14:\n                    message.weaponSpeed = reader.double();\n                    break;\n                case /* int32 ilvl */ 15:\n                    message.ilvl = reader.int32();\n                    break;\n                case /* int32 phase */ 16:\n                    message.phase = reader.int32();\n                    break;\n                case /* proto.ItemQuality quality */ 17:\n                    message.quality = reader.int32();\n                    break;\n                case /* bool unique */ 18:\n                    message.unique = reader.bool();\n                    break;\n                case /* bool heroic */ 19:\n                    message.heroic = reader.bool();\n                    break;\n                case /* int32 rand_prop_points */ 27:\n                    message.randPropPoints = reader.int32();\n                    break;\n                case /* repeated proto.Class class_allowlist */ 20:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.classAllowlist.push(reader.int32());\n                    else\n                        message.classAllowlist.push(reader.int32());\n                    break;\n                case /* proto.Profession required_profession */ 21:\n                    message.requiredProfession = reader.int32();\n                    break;\n                case /* string set_name */ 22:\n                    message.setName = reader.string();\n                    break;\n                case /* proto.Expansion expansion */ 24:\n                    message.expansion = reader.int32();\n                    break;\n                case /* repeated proto.UIItemSource sources */ 23:\n                    message.sources.push(UIItemSource.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.UIItem.FactionRestriction faction_restriction */ 25:\n                    message.factionRestriction = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* string icon = 3; */\n        if (message.icon !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.icon);\n        /* proto.ItemType type = 4; */\n        if (message.type !== 0)\n            writer.tag(4, WireType.Varint).int32(message.type);\n        /* proto.ArmorType armor_type = 5; */\n        if (message.armorType !== 0)\n            writer.tag(5, WireType.Varint).int32(message.armorType);\n        /* proto.WeaponType weapon_type = 6; */\n        if (message.weaponType !== 0)\n            writer.tag(6, WireType.Varint).int32(message.weaponType);\n        /* proto.HandType hand_type = 7; */\n        if (message.handType !== 0)\n            writer.tag(7, WireType.Varint).int32(message.handType);\n        /* proto.RangedWeaponType ranged_weapon_type = 8; */\n        if (message.rangedWeaponType !== 0)\n            writer.tag(8, WireType.Varint).int32(message.rangedWeaponType);\n        /* repeated double stats = 9; */\n        if (message.stats.length) {\n            writer.tag(9, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* repeated proto.GemColor gem_sockets = 10; */\n        if (message.gemSockets.length) {\n            writer.tag(10, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.gemSockets.length; i++)\n                writer.int32(message.gemSockets[i]);\n            writer.join();\n        }\n        /* repeated double socketBonus = 11; */\n        if (message.socketBonus.length) {\n            writer.tag(11, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.socketBonus.length; i++)\n                writer.double(message.socketBonus[i]);\n            writer.join();\n        }\n        /* repeated int32 random_suffix_options = 26; */\n        if (message.randomSuffixOptions.length) {\n            writer.tag(26, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.randomSuffixOptions.length; i++)\n                writer.int32(message.randomSuffixOptions[i]);\n            writer.join();\n        }\n        /* double weapon_damage_min = 12; */\n        if (message.weaponDamageMin !== 0)\n            writer.tag(12, WireType.Bit64).double(message.weaponDamageMin);\n        /* double weapon_damage_max = 13; */\n        if (message.weaponDamageMax !== 0)\n            writer.tag(13, WireType.Bit64).double(message.weaponDamageMax);\n        /* double weapon_speed = 14; */\n        if (message.weaponSpeed !== 0)\n            writer.tag(14, WireType.Bit64).double(message.weaponSpeed);\n        /* int32 ilvl = 15; */\n        if (message.ilvl !== 0)\n            writer.tag(15, WireType.Varint).int32(message.ilvl);\n        /* int32 phase = 16; */\n        if (message.phase !== 0)\n            writer.tag(16, WireType.Varint).int32(message.phase);\n        /* proto.ItemQuality quality = 17; */\n        if (message.quality !== 0)\n            writer.tag(17, WireType.Varint).int32(message.quality);\n        /* bool unique = 18; */\n        if (message.unique !== false)\n            writer.tag(18, WireType.Varint).bool(message.unique);\n        /* bool heroic = 19; */\n        if (message.heroic !== false)\n            writer.tag(19, WireType.Varint).bool(message.heroic);\n        /* int32 rand_prop_points = 27; */\n        if (message.randPropPoints !== 0)\n            writer.tag(27, WireType.Varint).int32(message.randPropPoints);\n        /* repeated proto.Class class_allowlist = 20; */\n        if (message.classAllowlist.length) {\n            writer.tag(20, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.classAllowlist.length; i++)\n                writer.int32(message.classAllowlist[i]);\n            writer.join();\n        }\n        /* proto.Profession required_profession = 21; */\n        if (message.requiredProfession !== 0)\n            writer.tag(21, WireType.Varint).int32(message.requiredProfession);\n        /* string set_name = 22; */\n        if (message.setName !== \"\")\n            writer.tag(22, WireType.LengthDelimited).string(message.setName);\n        /* proto.Expansion expansion = 24; */\n        if (message.expansion !== 0)\n            writer.tag(24, WireType.Varint).int32(message.expansion);\n        /* repeated proto.UIItemSource sources = 23; */\n        for (let i = 0; i < message.sources.length; i++)\n            UIItemSource.internalBinaryWrite(message.sources[i], writer.tag(23, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UIItem.FactionRestriction faction_restriction = 25; */\n        if (message.factionRestriction !== 0)\n            writer.tag(25, WireType.Varint).int32(message.factionRestriction);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIItem\n */\nexport const UIItem = new UIItem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIItemSource$Type extends MessageType<UIItemSource> {\n    constructor() {\n        super(\"proto.UIItemSource\", [\n            { no: 1, name: \"crafted\", kind: \"message\", oneof: \"source\", T: () => CraftedSource },\n            { no: 2, name: \"drop\", kind: \"message\", oneof: \"source\", T: () => DropSource },\n            { no: 3, name: \"quest\", kind: \"message\", oneof: \"source\", T: () => QuestSource },\n            { no: 4, name: \"sold_by\", kind: \"message\", oneof: \"source\", T: () => SoldBySource },\n            { no: 5, name: \"rep\", kind: \"message\", oneof: \"source\", T: () => RepSource }\n        ]);\n    }\n    create(value?: PartialMessage<UIItemSource>): UIItemSource {\n        const message = { source: { oneofKind: undefined } };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIItemSource>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIItemSource): UIItemSource {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.CraftedSource crafted */ 1:\n                    message.source = {\n                        oneofKind: \"crafted\",\n                        crafted: CraftedSource.internalBinaryRead(reader, reader.uint32(), options, (message.source as any).crafted)\n                    };\n                    break;\n                case /* proto.DropSource drop */ 2:\n                    message.source = {\n                        oneofKind: \"drop\",\n                        drop: DropSource.internalBinaryRead(reader, reader.uint32(), options, (message.source as any).drop)\n                    };\n                    break;\n                case /* proto.QuestSource quest */ 3:\n                    message.source = {\n                        oneofKind: \"quest\",\n                        quest: QuestSource.internalBinaryRead(reader, reader.uint32(), options, (message.source as any).quest)\n                    };\n                    break;\n                case /* proto.SoldBySource sold_by */ 4:\n                    message.source = {\n                        oneofKind: \"soldBy\",\n                        soldBy: SoldBySource.internalBinaryRead(reader, reader.uint32(), options, (message.source as any).soldBy)\n                    };\n                    break;\n                case /* proto.RepSource rep */ 5:\n                    message.source = {\n                        oneofKind: \"rep\",\n                        rep: RepSource.internalBinaryRead(reader, reader.uint32(), options, (message.source as any).rep)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIItemSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.CraftedSource crafted = 1; */\n        if (message.source.oneofKind === \"crafted\")\n            CraftedSource.internalBinaryWrite(message.source.crafted, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DropSource drop = 2; */\n        if (message.source.oneofKind === \"drop\")\n            DropSource.internalBinaryWrite(message.source.drop, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.QuestSource quest = 3; */\n        if (message.source.oneofKind === \"quest\")\n            QuestSource.internalBinaryWrite(message.source.quest, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SoldBySource sold_by = 4; */\n        if (message.source.oneofKind === \"soldBy\")\n            SoldBySource.internalBinaryWrite(message.source.soldBy, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RepSource rep = 5; */\n        if (message.source.oneofKind === \"rep\")\n            RepSource.internalBinaryWrite(message.source.rep, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIItemSource\n */\nexport const UIItemSource = new UIItemSource$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CraftedSource$Type extends MessageType<CraftedSource> {\n    constructor() {\n        super(\"proto.CraftedSource\", [\n            { no: 1, name: \"profession\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 2, name: \"spell_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<CraftedSource>): CraftedSource {\n        const message = { profession: 0, spellId: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<CraftedSource>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CraftedSource): CraftedSource {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Profession profession */ 1:\n                    message.profession = reader.int32();\n                    break;\n                case /* int32 spell_id */ 2:\n                    message.spellId = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: CraftedSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Profession profession = 1; */\n        if (message.profession !== 0)\n            writer.tag(1, WireType.Varint).int32(message.profession);\n        /* int32 spell_id = 2; */\n        if (message.spellId !== 0)\n            writer.tag(2, WireType.Varint).int32(message.spellId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.CraftedSource\n */\nexport const CraftedSource = new CraftedSource$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DropSource$Type extends MessageType<DropSource> {\n    constructor() {\n        super(\"proto.DropSource\", [\n            { no: 1, name: \"difficulty\", kind: \"enum\", T: () => [\"proto.DungeonDifficulty\", DungeonDifficulty] },\n            { no: 2, name: \"npc_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"zone_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"other_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 5, name: \"category\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DropSource>): DropSource {\n        const message = { difficulty: 0, npcId: 0, zoneId: 0, otherName: \"\", category: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DropSource>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DropSource): DropSource {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DungeonDifficulty difficulty */ 1:\n                    message.difficulty = reader.int32();\n                    break;\n                case /* int32 npc_id */ 2:\n                    message.npcId = reader.int32();\n                    break;\n                case /* int32 zone_id */ 3:\n                    message.zoneId = reader.int32();\n                    break;\n                case /* string other_name */ 4:\n                    message.otherName = reader.string();\n                    break;\n                case /* string category */ 5:\n                    message.category = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DropSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DungeonDifficulty difficulty = 1; */\n        if (message.difficulty !== 0)\n            writer.tag(1, WireType.Varint).int32(message.difficulty);\n        /* int32 npc_id = 2; */\n        if (message.npcId !== 0)\n            writer.tag(2, WireType.Varint).int32(message.npcId);\n        /* int32 zone_id = 3; */\n        if (message.zoneId !== 0)\n            writer.tag(3, WireType.Varint).int32(message.zoneId);\n        /* string other_name = 4; */\n        if (message.otherName !== \"\")\n            writer.tag(4, WireType.LengthDelimited).string(message.otherName);\n        /* string category = 5; */\n        if (message.category !== \"\")\n            writer.tag(5, WireType.LengthDelimited).string(message.category);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DropSource\n */\nexport const DropSource = new DropSource$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass QuestSource$Type extends MessageType<QuestSource> {\n    constructor() {\n        super(\"proto.QuestSource\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<QuestSource>): QuestSource {\n        const message = { id: 0, name: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<QuestSource>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuestSource): QuestSource {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: QuestSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.QuestSource\n */\nexport const QuestSource = new QuestSource$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SoldBySource$Type extends MessageType<SoldBySource> {\n    constructor() {\n        super(\"proto.SoldBySource\", [\n            { no: 1, name: \"npc_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"npc_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"zone_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SoldBySource>): SoldBySource {\n        const message = { npcId: 0, npcName: \"\", zoneId: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SoldBySource>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SoldBySource): SoldBySource {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 npc_id */ 1:\n                    message.npcId = reader.int32();\n                    break;\n                case /* string npc_name */ 2:\n                    message.npcName = reader.string();\n                    break;\n                case /* int32 zone_id */ 3:\n                    message.zoneId = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SoldBySource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 npc_id = 1; */\n        if (message.npcId !== 0)\n            writer.tag(1, WireType.Varint).int32(message.npcId);\n        /* string npc_name = 2; */\n        if (message.npcName !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.npcName);\n        /* int32 zone_id = 3; */\n        if (message.zoneId !== 0)\n            writer.tag(3, WireType.Varint).int32(message.zoneId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SoldBySource\n */\nexport const SoldBySource = new SoldBySource$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RepSource$Type extends MessageType<RepSource> {\n    constructor() {\n        super(\"proto.RepSource\", [\n            { no: 1, name: \"rep_faction_id\", kind: \"enum\", T: () => [\"proto.RepFaction\", RepFaction] },\n            { no: 2, name: \"rep_level\", kind: \"enum\", T: () => [\"proto.RepLevel\", RepLevel] },\n            { no: 3, name: \"faction_id\", kind: \"enum\", T: () => [\"proto.Faction\", Faction] }\n        ]);\n    }\n    create(value?: PartialMessage<RepSource>): RepSource {\n        const message = { repFactionId: 0, repLevel: 0, factionId: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RepSource>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RepSource): RepSource {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RepFaction rep_faction_id */ 1:\n                    message.repFactionId = reader.int32();\n                    break;\n                case /* proto.RepLevel rep_level */ 2:\n                    message.repLevel = reader.int32();\n                    break;\n                case /* proto.Faction faction_id */ 3:\n                    message.factionId = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RepSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RepFaction rep_faction_id = 1; */\n        if (message.repFactionId !== 0)\n            writer.tag(1, WireType.Varint).int32(message.repFactionId);\n        /* proto.RepLevel rep_level = 2; */\n        if (message.repLevel !== 0)\n            writer.tag(2, WireType.Varint).int32(message.repLevel);\n        /* proto.Faction faction_id = 3; */\n        if (message.factionId !== 0)\n            writer.tag(3, WireType.Varint).int32(message.factionId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RepSource\n */\nexport const RepSource = new RepSource$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIEnchant$Type extends MessageType<UIEnchant> {\n    constructor() {\n        super(\"proto.UIEnchant\", [\n            { no: 1, name: \"effect_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"item_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"spell_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 5, name: \"icon\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 6, name: \"type\", kind: \"enum\", T: () => [\"proto.ItemType\", ItemType] },\n            { no: 13, name: \"extra_types\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.ItemType\", ItemType] },\n            { no: 7, name: \"enchant_type\", kind: \"enum\", T: () => [\"proto.EnchantType\", EnchantType] },\n            { no: 8, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"quality\", kind: \"enum\", T: () => [\"proto.ItemQuality\", ItemQuality] },\n            { no: 10, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"class_allowlist\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Class\", Class] },\n            { no: 12, name: \"required_profession\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] }\n        ]);\n    }\n    create(value?: PartialMessage<UIEnchant>): UIEnchant {\n        const message = { effectId: 0, itemId: 0, spellId: 0, name: \"\", icon: \"\", type: 0, extraTypes: [], enchantType: 0, stats: [], quality: 0, phase: 0, classAllowlist: [], requiredProfession: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIEnchant>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIEnchant): UIEnchant {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 effect_id */ 1:\n                    message.effectId = reader.int32();\n                    break;\n                case /* int32 item_id */ 2:\n                    message.itemId = reader.int32();\n                    break;\n                case /* int32 spell_id */ 3:\n                    message.spellId = reader.int32();\n                    break;\n                case /* string name */ 4:\n                    message.name = reader.string();\n                    break;\n                case /* string icon */ 5:\n                    message.icon = reader.string();\n                    break;\n                case /* proto.ItemType type */ 6:\n                    message.type = reader.int32();\n                    break;\n                case /* repeated proto.ItemType extra_types */ 13:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.extraTypes.push(reader.int32());\n                    else\n                        message.extraTypes.push(reader.int32());\n                    break;\n                case /* proto.EnchantType enchant_type */ 7:\n                    message.enchantType = reader.int32();\n                    break;\n                case /* repeated double stats */ 8:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* proto.ItemQuality quality */ 9:\n                    message.quality = reader.int32();\n                    break;\n                case /* int32 phase */ 10:\n                    message.phase = reader.int32();\n                    break;\n                case /* repeated proto.Class class_allowlist */ 11:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.classAllowlist.push(reader.int32());\n                    else\n                        message.classAllowlist.push(reader.int32());\n                    break;\n                case /* proto.Profession required_profession */ 12:\n                    message.requiredProfession = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIEnchant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 effect_id = 1; */\n        if (message.effectId !== 0)\n            writer.tag(1, WireType.Varint).int32(message.effectId);\n        /* int32 item_id = 2; */\n        if (message.itemId !== 0)\n            writer.tag(2, WireType.Varint).int32(message.itemId);\n        /* int32 spell_id = 3; */\n        if (message.spellId !== 0)\n            writer.tag(3, WireType.Varint).int32(message.spellId);\n        /* string name = 4; */\n        if (message.name !== \"\")\n            writer.tag(4, WireType.LengthDelimited).string(message.name);\n        /* string icon = 5; */\n        if (message.icon !== \"\")\n            writer.tag(5, WireType.LengthDelimited).string(message.icon);\n        /* proto.ItemType type = 6; */\n        if (message.type !== 0)\n            writer.tag(6, WireType.Varint).int32(message.type);\n        /* repeated proto.ItemType extra_types = 13; */\n        if (message.extraTypes.length) {\n            writer.tag(13, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.extraTypes.length; i++)\n                writer.int32(message.extraTypes[i]);\n            writer.join();\n        }\n        /* proto.EnchantType enchant_type = 7; */\n        if (message.enchantType !== 0)\n            writer.tag(7, WireType.Varint).int32(message.enchantType);\n        /* repeated double stats = 8; */\n        if (message.stats.length) {\n            writer.tag(8, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* proto.ItemQuality quality = 9; */\n        if (message.quality !== 0)\n            writer.tag(9, WireType.Varint).int32(message.quality);\n        /* int32 phase = 10; */\n        if (message.phase !== 0)\n            writer.tag(10, WireType.Varint).int32(message.phase);\n        /* repeated proto.Class class_allowlist = 11; */\n        if (message.classAllowlist.length) {\n            writer.tag(11, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.classAllowlist.length; i++)\n                writer.int32(message.classAllowlist[i]);\n            writer.join();\n        }\n        /* proto.Profession required_profession = 12; */\n        if (message.requiredProfession !== 0)\n            writer.tag(12, WireType.Varint).int32(message.requiredProfession);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIEnchant\n */\nexport const UIEnchant = new UIEnchant$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIGem$Type extends MessageType<UIGem> {\n    constructor() {\n        super(\"proto.UIGem\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"icon\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"color\", kind: \"enum\", T: () => [\"proto.GemColor\", GemColor] },\n            { no: 5, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"quality\", kind: \"enum\", T: () => [\"proto.ItemQuality\", ItemQuality] },\n            { no: 8, name: \"unique\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"required_profession\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] }\n        ]);\n    }\n    create(value?: PartialMessage<UIGem>): UIGem {\n        const message = { id: 0, name: \"\", icon: \"\", color: 0, stats: [], phase: 0, quality: 0, unique: false, requiredProfession: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIGem>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIGem): UIGem {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* string icon */ 3:\n                    message.icon = reader.string();\n                    break;\n                case /* proto.GemColor color */ 4:\n                    message.color = reader.int32();\n                    break;\n                case /* repeated double stats */ 5:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* int32 phase */ 6:\n                    message.phase = reader.int32();\n                    break;\n                case /* proto.ItemQuality quality */ 7:\n                    message.quality = reader.int32();\n                    break;\n                case /* bool unique */ 8:\n                    message.unique = reader.bool();\n                    break;\n                case /* proto.Profession required_profession */ 9:\n                    message.requiredProfession = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIGem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* string icon = 3; */\n        if (message.icon !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.icon);\n        /* proto.GemColor color = 4; */\n        if (message.color !== 0)\n            writer.tag(4, WireType.Varint).int32(message.color);\n        /* repeated double stats = 5; */\n        if (message.stats.length) {\n            writer.tag(5, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* int32 phase = 6; */\n        if (message.phase !== 0)\n            writer.tag(6, WireType.Varint).int32(message.phase);\n        /* proto.ItemQuality quality = 7; */\n        if (message.quality !== 0)\n            writer.tag(7, WireType.Varint).int32(message.quality);\n        /* bool unique = 8; */\n        if (message.unique !== false)\n            writer.tag(8, WireType.Varint).bool(message.unique);\n        /* proto.Profession required_profession = 9; */\n        if (message.requiredProfession !== 0)\n            writer.tag(9, WireType.Varint).int32(message.requiredProfession);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIGem\n */\nexport const UIGem = new UIGem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IconData$Type extends MessageType<IconData> {\n    constructor() {\n        super(\"proto.IconData\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"icon\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"has_buff\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<IconData>): IconData {\n        const message = { id: 0, name: \"\", icon: \"\", hasBuff: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<IconData>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IconData): IconData {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* string icon */ 3:\n                    message.icon = reader.string();\n                    break;\n                case /* bool has_buff */ 4:\n                    message.hasBuff = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: IconData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* string icon = 3; */\n        if (message.icon !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.icon);\n        /* bool has_buff = 4; */\n        if (message.hasBuff !== false)\n            writer.tag(4, WireType.Varint).bool(message.hasBuff);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.IconData\n */\nexport const IconData = new IconData$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GlyphID$Type extends MessageType<GlyphID> {\n    constructor() {\n        super(\"proto.GlyphID\", [\n            { no: 1, name: \"item_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"spell_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<GlyphID>): GlyphID {\n        const message = { itemId: 0, spellId: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<GlyphID>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GlyphID): GlyphID {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 item_id */ 1:\n                    message.itemId = reader.int32();\n                    break;\n                case /* int32 spell_id */ 2:\n                    message.spellId = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: GlyphID, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 item_id = 1; */\n        if (message.itemId !== 0)\n            writer.tag(1, WireType.Varint).int32(message.itemId);\n        /* int32 spell_id = 2; */\n        if (message.spellId !== 0)\n            writer.tag(2, WireType.Varint).int32(message.spellId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.GlyphID\n */\nexport const GlyphID = new GlyphID$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DatabaseFilters$Type extends MessageType<DatabaseFilters> {\n    constructor() {\n        super(\"proto.DatabaseFilters\", [\n            { no: 1, name: \"armor_types\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.ArmorType\", ArmorType] },\n            { no: 2, name: \"weapon_types\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.WeaponType\", WeaponType] },\n            { no: 16, name: \"ranged_weapon_types\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.RangedWeaponType\", RangedWeaponType] },\n            { no: 17, name: \"sources\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.SourceFilterOption\", SourceFilterOption] },\n            { no: 18, name: \"raids\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.RaidFilterOption\", RaidFilterOption] },\n            { no: 19, name: \"faction_restriction\", kind: \"enum\", T: () => [\"proto.UIItem.FactionRestriction\", UIItem_FactionRestriction, \"FACTION_RESTRICTION_\"] },\n            { no: 4, name: \"min_mh_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"max_mh_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"min_oh_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"max_oh_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 14, name: \"min_ranged_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 15, name: \"max_ranged_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"one_handed_weapons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"two_handed_weapons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"matching_gems_only\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"favorite_items\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"favorite_gems\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"favorite_enchants\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DatabaseFilters>): DatabaseFilters {\n        const message = { armorTypes: [], weaponTypes: [], rangedWeaponTypes: [], sources: [], raids: [], factionRestriction: 0, minMhWeaponSpeed: 0, maxMhWeaponSpeed: 0, minOhWeaponSpeed: 0, maxOhWeaponSpeed: 0, minRangedWeaponSpeed: 0, maxRangedWeaponSpeed: 0, oneHandedWeapons: false, twoHandedWeapons: false, matchingGemsOnly: false, favoriteItems: [], favoriteGems: [], favoriteEnchants: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DatabaseFilters>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DatabaseFilters): DatabaseFilters {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.ArmorType armor_types */ 1:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.armorTypes.push(reader.int32());\n                    else\n                        message.armorTypes.push(reader.int32());\n                    break;\n                case /* repeated proto.WeaponType weapon_types */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.weaponTypes.push(reader.int32());\n                    else\n                        message.weaponTypes.push(reader.int32());\n                    break;\n                case /* repeated proto.RangedWeaponType ranged_weapon_types */ 16:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.rangedWeaponTypes.push(reader.int32());\n                    else\n                        message.rangedWeaponTypes.push(reader.int32());\n                    break;\n                case /* repeated proto.SourceFilterOption sources */ 17:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.sources.push(reader.int32());\n                    else\n                        message.sources.push(reader.int32());\n                    break;\n                case /* repeated proto.RaidFilterOption raids */ 18:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.raids.push(reader.int32());\n                    else\n                        message.raids.push(reader.int32());\n                    break;\n                case /* proto.UIItem.FactionRestriction faction_restriction */ 19:\n                    message.factionRestriction = reader.int32();\n                    break;\n                case /* double min_mh_weapon_speed */ 4:\n                    message.minMhWeaponSpeed = reader.double();\n                    break;\n                case /* double max_mh_weapon_speed */ 5:\n                    message.maxMhWeaponSpeed = reader.double();\n                    break;\n                case /* double min_oh_weapon_speed */ 9:\n                    message.minOhWeaponSpeed = reader.double();\n                    break;\n                case /* double max_oh_weapon_speed */ 10:\n                    message.maxOhWeaponSpeed = reader.double();\n                    break;\n                case /* double min_ranged_weapon_speed */ 14:\n                    message.minRangedWeaponSpeed = reader.double();\n                    break;\n                case /* double max_ranged_weapon_speed */ 15:\n                    message.maxRangedWeaponSpeed = reader.double();\n                    break;\n                case /* bool one_handed_weapons */ 6:\n                    message.oneHandedWeapons = reader.bool();\n                    break;\n                case /* bool two_handed_weapons */ 7:\n                    message.twoHandedWeapons = reader.bool();\n                    break;\n                case /* bool matching_gems_only */ 8:\n                    message.matchingGemsOnly = reader.bool();\n                    break;\n                case /* repeated int32 favorite_items */ 11:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.favoriteItems.push(reader.int32());\n                    else\n                        message.favoriteItems.push(reader.int32());\n                    break;\n                case /* repeated int32 favorite_gems */ 12:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.favoriteGems.push(reader.int32());\n                    else\n                        message.favoriteGems.push(reader.int32());\n                    break;\n                case /* repeated string favorite_enchants */ 13:\n                    message.favoriteEnchants.push(reader.string());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DatabaseFilters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.ArmorType armor_types = 1; */\n        if (message.armorTypes.length) {\n            writer.tag(1, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.armorTypes.length; i++)\n                writer.int32(message.armorTypes[i]);\n            writer.join();\n        }\n        /* repeated proto.WeaponType weapon_types = 2; */\n        if (message.weaponTypes.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.weaponTypes.length; i++)\n                writer.int32(message.weaponTypes[i]);\n            writer.join();\n        }\n        /* repeated proto.RangedWeaponType ranged_weapon_types = 16; */\n        if (message.rangedWeaponTypes.length) {\n            writer.tag(16, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.rangedWeaponTypes.length; i++)\n                writer.int32(message.rangedWeaponTypes[i]);\n            writer.join();\n        }\n        /* repeated proto.SourceFilterOption sources = 17; */\n        if (message.sources.length) {\n            writer.tag(17, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.sources.length; i++)\n                writer.int32(message.sources[i]);\n            writer.join();\n        }\n        /* repeated proto.RaidFilterOption raids = 18; */\n        if (message.raids.length) {\n            writer.tag(18, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.raids.length; i++)\n                writer.int32(message.raids[i]);\n            writer.join();\n        }\n        /* proto.UIItem.FactionRestriction faction_restriction = 19; */\n        if (message.factionRestriction !== 0)\n            writer.tag(19, WireType.Varint).int32(message.factionRestriction);\n        /* double min_mh_weapon_speed = 4; */\n        if (message.minMhWeaponSpeed !== 0)\n            writer.tag(4, WireType.Bit64).double(message.minMhWeaponSpeed);\n        /* double max_mh_weapon_speed = 5; */\n        if (message.maxMhWeaponSpeed !== 0)\n            writer.tag(5, WireType.Bit64).double(message.maxMhWeaponSpeed);\n        /* double min_oh_weapon_speed = 9; */\n        if (message.minOhWeaponSpeed !== 0)\n            writer.tag(9, WireType.Bit64).double(message.minOhWeaponSpeed);\n        /* double max_oh_weapon_speed = 10; */\n        if (message.maxOhWeaponSpeed !== 0)\n            writer.tag(10, WireType.Bit64).double(message.maxOhWeaponSpeed);\n        /* double min_ranged_weapon_speed = 14; */\n        if (message.minRangedWeaponSpeed !== 0)\n            writer.tag(14, WireType.Bit64).double(message.minRangedWeaponSpeed);\n        /* double max_ranged_weapon_speed = 15; */\n        if (message.maxRangedWeaponSpeed !== 0)\n            writer.tag(15, WireType.Bit64).double(message.maxRangedWeaponSpeed);\n        /* bool one_handed_weapons = 6; */\n        if (message.oneHandedWeapons !== false)\n            writer.tag(6, WireType.Varint).bool(message.oneHandedWeapons);\n        /* bool two_handed_weapons = 7; */\n        if (message.twoHandedWeapons !== false)\n            writer.tag(7, WireType.Varint).bool(message.twoHandedWeapons);\n        /* bool matching_gems_only = 8; */\n        if (message.matchingGemsOnly !== false)\n            writer.tag(8, WireType.Varint).bool(message.matchingGemsOnly);\n        /* repeated int32 favorite_items = 11; */\n        if (message.favoriteItems.length) {\n            writer.tag(11, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.favoriteItems.length; i++)\n                writer.int32(message.favoriteItems[i]);\n            writer.join();\n        }\n        /* repeated int32 favorite_gems = 12; */\n        if (message.favoriteGems.length) {\n            writer.tag(12, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.favoriteGems.length; i++)\n                writer.int32(message.favoriteGems[i]);\n            writer.join();\n        }\n        /* repeated string favorite_enchants = 13; */\n        for (let i = 0; i < message.favoriteEnchants.length; i++)\n            writer.tag(13, WireType.LengthDelimited).string(message.favoriteEnchants[i]);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DatabaseFilters\n */\nexport const DatabaseFilters = new DatabaseFilters$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimSettings$Type extends MessageType<SimSettings> {\n    constructor() {\n        super(\"proto.SimSettings\", [\n            { no: 1, name: \"iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"fixed_rng_seed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 8, name: \"show_damage_metrics\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"show_threat_metrics\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"show_healing_metrics\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"show_experimental\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"show_quick_swap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"show_ep_values\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"language\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 6, name: \"faction\", kind: \"enum\", T: () => [\"proto.Faction\", Faction] },\n            { no: 10, name: \"filters\", kind: \"message\", T: () => DatabaseFilters }\n        ]);\n    }\n    create(value?: PartialMessage<SimSettings>): SimSettings {\n        const message = { iterations: 0, phase: 0, fixedRngSeed: 0n, showDamageMetrics: false, showThreatMetrics: false, showHealingMetrics: false, showExperimental: false, showQuickSwap: false, showEpValues: false, language: \"\", faction: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimSettings): SimSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 iterations */ 1:\n                    message.iterations = reader.int32();\n                    break;\n                case /* int32 phase */ 2:\n                    message.phase = reader.int32();\n                    break;\n                case /* int64 fixed_rng_seed */ 3:\n                    message.fixedRngSeed = reader.int64().toBigInt();\n                    break;\n                case /* bool show_damage_metrics */ 8:\n                    message.showDamageMetrics = reader.bool();\n                    break;\n                case /* bool show_threat_metrics */ 4:\n                    message.showThreatMetrics = reader.bool();\n                    break;\n                case /* bool show_healing_metrics */ 7:\n                    message.showHealingMetrics = reader.bool();\n                    break;\n                case /* bool show_experimental */ 5:\n                    message.showExperimental = reader.bool();\n                    break;\n                case /* bool show_quick_swap */ 12:\n                    message.showQuickSwap = reader.bool();\n                    break;\n                case /* bool show_ep_values */ 11:\n                    message.showEpValues = reader.bool();\n                    break;\n                case /* string language */ 9:\n                    message.language = reader.string();\n                    break;\n                case /* proto.Faction faction */ 6:\n                    message.faction = reader.int32();\n                    break;\n                case /* proto.DatabaseFilters filters */ 10:\n                    message.filters = DatabaseFilters.internalBinaryRead(reader, reader.uint32(), options, message.filters);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 iterations = 1; */\n        if (message.iterations !== 0)\n            writer.tag(1, WireType.Varint).int32(message.iterations);\n        /* int32 phase = 2; */\n        if (message.phase !== 0)\n            writer.tag(2, WireType.Varint).int32(message.phase);\n        /* int64 fixed_rng_seed = 3; */\n        if (message.fixedRngSeed !== 0n)\n            writer.tag(3, WireType.Varint).int64(message.fixedRngSeed);\n        /* bool show_damage_metrics = 8; */\n        if (message.showDamageMetrics !== false)\n            writer.tag(8, WireType.Varint).bool(message.showDamageMetrics);\n        /* bool show_threat_metrics = 4; */\n        if (message.showThreatMetrics !== false)\n            writer.tag(4, WireType.Varint).bool(message.showThreatMetrics);\n        /* bool show_healing_metrics = 7; */\n        if (message.showHealingMetrics !== false)\n            writer.tag(7, WireType.Varint).bool(message.showHealingMetrics);\n        /* bool show_experimental = 5; */\n        if (message.showExperimental !== false)\n            writer.tag(5, WireType.Varint).bool(message.showExperimental);\n        /* bool show_quick_swap = 12; */\n        if (message.showQuickSwap !== false)\n            writer.tag(12, WireType.Varint).bool(message.showQuickSwap);\n        /* bool show_ep_values = 11; */\n        if (message.showEpValues !== false)\n            writer.tag(11, WireType.Varint).bool(message.showEpValues);\n        /* string language = 9; */\n        if (message.language !== \"\")\n            writer.tag(9, WireType.LengthDelimited).string(message.language);\n        /* proto.Faction faction = 6; */\n        if (message.faction !== 0)\n            writer.tag(6, WireType.Varint).int32(message.faction);\n        /* proto.DatabaseFilters filters = 10; */\n        if (message.filters)\n            DatabaseFilters.internalBinaryWrite(message.filters, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimSettings\n */\nexport const SimSettings = new SimSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IndividualSimSettings$Type extends MessageType<IndividualSimSettings> {\n    constructor() {\n        super(\"proto.IndividualSimSettings\", [\n            { no: 5, name: \"settings\", kind: \"message\", T: () => SimSettings },\n            { no: 1, name: \"raid_buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 8, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 7, name: \"tanks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitReference },\n            { no: 2, name: \"party_buffs\", kind: \"message\", T: () => PartyBuffs },\n            { no: 3, name: \"player\", kind: \"message\", T: () => Player },\n            { no: 4, name: \"encounter\", kind: \"message\", T: () => Encounter },\n            { no: 9, name: \"target_dummies\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"ep_weights_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 11, name: \"ep_ratios\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 12, name: \"dps_ref_stat\", kind: \"enum\", T: () => [\"proto.Stat\", Stat] },\n            { no: 13, name: \"heal_ref_stat\", kind: \"enum\", T: () => [\"proto.Stat\", Stat] },\n            { no: 14, name: \"tank_ref_stat\", kind: \"enum\", T: () => [\"proto.Stat\", Stat] }\n        ]);\n    }\n    create(value?: PartialMessage<IndividualSimSettings>): IndividualSimSettings {\n        const message = { tanks: [], targetDummies: 0, epRatios: [], dpsRefStat: 0, healRefStat: 0, tankRefStat: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<IndividualSimSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndividualSimSettings): IndividualSimSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimSettings settings */ 5:\n                    message.settings = SimSettings.internalBinaryRead(reader, reader.uint32(), options, message.settings);\n                    break;\n                case /* proto.RaidBuffs raid_buffs */ 1:\n                    message.raidBuffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.raidBuffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 8:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* repeated proto.UnitReference tanks */ 7:\n                    message.tanks.push(UnitReference.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.PartyBuffs party_buffs */ 2:\n                    message.partyBuffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.partyBuffs);\n                    break;\n                case /* proto.Player player */ 3:\n                    message.player = Player.internalBinaryRead(reader, reader.uint32(), options, message.player);\n                    break;\n                case /* proto.Encounter encounter */ 4:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                case /* int32 target_dummies */ 9:\n                    message.targetDummies = reader.int32();\n                    break;\n                case /* proto.UnitStats ep_weights_stats */ 10:\n                    message.epWeightsStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.epWeightsStats);\n                    break;\n                case /* repeated double ep_ratios */ 11:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.epRatios.push(reader.double());\n                    else\n                        message.epRatios.push(reader.double());\n                    break;\n                case /* proto.Stat dps_ref_stat */ 12:\n                    message.dpsRefStat = reader.int32();\n                    break;\n                case /* proto.Stat heal_ref_stat */ 13:\n                    message.healRefStat = reader.int32();\n                    break;\n                case /* proto.Stat tank_ref_stat */ 14:\n                    message.tankRefStat = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: IndividualSimSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimSettings settings = 5; */\n        if (message.settings)\n            SimSettings.internalBinaryWrite(message.settings, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidBuffs raid_buffs = 1; */\n        if (message.raidBuffs)\n            RaidBuffs.internalBinaryWrite(message.raidBuffs, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 8; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UnitReference tanks = 7; */\n        for (let i = 0; i < message.tanks.length; i++)\n            UnitReference.internalBinaryWrite(message.tanks[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs party_buffs = 2; */\n        if (message.partyBuffs)\n            PartyBuffs.internalBinaryWrite(message.partyBuffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Player player = 3; */\n        if (message.player)\n            Player.internalBinaryWrite(message.player, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 4; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* int32 target_dummies = 9; */\n        if (message.targetDummies !== 0)\n            writer.tag(9, WireType.Varint).int32(message.targetDummies);\n        /* proto.UnitStats ep_weights_stats = 10; */\n        if (message.epWeightsStats)\n            UnitStats.internalBinaryWrite(message.epWeightsStats, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* repeated double ep_ratios = 11; */\n        if (message.epRatios.length) {\n            writer.tag(11, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.epRatios.length; i++)\n                writer.double(message.epRatios[i]);\n            writer.join();\n        }\n        /* proto.Stat dps_ref_stat = 12; */\n        if (message.dpsRefStat !== 0)\n            writer.tag(12, WireType.Varint).int32(message.dpsRefStat);\n        /* proto.Stat heal_ref_stat = 13; */\n        if (message.healRefStat !== 0)\n            writer.tag(13, WireType.Varint).int32(message.healRefStat);\n        /* proto.Stat tank_ref_stat = 14; */\n        if (message.tankRefStat !== 0)\n            writer.tag(14, WireType.Varint).int32(message.tankRefStat);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.IndividualSimSettings\n */\nexport const IndividualSimSettings = new IndividualSimSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedGearSet$Type extends MessageType<SavedGearSet> {\n    constructor() {\n        super(\"proto.SavedGearSet\", [\n            { no: 1, name: \"gear\", kind: \"message\", T: () => EquipmentSpec },\n            { no: 3, name: \"bonus_stats_stats\", kind: \"message\", T: () => UnitStats }\n        ]);\n    }\n    create(value?: PartialMessage<SavedGearSet>): SavedGearSet {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedGearSet>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedGearSet): SavedGearSet {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.EquipmentSpec gear */ 1:\n                    message.gear = EquipmentSpec.internalBinaryRead(reader, reader.uint32(), options, message.gear);\n                    break;\n                case /* proto.UnitStats bonus_stats_stats */ 3:\n                    message.bonusStatsStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.bonusStatsStats);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedGearSet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.EquipmentSpec gear = 1; */\n        if (message.gear)\n            EquipmentSpec.internalBinaryWrite(message.gear, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats bonus_stats_stats = 3; */\n        if (message.bonusStatsStats)\n            UnitStats.internalBinaryWrite(message.bonusStatsStats, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedGearSet\n */\nexport const SavedGearSet = new SavedGearSet$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedSettings$Type extends MessageType<SavedSettings> {\n    constructor() {\n        super(\"proto.SavedSettings\", [\n            { no: 1, name: \"raid_buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 2, name: \"party_buffs\", kind: \"message\", T: () => PartyBuffs },\n            { no: 7, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 3, name: \"player_buffs\", kind: \"message\", T: () => IndividualBuffs },\n            { no: 4, name: \"consumes\", kind: \"message\", T: () => Consumes },\n            { no: 5, name: \"race\", kind: \"enum\", T: () => [\"proto.Race\", Race] },\n            { no: 9, name: \"professions\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Profession\", Profession] },\n            { no: 18, name: \"enable_item_swap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"item_swap\", kind: \"message\", T: () => ItemSwap },\n            { no: 10, name: \"reaction_time_ms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"channel_clip_delay_ms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"in_front_of_target\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"distance_from_target\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"healing_model\", kind: \"message\", T: () => HealingModel },\n            { no: 19, name: \"dark_intent_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SavedSettings>): SavedSettings {\n        const message = { race: 0, professions: [], enableItemSwap: false, reactionTimeMs: 0, channelClipDelayMs: 0, inFrontOfTarget: false, distanceFromTarget: 0, darkIntentUptime: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedSettings): SavedSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidBuffs raid_buffs */ 1:\n                    message.raidBuffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.raidBuffs);\n                    break;\n                case /* proto.PartyBuffs party_buffs */ 2:\n                    message.partyBuffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.partyBuffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 7:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* proto.IndividualBuffs player_buffs */ 3:\n                    message.playerBuffs = IndividualBuffs.internalBinaryRead(reader, reader.uint32(), options, message.playerBuffs);\n                    break;\n                case /* proto.Consumes consumes */ 4:\n                    message.consumes = Consumes.internalBinaryRead(reader, reader.uint32(), options, message.consumes);\n                    break;\n                case /* proto.Race race */ 5:\n                    message.race = reader.int32();\n                    break;\n                case /* repeated proto.Profession professions */ 9:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.professions.push(reader.int32());\n                    else\n                        message.professions.push(reader.int32());\n                    break;\n                case /* bool enable_item_swap */ 18:\n                    message.enableItemSwap = reader.bool();\n                    break;\n                case /* proto.ItemSwap item_swap */ 17:\n                    message.itemSwap = ItemSwap.internalBinaryRead(reader, reader.uint32(), options, message.itemSwap);\n                    break;\n                case /* int32 reaction_time_ms */ 10:\n                    message.reactionTimeMs = reader.int32();\n                    break;\n                case /* int32 channel_clip_delay_ms */ 14:\n                    message.channelClipDelayMs = reader.int32();\n                    break;\n                case /* bool in_front_of_target */ 11:\n                    message.inFrontOfTarget = reader.bool();\n                    break;\n                case /* double distance_from_target */ 12:\n                    message.distanceFromTarget = reader.double();\n                    break;\n                case /* proto.HealingModel healing_model */ 13:\n                    message.healingModel = HealingModel.internalBinaryRead(reader, reader.uint32(), options, message.healingModel);\n                    break;\n                case /* double dark_intent_uptime */ 19:\n                    message.darkIntentUptime = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidBuffs raid_buffs = 1; */\n        if (message.raidBuffs)\n            RaidBuffs.internalBinaryWrite(message.raidBuffs, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs party_buffs = 2; */\n        if (message.partyBuffs)\n            PartyBuffs.internalBinaryWrite(message.partyBuffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 7; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.IndividualBuffs player_buffs = 3; */\n        if (message.playerBuffs)\n            IndividualBuffs.internalBinaryWrite(message.playerBuffs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Consumes consumes = 4; */\n        if (message.consumes)\n            Consumes.internalBinaryWrite(message.consumes, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Race race = 5; */\n        if (message.race !== 0)\n            writer.tag(5, WireType.Varint).int32(message.race);\n        /* repeated proto.Profession professions = 9; */\n        if (message.professions.length) {\n            writer.tag(9, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.professions.length; i++)\n                writer.int32(message.professions[i]);\n            writer.join();\n        }\n        /* bool enable_item_swap = 18; */\n        if (message.enableItemSwap !== false)\n            writer.tag(18, WireType.Varint).bool(message.enableItemSwap);\n        /* proto.ItemSwap item_swap = 17; */\n        if (message.itemSwap)\n            ItemSwap.internalBinaryWrite(message.itemSwap, writer.tag(17, WireType.LengthDelimited).fork(), options).join();\n        /* int32 reaction_time_ms = 10; */\n        if (message.reactionTimeMs !== 0)\n            writer.tag(10, WireType.Varint).int32(message.reactionTimeMs);\n        /* int32 channel_clip_delay_ms = 14; */\n        if (message.channelClipDelayMs !== 0)\n            writer.tag(14, WireType.Varint).int32(message.channelClipDelayMs);\n        /* bool in_front_of_target = 11; */\n        if (message.inFrontOfTarget !== false)\n            writer.tag(11, WireType.Varint).bool(message.inFrontOfTarget);\n        /* double distance_from_target = 12; */\n        if (message.distanceFromTarget !== 0)\n            writer.tag(12, WireType.Bit64).double(message.distanceFromTarget);\n        /* proto.HealingModel healing_model = 13; */\n        if (message.healingModel)\n            HealingModel.internalBinaryWrite(message.healingModel, writer.tag(13, WireType.LengthDelimited).fork(), options).join();\n        /* double dark_intent_uptime = 19; */\n        if (message.darkIntentUptime !== 0)\n            writer.tag(19, WireType.Bit64).double(message.darkIntentUptime);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedSettings\n */\nexport const SavedSettings = new SavedSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedTalents$Type extends MessageType<SavedTalents> {\n    constructor() {\n        super(\"proto.SavedTalents\", [\n            { no: 1, name: \"talents_string\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"glyphs\", kind: \"message\", T: () => Glyphs }\n        ]);\n    }\n    create(value?: PartialMessage<SavedTalents>): SavedTalents {\n        const message = { talentsString: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedTalents): SavedTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string talents_string */ 1:\n                    message.talentsString = reader.string();\n                    break;\n                case /* proto.Glyphs glyphs */ 2:\n                    message.glyphs = Glyphs.internalBinaryRead(reader, reader.uint32(), options, message.glyphs);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string talents_string = 1; */\n        if (message.talentsString !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.talentsString);\n        /* proto.Glyphs glyphs = 2; */\n        if (message.glyphs)\n            Glyphs.internalBinaryWrite(message.glyphs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedTalents\n */\nexport const SavedTalents = new SavedTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedRotation$Type extends MessageType<SavedRotation> {\n    constructor() {\n        super(\"proto.SavedRotation\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => APLRotation }\n        ]);\n    }\n    create(value?: PartialMessage<SavedRotation>): SavedRotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedRotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedRotation): SavedRotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLRotation rotation */ 1:\n                    message.rotation = APLRotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedRotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLRotation rotation = 1; */\n        if (message.rotation)\n            APLRotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedRotation\n */\nexport const SavedRotation = new SavedRotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlessingsAssignment$Type extends MessageType<BlessingsAssignment> {\n    constructor() {\n        super(\"proto.BlessingsAssignment\", [\n            { no: 1, name: \"blessings\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Blessings\", Blessings] }\n        ]);\n    }\n    create(value?: PartialMessage<BlessingsAssignment>): BlessingsAssignment {\n        const message = { blessings: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BlessingsAssignment>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingsAssignment): BlessingsAssignment {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Blessings blessings */ 1:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.blessings.push(reader.int32());\n                    else\n                        message.blessings.push(reader.int32());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BlessingsAssignment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Blessings blessings = 1; */\n        if (message.blessings.length) {\n            writer.tag(1, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.blessings.length; i++)\n                writer.int32(message.blessings[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BlessingsAssignment\n */\nexport const BlessingsAssignment = new BlessingsAssignment$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlessingsAssignments$Type extends MessageType<BlessingsAssignments> {\n    constructor() {\n        super(\"proto.BlessingsAssignments\", [\n            { no: 1, name: \"paladins\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BlessingsAssignment }\n        ]);\n    }\n    create(value?: PartialMessage<BlessingsAssignments>): BlessingsAssignments {\n        const message = { paladins: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BlessingsAssignments>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingsAssignments): BlessingsAssignments {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.BlessingsAssignment paladins */ 1:\n                    message.paladins.push(BlessingsAssignment.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BlessingsAssignments, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.BlessingsAssignment paladins = 1; */\n        for (let i = 0; i < message.paladins.length; i++)\n            BlessingsAssignment.internalBinaryWrite(message.paladins[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BlessingsAssignments\n */\nexport const BlessingsAssignments = new BlessingsAssignments$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedEncounter$Type extends MessageType<SavedEncounter> {\n    constructor() {\n        super(\"proto.SavedEncounter\", [\n            { no: 1, name: \"encounter\", kind: \"message\", T: () => Encounter }\n        ]);\n    }\n    create(value?: PartialMessage<SavedEncounter>): SavedEncounter {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedEncounter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedEncounter): SavedEncounter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Encounter encounter */ 1:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedEncounter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Encounter encounter = 1; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedEncounter\n */\nexport const SavedEncounter = new SavedEncounter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedRaid$Type extends MessageType<SavedRaid> {\n    constructor() {\n        super(\"proto.SavedRaid\", [\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid },\n            { no: 3, name: \"blessings\", kind: \"message\", T: () => BlessingsAssignments },\n            { no: 4, name: \"faction\", kind: \"enum\", T: () => [\"proto.Faction\", Faction] },\n            { no: 5, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SavedRaid>): SavedRaid {\n        const message = { faction: 0, phase: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedRaid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedRaid): SavedRaid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                case /* proto.BlessingsAssignments blessings */ 3:\n                    message.blessings = BlessingsAssignments.internalBinaryRead(reader, reader.uint32(), options, message.blessings);\n                    break;\n                case /* proto.Faction faction */ 4:\n                    message.faction = reader.int32();\n                    break;\n                case /* int32 phase */ 5:\n                    message.phase = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedRaid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BlessingsAssignments blessings = 3; */\n        if (message.blessings)\n            BlessingsAssignments.internalBinaryWrite(message.blessings, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Faction faction = 4; */\n        if (message.faction !== 0)\n            writer.tag(4, WireType.Varint).int32(message.faction);\n        /* int32 phase = 5; */\n        if (message.phase !== 0)\n            writer.tag(5, WireType.Varint).int32(message.phase);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedRaid\n */\nexport const SavedRaid = new SavedRaid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidSimSettings$Type extends MessageType<RaidSimSettings> {\n    constructor() {\n        super(\"proto.RaidSimSettings\", [\n            { no: 5, name: \"settings\", kind: \"message\", T: () => SimSettings },\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid },\n            { no: 3, name: \"blessings\", kind: \"message\", T: () => BlessingsAssignments },\n            { no: 4, name: \"encounter\", kind: \"message\", T: () => Encounter }\n        ]);\n    }\n    create(value?: PartialMessage<RaidSimSettings>): RaidSimSettings {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidSimSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidSimSettings): RaidSimSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimSettings settings */ 5:\n                    message.settings = SimSettings.internalBinaryRead(reader, reader.uint32(), options, message.settings);\n                    break;\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                case /* proto.BlessingsAssignments blessings */ 3:\n                    message.blessings = BlessingsAssignments.internalBinaryRead(reader, reader.uint32(), options, message.blessings);\n                    break;\n                case /* proto.Encounter encounter */ 4:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidSimSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimSettings settings = 5; */\n        if (message.settings)\n            SimSettings.internalBinaryWrite(message.settings, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BlessingsAssignments blessings = 3; */\n        if (message.blessings)\n            BlessingsAssignments.internalBinaryWrite(message.blessings, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 4; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidSimSettings\n */\nexport const RaidSimSettings = new RaidSimSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimRun$Type extends MessageType<SimRun> {\n    constructor() {\n        super(\"proto.SimRun\", [\n            { no: 1, name: \"request\", kind: \"message\", T: () => RaidSimRequest },\n            { no: 2, name: \"result\", kind: \"message\", T: () => RaidSimResult }\n        ]);\n    }\n    create(value?: PartialMessage<SimRun>): SimRun {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimRun>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimRun): SimRun {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidSimRequest request */ 1:\n                    message.request = RaidSimRequest.internalBinaryRead(reader, reader.uint32(), options, message.request);\n                    break;\n                case /* proto.RaidSimResult result */ 2:\n                    message.result = RaidSimResult.internalBinaryRead(reader, reader.uint32(), options, message.result);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimRun, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidSimRequest request = 1; */\n        if (message.request)\n            RaidSimRequest.internalBinaryWrite(message.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidSimResult result = 2; */\n        if (message.result)\n            RaidSimResult.internalBinaryWrite(message.result, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimRun\n */\nexport const SimRun = new SimRun$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimRunData$Type extends MessageType<SimRunData> {\n    constructor() {\n        super(\"proto.SimRunData\", [\n            { no: 1, name: \"run\", kind: \"message\", T: () => SimRun },\n            { no: 2, name: \"reference_run\", kind: \"message\", T: () => SimRun }\n        ]);\n    }\n    create(value?: PartialMessage<SimRunData>): SimRunData {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimRunData>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimRunData): SimRunData {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimRun run */ 1:\n                    message.run = SimRun.internalBinaryRead(reader, reader.uint32(), options, message.run);\n                    break;\n                case /* proto.SimRun reference_run */ 2:\n                    message.referenceRun = SimRun.internalBinaryRead(reader, reader.uint32(), options, message.referenceRun);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimRunData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimRun run = 1; */\n        if (message.run)\n            SimRun.internalBinaryWrite(message.run, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimRun reference_run = 2; */\n        if (message.referenceRun)\n            SimRun.internalBinaryWrite(message.referenceRun, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimRunData\n */\nexport const SimRunData = new SimRunData$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DetailedResultsUpdate$Type extends MessageType<DetailedResultsUpdate> {\n    constructor() {\n        super(\"proto.DetailedResultsUpdate\", [\n            { no: 1, name: \"run_data\", kind: \"message\", oneof: \"data\", T: () => SimRunData },\n            { no: 2, name: \"settings\", kind: \"message\", oneof: \"data\", T: () => SimSettings }\n        ]);\n    }\n    create(value?: PartialMessage<DetailedResultsUpdate>): DetailedResultsUpdate {\n        const message = { data: { oneofKind: undefined } };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DetailedResultsUpdate>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DetailedResultsUpdate): DetailedResultsUpdate {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimRunData run_data */ 1:\n                    message.data = {\n                        oneofKind: \"runData\",\n                        runData: SimRunData.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).runData)\n                    };\n                    break;\n                case /* proto.SimSettings settings */ 2:\n                    message.data = {\n                        oneofKind: \"settings\",\n                        settings: SimSettings.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).settings)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DetailedResultsUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimRunData run_data = 1; */\n        if (message.data.oneofKind === \"runData\")\n            SimRunData.internalBinaryWrite(message.data.runData, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimSettings settings = 2; */\n        if (message.data.oneofKind === \"settings\")\n            SimSettings.internalBinaryWrite(message.data.settings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DetailedResultsUpdate\n */\nexport const DetailedResultsUpdate = new DetailedResultsUpdate$Type();\n","// eslint-disable-next-line @typescript-eslint/no-empty-function\nexport const noop = () => {};\n\n// Returns if the two items are equal, or if both are null / undefined.\nexport function equalsOrBothNull<T>(a: T, b: T, comparator?: (_a: NonNullable<T>, _b: NonNullable<T>) => boolean): boolean {\n\tif (a == null && b == null) return true;\n\n\tif (a == null || b == null) return false;\n\n\treturn (comparator || ((_a: NonNullable<T>, _b: NonNullable<T>) => a == b))(a!, b!);\n}\n\n// Default comparator function for strings. Used with functions like Array.sort().\nexport function stringComparator(a: string, b: string): number {\n\tif (a < b) {\n\t\treturn -1;\n\t} else if (b < a) {\n\t\treturn 1;\n\t} else {\n\t\treturn 0;\n\t}\n}\n\n// Sorts an objectArray by a property. Returns a new array.\n// Can be called recursively.\nexport function sortByProperty(objArray: any[], prop: string) {\n\tif (!Array.isArray(objArray)) throw new Error('FIRST ARGUMENT NOT AN ARRAY');\n\tconst clone = objArray.slice(0);\n\tconst direct = arguments.length > 2 ? arguments[2] : 1; //Default to ascending\n\tconst propPath = prop.constructor === Array ? prop : prop.split('.');\n\tclone.sort(function (a, b) {\n\t\tfor (const p in propPath) {\n\t\t\tif (a[propPath[p]] && b[propPath[p]]) {\n\t\t\t\ta = a[propPath[p]];\n\t\t\t\tb = b[propPath[p]];\n\t\t\t}\n\t\t}\n\t\t// convert numeric strings to integers\n\t\ta = a.toString().match(/^\\d+$/) ? +a : a;\n\t\tb = b.toString().match(/^\\d+$/) ? +b : b;\n\t\treturn a < b ? -1 * direct : a > b ? 1 * direct : 0;\n\t});\n\treturn clone;\n}\n\nexport function sum(arr: Array<number>): number {\n\treturn arr.reduce((total, cur) => total + cur, 0);\n}\n\n// Returns the index of maximum value, or null if empty.\nexport function maxIndex(arr: Array<number>): number | null {\n\treturn arr.reduce((cur, v, i, arr) => (v > arr[cur] ? i : cur), 0);\n}\n\n// Swaps two elements in the given array.\nexport function swap<T>(arr: Array<T>, i: number, j: number) {\n\t[arr[i], arr[j]] = [arr[j], arr[i]];\n}\n\n// Returns a new array containing only elements present in both a and b.\nexport function arrayEquals<T>(a: Array<T>, b: Array<T>, comparator?: (a: T, b: T) => boolean): boolean {\n\tcomparator = comparator || ((a: T, b: T) => a == b);\n\treturn a.length == b.length && a.every((val, i) => comparator!(val, b[i]));\n}\n\n// Returns a new array containing only elements present in both a and b.\nexport function intersection<T>(a: Array<T>, b: Array<T>): Array<T> {\n\treturn a.filter(value => b.includes(value));\n}\n\n// Returns a new array containing only distinct elements of arr.\n// comparator should return true if the two elements are considered equal, and false otherwise.\nexport function distinct<T>(arr: Array<T>, comparator?: (a: T, b: T) => boolean): Array<T> {\n\tcomparator = comparator || ((a: T, b: T) => a == b);\n\tconst distinctArr: Array<T> = [];\n\tarr.forEach(val => {\n\t\tif (distinctArr.find(dVal => comparator!(dVal, val)) == null) {\n\t\t\tdistinctArr.push(val);\n\t\t}\n\t});\n\treturn distinctArr;\n}\n\n// Splits an array into buckets, where elements are placed in the same bucket if the\n// toString function returns the same value.\nexport function bucket<T>(arr: Array<T>, toString: (val: T) => string): Record<string, Array<T>> {\n\tconst buckets: Record<string, Array<T>> = {};\n\tarr.forEach(val => {\n\t\tconst valString = toString(val);\n\t\tif (buckets[valString]) {\n\t\t\tbuckets[valString].push(val);\n\t\t} else {\n\t\t\tbuckets[valString] = [val];\n\t\t}\n\t});\n\treturn buckets;\n}\n\nexport function stDevToConf90(stDev: number, N: number) {\n\treturn (1.645 * stDev) / Math.sqrt(N);\n}\n\nexport async function wait(ms: number): Promise<void> {\n\treturn new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// Only works for numeric enums\nexport function getEnumValues<E>(enumType: any): Array<E> {\n\treturn Object.keys(enumType)\n\t\t.filter(key => !isNaN(Number(enumType[key])))\n\t\t.map(key => parseInt(enumType[key]) as unknown as E);\n}\n\n// Whether a click event was a right click.\nexport function isRightClick(event: MouseEvent): boolean {\n\treturn event.button == 2;\n}\n\n// Converts from '#ffffff' --> 'rgba(255, 255, 255, alpha)'\nexport function hexToRgba(hex: string, alpha: number): string {\n\tif (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n\t\tlet parts = hex.substring(1).split('');\n\t\tif (parts.length == 3) {\n\t\t\tparts = [parts[0], parts[0], parts[1], parts[1], parts[2], parts[2]];\n\t\t}\n\t\tconst c: any = '0x' + parts.join('');\n\t\treturn 'rgba(' + [(c >> 16) & 255, (c >> 8) & 255, c & 255].join(',') + ',' + alpha + ')';\n\t}\n\tthrow new Error('Invalid hex color: ' + hex);\n}\n\nexport function camelToSnakeCase(str: string): string {\n\tlet result = str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n\tif (result.startsWith('_')) {\n\t\tresult = result.substring(1);\n\t}\n\treturn result;\n}\n\nexport function downloadJson(json: any, fileName: string) {\n\tdownloadString(JSON.stringify(json, null, 2), fileName);\n}\nexport function downloadString(data: string, fileName: string) {\n\tconst dataStr = 'data:text/json;charset=utf-8,' + encodeURIComponent(data);\n\tconst downloadAnchorNode = document.createElement('a');\n\tdownloadAnchorNode.setAttribute('href', dataStr);\n\tdownloadAnchorNode.setAttribute('download', fileName);\n\tdocument.body.appendChild(downloadAnchorNode); // required for firefox\n\tdownloadAnchorNode.click();\n\tdownloadAnchorNode.remove();\n}\n\nexport function formatDeltaTextElem(elem: HTMLElement, before: number, after: number, precision: number, lowerIsBetter?: boolean, noColor?: boolean) {\n\tconst delta = after - before;\n\tlet deltaStr = delta.toFixed(precision);\n\tif (delta >= 0) {\n\t\tdeltaStr = '+' + deltaStr;\n\t}\n\telem.textContent = deltaStr;\n\n\tif (noColor || delta == 0) {\n\t\telem.classList.remove('positive');\n\t\telem.classList.remove('negative');\n\t} else if (delta > 0 != Boolean(lowerIsBetter)) {\n\t\telem.classList.remove('negative');\n\t\telem.classList.add('positive');\n\t} else {\n\t\telem.classList.remove('positive');\n\t\telem.classList.add('negative');\n\t}\n}\n\n// Returns all N pick K permutations of the elements in arr of size N.\nexport function permutations<T>(arr: Array<T>, k: number): Array<Array<T>> {\n\tif (k == 0) {\n\t\treturn [];\n\t} else if (k == 1) {\n\t\treturn arr.map(v => [v]);\n\t} else {\n\t\treturn arr\n\t\t\t.map((v, i) => {\n\t\t\t\tconst withoutThisElem = arr.slice();\n\t\t\t\twithoutThisElem.splice(i, 1);\n\t\t\t\tconst permutationsWithoutThisElem = permutations(withoutThisElem, k - 1);\n\t\t\t\treturn permutationsWithoutThisElem.map(perm => [v].concat(perm));\n\t\t\t})\n\t\t\t.flat();\n\t}\n}\n\n// Returns all N choose K combinations of the elements in arr of size N.\nexport function combinations<T>(arr: Array<T>, k: number, comparator?: (_a: T, _b: T) => number): Array<Array<T>> {\n\tconst perms = permutations(arr, k);\n\tconst sorted = perms.map(permutation => permutation.sort(comparator));\n\n\tconst equals: (_a: T, _b: T) => boolean = comparator ? (a, b) => comparator(a, b) == 0 : (a, b) => a == b;\n\treturn distinct(sorted, (permutationA, permutationB) => permutationA.every((elem, i) => equals(elem, permutationB[i])));\n}\n\n// Returns all N pick K permutations of the elements in arr of size N, allowing duplicates.\nexport function permutationsWithDups<T>(arr: Array<T>, k: number): Array<Array<T>> {\n\tif (k == 0) {\n\t\treturn [];\n\t} else if (k == 1) {\n\t\treturn arr.map(v => [v]);\n\t} else {\n\t\tconst smaller = permutationsWithDups(arr, k - 1);\n\t\treturn arr\n\t\t\t.map(v => {\n\t\t\t\treturn smaller.map(permutation => {\n\t\t\t\t\tconst newPerm = permutation.slice();\n\t\t\t\t\tnewPerm.push(v);\n\t\t\t\t\treturn newPerm;\n\t\t\t\t});\n\t\t\t})\n\t\t\t.flat();\n\t}\n}\n\n// Returns all N choose K combinations of the elements in arr of size N, allowing duplicates.\nexport function combinationsWithDups<T>(arr: Array<T>, k: number): Array<Array<T>> {\n\tconst perms = permutationsWithDups(arr, k);\n\tconst sorted = perms.map(permutation => permutation.sort());\n\treturn distinct(sorted, (permutationA, permutationB) => permutationA.every((elem, i) => elem == permutationB[i]));\n}\n\n// Converts a Uint8Array into a hex string.\nexport function buf2hex(data: Uint8Array): string {\n\treturn [...data].map(x => x.toString(16).padStart(2, '0')).join('');\n}\n\nconst randomStringChars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_+';\nexport function randomString(len?: number): string {\n\tlet str = '';\n\tconst strLen = len || 10;\n\tfor (let i = 0; i < strLen; i++) {\n\t\tstr += randomStringChars[Math.floor(Math.random() * randomStringChars.length)];\n\t}\n\treturn str;\n}\n\n// Allows replacement of stringified objects based on the key and path.\n// If handler returns a string, that string is used. Otherwise, the normal JSON.stringify result is returned.\nexport function jsonStringifyCustom(value: any, indent: number, handler: (value: any, path: Array<string>) => string | undefined | void): string {\n\tconst indentStr = ' '.repeat(indent);\n\treturn jsonStringifyCustomHelper(value, indentStr, [], handler);\n}\nfunction jsonStringifyCustomHelper(\n\tvalue: any,\n\tindentStr: string,\n\tpath: Array<string>,\n\thandler: (value: any, path: Array<string>) => string | undefined | void,\n): string {\n\tconst handlerResult = handler(value, path);\n\tif (handlerResult != null) {\n\t\treturn handlerResult;\n\t}\n\n\tif (!(value instanceof Object)) {\n\t\treturn JSON.stringify(value);\n\t} else if (value instanceof Array) {\n\t\tlet str = '[\\n';\n\t\tconst lines = value.map(\n\t\t\t(e, i) =>\n\t\t\t\t`${indentStr.repeat(path.length + 1)}${jsonStringifyCustomHelper(e, indentStr, path.slice().concat([i + '']), handler)}${\n\t\t\t\t\ti == value.length - 1 ? '' : ','\n\t\t\t\t}\\n`,\n\t\t);\n\t\tstr += lines.join('');\n\t\tstr += indentStr.repeat(path.length) + ']';\n\t\treturn str;\n\t} else {\n\t\t// Object\n\t\tlet str = '{\\n';\n\t\tconst len = Object.keys(value).length;\n\t\tconst lines = Object.entries(value).map(\n\t\t\t([fieldKey, fieldValue], i) =>\n\t\t\t\t`${indentStr.repeat(path.length + 1)}\"${fieldKey}\": ${jsonStringifyCustomHelper(\n\t\t\t\t\tfieldValue,\n\t\t\t\t\tindentStr,\n\t\t\t\t\tpath.slice().concat([fieldKey]),\n\t\t\t\t\thandler,\n\t\t\t\t)}${i == len - 1 ? '' : ','}\\n`,\n\t\t);\n\t\tstr += lines.join('');\n\t\tstr += indentStr.repeat(path.length) + '}';\n\t\treturn str;\n\t}\n}\n\n// Pretty-prints the value in JSON form, but does not prettify (flattens) sub-values where handler returns true.\nexport function jsonStringifyWithFlattenedPaths(value: any, indent: number, handler: (value: any, path: Array<string>) => boolean): string {\n\treturn jsonStringifyCustom(value, indent, (value, path) => (handler(value, path) ? JSON.stringify(value) : undefined));\n}\n\nexport function htmlDecode(input: string) {\n\tconst doc = new DOMParser().parseFromString(input, 'text/html');\n\treturn doc.documentElement.textContent;\n}\n\n// JavaScript's built in modulo (%) has several issues. This is a fix that works similar to the intuitive way modulo works in most languages\nexport const mod = (n: number, m: number): number => {\n\treturn ((n % m) + m) % m;\n};\n\ntype Environments = 'local' | 'external';\n\nconst hostname = window.location.hostname;\nexport const getEnvironment = (): Environments => {\n\tif (hostname.includes('localhost')) return 'local';\n\treturn 'external';\n};\n\nexport const isLocal = () => getEnvironment() === 'local';\nexport const isExternal = () => getEnvironment() === 'external';\n","import { REPO_NAME } from '../constants/other.js';\nimport { PlayerClass } from '../player_class.js';\nimport { PlayerClasses } from '../player_classes';\nimport { PlayerSpec } from '../player_spec.js';\nimport { PlayerSpecs } from '../player_specs';\nimport { Player, ResourceType } from '../proto/api.js';\nimport {\n\tClass,\n\tEnchantType,\n\tFaction,\n\tHandType,\n\tItemSlot,\n\tItemType,\n\tRace,\n\tRangedWeaponType,\n\tSpec,\n\tUnitReference,\n\tUnitReference_Type,\n\tWeaponType,\n} from '../proto/common.js';\nimport {\n\tBloodDeathKnight,\n\tBloodDeathKnight_Options,\n\tBloodDeathKnight_Rotation,\n\tDeathKnightOptions,\n\tDeathKnightTalents,\n\tFrostDeathKnight,\n\tFrostDeathKnight_Options,\n\tFrostDeathKnight_Rotation,\n\tUnholyDeathKnight,\n\tUnholyDeathKnight_Options,\n\tUnholyDeathKnight_Rotation,\n} from '../proto/death_knight.js';\nimport {\n\tBalanceDruid,\n\tBalanceDruid_Options,\n\tBalanceDruid_Rotation,\n\tDruidOptions,\n\tDruidTalents,\n\tFeralDruid,\n\tFeralDruid_Options,\n\tFeralDruid_Rotation,\n\tRestorationDruid,\n\tRestorationDruid_Options,\n\tRestorationDruid_Rotation,\n} from '../proto/druid.js';\nimport {\n\tBeastMasteryHunter,\n\tBeastMasteryHunter_Options,\n\tBeastMasteryHunter_Rotation,\n\tHunterOptions,\n\tHunterTalents,\n\tMarksmanshipHunter,\n\tMarksmanshipHunter_Options,\n\tMarksmanshipHunter_Rotation,\n\tSurvivalHunter,\n\tSurvivalHunter_Options,\n\tSurvivalHunter_Rotation,\n} from '../proto/hunter.js';\nimport {\n\tArcaneMage,\n\tArcaneMage_Options,\n\tArcaneMage_Rotation,\n\tFireMage,\n\tFireMage_Options,\n\tFireMage_Rotation,\n\tFrostMage,\n\tFrostMage_Options,\n\tFrostMage_Rotation,\n\tMageOptions,\n\tMageTalents,\n} from '../proto/mage.js';\nimport {\n\tBlessings,\n\tHolyPaladin,\n\tHolyPaladin_Options,\n\tHolyPaladin_Rotation,\n\tPaladinOptions,\n\tPaladinTalents,\n\tProtectionPaladin,\n\tProtectionPaladin_Options,\n\tProtectionPaladin_Rotation,\n\tRetributionPaladin,\n\tRetributionPaladin_Options,\n\tRetributionPaladin_Rotation,\n} from '../proto/paladin.js';\nimport {\n\tDisciplinePriest,\n\tDisciplinePriest_Options,\n\tDisciplinePriest_Rotation,\n\tHolyPriest,\n\tHolyPriest_Options,\n\tHolyPriest_Rotation,\n\tPriestOptions,\n\tPriestTalents,\n\tShadowPriest,\n\tShadowPriest_Options,\n\tShadowPriest_Rotation,\n} from '../proto/priest.js';\nimport {\n\tAssassinationRogue,\n\tAssassinationRogue_Options,\n\tAssassinationRogue_Rotation,\n\tCombatRogue,\n\tCombatRogue_Options,\n\tCombatRogue_Rotation,\n\tRogueOptions,\n\tRogueTalents,\n\tSubtletyRogue,\n\tSubtletyRogue_Options,\n\tSubtletyRogue_Rotation,\n} from '../proto/rogue.js';\nimport {\n\tElementalShaman,\n\tElementalShaman_Options,\n\tElementalShaman_Rotation,\n\tEnhancementShaman,\n\tEnhancementShaman_Options,\n\tEnhancementShaman_Rotation,\n\tRestorationShaman,\n\tRestorationShaman_Options,\n\tRestorationShaman_Rotation,\n\tShamanOptions,\n\tShamanTalents,\n} from '../proto/shaman.js';\nimport { BlessingsAssignment, BlessingsAssignments, UIEnchant as Enchant, UIGem as Gem, UIItem as Item } from '../proto/ui.js';\nimport {\n\tAfflictionWarlock,\n\tAfflictionWarlock_Options,\n\tAfflictionWarlock_Rotation,\n\tDemonologyWarlock,\n\tDemonologyWarlock_Options,\n\tDemonologyWarlock_Rotation,\n\tDestructionWarlock,\n\tDestructionWarlock_Options,\n\tDestructionWarlock_Rotation,\n\tWarlockOptions,\n\tWarlockTalents,\n} from '../proto/warlock.js';\nimport {\n\tArmsWarrior,\n\tArmsWarrior_Options,\n\tArmsWarrior_Rotation,\n\tFuryWarrior,\n\tFuryWarrior_Options,\n\tFuryWarrior_Rotation,\n\tProtectionWarrior,\n\tProtectionWarrior_Options,\n\tProtectionWarrior_Rotation,\n\tWarriorOptions,\n\tWarriorTalents,\n} from '../proto/warrior.js';\nimport { getEnumValues, intersection, maxIndex, sum } from '../utils.js';\nimport { Stats } from './stats.js';\n\nexport const NUM_SPECS = getEnumValues(Spec).length;\n\nexport const raidSimIcon = '/cata/assets/img/raid_icon.png';\nexport const raidSimLabel = 'Full Raid Sim';\n\n// Converts '1231321-12313123-0' to [40, 21, 0].\nexport function getTalentTreePoints(talentsString: string): Array<number> {\n\tconst trees = talentsString.split('-');\n\tif (trees.length == 2) {\n\t\ttrees.push('0');\n\t}\n\treturn trees.map(tree => sum([...tree].map(char => parseInt(char) || 0)));\n}\n\nexport function getTalentPoints(talentsString: string): number {\n\treturn sum(getTalentTreePoints(talentsString));\n}\n\n// Returns the index of the talent tree (0, 1, or 2) that has the most points.\nexport function getTalentTree(talentsString: string): number {\n\tconst points = getTalentTreePoints(talentsString);\n\treturn maxIndex(points) || 0;\n}\n\n// Gets the URL for the individual sim corresponding to the given spec.\nexport function getSpecSiteUrl(classString: string, specString: string): string {\n\tconst specSiteUrlTemplate = new URL(`${window.location.protocol}//${window.location.host}/${REPO_NAME}/CLASS/SPEC/`).toString();\n\treturn specSiteUrlTemplate.replace('CLASS', classString).replace('SPEC', specString);\n}\nexport const raidSimSiteUrl = new URL(`${window.location.protocol}//${window.location.host}/${REPO_NAME}/raid/`).toString();\n\nexport function textCssClassForClass<ClassType extends Class>(playerClass: PlayerClass<ClassType>): string {\n\treturn `text-${PlayerClasses.getCssClass(playerClass)}`;\n}\nexport function textCssClassForSpec<SpecType extends Spec>(playerSpec: PlayerSpec<SpecType>): string {\n\treturn textCssClassForClass(PlayerSpecs.getPlayerClass(playerSpec));\n}\n\n// Placeholder classes to fill the Unknown Spec Type Functions entry below\ntype UnknownSpecs = Spec.SpecUnknown;\nclass UnknownRotation {\n\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\tconstructor() {}\n}\nclass UnknownTalents {\n\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\tconstructor() {}\n}\nclass UnknownClassOptions {\n\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\tconstructor() {}\n}\nclass UnknownSpecOptions {\n\tclassOptions: UnknownClassOptions;\n\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\tconstructor() {\n\t\tthis.classOptions = new UnknownClassOptions();\n\t}\n}\n\nexport type DeathKnightSpecs = Spec.SpecBloodDeathKnight | Spec.SpecFrostDeathKnight | Spec.SpecUnholyDeathKnight;\nexport type DruidSpecs = Spec.SpecBalanceDruid | Spec.SpecFeralDruid | Spec.SpecRestorationDruid;\nexport type HunterSpecs = Spec.SpecBeastMasteryHunter | Spec.SpecMarksmanshipHunter | Spec.SpecSurvivalHunter;\nexport type MageSpecs = Spec.SpecArcaneMage | Spec.SpecFireMage | Spec.SpecFrostMage;\nexport type PaladinSpecs = Spec.SpecHolyPaladin | Spec.SpecRetributionPaladin | Spec.SpecProtectionPaladin;\nexport type PriestSpecs = Spec.SpecDisciplinePriest | Spec.SpecHolyPriest | Spec.SpecShadowPriest;\nexport type RogueSpecs = Spec.SpecAssassinationRogue | Spec.SpecCombatRogue | Spec.SpecSubtletyRogue;\nexport type ShamanSpecs = Spec.SpecElementalShaman | Spec.SpecEnhancementShaman | Spec.SpecRestorationShaman;\nexport type WarlockSpecs = Spec.SpecAfflictionWarlock | Spec.SpecDemonologyWarlock | Spec.SpecDestructionWarlock;\nexport type WarriorSpecs = Spec.SpecArmsWarrior | Spec.SpecFuryWarrior | Spec.SpecProtectionWarrior;\n\nexport type ClassSpecs<T extends Class> = T extends Class.ClassDeathKnight\n\t? DeathKnightSpecs\n\t: T extends Class.ClassDruid\n\t? DruidSpecs\n\t: T extends Class.ClassHunter\n\t? HunterSpecs\n\t: T extends Class.ClassMage\n\t? MageSpecs\n\t: T extends Class.ClassPaladin\n\t? PaladinSpecs\n\t: T extends Class.ClassPriest\n\t? PriestSpecs\n\t: T extends Class.ClassRogue\n\t? RogueSpecs\n\t: T extends Class.ClassShaman\n\t? ShamanSpecs\n\t: T extends Class.ClassWarlock\n\t? WarlockSpecs\n\t: T extends Class.ClassWarrior\n\t? WarriorSpecs\n\t: // Should never reach this case\n\t  UnknownSpecs;\n\nexport type SpecClasses<T extends Spec> = T extends DeathKnightSpecs\n\t? Class.ClassDeathKnight\n\t: // Druid\n\tT extends DruidSpecs\n\t? Class.ClassDruid\n\t: // Hunter\n\tT extends HunterSpecs\n\t? Class.ClassHunter\n\t: // Mage\n\tT extends MageSpecs\n\t? Class.ClassMage\n\t: // Paladin\n\tT extends PaladinSpecs\n\t? Class.ClassPaladin\n\t: // Priest\n\tT extends PriestSpecs\n\t? Class.ClassPriest\n\t: // Rogue\n\tT extends RogueSpecs\n\t? Class.ClassRogue\n\t: // Shaman\n\tT extends ShamanSpecs\n\t? Class.ClassShaman\n\t: // Warlock\n\tT extends WarlockSpecs\n\t? Class.ClassWarlock\n\t: // Warrior\n\tT extends WarriorSpecs\n\t? Class.ClassWarrior\n\t: // Should never reach this case\n\t  Class.ClassUnknown;\n\nexport type SpecRotation<T extends Spec> =\n\t// Death Knight\n\tT extends Spec.SpecBloodDeathKnight\n\t\t? BloodDeathKnight_Rotation\n\t\t: T extends Spec.SpecFrostDeathKnight\n\t\t? FrostDeathKnight_Rotation\n\t\t: T extends Spec.SpecUnholyDeathKnight\n\t\t? UnholyDeathKnight_Rotation\n\t\t: // Druid\n\t\tT extends Spec.SpecBalanceDruid\n\t\t? BalanceDruid_Rotation\n\t\t: T extends Spec.SpecFeralDruid\n\t\t? FeralDruid_Rotation\n\t\t: T extends Spec.SpecRestorationDruid\n\t\t? RestorationDruid_Rotation\n\t\t: // Hunter\n\t\tT extends Spec.SpecBeastMasteryHunter\n\t\t? BeastMasteryHunter_Rotation\n\t\t: T extends Spec.SpecMarksmanshipHunter\n\t\t? MarksmanshipHunter_Rotation\n\t\t: T extends Spec.SpecSurvivalHunter\n\t\t? SurvivalHunter_Rotation\n\t\t: // Mage\n\t\tT extends Spec.SpecArcaneMage\n\t\t? ArcaneMage_Rotation\n\t\t: T extends Spec.SpecFireMage\n\t\t? FireMage_Rotation\n\t\t: T extends Spec.SpecFrostMage\n\t\t? FrostMage_Rotation\n\t\t: // Paladin\n\t\tT extends Spec.SpecHolyPaladin\n\t\t? HolyPaladin_Rotation\n\t\t: T extends Spec.SpecProtectionPaladin\n\t\t? ProtectionPaladin_Rotation\n\t\t: T extends Spec.SpecRetributionPaladin\n\t\t? RetributionPaladin_Rotation\n\t\t: // Priest\n\t\tT extends Spec.SpecDisciplinePriest\n\t\t? DisciplinePriest_Rotation\n\t\t: T extends Spec.SpecHolyPriest\n\t\t? HolyPriest_Rotation\n\t\t: T extends Spec.SpecShadowPriest\n\t\t? ShadowPriest_Rotation\n\t\t: // Rogue\n\t\tT extends Spec.SpecAssassinationRogue\n\t\t? AssassinationRogue_Rotation\n\t\t: T extends Spec.SpecCombatRogue\n\t\t? CombatRogue_Rotation\n\t\t: T extends Spec.SpecSubtletyRogue\n\t\t? SubtletyRogue_Rotation\n\t\t: // Shaman\n\t\tT extends Spec.SpecElementalShaman\n\t\t? ElementalShaman_Rotation\n\t\t: T extends Spec.SpecEnhancementShaman\n\t\t? EnhancementShaman_Rotation\n\t\t: T extends Spec.SpecRestorationShaman\n\t\t? RestorationShaman_Rotation\n\t\t: // Warlock\n\t\tT extends Spec.SpecAfflictionWarlock\n\t\t? AfflictionWarlock_Rotation\n\t\t: T extends Spec.SpecDemonologyWarlock\n\t\t? DemonologyWarlock_Rotation\n\t\t: T extends Spec.SpecDestructionWarlock\n\t\t? DestructionWarlock_Rotation\n\t\t: // Warrior\n\t\tT extends Spec.SpecArmsWarrior\n\t\t? ArmsWarrior_Rotation\n\t\t: T extends Spec.SpecFuryWarrior\n\t\t? FuryWarrior_Rotation\n\t\t: T extends Spec.SpecProtectionWarrior\n\t\t? ProtectionWarrior_Rotation\n\t\t: // Should never reach this case\n\t\t  UnknownRotation;\n\nexport type SpecTalents<T extends Spec> =\n\t// Death Knight\n\tT extends DeathKnightSpecs\n\t\t? DeathKnightTalents\n\t\t: // Druid\n\t\tT extends DruidSpecs\n\t\t? DruidTalents\n\t\t: // Hunter\n\t\tT extends HunterSpecs\n\t\t? HunterTalents\n\t\t: // Mage\n\t\tT extends MageSpecs\n\t\t? MageTalents\n\t\t: // Paladin\n\t\tT extends PaladinSpecs\n\t\t? PaladinTalents\n\t\t: // Priest\n\t\tT extends PriestSpecs\n\t\t? PriestTalents\n\t\t: // Rogue\n\t\tT extends RogueSpecs\n\t\t? RogueTalents\n\t\t: // Shaman\n\t\tT extends ShamanSpecs\n\t\t? ShamanTalents\n\t\t: // Warlock\n\t\tT extends WarlockSpecs\n\t\t? WarlockTalents\n\t\t: // Warrior\n\t\tT extends WarriorSpecs\n\t\t? WarriorTalents\n\t\t: // Should never reach this case\n\t\t  UnknownTalents;\n\nexport type ClassOptions<T extends Spec> =\n\t// Death Knight\n\tT extends DeathKnightSpecs\n\t\t? DeathKnightOptions\n\t\t: // Druid\n\t\tT extends DruidSpecs\n\t\t? DruidOptions\n\t\t: // Hunter\n\t\tT extends HunterSpecs\n\t\t? HunterOptions\n\t\t: // Mage\n\t\tT extends MageSpecs\n\t\t? MageOptions\n\t\t: // Paladin\n\t\tT extends PaladinSpecs\n\t\t? PaladinOptions\n\t\t: // Priest\n\t\tT extends PriestSpecs\n\t\t? PriestOptions\n\t\t: // Rogue\n\t\tT extends RogueSpecs\n\t\t? RogueOptions\n\t\t: // Shaman\n\t\tT extends ShamanSpecs\n\t\t? ShamanOptions\n\t\t: // Warlock\n\t\tT extends WarlockSpecs\n\t\t? WarlockOptions\n\t\t: // Warrior\n\t\tT extends WarriorSpecs\n\t\t? WarriorOptions\n\t\t: // Should never reach this case\n\t\t  UnknownClassOptions;\n\nexport type SpecOptions<T extends Spec> =\n\t// Death Knight\n\tT extends Spec.SpecBloodDeathKnight\n\t\t? BloodDeathKnight_Options\n\t\t: T extends Spec.SpecFrostDeathKnight\n\t\t? FrostDeathKnight_Options\n\t\t: T extends Spec.SpecUnholyDeathKnight\n\t\t? UnholyDeathKnight_Options\n\t\t: // Druid\n\t\tT extends Spec.SpecBalanceDruid\n\t\t? BalanceDruid_Options\n\t\t: T extends Spec.SpecFeralDruid\n\t\t? FeralDruid_Options\n\t\t: T extends Spec.SpecRestorationDruid\n\t\t? RestorationDruid_Options\n\t\t: // Hunter\n\t\tT extends Spec.SpecBeastMasteryHunter\n\t\t? BeastMasteryHunter_Options\n\t\t: T extends Spec.SpecMarksmanshipHunter\n\t\t? MarksmanshipHunter_Options\n\t\t: T extends Spec.SpecSurvivalHunter\n\t\t? SurvivalHunter_Options\n\t\t: // Mage\n\t\tT extends Spec.SpecArcaneMage\n\t\t? ArcaneMage_Options\n\t\t: T extends Spec.SpecFireMage\n\t\t? FireMage_Options\n\t\t: T extends Spec.SpecFrostMage\n\t\t? FrostMage_Options\n\t\t: // Paladin\n\t\tT extends Spec.SpecHolyPaladin\n\t\t? HolyPaladin_Options\n\t\t: T extends Spec.SpecProtectionPaladin\n\t\t? ProtectionPaladin_Options\n\t\t: T extends Spec.SpecRetributionPaladin\n\t\t? RetributionPaladin_Options\n\t\t: // Priest\n\t\tT extends Spec.SpecDisciplinePriest\n\t\t? DisciplinePriest_Options\n\t\t: T extends Spec.SpecHolyPriest\n\t\t? HolyPriest_Options\n\t\t: T extends Spec.SpecShadowPriest\n\t\t? ShadowPriest_Options\n\t\t: // Rogue\n\t\tT extends Spec.SpecAssassinationRogue\n\t\t? AssassinationRogue_Options\n\t\t: T extends Spec.SpecCombatRogue\n\t\t? CombatRogue_Options\n\t\t: T extends Spec.SpecSubtletyRogue\n\t\t? SubtletyRogue_Options\n\t\t: // Shaman\n\t\tT extends Spec.SpecElementalShaman\n\t\t? ElementalShaman_Options\n\t\t: T extends Spec.SpecEnhancementShaman\n\t\t? EnhancementShaman_Options\n\t\t: T extends Spec.SpecRestorationShaman\n\t\t? RestorationShaman_Options\n\t\t: // Warlock\n\t\tT extends Spec.SpecAfflictionWarlock\n\t\t? AfflictionWarlock_Options\n\t\t: T extends Spec.SpecDemonologyWarlock\n\t\t? DemonologyWarlock_Options\n\t\t: T extends Spec.SpecDestructionWarlock\n\t\t? DestructionWarlock_Options\n\t\t: // Warrior\n\t\tT extends Spec.SpecArmsWarrior\n\t\t? ArmsWarrior_Options\n\t\t: T extends Spec.SpecFuryWarrior\n\t\t? FuryWarrior_Options\n\t\t: T extends Spec.SpecProtectionWarrior\n\t\t? ProtectionWarrior_Options\n\t\t: // Should never reach this case\n\t\t  UnknownSpecOptions;\n\nexport type SpecType<T extends Spec> =\n\t// Death Knight\n\tT extends Spec.SpecBloodDeathKnight\n\t\t? BloodDeathKnight\n\t\t: T extends Spec.SpecFrostDeathKnight\n\t\t? FrostDeathKnight\n\t\t: T extends Spec.SpecUnholyDeathKnight\n\t\t? UnholyDeathKnight\n\t\t: // Druid\n\t\tT extends Spec.SpecBalanceDruid\n\t\t? BalanceDruid\n\t\t: T extends Spec.SpecFeralDruid\n\t\t? FeralDruid\n\t\t: T extends Spec.SpecRestorationDruid\n\t\t? RestorationDruid\n\t\t: // Hunter\n\t\tT extends Spec.SpecBeastMasteryHunter\n\t\t? BeastMasteryHunter\n\t\t: T extends Spec.SpecMarksmanshipHunter\n\t\t? MarksmanshipHunter\n\t\t: T extends Spec.SpecSurvivalHunter\n\t\t? SurvivalHunter\n\t\t: // Mage\n\t\tT extends Spec.SpecArcaneMage\n\t\t? ArcaneMage\n\t\t: T extends Spec.SpecFireMage\n\t\t? FireMage\n\t\t: T extends Spec.SpecFrostMage\n\t\t? FrostMage\n\t\t: // Paladin\n\t\tT extends Spec.SpecHolyPaladin\n\t\t? HolyPaladin\n\t\t: T extends Spec.SpecProtectionPaladin\n\t\t? ProtectionPaladin\n\t\t: T extends Spec.SpecRetributionPaladin\n\t\t? RetributionPaladin\n\t\t: // Priest\n\t\tT extends Spec.SpecDisciplinePriest\n\t\t? DisciplinePriest\n\t\t: T extends Spec.SpecHolyPriest\n\t\t? HolyPriest\n\t\t: T extends Spec.SpecShadowPriest\n\t\t? ShadowPriest\n\t\t: // Rogue\n\t\tT extends Spec.SpecAssassinationRogue\n\t\t? AssassinationRogue\n\t\t: T extends Spec.SpecCombatRogue\n\t\t? CombatRogue\n\t\t: T extends Spec.SpecSubtletyRogue\n\t\t? SubtletyRogue\n\t\t: // Shaman\n\t\tT extends Spec.SpecElementalShaman\n\t\t? ElementalShaman\n\t\t: T extends Spec.SpecEnhancementShaman\n\t\t? EnhancementShaman\n\t\t: T extends Spec.SpecRestorationShaman\n\t\t? RestorationShaman\n\t\t: // Warlock\n\t\tT extends Spec.SpecAfflictionWarlock\n\t\t? AfflictionWarlock\n\t\t: T extends Spec.SpecDemonologyWarlock\n\t\t? DemonologyWarlock\n\t\t: T extends Spec.SpecDestructionWarlock\n\t\t? DestructionWarlock\n\t\t: // Warrior\n\t\tT extends Spec.SpecArmsWarrior\n\t\t? ArmsWarrior\n\t\t: T extends Spec.SpecFuryWarrior\n\t\t? FuryWarrior\n\t\t: T extends Spec.SpecProtectionWarrior\n\t\t? ProtectionWarrior\n\t\t: // Should never reach this case\n\t\t  Spec.SpecUnknown;\n\nexport type SpecTypeFunctions<SpecType extends Spec> = {\n\trotationCreate: () => SpecRotation<SpecType>;\n\trotationEquals: (a: SpecRotation<SpecType>, b: SpecRotation<SpecType>) => boolean;\n\trotationCopy: (a: SpecRotation<SpecType>) => SpecRotation<SpecType>;\n\trotationToJson: (a: SpecRotation<SpecType>) => any;\n\trotationFromJson: (obj: any) => SpecRotation<SpecType>;\n\n\ttalentsCreate: () => SpecTalents<SpecType>;\n\ttalentsEquals: (a: SpecTalents<SpecType>, b: SpecTalents<SpecType>) => boolean;\n\ttalentsCopy: (a: SpecTalents<SpecType>) => SpecTalents<SpecType>;\n\ttalentsToJson: (a: SpecTalents<SpecType>) => any;\n\ttalentsFromJson: (obj: any) => SpecTalents<SpecType>;\n\n\toptionsCreate: () => SpecOptions<SpecType>;\n\toptionsEquals: (a: SpecOptions<SpecType>, b: SpecOptions<SpecType>) => boolean;\n\toptionsCopy: (a: SpecOptions<SpecType>) => SpecOptions<SpecType>;\n\toptionsToJson: (a: SpecOptions<SpecType>) => any;\n\toptionsFromJson: (obj: any) => SpecOptions<SpecType>;\n\toptionsFromPlayer: (player: Player) => SpecOptions<SpecType>;\n};\n\nexport const specTypeFunctions: Record<Spec, SpecTypeFunctions<any>> = {\n\t[Spec.SpecUnknown]: {\n\t\trotationCreate: () => new UnknownRotation(),\n\t\trotationEquals: (_a, _b) => true,\n\t\trotationCopy: _a => new UnknownRotation(),\n\t\trotationToJson: _a => undefined,\n\t\trotationFromJson: _obj => new UnknownRotation(),\n\n\t\ttalentsCreate: () => new UnknownTalents(),\n\t\ttalentsEquals: (_a, _b) => true,\n\t\ttalentsCopy: _a => new UnknownTalents(),\n\t\ttalentsToJson: _a => undefined,\n\t\ttalentsFromJson: _obj => new UnknownTalents(),\n\n\t\toptionsCreate: () => new UnknownSpecOptions(),\n\t\toptionsEquals: (_a, _b) => true,\n\t\toptionsCopy: _a => new UnknownSpecOptions(),\n\t\toptionsToJson: _a => undefined,\n\t\toptionsFromJson: _obj => new UnknownSpecOptions(),\n\t\toptionsFromPlayer: _player => new UnknownSpecOptions(),\n\t},\n\n\t// Death Knight\n\t[Spec.SpecBloodDeathKnight]: {\n\t\trotationCreate: () => BloodDeathKnight_Rotation.create(),\n\t\trotationEquals: (a, b) => BloodDeathKnight_Rotation.equals(a as BloodDeathKnight_Rotation, b as BloodDeathKnight_Rotation),\n\t\trotationCopy: a => BloodDeathKnight_Rotation.clone(a as BloodDeathKnight_Rotation),\n\t\trotationToJson: a => BloodDeathKnight_Rotation.toJson(a as BloodDeathKnight_Rotation),\n\t\trotationFromJson: obj => BloodDeathKnight_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => DeathKnightTalents.create(),\n\t\ttalentsEquals: (a, b) => DeathKnightTalents.equals(a as DeathKnightTalents, b as DeathKnightTalents),\n\t\ttalentsCopy: a => DeathKnightTalents.clone(a as DeathKnightTalents),\n\t\ttalentsToJson: a => DeathKnightTalents.toJson(a as DeathKnightTalents),\n\t\ttalentsFromJson: obj => DeathKnightTalents.fromJson(obj),\n\n\t\toptionsCreate: () => BloodDeathKnight_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => BloodDeathKnight_Options.equals(a as BloodDeathKnight_Options, b as BloodDeathKnight_Options),\n\t\toptionsCopy: a => BloodDeathKnight_Options.clone(a as BloodDeathKnight_Options),\n\t\toptionsToJson: a => BloodDeathKnight_Options.toJson(a as BloodDeathKnight_Options),\n\t\toptionsFromJson: obj => BloodDeathKnight_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'bloodDeathKnight'\n\t\t\t\t? player.spec.bloodDeathKnight.options || BloodDeathKnight_Options.create()\n\t\t\t\t: BloodDeathKnight_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecFrostDeathKnight]: {\n\t\trotationCreate: () => FrostDeathKnight_Rotation.create(),\n\t\trotationEquals: (a, b) => FrostDeathKnight_Rotation.equals(a as FrostDeathKnight_Rotation, b as FrostDeathKnight_Rotation),\n\t\trotationCopy: a => FrostDeathKnight_Rotation.clone(a as FrostDeathKnight_Rotation),\n\t\trotationToJson: a => FrostDeathKnight_Rotation.toJson(a as FrostDeathKnight_Rotation),\n\t\trotationFromJson: obj => FrostDeathKnight_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => DeathKnightTalents.create(),\n\t\ttalentsEquals: (a, b) => DeathKnightTalents.equals(a as DeathKnightTalents, b as DeathKnightTalents),\n\t\ttalentsCopy: a => DeathKnightTalents.clone(a as DeathKnightTalents),\n\t\ttalentsToJson: a => DeathKnightTalents.toJson(a as DeathKnightTalents),\n\t\ttalentsFromJson: obj => DeathKnightTalents.fromJson(obj),\n\n\t\toptionsCreate: () => FrostDeathKnight_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => FrostDeathKnight_Options.equals(a as FrostDeathKnight_Options, b as FrostDeathKnight_Options),\n\t\toptionsCopy: a => FrostDeathKnight_Options.clone(a as FrostDeathKnight_Options),\n\t\toptionsToJson: a => FrostDeathKnight_Options.toJson(a as FrostDeathKnight_Options),\n\t\toptionsFromJson: obj => FrostDeathKnight_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'frostDeathKnight'\n\t\t\t\t? player.spec.frostDeathKnight.options || FrostDeathKnight_Options.create()\n\t\t\t\t: FrostDeathKnight_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecUnholyDeathKnight]: {\n\t\trotationCreate: () => UnholyDeathKnight_Rotation.create(),\n\t\trotationEquals: (a, b) => UnholyDeathKnight_Rotation.equals(a as UnholyDeathKnight_Rotation, b as UnholyDeathKnight_Rotation),\n\t\trotationCopy: a => UnholyDeathKnight_Rotation.clone(a as UnholyDeathKnight_Rotation),\n\t\trotationToJson: a => UnholyDeathKnight_Rotation.toJson(a as UnholyDeathKnight_Rotation),\n\t\trotationFromJson: obj => UnholyDeathKnight_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => DeathKnightTalents.create(),\n\t\ttalentsEquals: (a, b) => DeathKnightTalents.equals(a as DeathKnightTalents, b as DeathKnightTalents),\n\t\ttalentsCopy: a => DeathKnightTalents.clone(a as DeathKnightTalents),\n\t\ttalentsToJson: a => DeathKnightTalents.toJson(a as DeathKnightTalents),\n\t\ttalentsFromJson: obj => DeathKnightTalents.fromJson(obj),\n\n\t\toptionsCreate: () => UnholyDeathKnight_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => UnholyDeathKnight_Options.equals(a as UnholyDeathKnight_Options, b as UnholyDeathKnight_Options),\n\t\toptionsCopy: a => UnholyDeathKnight_Options.clone(a as UnholyDeathKnight_Options),\n\t\toptionsToJson: a => UnholyDeathKnight_Options.toJson(a as UnholyDeathKnight_Options),\n\t\toptionsFromJson: obj => UnholyDeathKnight_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'unholyDeathKnight'\n\t\t\t\t? player.spec.unholyDeathKnight.options || UnholyDeathKnight_Options.create()\n\t\t\t\t: UnholyDeathKnight_Options.create({ classOptions: {} }),\n\t},\n\t// Druid\n\t[Spec.SpecBalanceDruid]: {\n\t\trotationCreate: () => BalanceDruid_Rotation.create(),\n\t\trotationEquals: (a, b) => BalanceDruid_Rotation.equals(a as BalanceDruid_Rotation, b as BalanceDruid_Rotation),\n\t\trotationCopy: a => BalanceDruid_Rotation.clone(a as BalanceDruid_Rotation),\n\t\trotationToJson: a => BalanceDruid_Rotation.toJson(a as BalanceDruid_Rotation),\n\t\trotationFromJson: obj => BalanceDruid_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => DruidTalents.create(),\n\t\ttalentsEquals: (a, b) => DruidTalents.equals(a as DruidTalents, b as DruidTalents),\n\t\ttalentsCopy: a => DruidTalents.clone(a as DruidTalents),\n\t\ttalentsToJson: a => DruidTalents.toJson(a as DruidTalents),\n\t\ttalentsFromJson: obj => DruidTalents.fromJson(obj),\n\n\t\toptionsCreate: () => BalanceDruid_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => BalanceDruid_Options.equals(a as BalanceDruid_Options, b as BalanceDruid_Options),\n\t\toptionsCopy: a => BalanceDruid_Options.clone(a as BalanceDruid_Options),\n\t\toptionsToJson: a => BalanceDruid_Options.toJson(a as BalanceDruid_Options),\n\t\toptionsFromJson: obj => BalanceDruid_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'balanceDruid'\n\t\t\t\t? player.spec.balanceDruid.options || BalanceDruid_Options.create()\n\t\t\t\t: BalanceDruid_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecFeralDruid]: {\n\t\trotationCreate: () => FeralDruid_Rotation.create(),\n\t\trotationEquals: (a, b) => FeralDruid_Rotation.equals(a as FeralDruid_Rotation, b as FeralDruid_Rotation),\n\t\trotationCopy: a => FeralDruid_Rotation.clone(a as FeralDruid_Rotation),\n\t\trotationToJson: a => FeralDruid_Rotation.toJson(a as FeralDruid_Rotation),\n\t\trotationFromJson: obj => FeralDruid_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => DruidTalents.create(),\n\t\ttalentsEquals: (a, b) => DruidTalents.equals(a as DruidTalents, b as DruidTalents),\n\t\ttalentsCopy: a => DruidTalents.clone(a as DruidTalents),\n\t\ttalentsToJson: a => DruidTalents.toJson(a as DruidTalents),\n\t\ttalentsFromJson: obj => DruidTalents.fromJson(obj),\n\n\t\toptionsCreate: () => FeralDruid_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => FeralDruid_Options.equals(a as FeralDruid_Options, b as FeralDruid_Options),\n\t\toptionsCopy: a => FeralDruid_Options.clone(a as FeralDruid_Options),\n\t\toptionsToJson: a => FeralDruid_Options.toJson(a as FeralDruid_Options),\n\t\toptionsFromJson: obj => FeralDruid_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'feralDruid'\n\t\t\t\t? player.spec.feralDruid.options || FeralDruid_Options.create()\n\t\t\t\t: FeralDruid_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecRestorationDruid]: {\n\t\trotationCreate: () => RestorationDruid_Rotation.create(),\n\t\trotationEquals: (a, b) => RestorationDruid_Rotation.equals(a as RestorationDruid_Rotation, b as RestorationDruid_Rotation),\n\t\trotationCopy: a => RestorationDruid_Rotation.clone(a as RestorationDruid_Rotation),\n\t\trotationToJson: a => RestorationDruid_Rotation.toJson(a as RestorationDruid_Rotation),\n\t\trotationFromJson: obj => RestorationDruid_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => DruidTalents.create(),\n\t\ttalentsEquals: (a, b) => DruidTalents.equals(a as DruidTalents, b as DruidTalents),\n\t\ttalentsCopy: a => DruidTalents.clone(a as DruidTalents),\n\t\ttalentsToJson: a => DruidTalents.toJson(a as DruidTalents),\n\t\ttalentsFromJson: obj => DruidTalents.fromJson(obj),\n\n\t\toptionsCreate: () => RestorationDruid_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => RestorationDruid_Options.equals(a as RestorationDruid_Options, b as RestorationDruid_Options),\n\t\toptionsCopy: a => RestorationDruid_Options.clone(a as RestorationDruid_Options),\n\t\toptionsToJson: a => RestorationDruid_Options.toJson(a as RestorationDruid_Options),\n\t\toptionsFromJson: obj => RestorationDruid_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'restorationDruid'\n\t\t\t\t? player.spec.restorationDruid.options || RestorationDruid_Options.create()\n\t\t\t\t: RestorationDruid_Options.create({ classOptions: {} }),\n\t},\n\t// Hunter\n\t[Spec.SpecBeastMasteryHunter]: {\n\t\trotationCreate: () => BeastMasteryHunter_Rotation.create(),\n\t\trotationEquals: (a, b) => BeastMasteryHunter_Rotation.equals(a as BeastMasteryHunter_Rotation, b as BeastMasteryHunter_Rotation),\n\t\trotationCopy: a => BeastMasteryHunter_Rotation.clone(a as BeastMasteryHunter_Rotation),\n\t\trotationToJson: a => BeastMasteryHunter_Rotation.toJson(a as BeastMasteryHunter_Rotation),\n\t\trotationFromJson: obj => BeastMasteryHunter_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => HunterTalents.create(),\n\t\ttalentsEquals: (a, b) => HunterTalents.equals(a as HunterTalents, b as HunterTalents),\n\t\ttalentsCopy: a => HunterTalents.clone(a as HunterTalents),\n\t\ttalentsToJson: a => HunterTalents.toJson(a as HunterTalents),\n\t\ttalentsFromJson: obj => HunterTalents.fromJson(obj),\n\n\t\toptionsCreate: () => BeastMasteryHunter_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => BeastMasteryHunter_Options.equals(a as BeastMasteryHunter_Options, b as BeastMasteryHunter_Options),\n\t\toptionsCopy: a => BeastMasteryHunter_Options.clone(a as BeastMasteryHunter_Options),\n\t\toptionsToJson: a => BeastMasteryHunter_Options.toJson(a as BeastMasteryHunter_Options),\n\t\toptionsFromJson: obj => BeastMasteryHunter_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'beastMasteryHunter'\n\t\t\t\t? player.spec.beastMasteryHunter.options || BeastMasteryHunter_Options.create()\n\t\t\t\t: BeastMasteryHunter_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecMarksmanshipHunter]: {\n\t\trotationCreate: () => MarksmanshipHunter_Rotation.create(),\n\t\trotationEquals: (a, b) => MarksmanshipHunter_Rotation.equals(a as MarksmanshipHunter_Rotation, b as MarksmanshipHunter_Rotation),\n\t\trotationCopy: a => MarksmanshipHunter_Rotation.clone(a as MarksmanshipHunter_Rotation),\n\t\trotationToJson: a => MarksmanshipHunter_Rotation.toJson(a as MarksmanshipHunter_Rotation),\n\t\trotationFromJson: obj => MarksmanshipHunter_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => HunterTalents.create(),\n\t\ttalentsEquals: (a, b) => HunterTalents.equals(a as HunterTalents, b as HunterTalents),\n\t\ttalentsCopy: a => HunterTalents.clone(a as HunterTalents),\n\t\ttalentsToJson: a => HunterTalents.toJson(a as HunterTalents),\n\t\ttalentsFromJson: obj => HunterTalents.fromJson(obj),\n\n\t\toptionsCreate: () => MarksmanshipHunter_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => MarksmanshipHunter_Options.equals(a as MarksmanshipHunter_Options, b as MarksmanshipHunter_Options),\n\t\toptionsCopy: a => MarksmanshipHunter_Options.clone(a as MarksmanshipHunter_Options),\n\t\toptionsToJson: a => MarksmanshipHunter_Options.toJson(a as MarksmanshipHunter_Options),\n\t\toptionsFromJson: obj => MarksmanshipHunter_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'marksmanshipHunter'\n\t\t\t\t? player.spec.marksmanshipHunter.options || MarksmanshipHunter_Options.create()\n\t\t\t\t: MarksmanshipHunter_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecSurvivalHunter]: {\n\t\trotationCreate: () => SurvivalHunter_Rotation.create(),\n\t\trotationEquals: (a, b) => SurvivalHunter_Rotation.equals(a as SurvivalHunter_Rotation, b as SurvivalHunter_Rotation),\n\t\trotationCopy: a => SurvivalHunter_Rotation.clone(a as SurvivalHunter_Rotation),\n\t\trotationToJson: a => SurvivalHunter_Rotation.toJson(a as SurvivalHunter_Rotation),\n\t\trotationFromJson: obj => SurvivalHunter_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => HunterTalents.create(),\n\t\ttalentsEquals: (a, b) => HunterTalents.equals(a as HunterTalents, b as HunterTalents),\n\t\ttalentsCopy: a => HunterTalents.clone(a as HunterTalents),\n\t\ttalentsToJson: a => HunterTalents.toJson(a as HunterTalents),\n\t\ttalentsFromJson: obj => HunterTalents.fromJson(obj),\n\n\t\toptionsCreate: () => SurvivalHunter_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => SurvivalHunter_Options.equals(a as SurvivalHunter_Options, b as SurvivalHunter_Options),\n\t\toptionsCopy: a => SurvivalHunter_Options.clone(a as SurvivalHunter_Options),\n\t\toptionsToJson: a => SurvivalHunter_Options.toJson(a as SurvivalHunter_Options),\n\t\toptionsFromJson: obj => SurvivalHunter_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'survivalHunter'\n\t\t\t\t? player.spec.survivalHunter.options || SurvivalHunter_Options.create()\n\t\t\t\t: SurvivalHunter_Options.create({ classOptions: {} }),\n\t},\n\t// Mage\n\t[Spec.SpecArcaneMage]: {\n\t\trotationCreate: () => ArcaneMage_Rotation.create(),\n\t\trotationEquals: (a, b) => ArcaneMage_Rotation.equals(a as ArcaneMage_Rotation, b as ArcaneMage_Rotation),\n\t\trotationCopy: a => ArcaneMage_Rotation.clone(a as ArcaneMage_Rotation),\n\t\trotationToJson: a => ArcaneMage_Rotation.toJson(a as ArcaneMage_Rotation),\n\t\trotationFromJson: obj => ArcaneMage_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => MageTalents.create(),\n\t\ttalentsEquals: (a, b) => MageTalents.equals(a as MageTalents, b as MageTalents),\n\t\ttalentsCopy: a => MageTalents.clone(a as MageTalents),\n\t\ttalentsToJson: a => MageTalents.toJson(a as MageTalents),\n\t\ttalentsFromJson: obj => MageTalents.fromJson(obj),\n\n\t\toptionsCreate: () => ArcaneMage_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => ArcaneMage_Options.equals(a as ArcaneMage_Options, b as ArcaneMage_Options),\n\t\toptionsCopy: a => ArcaneMage_Options.clone(a as ArcaneMage_Options),\n\t\toptionsToJson: a => ArcaneMage_Options.toJson(a as ArcaneMage_Options),\n\t\toptionsFromJson: obj => ArcaneMage_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'arcaneMage'\n\t\t\t\t? player.spec.arcaneMage.options || ArcaneMage_Options.create()\n\t\t\t\t: ArcaneMage_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecFireMage]: {\n\t\trotationCreate: () => FireMage_Rotation.create(),\n\t\trotationEquals: (a, b) => FireMage_Rotation.equals(a as FireMage_Rotation, b as FireMage_Rotation),\n\t\trotationCopy: a => FireMage_Rotation.clone(a as FireMage_Rotation),\n\t\trotationToJson: a => FireMage_Rotation.toJson(a as FireMage_Rotation),\n\t\trotationFromJson: obj => FireMage_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => MageTalents.create(),\n\t\ttalentsEquals: (a, b) => MageTalents.equals(a as MageTalents, b as MageTalents),\n\t\ttalentsCopy: a => MageTalents.clone(a as MageTalents),\n\t\ttalentsToJson: a => MageTalents.toJson(a as MageTalents),\n\t\ttalentsFromJson: obj => MageTalents.fromJson(obj),\n\n\t\toptionsCreate: () => FireMage_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => FireMage_Options.equals(a as FireMage_Options, b as FireMage_Options),\n\t\toptionsCopy: a => FireMage_Options.clone(a as FireMage_Options),\n\t\toptionsToJson: a => FireMage_Options.toJson(a as FireMage_Options),\n\t\toptionsFromJson: obj => FireMage_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'fireMage' ? player.spec.fireMage.options || FireMage_Options.create() : FireMage_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecFrostMage]: {\n\t\trotationCreate: () => FrostMage_Rotation.create(),\n\t\trotationEquals: (a, b) => FrostMage_Rotation.equals(a as FrostMage_Rotation, b as FrostMage_Rotation),\n\t\trotationCopy: a => FrostMage_Rotation.clone(a as FrostMage_Rotation),\n\t\trotationToJson: a => FrostMage_Rotation.toJson(a as FrostMage_Rotation),\n\t\trotationFromJson: obj => FrostMage_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => MageTalents.create(),\n\t\ttalentsEquals: (a, b) => MageTalents.equals(a as MageTalents, b as MageTalents),\n\t\ttalentsCopy: a => MageTalents.clone(a as MageTalents),\n\t\ttalentsToJson: a => MageTalents.toJson(a as MageTalents),\n\t\ttalentsFromJson: obj => MageTalents.fromJson(obj),\n\n\t\toptionsCreate: () => FrostMage_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => FrostMage_Options.equals(a as FrostMage_Options, b as FrostMage_Options),\n\t\toptionsCopy: a => FrostMage_Options.clone(a as FrostMage_Options),\n\t\toptionsToJson: a => FrostMage_Options.toJson(a as FrostMage_Options),\n\t\toptionsFromJson: obj => FrostMage_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'frostMage' ? player.spec.frostMage.options || FrostMage_Options.create() : FrostMage_Options.create({ classOptions: {} }),\n\t},\n\t// Paladin\n\t[Spec.SpecHolyPaladin]: {\n\t\trotationCreate: () => HolyPaladin_Rotation.create(),\n\t\trotationEquals: (a, b) => HolyPaladin_Rotation.equals(a as HolyPaladin_Rotation, b as HolyPaladin_Rotation),\n\t\trotationCopy: a => HolyPaladin_Rotation.clone(a as HolyPaladin_Rotation),\n\t\trotationToJson: a => HolyPaladin_Rotation.toJson(a as HolyPaladin_Rotation),\n\t\trotationFromJson: obj => HolyPaladin_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => PaladinTalents.create(),\n\t\ttalentsEquals: (a, b) => PaladinTalents.equals(a as PaladinTalents, b as PaladinTalents),\n\t\ttalentsCopy: a => PaladinTalents.clone(a as PaladinTalents),\n\t\ttalentsToJson: a => PaladinTalents.toJson(a as PaladinTalents),\n\t\ttalentsFromJson: obj => PaladinTalents.fromJson(obj),\n\n\t\toptionsCreate: () => HolyPaladin_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => HolyPaladin_Options.equals(a as HolyPaladin_Options, b as HolyPaladin_Options),\n\t\toptionsCopy: a => HolyPaladin_Options.clone(a as HolyPaladin_Options),\n\t\toptionsToJson: a => HolyPaladin_Options.toJson(a as HolyPaladin_Options),\n\t\toptionsFromJson: obj => HolyPaladin_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'holyPaladin'\n\t\t\t\t? player.spec.holyPaladin.options || HolyPaladin_Options.create()\n\t\t\t\t: HolyPaladin_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecProtectionPaladin]: {\n\t\trotationCreate: () => ProtectionPaladin_Rotation.create(),\n\t\trotationEquals: (a, b) => ProtectionPaladin_Rotation.equals(a as ProtectionPaladin_Rotation, b as ProtectionPaladin_Rotation),\n\t\trotationCopy: a => ProtectionPaladin_Rotation.clone(a as ProtectionPaladin_Rotation),\n\t\trotationToJson: a => ProtectionPaladin_Rotation.toJson(a as ProtectionPaladin_Rotation),\n\t\trotationFromJson: obj => ProtectionPaladin_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => PaladinTalents.create(),\n\t\ttalentsEquals: (a, b) => PaladinTalents.equals(a as PaladinTalents, b as PaladinTalents),\n\t\ttalentsCopy: a => PaladinTalents.clone(a as PaladinTalents),\n\t\ttalentsToJson: a => PaladinTalents.toJson(a as PaladinTalents),\n\t\ttalentsFromJson: obj => PaladinTalents.fromJson(obj),\n\n\t\toptionsCreate: () => ProtectionPaladin_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => ProtectionPaladin_Options.equals(a as ProtectionPaladin_Options, b as ProtectionPaladin_Options),\n\t\toptionsCopy: a => ProtectionPaladin_Options.clone(a as ProtectionPaladin_Options),\n\t\toptionsToJson: a => ProtectionPaladin_Options.toJson(a as ProtectionPaladin_Options),\n\t\toptionsFromJson: obj => ProtectionPaladin_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'protectionPaladin'\n\t\t\t\t? player.spec.protectionPaladin.options || ProtectionPaladin_Options.create()\n\t\t\t\t: ProtectionPaladin_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecRetributionPaladin]: {\n\t\trotationCreate: () => RetributionPaladin_Rotation.create(),\n\t\trotationEquals: (a, b) => RetributionPaladin_Rotation.equals(a as RetributionPaladin_Rotation, b as RetributionPaladin_Rotation),\n\t\trotationCopy: a => RetributionPaladin_Rotation.clone(a as RetributionPaladin_Rotation),\n\t\trotationToJson: a => RetributionPaladin_Rotation.toJson(a as RetributionPaladin_Rotation),\n\t\trotationFromJson: obj => RetributionPaladin_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => PaladinTalents.create(),\n\t\ttalentsEquals: (a, b) => PaladinTalents.equals(a as PaladinTalents, b as PaladinTalents),\n\t\ttalentsCopy: a => PaladinTalents.clone(a as PaladinTalents),\n\t\ttalentsToJson: a => PaladinTalents.toJson(a as PaladinTalents),\n\t\ttalentsFromJson: obj => PaladinTalents.fromJson(obj),\n\n\t\toptionsCreate: () => RetributionPaladin_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => RetributionPaladin_Options.equals(a as RetributionPaladin_Options, b as RetributionPaladin_Options),\n\t\toptionsCopy: a => RetributionPaladin_Options.clone(a as RetributionPaladin_Options),\n\t\toptionsToJson: a => RetributionPaladin_Options.toJson(a as RetributionPaladin_Options),\n\t\toptionsFromJson: obj => RetributionPaladin_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'retributionPaladin'\n\t\t\t\t? player.spec.retributionPaladin.options || RetributionPaladin_Options.create()\n\t\t\t\t: RetributionPaladin_Options.create({ classOptions: {} }),\n\t},\n\t// Priest\n\t[Spec.SpecDisciplinePriest]: {\n\t\trotationCreate: () => DisciplinePriest_Rotation.create(),\n\t\trotationEquals: (a, b) => DisciplinePriest_Rotation.equals(a as DisciplinePriest_Rotation, b as DisciplinePriest_Rotation),\n\t\trotationCopy: a => DisciplinePriest_Rotation.clone(a as DisciplinePriest_Rotation),\n\t\trotationToJson: a => DisciplinePriest_Rotation.toJson(a as DisciplinePriest_Rotation),\n\t\trotationFromJson: obj => DisciplinePriest_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => PriestTalents.create(),\n\t\ttalentsEquals: (a, b) => PriestTalents.equals(a as PriestTalents, b as PriestTalents),\n\t\ttalentsCopy: a => PriestTalents.clone(a as PriestTalents),\n\t\ttalentsToJson: a => PriestTalents.toJson(a as PriestTalents),\n\t\ttalentsFromJson: obj => PriestTalents.fromJson(obj),\n\n\t\toptionsCreate: () => DisciplinePriest_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => DisciplinePriest_Options.equals(a as DisciplinePriest_Options, b as DisciplinePriest_Options),\n\t\toptionsCopy: a => DisciplinePriest_Options.clone(a as DisciplinePriest_Options),\n\t\toptionsToJson: a => DisciplinePriest_Options.toJson(a as DisciplinePriest_Options),\n\t\toptionsFromJson: obj => DisciplinePriest_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'disciplinePriest'\n\t\t\t\t? player.spec.disciplinePriest.options || DisciplinePriest_Options.create()\n\t\t\t\t: DisciplinePriest_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecHolyPriest]: {\n\t\trotationCreate: () => HolyPriest_Rotation.create(),\n\t\trotationEquals: (a, b) => HolyPriest_Rotation.equals(a as HolyPriest_Rotation, b as HolyPriest_Rotation),\n\t\trotationCopy: a => HolyPriest_Rotation.clone(a as HolyPriest_Rotation),\n\t\trotationToJson: a => HolyPriest_Rotation.toJson(a as HolyPriest_Rotation),\n\t\trotationFromJson: obj => HolyPriest_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => PriestTalents.create(),\n\t\ttalentsEquals: (a, b) => PriestTalents.equals(a as PriestTalents, b as PriestTalents),\n\t\ttalentsCopy: a => PriestTalents.clone(a as PriestTalents),\n\t\ttalentsToJson: a => PriestTalents.toJson(a as PriestTalents),\n\t\ttalentsFromJson: obj => PriestTalents.fromJson(obj),\n\n\t\toptionsCreate: () => HolyPriest_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => HolyPriest_Options.equals(a as HolyPriest_Options, b as HolyPriest_Options),\n\t\toptionsCopy: a => HolyPriest_Options.clone(a as HolyPriest_Options),\n\t\toptionsToJson: a => HolyPriest_Options.toJson(a as HolyPriest_Options),\n\t\toptionsFromJson: obj => HolyPriest_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'holyPriest'\n\t\t\t\t? player.spec.holyPriest.options || HolyPriest_Options.create()\n\t\t\t\t: HolyPriest_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecShadowPriest]: {\n\t\trotationCreate: () => ShadowPriest_Rotation.create(),\n\t\trotationEquals: (a, b) => ShadowPriest_Rotation.equals(a as ShadowPriest_Rotation, b as ShadowPriest_Rotation),\n\t\trotationCopy: a => ShadowPriest_Rotation.clone(a as ShadowPriest_Rotation),\n\t\trotationToJson: a => ShadowPriest_Rotation.toJson(a as ShadowPriest_Rotation),\n\t\trotationFromJson: obj => ShadowPriest_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => PriestTalents.create(),\n\t\ttalentsEquals: (a, b) => PriestTalents.equals(a as PriestTalents, b as PriestTalents),\n\t\ttalentsCopy: a => PriestTalents.clone(a as PriestTalents),\n\t\ttalentsToJson: a => PriestTalents.toJson(a as PriestTalents),\n\t\ttalentsFromJson: obj => PriestTalents.fromJson(obj),\n\n\t\toptionsCreate: () => ShadowPriest_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => ShadowPriest_Options.equals(a as ShadowPriest_Options, b as ShadowPriest_Options),\n\t\toptionsCopy: a => ShadowPriest_Options.clone(a as ShadowPriest_Options),\n\t\toptionsToJson: a => ShadowPriest_Options.toJson(a as ShadowPriest_Options),\n\t\toptionsFromJson: obj => ShadowPriest_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'shadowPriest'\n\t\t\t\t? player.spec.shadowPriest.options || ShadowPriest_Options.create()\n\t\t\t\t: ShadowPriest_Options.create({ classOptions: {} }),\n\t},\n\t// Rogue\n\t[Spec.SpecAssassinationRogue]: {\n\t\trotationCreate: () => AssassinationRogue_Rotation.create(),\n\t\trotationEquals: (a, b) => AssassinationRogue_Rotation.equals(a as AssassinationRogue_Rotation, b as AssassinationRogue_Rotation),\n\t\trotationCopy: a => AssassinationRogue_Rotation.clone(a as AssassinationRogue_Rotation),\n\t\trotationToJson: a => AssassinationRogue_Rotation.toJson(a as AssassinationRogue_Rotation),\n\t\trotationFromJson: obj => AssassinationRogue_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => RogueTalents.create(),\n\t\ttalentsEquals: (a, b) => RogueTalents.equals(a as RogueTalents, b as RogueTalents),\n\t\ttalentsCopy: a => RogueTalents.clone(a as RogueTalents),\n\t\ttalentsToJson: a => RogueTalents.toJson(a as RogueTalents),\n\t\ttalentsFromJson: obj => RogueTalents.fromJson(obj),\n\n\t\toptionsCreate: () => AssassinationRogue_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => AssassinationRogue_Options.equals(a as AssassinationRogue_Options, b as AssassinationRogue_Options),\n\t\toptionsCopy: a => AssassinationRogue_Options.clone(a as AssassinationRogue_Options),\n\t\toptionsToJson: a => AssassinationRogue_Options.toJson(a as AssassinationRogue_Options),\n\t\toptionsFromJson: obj => AssassinationRogue_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'assassinationRogue'\n\t\t\t\t? player.spec.assassinationRogue.options || AssassinationRogue_Options.create()\n\t\t\t\t: AssassinationRogue_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecCombatRogue]: {\n\t\trotationCreate: () => CombatRogue_Rotation.create(),\n\t\trotationEquals: (a, b) => CombatRogue_Rotation.equals(a as CombatRogue_Rotation, b as CombatRogue_Rotation),\n\t\trotationCopy: a => CombatRogue_Rotation.clone(a as CombatRogue_Rotation),\n\t\trotationToJson: a => CombatRogue_Rotation.toJson(a as CombatRogue_Rotation),\n\t\trotationFromJson: obj => CombatRogue_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => RogueTalents.create(),\n\t\ttalentsEquals: (a, b) => RogueTalents.equals(a as RogueTalents, b as RogueTalents),\n\t\ttalentsCopy: a => RogueTalents.clone(a as RogueTalents),\n\t\ttalentsToJson: a => RogueTalents.toJson(a as RogueTalents),\n\t\ttalentsFromJson: obj => RogueTalents.fromJson(obj),\n\n\t\toptionsCreate: () => CombatRogue_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => CombatRogue_Options.equals(a as CombatRogue_Options, b as CombatRogue_Options),\n\t\toptionsCopy: a => CombatRogue_Options.clone(a as CombatRogue_Options),\n\t\toptionsToJson: a => CombatRogue_Options.toJson(a as CombatRogue_Options),\n\t\toptionsFromJson: obj => CombatRogue_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'combatRogue'\n\t\t\t\t? player.spec.combatRogue.options || CombatRogue_Options.create()\n\t\t\t\t: CombatRogue_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecSubtletyRogue]: {\n\t\trotationCreate: () => SubtletyRogue_Rotation.create(),\n\t\trotationEquals: (a, b) => SubtletyRogue_Rotation.equals(a as SubtletyRogue_Rotation, b as SubtletyRogue_Rotation),\n\t\trotationCopy: a => SubtletyRogue_Rotation.clone(a as SubtletyRogue_Rotation),\n\t\trotationToJson: a => SubtletyRogue_Rotation.toJson(a as SubtletyRogue_Rotation),\n\t\trotationFromJson: obj => SubtletyRogue_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => RogueTalents.create(),\n\t\ttalentsEquals: (a, b) => RogueTalents.equals(a as RogueTalents, b as RogueTalents),\n\t\ttalentsCopy: a => RogueTalents.clone(a as RogueTalents),\n\t\ttalentsToJson: a => RogueTalents.toJson(a as RogueTalents),\n\t\ttalentsFromJson: obj => RogueTalents.fromJson(obj),\n\n\t\toptionsCreate: () => SubtletyRogue_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => SubtletyRogue_Options.equals(a as SubtletyRogue_Options, b as SubtletyRogue_Options),\n\t\toptionsCopy: a => SubtletyRogue_Options.clone(a as SubtletyRogue_Options),\n\t\toptionsToJson: a => SubtletyRogue_Options.toJson(a as SubtletyRogue_Options),\n\t\toptionsFromJson: obj => SubtletyRogue_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'subtletyRogue'\n\t\t\t\t? player.spec.subtletyRogue.options || SubtletyRogue_Options.create()\n\t\t\t\t: SubtletyRogue_Options.create({ classOptions: {} }),\n\t},\n\t// Shaman\n\t[Spec.SpecElementalShaman]: {\n\t\trotationCreate: () => ElementalShaman_Rotation.create(),\n\t\trotationEquals: (a, b) => ElementalShaman_Rotation.equals(a as ElementalShaman_Rotation, b as ElementalShaman_Rotation),\n\t\trotationCopy: a => ElementalShaman_Rotation.clone(a as ElementalShaman_Rotation),\n\t\trotationToJson: a => ElementalShaman_Rotation.toJson(a as ElementalShaman_Rotation),\n\t\trotationFromJson: obj => ElementalShaman_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => ShamanTalents.create(),\n\t\ttalentsEquals: (a, b) => ShamanTalents.equals(a as ShamanTalents, b as ShamanTalents),\n\t\ttalentsCopy: a => ShamanTalents.clone(a as ShamanTalents),\n\t\ttalentsToJson: a => ShamanTalents.toJson(a as ShamanTalents),\n\t\ttalentsFromJson: obj => ShamanTalents.fromJson(obj),\n\n\t\toptionsCreate: () => ElementalShaman_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => ElementalShaman_Options.equals(a as ElementalShaman_Options, b as ElementalShaman_Options),\n\t\toptionsCopy: a => ElementalShaman_Options.clone(a as ElementalShaman_Options),\n\t\toptionsToJson: a => ElementalShaman_Options.toJson(a as ElementalShaman_Options),\n\t\toptionsFromJson: obj => ElementalShaman_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'elementalShaman'\n\t\t\t\t? player.spec.elementalShaman.options || ElementalShaman_Options.create()\n\t\t\t\t: ElementalShaman_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecEnhancementShaman]: {\n\t\trotationCreate: () => EnhancementShaman_Rotation.create(),\n\t\trotationEquals: (a, b) => EnhancementShaman_Rotation.equals(a as EnhancementShaman_Rotation, b as EnhancementShaman_Rotation),\n\t\trotationCopy: a => EnhancementShaman_Rotation.clone(a as EnhancementShaman_Rotation),\n\t\trotationToJson: a => EnhancementShaman_Rotation.toJson(a as EnhancementShaman_Rotation),\n\t\trotationFromJson: obj => EnhancementShaman_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => ShamanTalents.create(),\n\t\ttalentsEquals: (a, b) => ShamanTalents.equals(a as ShamanTalents, b as ShamanTalents),\n\t\ttalentsCopy: a => ShamanTalents.clone(a as ShamanTalents),\n\t\ttalentsToJson: a => ShamanTalents.toJson(a as ShamanTalents),\n\t\ttalentsFromJson: obj => ShamanTalents.fromJson(obj),\n\n\t\toptionsCreate: () => EnhancementShaman_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => EnhancementShaman_Options.equals(a as EnhancementShaman_Options, b as EnhancementShaman_Options),\n\t\toptionsCopy: a => EnhancementShaman_Options.clone(a as EnhancementShaman_Options),\n\t\toptionsToJson: a => EnhancementShaman_Options.toJson(a as EnhancementShaman_Options),\n\t\toptionsFromJson: obj => EnhancementShaman_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'enhancementShaman'\n\t\t\t\t? player.spec.enhancementShaman.options || EnhancementShaman_Options.create()\n\t\t\t\t: EnhancementShaman_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecRestorationShaman]: {\n\t\trotationCreate: () => RestorationShaman_Rotation.create(),\n\t\trotationEquals: (a, b) => RestorationShaman_Rotation.equals(a as RestorationShaman_Rotation, b as RestorationShaman_Rotation),\n\t\trotationCopy: a => RestorationShaman_Rotation.clone(a as RestorationShaman_Rotation),\n\t\trotationToJson: a => RestorationShaman_Rotation.toJson(a as RestorationShaman_Rotation),\n\t\trotationFromJson: obj => RestorationShaman_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => ShamanTalents.create(),\n\t\ttalentsEquals: (a, b) => ShamanTalents.equals(a as ShamanTalents, b as ShamanTalents),\n\t\ttalentsCopy: a => ShamanTalents.clone(a as ShamanTalents),\n\t\ttalentsToJson: a => ShamanTalents.toJson(a as ShamanTalents),\n\t\ttalentsFromJson: obj => ShamanTalents.fromJson(obj),\n\n\t\toptionsCreate: () => RestorationShaman_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => RestorationShaman_Options.equals(a as RestorationShaman_Options, b as RestorationShaman_Options),\n\t\toptionsCopy: a => RestorationShaman_Options.clone(a as RestorationShaman_Options),\n\t\toptionsToJson: a => RestorationShaman_Options.toJson(a as RestorationShaman_Options),\n\t\toptionsFromJson: obj => RestorationShaman_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'restorationShaman'\n\t\t\t\t? player.spec.restorationShaman.options || RestorationShaman_Options.create()\n\t\t\t\t: RestorationShaman_Options.create({ classOptions: {} }),\n\t},\n\t// Warlock\n\t[Spec.SpecAfflictionWarlock]: {\n\t\trotationCreate: () => AfflictionWarlock_Rotation.create(),\n\t\trotationEquals: (a, b) => AfflictionWarlock_Rotation.equals(a as AfflictionWarlock_Rotation, b as AfflictionWarlock_Rotation),\n\t\trotationCopy: a => AfflictionWarlock_Rotation.clone(a as AfflictionWarlock_Rotation),\n\t\trotationToJson: a => AfflictionWarlock_Rotation.toJson(a as AfflictionWarlock_Rotation),\n\t\trotationFromJson: obj => AfflictionWarlock_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => WarlockTalents.create(),\n\t\ttalentsEquals: (a, b) => WarlockTalents.equals(a as WarlockTalents, b as WarlockTalents),\n\t\ttalentsCopy: a => WarlockTalents.clone(a as WarlockTalents),\n\t\ttalentsToJson: a => WarlockTalents.toJson(a as WarlockTalents),\n\t\ttalentsFromJson: obj => WarlockTalents.fromJson(obj),\n\n\t\toptionsCreate: () => AfflictionWarlock_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => AfflictionWarlock_Options.equals(a as AfflictionWarlock_Options, b as AfflictionWarlock_Options),\n\t\toptionsCopy: a => AfflictionWarlock_Options.clone(a as AfflictionWarlock_Options),\n\t\toptionsToJson: a => AfflictionWarlock_Options.toJson(a as AfflictionWarlock_Options),\n\t\toptionsFromJson: obj => AfflictionWarlock_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'afflictionWarlock'\n\t\t\t\t? player.spec.afflictionWarlock.options || AfflictionWarlock_Options.create()\n\t\t\t\t: AfflictionWarlock_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecDemonologyWarlock]: {\n\t\trotationCreate: () => DemonologyWarlock_Rotation.create(),\n\t\trotationEquals: (a, b) => DemonologyWarlock_Rotation.equals(a as DemonologyWarlock_Rotation, b as DemonologyWarlock_Rotation),\n\t\trotationCopy: a => DemonologyWarlock_Rotation.clone(a as DemonologyWarlock_Rotation),\n\t\trotationToJson: a => DemonologyWarlock_Rotation.toJson(a as DemonologyWarlock_Rotation),\n\t\trotationFromJson: obj => DemonologyWarlock_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => WarlockTalents.create(),\n\t\ttalentsEquals: (a, b) => WarlockTalents.equals(a as WarlockTalents, b as WarlockTalents),\n\t\ttalentsCopy: a => WarlockTalents.clone(a as WarlockTalents),\n\t\ttalentsToJson: a => WarlockTalents.toJson(a as WarlockTalents),\n\t\ttalentsFromJson: obj => WarlockTalents.fromJson(obj),\n\n\t\toptionsCreate: () => DemonologyWarlock_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => DemonologyWarlock_Options.equals(a as DemonologyWarlock_Options, b as DemonologyWarlock_Options),\n\t\toptionsCopy: a => DemonologyWarlock_Options.clone(a as DemonologyWarlock_Options),\n\t\toptionsToJson: a => DemonologyWarlock_Options.toJson(a as DemonologyWarlock_Options),\n\t\toptionsFromJson: obj => DemonologyWarlock_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'demonologyWarlock'\n\t\t\t\t? player.spec.demonologyWarlock.options || DemonologyWarlock_Options.create()\n\t\t\t\t: DemonologyWarlock_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecDestructionWarlock]: {\n\t\trotationCreate: () => DestructionWarlock_Rotation.create(),\n\t\trotationEquals: (a, b) => DestructionWarlock_Rotation.equals(a as DestructionWarlock_Rotation, b as DestructionWarlock_Rotation),\n\t\trotationCopy: a => DestructionWarlock_Rotation.clone(a as DestructionWarlock_Rotation),\n\t\trotationToJson: a => DestructionWarlock_Rotation.toJson(a as DestructionWarlock_Rotation),\n\t\trotationFromJson: obj => DestructionWarlock_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => WarlockTalents.create(),\n\t\ttalentsEquals: (a, b) => WarlockTalents.equals(a as WarlockTalents, b as WarlockTalents),\n\t\ttalentsCopy: a => WarlockTalents.clone(a as WarlockTalents),\n\t\ttalentsToJson: a => WarlockTalents.toJson(a as WarlockTalents),\n\t\ttalentsFromJson: obj => WarlockTalents.fromJson(obj),\n\n\t\toptionsCreate: () => DestructionWarlock_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => DestructionWarlock_Options.equals(a as DestructionWarlock_Options, b as DestructionWarlock_Options),\n\t\toptionsCopy: a => DestructionWarlock_Options.clone(a as DestructionWarlock_Options),\n\t\toptionsToJson: a => DestructionWarlock_Options.toJson(a as DestructionWarlock_Options),\n\t\toptionsFromJson: obj => DestructionWarlock_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'destructionWarlock'\n\t\t\t\t? player.spec.destructionWarlock.options || DestructionWarlock_Options.create()\n\t\t\t\t: DestructionWarlock_Options.create({ classOptions: {} }),\n\t},\n\t// Warrior\n\t[Spec.SpecArmsWarrior]: {\n\t\trotationCreate: () => ArmsWarrior_Rotation.create(),\n\t\trotationEquals: (a, b) => ArmsWarrior_Rotation.equals(a as ArmsWarrior_Rotation, b as ArmsWarrior_Rotation),\n\t\trotationCopy: a => ArmsWarrior_Rotation.clone(a as ArmsWarrior_Rotation),\n\t\trotationToJson: a => ArmsWarrior_Rotation.toJson(a as ArmsWarrior_Rotation),\n\t\trotationFromJson: obj => ArmsWarrior_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => WarriorTalents.create(),\n\t\ttalentsEquals: (a, b) => WarriorTalents.equals(a as WarriorTalents, b as WarriorTalents),\n\t\ttalentsCopy: a => WarriorTalents.clone(a as WarriorTalents),\n\t\ttalentsToJson: a => WarriorTalents.toJson(a as WarriorTalents),\n\t\ttalentsFromJson: obj => WarriorTalents.fromJson(obj),\n\n\t\toptionsCreate: () => ArmsWarrior_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => ArmsWarrior_Options.equals(a as ArmsWarrior_Options, b as ArmsWarrior_Options),\n\t\toptionsCopy: a => ArmsWarrior_Options.clone(a as ArmsWarrior_Options),\n\t\toptionsToJson: a => ArmsWarrior_Options.toJson(a as ArmsWarrior_Options),\n\t\toptionsFromJson: obj => ArmsWarrior_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'armsWarrior'\n\t\t\t\t? player.spec.armsWarrior.options || ArmsWarrior_Options.create()\n\t\t\t\t: ArmsWarrior_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecFuryWarrior]: {\n\t\trotationCreate: () => FuryWarrior_Rotation.create(),\n\t\trotationEquals: (a, b) => FuryWarrior_Rotation.equals(a as FuryWarrior_Rotation, b as FuryWarrior_Rotation),\n\t\trotationCopy: a => FuryWarrior_Rotation.clone(a as FuryWarrior_Rotation),\n\t\trotationToJson: a => FuryWarrior_Rotation.toJson(a as FuryWarrior_Rotation),\n\t\trotationFromJson: obj => FuryWarrior_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => WarriorTalents.create(),\n\t\ttalentsEquals: (a, b) => WarriorTalents.equals(a as WarriorTalents, b as WarriorTalents),\n\t\ttalentsCopy: a => WarriorTalents.clone(a as WarriorTalents),\n\t\ttalentsToJson: a => WarriorTalents.toJson(a as WarriorTalents),\n\t\ttalentsFromJson: obj => WarriorTalents.fromJson(obj),\n\n\t\toptionsCreate: () => FuryWarrior_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => FuryWarrior_Options.equals(a as FuryWarrior_Options, b as FuryWarrior_Options),\n\t\toptionsCopy: a => FuryWarrior_Options.clone(a as FuryWarrior_Options),\n\t\toptionsToJson: a => FuryWarrior_Options.toJson(a as FuryWarrior_Options),\n\t\toptionsFromJson: obj => FuryWarrior_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'furyWarrior'\n\t\t\t\t? player.spec.furyWarrior.options || FuryWarrior_Options.create()\n\t\t\t\t: FuryWarrior_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecProtectionWarrior]: {\n\t\trotationCreate: () => ProtectionWarrior_Rotation.create(),\n\t\trotationEquals: (a, b) => ProtectionWarrior_Rotation.equals(a as ProtectionWarrior_Rotation, b as ProtectionWarrior_Rotation),\n\t\trotationCopy: a => ProtectionWarrior_Rotation.clone(a as ProtectionWarrior_Rotation),\n\t\trotationToJson: a => ProtectionWarrior_Rotation.toJson(a as ProtectionWarrior_Rotation),\n\t\trotationFromJson: obj => ProtectionWarrior_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => WarriorTalents.create(),\n\t\ttalentsEquals: (a, b) => WarriorTalents.equals(a as WarriorTalents, b as WarriorTalents),\n\t\ttalentsCopy: a => WarriorTalents.clone(a as WarriorTalents),\n\t\ttalentsToJson: a => WarriorTalents.toJson(a as WarriorTalents),\n\t\ttalentsFromJson: obj => WarriorTalents.fromJson(obj),\n\n\t\toptionsCreate: () => ProtectionWarrior_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => ProtectionWarrior_Options.equals(a as ProtectionWarrior_Options, b as ProtectionWarrior_Options),\n\t\toptionsCopy: a => ProtectionWarrior_Options.clone(a as ProtectionWarrior_Options),\n\t\toptionsToJson: a => ProtectionWarrior_Options.toJson(a as ProtectionWarrior_Options),\n\t\toptionsFromJson: obj => ProtectionWarrior_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'protectionWarrior'\n\t\t\t\t? player.spec.protectionWarrior.options || ProtectionWarrior_Options.create()\n\t\t\t\t: ProtectionWarrior_Options.create(),\n\t},\n};\n\nexport const raceToFaction: Record<Race, Faction> = {\n\t[Race.RaceUnknown]: Faction.Unknown,\n\n\t[Race.RaceDraenei]: Faction.Alliance,\n\t[Race.RaceDwarf]: Faction.Alliance,\n\t[Race.RaceGnome]: Faction.Alliance,\n\t[Race.RaceHuman]: Faction.Alliance,\n\t[Race.RaceNightElf]: Faction.Alliance,\n\t[Race.RaceWorgen]: Faction.Alliance,\n\n\t[Race.RaceBloodElf]: Faction.Horde,\n\t[Race.RaceGoblin]: Faction.Horde,\n\t[Race.RaceOrc]: Faction.Horde,\n\t[Race.RaceTauren]: Faction.Horde,\n\t[Race.RaceTroll]: Faction.Horde,\n\t[Race.RaceUndead]: Faction.Horde,\n};\n\n// Returns a copy of playerOptions, with the class field set.\nexport function withSpec<SpecType extends Spec>(spec: Spec, player: Player, specOptions: SpecOptions<SpecType>): Player {\n\tconst copy = Player.clone(player);\n\n\tswitch (spec) {\n\t\t// Death Knight\n\t\tcase Spec.SpecBloodDeathKnight:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'bloodDeathKnight',\n\t\t\t\tbloodDeathKnight: BloodDeathKnight.create({\n\t\t\t\t\toptions: specOptions as BloodDeathKnight_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecFrostDeathKnight:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'frostDeathKnight',\n\t\t\t\tfrostDeathKnight: FrostDeathKnight.create({\n\t\t\t\t\toptions: specOptions as FrostDeathKnight_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecUnholyDeathKnight:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'unholyDeathKnight',\n\t\t\t\tunholyDeathKnight: UnholyDeathKnight.create({\n\t\t\t\t\toptions: specOptions as UnholyDeathKnight_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\t// Druid\n\t\tcase Spec.SpecBalanceDruid:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'balanceDruid',\n\t\t\t\tbalanceDruid: BalanceDruid.create({\n\t\t\t\t\toptions: specOptions as BalanceDruid_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecFeralDruid:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'feralDruid',\n\t\t\t\tferalDruid: FeralDruid.create({\n\t\t\t\t\toptions: specOptions as FeralDruid_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecRestorationDruid:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'restorationDruid',\n\t\t\t\trestorationDruid: RestorationDruid.create({\n\t\t\t\t\toptions: specOptions as RestorationDruid_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\t// Hunter\n\t\tcase Spec.SpecBeastMasteryHunter:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'beastMasteryHunter',\n\t\t\t\tbeastMasteryHunter: BeastMasteryHunter.create({\n\t\t\t\t\toptions: specOptions as BeastMasteryHunter_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecMarksmanshipHunter:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'marksmanshipHunter',\n\t\t\t\tmarksmanshipHunter: MarksmanshipHunter.create({\n\t\t\t\t\toptions: specOptions as MarksmanshipHunter_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecSurvivalHunter:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'survivalHunter',\n\t\t\t\tsurvivalHunter: SurvivalHunter.create({\n\t\t\t\t\toptions: specOptions as SurvivalHunter_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\t// Mage\n\t\tcase Spec.SpecArcaneMage:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'arcaneMage',\n\t\t\t\tarcaneMage: ArcaneMage.create({\n\t\t\t\t\toptions: specOptions as ArcaneMage_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecFireMage:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'fireMage',\n\t\t\t\tfireMage: FireMage.create({\n\t\t\t\t\toptions: specOptions as FireMage_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecFrostMage:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'frostMage',\n\t\t\t\tfrostMage: FrostMage.create({\n\t\t\t\t\toptions: specOptions as FrostMage_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\t// Paladin\n\t\tcase Spec.SpecHolyPaladin:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'holyPaladin',\n\t\t\t\tholyPaladin: HolyPaladin.create({\n\t\t\t\t\toptions: specOptions as HolyPaladin_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecProtectionPaladin:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'protectionPaladin',\n\t\t\t\tprotectionPaladin: ProtectionPaladin.create({\n\t\t\t\t\toptions: specOptions as ProtectionPaladin_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecRetributionPaladin:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'retributionPaladin',\n\t\t\t\tretributionPaladin: RetributionPaladin.create({\n\t\t\t\t\toptions: specOptions as RetributionPaladin_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\t// Priest\n\t\tcase Spec.SpecDisciplinePriest:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'disciplinePriest',\n\t\t\t\tdisciplinePriest: DisciplinePriest.create({\n\t\t\t\t\toptions: specOptions as DisciplinePriest_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecHolyPriest:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'holyPriest',\n\t\t\t\tholyPriest: HolyPriest.create({\n\t\t\t\t\toptions: specOptions as HolyPriest_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecShadowPriest:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'shadowPriest',\n\t\t\t\tshadowPriest: ShadowPriest.create({\n\t\t\t\t\toptions: specOptions as ShadowPriest_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\t// Rogue\n\t\tcase Spec.SpecAssassinationRogue:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'assassinationRogue',\n\t\t\t\tassassinationRogue: AssassinationRogue.create({\n\t\t\t\t\toptions: specOptions as AssassinationRogue_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecCombatRogue:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'combatRogue',\n\t\t\t\tcombatRogue: CombatRogue.create({\n\t\t\t\t\toptions: specOptions as CombatRogue_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecSubtletyRogue:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'subtletyRogue',\n\t\t\t\tsubtletyRogue: SubtletyRogue.create({\n\t\t\t\t\toptions: specOptions as SubtletyRogue_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\t// Shaman\n\t\tcase Spec.SpecElementalShaman:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'elementalShaman',\n\t\t\t\telementalShaman: ElementalShaman.create({\n\t\t\t\t\toptions: specOptions as ElementalShaman_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecEnhancementShaman:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'enhancementShaman',\n\t\t\t\tenhancementShaman: EnhancementShaman.create({\n\t\t\t\t\toptions: specOptions as EnhancementShaman_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecRestorationShaman:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'restorationShaman',\n\t\t\t\trestorationShaman: RestorationShaman.create({\n\t\t\t\t\toptions: specOptions as RestorationShaman_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\t// Warlock\n\t\tcase Spec.SpecAfflictionWarlock:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'afflictionWarlock',\n\t\t\t\tafflictionWarlock: AfflictionWarlock.create({\n\t\t\t\t\toptions: specOptions as AfflictionWarlock_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecDemonologyWarlock:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'demonologyWarlock',\n\t\t\t\tdemonologyWarlock: DemonologyWarlock.create({\n\t\t\t\t\toptions: specOptions as DemonologyWarlock_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecDestructionWarlock:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'destructionWarlock',\n\t\t\t\tdestructionWarlock: DestructionWarlock.create({\n\t\t\t\t\toptions: specOptions as DestructionWarlock_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\t// Warrior\n\t\tcase Spec.SpecArmsWarrior:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'armsWarrior',\n\t\t\t\tarmsWarrior: ArmsWarrior.create({\n\t\t\t\t\toptions: specOptions as ArmsWarrior_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecFuryWarrior:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'furyWarrior',\n\t\t\t\tfuryWarrior: FuryWarrior.create({\n\t\t\t\t\toptions: specOptions as FuryWarrior_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecProtectionWarrior:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'protectionWarrior',\n\t\t\t\tprotectionWarrior: ProtectionWarrior.create({\n\t\t\t\t\toptions: specOptions as ProtectionWarrior_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tdefault:\n\t\t\treturn copy;\n\t}\n}\n\nexport function getPlayerSpecFromPlayer<SpecType extends Spec>(player: Player): PlayerSpec<SpecType> {\n\tconst specValues = getEnumValues(Spec);\n\tfor (let i = 0; i < specValues.length; i++) {\n\t\tconst spec = specValues[i] as SpecType;\n\t\tlet specString = Spec[spec]; // Returns 'SpecBalanceDruid' for BalanceDruid.\n\t\tspecString = specString.substring('Spec'.length); // 'BalanceDruid'\n\t\tspecString = specString.charAt(0).toLowerCase() + specString.slice(1); // 'balanceDruid'\n\n\t\tif (player.spec.oneofKind == specString) {\n\t\t\treturn PlayerSpecs.fromProto(spec);\n\t\t}\n\t}\n\n\tthrow new Error('Unable to parse spec from player proto: ' + JSON.stringify(Player.toJson(player), null, 2));\n}\n\nexport function isSharpWeaponType(weaponType: WeaponType): boolean {\n\treturn [WeaponType.WeaponTypeAxe, WeaponType.WeaponTypeDagger, WeaponType.WeaponTypePolearm, WeaponType.WeaponTypeSword].includes(weaponType);\n}\n\nexport function isBluntWeaponType(weaponType: WeaponType): boolean {\n\treturn [WeaponType.WeaponTypeFist, WeaponType.WeaponTypeMace, WeaponType.WeaponTypeStaff].includes(weaponType);\n}\n\n// Custom functions for determining the EP value of meta gem effects.\n// Default meta effect EP value is 0, so just handle the ones relevant to your spec.\nconst metaGemEffectEPs: Partial<Record<Spec, (gem: Gem, playerStats: Stats) => number>> = {};\n\nexport function getMetaGemEffectEP<SpecType extends Spec>(playerSpec: PlayerSpec<SpecType>, gem: Gem, playerStats: Stats) {\n\tif (metaGemEffectEPs[playerSpec.specID]) {\n\t\treturn metaGemEffectEPs[playerSpec.specID]!(gem, playerStats);\n\t} else {\n\t\treturn 0;\n\t}\n}\n\n// Returns true if this item may be equipped in at least 1 slot for the given Spec.\nexport function canEquipItem<SpecType extends Spec>(item: Item, playerSpec: PlayerSpec<SpecType>, slot: ItemSlot | undefined): boolean {\n\tconst playerClass = PlayerSpecs.getPlayerClass(playerSpec);\n\tif (item.classAllowlist.length > 0 && !item.classAllowlist.includes(playerClass.classID)) {\n\t\treturn false;\n\t}\n\n\tif ([ItemType.ItemTypeFinger, ItemType.ItemTypeTrinket].includes(item.type)) {\n\t\treturn true;\n\t}\n\n\tif (item.type == ItemType.ItemTypeWeapon) {\n\t\tconst eligibleWeaponType = playerClass.weaponTypes.find(wt => wt.weaponType == item.weaponType);\n\t\tif (!eligibleWeaponType) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\n\t\t\t(item.handType == HandType.HandTypeOffHand || (item.handType == HandType.HandTypeOneHand && slot == ItemSlot.ItemSlotOffHand)) &&\n\t\t\t![WeaponType.WeaponTypeShield, WeaponType.WeaponTypeOffHand].includes(item.weaponType) &&\n\t\t\t!playerSpec.canDualWield\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (item.handType == HandType.HandTypeTwoHand && !eligibleWeaponType.canUseTwoHand) {\n\t\t\treturn false;\n\t\t}\n\t\tif (item.handType == HandType.HandTypeTwoHand && slot == ItemSlot.ItemSlotOffHand && playerSpec.specID != Spec.SpecFuryWarrior) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tif (item.type == ItemType.ItemTypeRanged) {\n\t\treturn playerClass.rangedWeaponTypes.includes(item.rangedWeaponType);\n\t}\n\n\t// At this point, we know the item is an armor piece (feet, chest, legs, etc).\n\treturn playerClass.armorTypes[0] >= item.armorType;\n}\n\nconst pvpSeasonFromName: Record<string, string> = {\n\tWrathful: 'Season 8',\n\tBloodthirsty: 'Season 8.5',\n\tVicious: 'Season 9',\n\tRuthless: 'Season 10',\n\tCataclysmic: 'Season 11',\n};\n\nexport const isPVPItem = (item: Item) => item?.name?.includes('Gladiator') || false;\n\nexport const getPVPSeasonFromItem = (item: Item) => {\n\tconst seasonName = item.name.substring(0, item.name.indexOf(' '));\n\treturn pvpSeasonFromName[seasonName] || undefined;\n};\n\nconst itemTypeToSlotsMap: Partial<Record<ItemType, Array<ItemSlot>>> = {\n\t[ItemType.ItemTypeUnknown]: [],\n\t[ItemType.ItemTypeHead]: [ItemSlot.ItemSlotHead],\n\t[ItemType.ItemTypeNeck]: [ItemSlot.ItemSlotNeck],\n\t[ItemType.ItemTypeShoulder]: [ItemSlot.ItemSlotShoulder],\n\t[ItemType.ItemTypeBack]: [ItemSlot.ItemSlotBack],\n\t[ItemType.ItemTypeChest]: [ItemSlot.ItemSlotChest],\n\t[ItemType.ItemTypeWrist]: [ItemSlot.ItemSlotWrist],\n\t[ItemType.ItemTypeHands]: [ItemSlot.ItemSlotHands],\n\t[ItemType.ItemTypeWaist]: [ItemSlot.ItemSlotWaist],\n\t[ItemType.ItemTypeLegs]: [ItemSlot.ItemSlotLegs],\n\t[ItemType.ItemTypeFeet]: [ItemSlot.ItemSlotFeet],\n\t[ItemType.ItemTypeFinger]: [ItemSlot.ItemSlotFinger1, ItemSlot.ItemSlotFinger2],\n\t[ItemType.ItemTypeTrinket]: [ItemSlot.ItemSlotTrinket1, ItemSlot.ItemSlotTrinket2],\n\t[ItemType.ItemTypeRanged]: [ItemSlot.ItemSlotRanged],\n};\n\nexport function getEligibleItemSlots(item: Item): Array<ItemSlot> {\n\tif (itemTypeToSlotsMap[item.type]) {\n\t\treturn itemTypeToSlotsMap[item.type]!;\n\t}\n\n\tif (item.type == ItemType.ItemTypeWeapon) {\n\t\tif (item.handType == HandType.HandTypeMainHand) {\n\t\t\treturn [ItemSlot.ItemSlotMainHand];\n\t\t} else if (item.handType == HandType.HandTypeOffHand) {\n\t\t\treturn [ItemSlot.ItemSlotOffHand];\n\t\t\t// Missing HandTypeTwoHand\n\t\t\t// We allow 2H weapons to be wielded in mainhand and offhand for Fury Warriors\n\t\t} else {\n\t\t\treturn [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand];\n\t\t}\n\t}\n\n\t// Should never reach here\n\tthrow new Error('Could not find item slots for item: ' + Item.toJsonString(item));\n}\n\n// Returns whether the given main-hand and off-hand items can be worn at the\n// same time.\nexport function validWeaponCombo(mainHand: Item | null | undefined, offHand: Item | null | undefined, canDW2h: boolean): boolean {\n\tif (mainHand == null || offHand == null) {\n\t\treturn true;\n\t}\n\n\tif (mainHand.handType == HandType.HandTypeTwoHand && !canDW2h) {\n\t\treturn false;\n\t} else if (\n\t\tmainHand.handType == HandType.HandTypeTwoHand &&\n\t\t(mainHand.weaponType == WeaponType.WeaponTypePolearm || mainHand.weaponType == WeaponType.WeaponTypeStaff)\n\t) {\n\t\treturn false;\n\t}\n\n\tif (offHand.handType == HandType.HandTypeTwoHand && !canDW2h) {\n\t\treturn false;\n\t} else if (\n\t\toffHand.handType == HandType.HandTypeTwoHand &&\n\t\t(offHand.weaponType == WeaponType.WeaponTypePolearm || offHand.weaponType == WeaponType.WeaponTypeStaff)\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n// Returns all item slots to which the enchant might be applied.\n//\n// Note that this alone is not enough; some items have further restrictions,\n// e.g. some weapon enchants may only be applied to 2H weapons.\nexport function getEligibleEnchantSlots(enchant: Enchant): Array<ItemSlot> {\n\treturn [enchant.type]\n\t\t.concat(enchant.extraTypes || [])\n\t\t.map(type => {\n\t\t\tif (itemTypeToSlotsMap[type]) {\n\t\t\t\treturn itemTypeToSlotsMap[type]!;\n\t\t\t}\n\n\t\t\tif (type == ItemType.ItemTypeWeapon) {\n\t\t\t\treturn [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand];\n\t\t\t}\n\n\t\t\t// Should never reach here\n\t\t\tthrow new Error('Could not find item slots for enchant: ' + Enchant.toJsonString(enchant));\n\t\t})\n\t\t.flat();\n}\n\nexport function enchantAppliesToItem(enchant: Enchant, item: Item): boolean {\n\tconst sharedSlots = intersection(getEligibleEnchantSlots(enchant), getEligibleItemSlots(item));\n\tif (sharedSlots.length == 0) return false;\n\n\tif (enchant.enchantType == EnchantType.EnchantTypeTwoHand && item.handType != HandType.HandTypeTwoHand) return false;\n\n\tif (\n\t\t// All off-hand enchants can be applied to shields as well\n\t\t(enchant.enchantType == EnchantType.EnchantTypeShield || enchant.enchantType == EnchantType.EnchantTypeOffHand) !==\n\t\t(item.weaponType == WeaponType.WeaponTypeShield)\n\t)\n\t\treturn false;\n\n\tif (enchant.enchantType == EnchantType.EnchantTypeStaff && item.weaponType != WeaponType.WeaponTypeStaff) return false;\n\n\tif (\n\t\t(enchant.enchantType == EnchantType.EnchantTypeOffHand) !==\n\t\t(item.weaponType == WeaponType.WeaponTypeOffHand ||\n\t\t\t// All off-hand enchants can be applied to shields as well\n\t\t\t(item.weaponType == WeaponType.WeaponTypeShield && enchant.enchantType == EnchantType.EnchantTypeOffHand))\n\t)\n\t\treturn false;\n\n\tif (sharedSlots.includes(ItemSlot.ItemSlotRanged)) {\n\t\tif (\n\t\t\t![RangedWeaponType.RangedWeaponTypeBow, RangedWeaponType.RangedWeaponTypeCrossbow, RangedWeaponType.RangedWeaponTypeGun].includes(\n\t\t\t\titem.rangedWeaponType,\n\t\t\t)\n\t\t)\n\t\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport function canEquipEnchant<SpecType extends Spec>(enchant: Enchant, playerSpec: PlayerSpec<SpecType>): boolean {\n\tif (enchant.classAllowlist.length > 0 && !enchant.classAllowlist.includes(playerSpec.classID)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport function newUnitReference(raidIndex: number): UnitReference {\n\treturn UnitReference.create({\n\t\ttype: UnitReference_Type.Player,\n\t\tindex: raidIndex,\n\t});\n}\n\nexport function emptyUnitReference(): UnitReference {\n\treturn UnitReference.create();\n}\n\n// Makes a new set of assignments with everything 0'd out.\nexport function makeBlankBlessingsAssignments(numPaladins: number): BlessingsAssignments {\n\tconst assignments = BlessingsAssignments.create();\n\tfor (let i = 0; i < numPaladins; i++) {\n\t\tassignments.paladins.push(\n\t\t\tBlessingsAssignment.create({\n\t\t\t\tblessings: new Array(NUM_SPECS).fill(Blessings.BlessingUnknown),\n\t\t\t}),\n\t\t);\n\t}\n\treturn assignments;\n}\n\nexport function makeBlessingsAssignments(numPaladins: number): BlessingsAssignments {\n\tconst assignments = makeBlankBlessingsAssignments(numPaladins);\n\tfor (let i = 1; i < Object.keys(Spec).length; i++) {\n\t\tconst spec = i;\n\t\tconst blessings = [Blessings.BlessingOfKings, Blessings.BlessingOfMight];\n\t\tfor (let j = 0; j < blessings.length; j++) {\n\t\t\tif (j >= assignments.paladins.length) {\n\t\t\t\t// Can't assign more blessings since we ran out of paladins\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tassignments.paladins[j].blessings[spec] = blessings[j];\n\t\t}\n\t}\n\treturn assignments;\n}\n\n// Default blessings settings in the raid sim UI.\nexport function makeDefaultBlessings(numPaladins: number): BlessingsAssignments {\n\treturn makeBlessingsAssignments(numPaladins);\n}\n\nexport const orderedResourceTypes: Array<ResourceType> = [\n\tResourceType.ResourceTypeHealth,\n\tResourceType.ResourceTypeMana,\n\tResourceType.ResourceTypeEnergy,\n\tResourceType.ResourceTypeRage,\n\tResourceType.ResourceTypeComboPoints,\n\tResourceType.ResourceTypeFocus,\n\tResourceType.ResourceTypeRunicPower,\n\tResourceType.ResourceTypeBloodRune,\n\tResourceType.ResourceTypeFrostRune,\n\tResourceType.ResourceTypeUnholyRune,\n\tResourceType.ResourceTypeDeathRune,\n\tResourceType.ResourceTypeLunarEnergy,\n\tResourceType.ResourceTypeSolarEnergy,\n];\n\nexport const AL_CATEGORY_HARD_MODE = 'Hard Mode';\nexport const AL_CATEGORY_TITAN_RUNE = 'Titan Rune';\n","// An event ID uniquely identifies a single event that occurred, usually due to\n// some user action like changing a piece of gear.\n//\n// Event IDs allow us to make sure that hierarchies of TypedEvents fire only once,\n// for a given event. This is very important for certain features, like undo/redo.\nexport type EventID = number;\n\nexport interface Disposable {\n\tdispose(): void;\n}\n\nexport interface Listener<T> {\n\t(eventID: EventID, event: T): any;\n}\n\ninterface FiredEventData {\n\teventID: EventID,\n\terror: Error,\n}\n\ninterface FrozenEventData<T> {\n\teventID: EventID,\n\tevent: T,\n}\n\n/** Provides a type-safe event interface. */\nexport class TypedEvent<T> {\n\t// Optional label to help debug.\n\tprivate label: string;\n\n\tconstructor(label?: string) {\n\t\tthis.label = label || '';\n\t}\n\n\tprivate listeners: Array<Listener<T>> = [];\n\n\t// The events which have already been fired from this TypedEvent.\n\tprivate firedEvents: Array<FiredEventData> = [];\n\n\t// Currently frozen events pending on this TypedEvent. See freezeAll()\n\t// for more details.\n\tprivate frozenEvents: Array<FrozenEventData<T>> = [];\n\n\t// Registers a new listener to this event.\n\ton(listener: Listener<T>): Disposable {\n\t\tthis.listeners.push(listener);\n\t\treturn {\n\t\t\tdispose: () => this.off(listener),\n\t\t};\n\t}\n\n\t// Removes a listener from this event.\n\toff(listener: Listener<T>) {\n\t\tconst idx = this.listeners.indexOf(listener);\n\t\tif (idx != -1) {\n\t\t\tthis.listeners.splice(idx, 1);\n\t\t}\n\t}\n\n\t// Convenience for on() which calls off() autmatically after firing once.\n\tonce(listener: Listener<T>): Disposable {\n\t\tconst onceListener = (eventID: EventID, event: T) => {\n\t\t\tthis.off(onceListener);\n\t\t\tlistener(eventID, event);\n\t\t};\n\n\t\treturn this.on(onceListener);\n\t}\n\n\temit(eventID: EventID, event: T) {\n\t\tconst originalEvent = this.firedEvents.find(fe => fe.eventID == eventID);\n\t\tif (originalEvent) {\n\t\t\tif (!thawing) {\n\t\t\t\t// Uncomment this for debugging TypedEvent stuff. There are a few legitimate\n\t\t\t\t// cases where it fires though and it can be very noisy.\n\t\t\t\t//console.warn('EventID collision outside of thawing, original event: ' + (originalEvent.error.stack || originalEvent.error));\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tthis.firedEvents.push({\n\t\t\teventID: eventID,\n\t\t\terror: new Error('Original event'),\n\t\t});\n\n\t\tif (freezeCount > 0) {\n\t\t\tif (this.frozenEvents.length == 0) {\n\t\t\t\tfrozenTypedEvents.push(this);\n\t\t\t}\n\t\t\tthis.frozenEvents.push({\n\t\t\t\teventID: eventID,\n\t\t\t\tevent: event,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.fireEventInternal(eventID, event);\n\t\t}\n\t}\n\n\tprivate fireEventInternal(eventID: EventID, event: T) {\n\t\tthis.listeners.forEach(listener => listener(eventID, event));\n\t}\n\n\t// Executes the provided callback while all TypedEvents are frozen.\n\t// Freezes all TypedEvent objects so that new calls to emit() do not fire the event.\n\t// Instead, the events will be held until the execution is finishd, at which point\n\t// all TypedEvents will fire all of the events that were frozen.\n\t//\n\t// This is used when a single user action activates multiple separate events, to ensure\n\t// none of them fire until all changes have been applied.\n\t//\n\t// This function is very similar to a locking mechanism.\n\tstatic freezeAllAndDo(func: () => void) {\n\t\tfreezeCount++;\n\n\t\ttry {\n\t\t\tfunc();\n\t\t} catch (e) {\n\t\t\tconsole.error('Caught error in freezeAllAndDo: ' + e);\n\t\t} finally {\n\t\t\tfreezeCount--;\n\t\t\tif (freezeCount > 0) {\n\t\t\t\t// Don't do anything until things are fully unfrozen.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthawing = true;\n\t\t\tconst typedEvents = frozenTypedEvents.slice();\n\t\t\tfrozenTypedEvents = [];\n\n\t\t\ttypedEvents.forEach(typedEvent => {\n\t\t\t\tconst frozenEvents = typedEvent.frozenEvents.slice();\n\t\t\t\ttypedEvent.frozenEvents = [];\n\n\t\t\t\tfrozenEvents.forEach(frozenEvent => typedEvent.fireEventInternal(frozenEvent.eventID, frozenEvent.event));\n\t\t\t});\n\t\t\tthawing = false;\n\t\t}\n\t}\n\n\tstatic nextEventID(): EventID {\n\t\treturn nextEventID++;\n\t}\n\n\tstatic onAny(events: Array<TypedEvent<any>>, label?: string): TypedEvent<void> {\n\t\tconst newEvent = new TypedEvent<void>(label);\n\t\tevents.forEach(emitter => emitter.on(eventID => newEvent.emit(eventID)));\n\t\treturn newEvent;\n\t}\n}\n\n// If this is > 0 then events are frozen.\nlet freezeCount = 0;\n\n// Indicates whether we are currently in the process of unfreezing. Just used to add a warning.\nlet thawing = false;\n\nlet frozenTypedEvents: Array<TypedEvent<any>> = [];\nlet nextEventID: EventID = 0;\n","export const wowheadSupportedLanguages: Record<string, string> = {\n\t'en': 'English',\n\t'cn': '简体中文',\n\t'de': 'Deutsch',\n\t'es': 'Español',\n\t'fr': 'Français',\n\t'it': 'Italiano',\n\t'ko': '한국어',\n\t'pt': 'Português Brasileiro',\n\t'ru': 'Русский',\n};\n\n// Returns a 2-letter language code if it is a wowhead-supported language, or '' otherwise.\nexport function getBrowserLanguageCode(): string {\n\tconst browserLang = (navigator.language || '').substring(0, 2);\n\tif (Object.keys(wowheadSupportedLanguages).includes(browserLang)) {\n\t\treturn browserLang;\n\t} else {\n\t\treturn '';\n\t}\n}\n\nexport function getLanguageCode(): string {\n\treturn cachedLanguageCode_;\n}\n\nexport function getWowheadLanguagePrefix(): string {\n\treturn cachedWowheadLanguagePrefix_;\n}\n\nexport function setLanguageCode(newLang: string) {\n\t// Use '' instead of 'en' because wowhead doesn't like having the en/ prefix.\n\tcachedLanguageCode_ = newLang == 'en' ? '' : newLang;\n\tcachedWowheadLanguagePrefix_ = cachedLanguageCode_ ? cachedLanguageCode_ + '/' : '';\n}\n\nlet cachedLanguageCode_: string = '';\nlet cachedWowheadLanguagePrefix_: string = '';\n","import { GemColor , Profession } from '../proto/common.js';\nimport {\n\tUIGem as Gem,\n} from '../proto/ui.js';\nimport { getEnumValues } from '../utils.js';\n\nexport const GEM_COLORS = (getEnumValues(GemColor) as Array<GemColor>).filter(color => color != GemColor.GemColorUnknown);\nexport const PRIMARY_COLORS = [GemColor.GemColorRed, GemColor.GemColorYellow, GemColor.GemColorBlue];\n// Secondary is intentionally ordered so that it matches the inverse of PRIMARY_COLORS.\nexport const SECONDARY_COLORS = [GemColor.GemColorGreen, GemColor.GemColorPurple, GemColor.GemColorOrange];\n\nexport const socketToMatchingColors = new Map<GemColor, Array<GemColor>>();\nsocketToMatchingColors.set(GemColor.GemColorMeta, [GemColor.GemColorMeta]);\nsocketToMatchingColors.set(GemColor.GemColorBlue, [GemColor.GemColorBlue, GemColor.GemColorPurple, GemColor.GemColorGreen, GemColor.GemColorPrismatic]);\nsocketToMatchingColors.set(GemColor.GemColorRed, [GemColor.GemColorRed, GemColor.GemColorPurple, GemColor.GemColorOrange, GemColor.GemColorPrismatic]);\nsocketToMatchingColors.set(GemColor.GemColorYellow, [GemColor.GemColorYellow, GemColor.GemColorOrange, GemColor.GemColorGreen, GemColor.GemColorPrismatic]);\nsocketToMatchingColors.set(GemColor.GemColorPrismatic, [\n\tGemColor.GemColorRed,\n\tGemColor.GemColorOrange,\n\tGemColor.GemColorYellow,\n\tGemColor.GemColorGreen,\n\tGemColor.GemColorBlue,\n\tGemColor.GemColorPurple,\n\tGemColor.GemColorPrismatic,\n]);\nsocketToMatchingColors.set(GemColor.GemColorCogwheel, [GemColor.GemColorCogwheel]);\n\nexport function gemColorMatchesSocket(gemColor: GemColor, socketColor: GemColor) {\n\treturn gemColor == socketColor || (socketToMatchingColors.has(socketColor) && socketToMatchingColors.get(socketColor)!.includes(gemColor));\n}\n\n// Whether the gem matches the given socket color, for the purposes of gaining the socket bonuses.\nexport function gemMatchesSocket(gem: Gem, socketColor: GemColor) {\n\treturn gemColorMatchesSocket(gem.color, socketColor);\n}\n\n// Whether the gem is capable of slotting into a socket of the given color.\nexport function gemEligibleForSocket(gem: Gem, socketColor: GemColor) {\n\tswitch (socketColor) {\n\t\tcase GemColor.GemColorMeta:\n\t\t\treturn gem.color == GemColor.GemColorMeta;\n\t\tcase GemColor.GemColorCogwheel:\n\t\t\treturn gem.color == GemColor.GemColorCogwheel;\n\t\tdefault:\n\t\t\treturn gem.color != GemColor.GemColorMeta && gem.color != GemColor.GemColorCogwheel;\n\t}\n}\n\nexport function isUnrestrictedGem(gem: Gem, phase?: number): boolean {\n\treturn !gem.unique &&\n\t\tgem.requiredProfession == Profession.ProfessionUnknown &&\n\t\t(phase == null || gem.phase <= phase);\n}\n\n\nexport class MetaGemCondition {\n\treadonly id: number;\n\treadonly description: string;\n\n\treadonly minRed: number;\n\treadonly minYellow: number;\n\treadonly minBlue: number;\n\n\treadonly compareColorGreater: GemColor;\n\treadonly compareColorLesser: GemColor;\n\n\tconstructor(id: number, description: string, minRed: number, minYellow: number, minBlue: number, compareColorGreater: GemColor, compareColorLesser: GemColor) {\n\t\tthis.id = id;\n\t\tthis.description = description;\n\t\tthis.minRed = minRed;\n\t\tthis.minYellow = minYellow;\n\t\tthis.minBlue = minBlue;\n\t\tthis.compareColorGreater = compareColorGreater;\n\t\tthis.compareColorLesser = compareColorLesser;\n\n\t\tmetaGemConditions.set(this.id, this);\n\t}\n\n\t// Whether the condition is met, i.e. the meta gem is activated.\n\tisMet(numRed: number, numYellow: number, numBlue: number): boolean {\n\t\tif (!(numRed >= this.minRed && numYellow >= this.minYellow && numBlue >= this.minBlue)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.compareColorGreater == GemColor.GemColorUnknown) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst numGreater = MetaGemCondition.getNumInCategory(this.compareColorGreater, numRed, numYellow, numBlue);\n\t\tconst numLesser = MetaGemCondition.getNumInCategory(this.compareColorLesser, numRed, numYellow, numBlue);\n\t\treturn numGreater > numLesser;\n\t}\n\n\tisCompareColorCondition(): boolean {\n\t\treturn this.minRed == 0 && this.minYellow == 0 && this.minBlue == 0;\n\t}\n\n\tisOneOfEach(): boolean {\n\t\treturn this.minRed == 1 && this.minYellow == 1 && this.minBlue == 1;\n\t}\n\n\tisTwoAndOne(): boolean {\n\t\treturn [this.minRed, this.minYellow, this.minBlue].includes(2);\n\t}\n\n\tisThreeOfAColor(): boolean {\n\t\treturn this.minRed == 3 || this.minYellow == 3 || this.minBlue == 3;\n\t}\n\n\tprivate static getNumInCategory(gemColor: GemColor, numRed: number, numYellow: number, numBlue: number): number {\n\t\tif (gemColor == GemColor.GemColorRed) {\n\t\t\treturn numRed;\n\t\t} else if (gemColor == GemColor.GemColorYellow) {\n\t\t\treturn numYellow;\n\t\t} else if (gemColor == GemColor.GemColorBlue) {\n\t\t\treturn numBlue;\n\t\t} else {\n\t\t\tthrow new Error('Invalid gem color for category check: ' + gemColor);\n\t\t}\n\t}\n\n\tstatic fromMinColors(id: number, description: string, minRed: number, minYellow: number, minBlue: number): MetaGemCondition {\n\t\treturn new MetaGemCondition(id, description, minRed, minYellow, minBlue, GemColor.GemColorUnknown, GemColor.GemColorUnknown);\n\t}\n\n\tstatic fromCompareColors(id: number, description: string, compareColorGreater: GemColor, compareColorLesser: GemColor): MetaGemCondition {\n\t\treturn new MetaGemCondition(id, description, 0, 0, 0, compareColorGreater, compareColorLesser);\n\t}\n}\n\nconst metaGemConditions = new Map<number, MetaGemCondition>();\n\nexport function getMetaGemCondition(id: number): MetaGemCondition {\n\tif (!metaGemConditions.has(id)) {\n\t\tthrow new Error('Missing meta gem condition for gem: ' + id);\n\t}\n\n\treturn metaGemConditions.get(id)!;\n}\n\nexport function isMetaGemActive(metaGem: Gem, numRed: number, numYellow: number, numBlue: number): boolean {\n\treturn getMetaGemCondition(metaGem.id).isMet(numRed, numYellow, numBlue);\n}\n\nexport function getMetaGemConditionDescription(metaGem: Gem): string {\n\treturn getMetaGemCondition(metaGem.id).description;\n}\n\n// Keep these lists in order by item ID.\nexport const FLEET_SHADOWSPIRIT_DIAMOND = MetaGemCondition.fromMinColors(52289, 'Requires at least 2 Yellow Gems.', 0, 2, 0);\nexport const CHAOTIC_SHADOWSPIRIT_DIAMOND = MetaGemCondition.fromMinColors(52291, 'Requires at least 3 Red Gems.', 3, 0, 0);\nexport const BRACING_SHADOWSPIRIT_DIAMOND = MetaGemCondition.fromMinColors(52292, 'Requires at least 1 Blue Gem and 1 Yellow Gem.', 0, 1, 1);\nexport const ETERNAL_SHADOWSPIRIT_DIAMOND = MetaGemCondition.fromMinColors(52293, 'Requires at least 3 Blue Gems.', 0, 0, 3);\nexport const AUSTERE_SHADOWSPIRIT_DIAMOND = MetaGemCondition.fromMinColors(52294, 'Requries at least 2 Yellow Gems.', 0, 2, 0);\nexport const EFFULGENT_SHADOWSPIRIT_DIAMOND = MetaGemCondition.fromMinColors(52295, 'Requires at least 1 Red Gem and 1 Yellow Gem.', 1, 1, 0);\nexport const EMBER_SHADOWSPIRIT_DIAMOND = MetaGemCondition.fromMinColors(52296, 'Requires at least 2 Yellow Gems.', 0, 2, 0);\nexport const REVITALIzING_SHADOWSPIRIT_DIAMOND = MetaGemCondition.fromMinColors(52297, 'Requires at least 1 Blue Gem and 1 Yellow Gem.', 0, 1, 1);\nexport const DESTRUCTIVE_SHADOWSPIRIT_DIAMOND = MetaGemCondition.fromMinColors(52298, 'Requires at least 2 Red Gems.', 2, 0, 0);\nexport const POWERFUL_SHADOWSPIRIT_DIAMOND = MetaGemCondition.fromMinColors(52299, 'Requires at least 2 Blue Gems.', 0, 0, 2);\nexport const ENIGMATIC_SHADOWSPIRIT_DIAMOND = MetaGemCondition.fromMinColors(52300, 'Requires at least 1 Blue Gem and 1 Yellow Gem.', 0, 1, 1);\nexport const IMPASSIVE_SHADOWSPIRIT_DIAMOND = MetaGemCondition.fromMinColors(52301, 'Requires at least 1 Blue Gem and 1 Yellow Gem.', 0, 1, 1);\nexport const FORLORN_SHADOWSPIRIT_DIAMOND = MetaGemCondition.fromMinColors(52302, 'Requires at least 1 Blue Gem and 1 Yellwo Gem.', 0, 1, 1);\nexport const AGILE_SHADOWSPIRIT_DIAMOND = MetaGemCondition.fromMinColors(68778, 'Requires at least 3 Red Gems.', 3, 0, 0);\nexport const REVERBERATING_SHADOWSPIRIT_DIAMOND = MetaGemCondition.fromMinColors(68779, 'Requires at least 3 Red Gems.', 3, 0, 0);\nexport const BURNING_SHADOWSPIRIT_DIAMOND = MetaGemCondition.fromMinColors(68780, 'Requires at least 3 Red Gems.', 3, 0, 0);\n\n// WOTLK GEMS\nexport const CHAOTIC_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41285, 'Requires at least 2 Blue Gems.', 0, 0, 2);\nexport const DESTRUCTIVE_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41307, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const EMBER_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41333, 'Requires at least 3 Red Gems.', 3, 0, 0);\nexport const ENIGMATIC_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41335, 'Requires at least 2 Red Gems and at least 1 Yellow Gem.', 2, 1, 0);\nexport const EFFULGENT_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41377, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const SWIFT_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41339, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const TIRELESS_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41375, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const REVITALIZING_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41376, 'Requires at least 2 Red Gems.', 2, 0, 0);\nexport const FORLORN_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41378, 'Requires at least 2 Yellow Gems and at least 1 Blue Gem.', 0, 2, 1);\nexport const IMPASSIVE_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41379, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\n\nexport const AUSTERE_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41380, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const PERSISTENT_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41381, 'Requires at least 2 Yellow Gems and at least 1 Blue Gem.', 0, 2, 1);\nexport const TRENCHANT_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41382, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const INVIGORATING_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41385, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const BEAMING_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41389, 'Requires at least 2 Red Gems and at least 1 Yellow Gem.', 2, 1, 0);\nexport const BRACING_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41395, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\nexport const ETERNAL_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41396, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\nexport const POWERFUL_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41397, 'Requires at least 3 Blue Gems.', 0, 0, 3);\nexport const RELENTLESS_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41398, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const THUNDERING_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41400, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const INSIGHTFUL_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41401, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const SWIFT_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44076, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const TIRELESS_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44078, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const ENIGMATIC_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44081, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\nexport const IMPASSIVE_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44082, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const FORLORN_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44084, 'Requires at least 2 Yellow Gems and at least 1 Blue Gem.', 0, 2, 1);\nexport const PERSISTENT_EARTHSHATTER_DIAMOND = MetaGemCondition.fromMinColors(44087, 'Requires at least 3 Blue Gems.', 0, 0, 3);\nexport const POWERFUL_EARTHSHATTER_DIAMOND = MetaGemCondition.fromMinColors(44088, 'Requires at least 2 Blue Gems and at least 1 Yellow Gem.', 0, 1, 2);\nexport const TRENCHANT_EARTHSHATTER_DIAMOND = MetaGemCondition.fromMinColors(44089, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\n\n// TBC GEMS\nexport const BRUTAL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25899, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const CHAOTIC_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(34220, 'Requires at least 2 Blue Gems.', 0, 0, 2);\nexport const DESTRUCTIVE_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(25890, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const EMBER_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(35503, 'Requires at least 3 Red Gems.', 3, 0, 0);\nexport const ETERNAL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(35501, 'Requires at least 2 Blue Gems and at least 1 Yellow Gem.', 0, 1, 2);\nexport const IMBUED_UNSTABLE_DIAMOND = MetaGemCondition.fromMinColors(32641, 'Requires at least 3 Yellow Gems.', 0, 3, 0);\nexport const INSIGHTFUL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25901, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const POWERFUL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25896, 'Requires at least 3 Blue Gems.', 0, 0, 3);\nexport const RELENTLESS_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(32409, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const SWIFT_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(25894, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const SWIFT_STARFIRE_DIAMOND = MetaGemCondition.fromMinColors(28557, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const SWIFT_WINDFIRE_DIAMOND = MetaGemCondition.fromMinColors(28556, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const TENACIOUS_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25898, 'Requires at least 5 Blue Gems.', 0, 0, 5);\nexport const THUNDERING_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(32410, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\n\nexport const BRACING_EARTHSTORM_DIAMOND = MetaGemCondition.fromCompareColors(25897, 'Requires more Red Gems than Blue Gems.', GemColor.GemColorRed, GemColor.GemColorBlue);\nexport const ENIGMATIC_SKYFIRE_DIAMOND = MetaGemCondition.fromCompareColors(25895, 'Requires more Red Gems than Yellow Gems.', GemColor.GemColorRed, GemColor.GemColorYellow);\nexport const MYSTICAL_SKYFIRE_DIAMOND = MetaGemCondition.fromCompareColors(25893, 'Requires more Blue Gems than Yellow Gems.', GemColor.GemColorBlue, GemColor.GemColorYellow);\nexport const POTENT_UNSTABLE_DIAMOND = MetaGemCondition.fromCompareColors(32640, 'Requires more Blue Gems than Yellow Gems.', GemColor.GemColorBlue, GemColor.GemColorYellow);\n\nconst emptyGemSocketIcons: Partial<Record<GemColor, string>> = {\n\t[GemColor.GemColorBlue]: 'https://wow.zamimg.com/images/icons/socket-blue.gif',\n\t[GemColor.GemColorMeta]: 'https://wow.zamimg.com/images/icons/socket-meta.gif',\n\t[GemColor.GemColorRed]: 'https://wow.zamimg.com/images/icons/socket-red.gif',\n\t[GemColor.GemColorYellow]: 'https://wow.zamimg.com/images/icons/socket-yellow.gif',\n\t[GemColor.GemColorPrismatic]: 'https://wow.zamimg.com/images/icons/socket-prismatic.gif',\n\t[GemColor.GemColorCogwheel]: 'https://wow.zamimg.com/images/icons/socket-cogwheel.gif',\n};\nexport function getEmptyGemSocketIconUrl(color: GemColor): string {\n\tif (emptyGemSocketIcons[color])\n\t\treturn emptyGemSocketIcons[color] as string;\n\n\tthrow new Error('No empty socket url for gem socket color: ' + color);\n}\n","import { ResourceType } from '../proto/api.js';\nimport { ArmorType, Class, ItemSlot, Profession, PseudoStat, Race, RangedWeaponType, Spec, Stat, WeaponType } from '../proto/common.js';\nimport { DungeonDifficulty, RaidFilterOption, RepFaction, RepLevel, SourceFilterOption } from '../proto/ui.js';\n\nexport const armorTypeNames: Map<ArmorType, string> = new Map([\n\t[ArmorType.ArmorTypeUnknown, 'Unknown'],\n\t[ArmorType.ArmorTypeCloth, 'Cloth'],\n\t[ArmorType.ArmorTypeLeather, 'Leather'],\n\t[ArmorType.ArmorTypeMail, 'Mail'],\n\t[ArmorType.ArmorTypePlate, 'Plate'],\n]);\n\nexport const weaponTypeNames: Map<WeaponType, string> = new Map([\n\t[WeaponType.WeaponTypeUnknown, 'Unknown'],\n\t[WeaponType.WeaponTypeAxe, 'Axe'],\n\t[WeaponType.WeaponTypeDagger, 'Dagger'],\n\t[WeaponType.WeaponTypeFist, 'Fist'],\n\t[WeaponType.WeaponTypeMace, 'Mace'],\n\t[WeaponType.WeaponTypeOffHand, 'Misc'],\n\t[WeaponType.WeaponTypePolearm, 'Polearm'],\n\t[WeaponType.WeaponTypeShield, 'Shield'],\n\t[WeaponType.WeaponTypeStaff, 'Staff'],\n\t[WeaponType.WeaponTypeSword, 'Sword'],\n]);\n\nexport const rangedWeaponTypeNames: Map<RangedWeaponType, string> = new Map([\n\t[RangedWeaponType.RangedWeaponTypeUnknown, 'Unknown'],\n\t[RangedWeaponType.RangedWeaponTypeBow, 'Bow'],\n\t[RangedWeaponType.RangedWeaponTypeCrossbow, 'Crossbow'],\n\t[RangedWeaponType.RangedWeaponTypeGun, 'Gun'],\n\t[RangedWeaponType.RangedWeaponTypeRelic, 'Relic'],\n\t[RangedWeaponType.RangedWeaponTypeThrown, 'Thrown'],\n\t[RangedWeaponType.RangedWeaponTypeWand, 'Wand'],\n]);\n\nexport const raceNames: Map<Race, string> = new Map([\n\t[Race.RaceUnknown, 'None'],\n\t[Race.RaceBloodElf, 'Blood Elf'],\n\t[Race.RaceDraenei, 'Draenei'],\n\t[Race.RaceDwarf, 'Dwarf'],\n\t[Race.RaceGnome, 'Gnome'],\n\t[Race.RaceGoblin, 'Goblin'],\n\t[Race.RaceHuman, 'Human'],\n\t[Race.RaceNightElf, 'Night Elf'],\n\t[Race.RaceOrc, 'Orc'],\n\t[Race.RaceTauren, 'Tauren'],\n\t[Race.RaceTroll, 'Troll'],\n\t[Race.RaceUndead, 'Undead'],\n\t[Race.RaceWorgen, 'Worgen'],\n]);\n\nexport function nameToRace(name: string): Race {\n\tconst normalized = name.toLowerCase().replaceAll(' ', '');\n\tfor (const [key, value] of raceNames) {\n\t\tif (value.toLowerCase().replaceAll(' ', '') == normalized) {\n\t\t\treturn key;\n\t\t}\n\t}\n\treturn Race.RaceUnknown;\n}\n\nexport const classNames: Map<Class, string> = new Map([\n\t[Class.ClassUnknown, 'None'],\n\t[Class.ClassDruid, 'Druid'],\n\t[Class.ClassHunter, 'Hunter'],\n\t[Class.ClassMage, 'Mage'],\n\t[Class.ClassPaladin, 'Paladin'],\n\t[Class.ClassPriest, 'Priest'],\n\t[Class.ClassRogue, 'Rogue'],\n\t[Class.ClassShaman, 'Shaman'],\n\t[Class.ClassWarlock, 'Warlock'],\n\t[Class.ClassWarrior, 'Warrior'],\n\t[Class.ClassDeathKnight, 'Death Knight'],\n]);\n\nexport function nameToClass(name: string): Class {\n\tconst lower = name.toLowerCase();\n\tfor (const [key, value] of classNames) {\n\t\tif (value.toLowerCase().replace(/\\s+/g, '') == lower) {\n\t\t\treturn key;\n\t\t}\n\t}\n\treturn Class.ClassUnknown;\n}\n\nexport const professionNames: Map<Profession, string> = new Map([\n\t[Profession.ProfessionUnknown, 'None'],\n\t[Profession.Alchemy, 'Alchemy'],\n\t[Profession.Blacksmithing, 'Blacksmithing'],\n\t[Profession.Enchanting, 'Enchanting'],\n\t[Profession.Engineering, 'Engineering'],\n\t[Profession.Herbalism, 'Herbalism'],\n\t[Profession.Inscription, 'Inscription'],\n\t[Profession.Jewelcrafting, 'Jewelcrafting'],\n\t[Profession.Leatherworking, 'Leatherworking'],\n\t[Profession.Mining, 'Mining'],\n\t[Profession.Skinning, 'Skinning'],\n\t[Profession.Tailoring, 'Tailoring'],\n\t[Profession.Archeology, 'Archeology'],\n]);\n\nexport function nameToProfession(name: string): Profession {\n\tconst lower = name.toLowerCase();\n\tfor (const [key, value] of professionNames) {\n\t\tif (value.toLowerCase() == lower) {\n\t\t\treturn key;\n\t\t}\n\t}\n\treturn Profession.ProfessionUnknown;\n}\n\nexport const statOrder: Array<Stat> = [\n\tStat.StatHealth,\n\tStat.StatMana,\n\tStat.StatArmor,\n\tStat.StatBonusArmor,\n\tStat.StatStamina,\n\tStat.StatStrength,\n\tStat.StatAgility,\n\tStat.StatIntellect,\n\tStat.StatSpirit,\n\tStat.StatSpellPower,\n\tStat.StatSpellHit,\n\tStat.StatSpellCrit,\n\tStat.StatSpellHaste,\n\tStat.StatSpellPenetration,\n\tStat.StatMP5,\n\tStat.StatAttackPower,\n\tStat.StatRangedAttackPower,\n\tStat.StatMeleeHit,\n\tStat.StatMeleeCrit,\n\tStat.StatMeleeHaste,\n\tStat.StatArmorPenetration,\n\tStat.StatExpertise,\n\tStat.StatMastery,\n\tStat.StatDefense,\n\tStat.StatBlock,\n\tStat.StatDodge,\n\tStat.StatParry,\n\tStat.StatResilience,\n\tStat.StatArcaneResistance,\n\tStat.StatFireResistance,\n\tStat.StatFrostResistance,\n\tStat.StatNatureResistance,\n\tStat.StatShadowResistance,\n];\n\nexport const statNames: Map<Stat, string> = new Map([\n\t[Stat.StatStrength, 'Strength'],\n\t[Stat.StatAgility, 'Agility'],\n\t[Stat.StatStamina, 'Stamina'],\n\t[Stat.StatIntellect, 'Intellect'],\n\t[Stat.StatSpirit, 'Spirit'],\n\t[Stat.StatSpellPower, 'Spell Power'],\n\t[Stat.StatMP5, 'MP5'],\n\t[Stat.StatSpellHit, 'Spell Hit'],\n\t[Stat.StatSpellCrit, 'Spell Crit'],\n\t[Stat.StatSpellHaste, 'Spell Haste'],\n\t[Stat.StatSpellPenetration, 'Spell Pen'],\n\t[Stat.StatAttackPower, 'Attack Power'],\n\t[Stat.StatMeleeHit, 'Melee Hit'],\n\t[Stat.StatMeleeCrit, 'Melee Crit'],\n\t[Stat.StatMeleeHaste, 'Melee Haste'],\n\t[Stat.StatArmorPenetration, 'Armor Pen'],\n\t[Stat.StatMastery, 'Mastery'],\n\t[Stat.StatExpertise, 'Expertise'],\n\t[Stat.StatMana, 'Mana'],\n\t[Stat.StatArmor, 'Armor'],\n\t[Stat.StatRangedAttackPower, 'Ranged AP'],\n\t[Stat.StatDefense, 'Defense'],\n\t[Stat.StatBlock, 'Block'],\n\t[Stat.StatDodge, 'Dodge'],\n\t[Stat.StatParry, 'Parry'],\n\t[Stat.StatResilience, 'Resilience'],\n\t[Stat.StatHealth, 'Health'],\n\t[Stat.StatArcaneResistance, 'Arcane Resistance'],\n\t[Stat.StatFireResistance, 'Fire Resistance'],\n\t[Stat.StatFrostResistance, 'Frost Resistance'],\n\t[Stat.StatNatureResistance, 'Nature Resistance'],\n\t[Stat.StatShadowResistance, 'Shadow Resistance'],\n\t[Stat.StatBonusArmor, 'Bonus Armor'],\n\t[Stat.StatMastery, 'Mastery'],\n]);\n\nexport const shortSecondaryStatNames: Map<Stat, string> = new Map([\n\t[Stat.StatSpirit, 'Spirit'],\n\t[Stat.StatSpellHit, 'Hit'],\n\t[Stat.StatSpellCrit, 'Crit'],\n\t[Stat.StatSpellHaste, 'Haste'],\n\t[Stat.StatMeleeHit, 'Hit'],\n\t[Stat.StatMeleeCrit, 'Crit'],\n\t[Stat.StatMeleeHaste, 'Haste'],\n\t[Stat.StatExpertise, 'Expertise'],\n\t[Stat.StatMastery, 'Mastery'],\n\t[Stat.StatDefense, 'Defense'],\n\t[Stat.StatBlock, 'Block'],\n\t[Stat.StatDodge, 'Dodge'],\n\t[Stat.StatParry, 'Parry'],\n]);\n\nexport const pseudoStatOrder: Array<PseudoStat> = [\n\tPseudoStat.PseudoStatMainHandDps,\n\tPseudoStat.PseudoStatOffHandDps,\n\tPseudoStat.PseudoStatRangedDps,\n];\nexport const pseudoStatNames: Map<PseudoStat, string> = new Map([\n\t[PseudoStat.PseudoStatMainHandDps, 'Main Hand DPS'],\n\t[PseudoStat.PseudoStatOffHandDps, 'Off Hand DPS'],\n\t[PseudoStat.PseudoStatRangedDps, 'Ranged DPS'],\n\t[PseudoStat.PseudoStatDodge, 'Dodge Chance'],\n\t[PseudoStat.PseudoStatParry, 'Parry Chance'],\n]);\n\nexport function getClassStatName(stat: Stat, playerClass: Class): string {\n\tconst statName = statNames.get(stat);\n\tif (!statName) return 'UnknownStat';\n\tif (playerClass == Class.ClassHunter) {\n\t\treturn statName.replace('Melee', 'Ranged');\n\t} else {\n\t\treturn statName;\n\t}\n}\n\nexport const slotNames: Map<ItemSlot, string> = new Map([\n\t[ItemSlot.ItemSlotHead, 'Head'],\n\t[ItemSlot.ItemSlotNeck, 'Neck'],\n\t[ItemSlot.ItemSlotShoulder, 'Shoulders'],\n\t[ItemSlot.ItemSlotBack, 'Back'],\n\t[ItemSlot.ItemSlotChest, 'Chest'],\n\t[ItemSlot.ItemSlotWrist, 'Wrist'],\n\t[ItemSlot.ItemSlotHands, 'Hands'],\n\t[ItemSlot.ItemSlotWaist, 'Waist'],\n\t[ItemSlot.ItemSlotLegs, 'Legs'],\n\t[ItemSlot.ItemSlotFeet, 'Feet'],\n\t[ItemSlot.ItemSlotFinger1, 'Finger 1'],\n\t[ItemSlot.ItemSlotFinger2, 'Finger 2'],\n\t[ItemSlot.ItemSlotTrinket1, 'Trinket 1'],\n\t[ItemSlot.ItemSlotTrinket2, 'Trinket 2'],\n\t[ItemSlot.ItemSlotMainHand, 'Main Hand'],\n\t[ItemSlot.ItemSlotOffHand, 'Off Hand'],\n\t[ItemSlot.ItemSlotRanged, 'Ranged'],\n]);\n\nexport const resourceNames: Map<ResourceType, string> = new Map([\n\t[ResourceType.ResourceTypeNone, 'None'],\n\t[ResourceType.ResourceTypeHealth, 'Health'],\n\t[ResourceType.ResourceTypeMana, 'Mana'],\n\t[ResourceType.ResourceTypeEnergy, 'Energy'],\n\t[ResourceType.ResourceTypeRage, 'Rage'],\n\t[ResourceType.ResourceTypeComboPoints, 'Combo Points'],\n\t[ResourceType.ResourceTypeFocus, 'Focus'],\n\t[ResourceType.ResourceTypeRunicPower, 'Runic Power'],\n\t[ResourceType.ResourceTypeBloodRune, 'Blood Rune'],\n\t[ResourceType.ResourceTypeFrostRune, 'Frost Rune'],\n\t[ResourceType.ResourceTypeUnholyRune, 'Unholy Rune'],\n\t[ResourceType.ResourceTypeDeathRune, 'Death Rune'],\n\t[ResourceType.ResourceTypeSolarEnergy, 'Solar Energy'],\n\t[ResourceType.ResourceTypeLunarEnergy, 'Lunar Energy'],\n]);\n\nexport const resourceColors: Map<ResourceType, string> = new Map([\n\t[ResourceType.ResourceTypeNone, '#ffffff'],\n\t[ResourceType.ResourceTypeHealth, '#22ba00'],\n\t[ResourceType.ResourceTypeMana, '#2e93fa'],\n\t[ResourceType.ResourceTypeEnergy, '#ffd700'],\n\t[ResourceType.ResourceTypeRage, '#ff0000'],\n\t[ResourceType.ResourceTypeComboPoints, '#ffa07a'],\n\t[ResourceType.ResourceTypeFocus, '#cd853f'],\n\t[ResourceType.ResourceTypeRunicPower, '#5b99ee'],\n\t[ResourceType.ResourceTypeBloodRune, '#ff0000'],\n\t[ResourceType.ResourceTypeFrostRune, '#0000ff'],\n\t[ResourceType.ResourceTypeUnholyRune, '#00ff00'],\n\t[ResourceType.ResourceTypeDeathRune, '#8b008b'],\n\t[ResourceType.ResourceTypeSolarEnergy, '#d2952b'],\n\t[ResourceType.ResourceTypeLunarEnergy, '#2c4f8f'],\n]);\n\nexport function stringToResourceType(str: string): ResourceType {\n\tfor (const [key, val] of resourceNames) {\n\t\tif (val.toLowerCase() == str.toLowerCase()) {\n\t\t\treturn key;\n\t\t}\n\t}\n\treturn ResourceType.ResourceTypeNone;\n}\n\nexport const sourceNames: Map<SourceFilterOption, string> = new Map([\n\t[SourceFilterOption.SourceUnknown, 'Unknown'],\n\t[SourceFilterOption.SourceCrafting, 'Crafting'],\n\t[SourceFilterOption.SourceQuest, 'Quest'],\n\t[SourceFilterOption.SourceReputation, 'Reputation'],\n\t[SourceFilterOption.SourcePvp, 'PVP'],\n\t[SourceFilterOption.SourceDungeon, 'Dungeon'],\n\t[SourceFilterOption.SourceDungeonH, 'Dungeon (H)'],\n\t[SourceFilterOption.SourceRaid, 'Raid'],\n\t[SourceFilterOption.SourceRaidH, 'Raid (H)'],\n]);\nexport const raidNames: Map<RaidFilterOption, string> = new Map([\n\t[RaidFilterOption.RaidUnknown, 'Unknown'],\n\t[RaidFilterOption.RaidIcecrownCitadel, 'Icecrown Citadel'],\n\t[RaidFilterOption.RaidRubySanctum, 'Ruby Sanctum'],\n\t[RaidFilterOption.RaidBlackwingDescent, 'Blackwing Descent'],\n\t[RaidFilterOption.RaidTheBastionOfTwilight, 'The Bastion of Twilight'],\n\t[RaidFilterOption.RaidBaradinHold, 'Baradin Hold'],\n\t[RaidFilterOption.RaidThroneOfTheFourWinds, 'Throne of the Four Winds'],\n\t[RaidFilterOption.RaidFirelands, 'Firelands'],\n\t[RaidFilterOption.RaidDragonSoul, 'Dragon Soul'],\n]);\n\nexport const difficultyNames: Map<DungeonDifficulty, string> = new Map([\n\t[DungeonDifficulty.DifficultyUnknown, 'Unknown'],\n\t[DungeonDifficulty.DifficultyNormal, 'N'],\n\t[DungeonDifficulty.DifficultyHeroic, 'H'],\n\t[DungeonDifficulty.DifficultyTitanRuneAlpha, 'TRA'],\n\t[DungeonDifficulty.DifficultyTitanRuneBeta, 'TRB'],\n\t[DungeonDifficulty.DifficultyRaid10, '10N'],\n\t[DungeonDifficulty.DifficultyRaid10H, '10H'],\n\t[DungeonDifficulty.DifficultyRaid25, 'RN'],\n\t[DungeonDifficulty.DifficultyRaid25H, 'RH'],\n]);\n\nexport const REP_LEVEL_NAMES: Record<RepLevel, string> = {\n\t[RepLevel.RepLevelUnknown]: 'Unknown',\n\t[RepLevel.RepLevelHated]: 'Hated',\n\t[RepLevel.RepLevelHostile]: 'Hostile',\n\t[RepLevel.RepLevelUnfriendly]: 'Unfriendly',\n\t[RepLevel.RepLevelNeutral]: 'Neutral',\n\t[RepLevel.RepLevelFriendly]: 'Friendly',\n\t[RepLevel.RepLevelHonored]: 'Honored',\n\t[RepLevel.RepLevelRevered]: 'Revered',\n\t[RepLevel.RepLevelExalted]: 'Exalted',\n};\n\nexport const REP_FACTION_NAMES: Record<RepFaction, string> = {\n\t[RepFaction.RepFactionUnknown]: 'Unknown',\n\t[RepFaction.RepFactionTheEarthenRing]: 'The Earthen Ring',\n\t[RepFaction.RepFactionGuardiansOfHyjal]: 'Guardians of Hyjal',\n\t[RepFaction.RepFactionTherazane]: 'Therazane',\n\t[RepFaction.RepFactionDragonmawClan]: 'Dragonmaw Clan',\n\t[RepFaction.RepFactionRamkahen]: 'Ramkahen',\n\t[RepFaction.RepFactionWildhammerClan]: 'Wildhammer Clan',\n\t[RepFaction.RepFactionBaradinsWardens]: 'Baradin\\'s Wardens',\n\t[RepFaction.RepFactionHellscreamsReach]: 'Hellscream\\'s Reach',\n\t[RepFaction.RepFactionAvengersOfHyjal]: 'Avengers of Hyjal',\n};\n\nexport const REP_FACTION_QUARTERMASTERS: Record<RepFaction, number> = {\n\t[RepFaction.RepFactionUnknown]: 0,\n\t[RepFaction.RepFactionTheEarthenRing]: 50324,\n\t[RepFaction.RepFactionGuardiansOfHyjal]: 50314,\n\t[RepFaction.RepFactionTherazane]: 45408,\n\t[RepFaction.RepFactionDragonmawClan]: 49387,\n\t[RepFaction.RepFactionRamkahen]: 48617,\n\t[RepFaction.RepFactionWildhammerClan]: 49386,\n\t[RepFaction.RepFactionBaradinsWardens]: 47328,\n\t[RepFaction.RepFactionHellscreamsReach]: 48531,\n\t[RepFaction.RepFactionAvengersOfHyjal]: 54401,\n}\n\nexport const masterySpellNames: Map<Spec, string> = new Map([\n\t[Spec.SpecAssassinationRogue, 'Potent Poisons'],\n\t[Spec.SpecCombatRogue, 'Main Gauche'],\n\t[Spec.SpecSubtletyRogue, 'Executioner'],\n\t[Spec.SpecBloodDeathKnight, 'Blood Shield'],\n\t[Spec.SpecFrostDeathKnight, 'Frozen Heart'],\n\t[Spec.SpecUnholyDeathKnight, 'Dreadblade'],\n\t[Spec.SpecBalanceDruid, 'Total Eclipse'],\n\t[Spec.SpecFeralDruid, 'Razor Claws'],\n\t[Spec.SpecRestorationDruid, 'Harmony'],\n\t[Spec.SpecHolyPaladin, 'Illuminated Healing'],\n\t[Spec.SpecProtectionPaladin, 'Divine Bulwark'],\n\t[Spec.SpecRetributionPaladin, 'Hand of Light'],\n\t[Spec.SpecElementalShaman, 'Elemental Overload'],\n\t[Spec.SpecEnhancementShaman, 'Enhanced Elements'],\n\t[Spec.SpecRestorationShaman, 'Deep Healing'],\n\t[Spec.SpecBeastMasteryHunter, 'Master of Beasts'],\n\t[Spec.SpecMarksmanshipHunter, 'Wild Quiver'],\n\t[Spec.SpecSurvivalHunter, 'Essence of the Viper'],\n\t[Spec.SpecArmsWarrior, 'Strikes of Opportunity'],\n\t[Spec.SpecFuryWarrior, 'Unshackled Fury'],\n\t[Spec.SpecProtectionWarrior, 'Critical Block'],\n\t[Spec.SpecArcaneMage, 'Mana Adept'],\n\t[Spec.SpecFireMage, 'Flashburn'],\n\t[Spec.SpecFrostMage, 'Frostburn'],\n\t[Spec.SpecDisciplinePriest, 'Shield Discipline'],\n\t[Spec.SpecHolyPriest, 'Echo of Light'],\n\t[Spec.SpecShadowPriest, 'Shadow Orb Power'],\n\t[Spec.SpecAfflictionWarlock, 'Potent Afflictions'],\n\t[Spec.SpecDemonologyWarlock, 'Master Demonologist'],\n\t[Spec.SpecDestructionWarlock, 'Fiery Apocalypse'],\n]);\n\nexport const masterySpellIDs: Map<Spec, number> = new Map([\n\t[Spec.SpecAssassinationRogue, 76803],\n\t[Spec.SpecCombatRogue, 76806],\n\t[Spec.SpecSubtletyRogue, 76808],\n\t[Spec.SpecBloodDeathKnight, 77513],\n\t[Spec.SpecFrostDeathKnight, 77514],\n\t[Spec.SpecUnholyDeathKnight, 77515],\n\t[Spec.SpecBalanceDruid, 77492],\n\t[Spec.SpecFeralDruid, 77493],\n\t[Spec.SpecRestorationDruid, 77495],\n\t[Spec.SpecHolyPaladin, 76669],\n\t[Spec.SpecProtectionPaladin, 76671],\n\t[Spec.SpecRetributionPaladin, 76672],\n\t[Spec.SpecElementalShaman, 77222],\n\t[Spec.SpecEnhancementShaman, 77223],\n\t[Spec.SpecRestorationShaman, 77226],\n\t[Spec.SpecBeastMasteryHunter, 76657],\n\t[Spec.SpecMarksmanshipHunter, 76659],\n\t[Spec.SpecSurvivalHunter, 76658],\n\t[Spec.SpecArmsWarrior, 76838],\n\t[Spec.SpecFuryWarrior, 76856],\n\t[Spec.SpecProtectionWarrior, 76857],\n\t[Spec.SpecArcaneMage, 76547],\n\t[Spec.SpecFireMage, 76595],\n\t[Spec.SpecFrostMage, 76613],\n\t[Spec.SpecDisciplinePriest, 77484],\n\t[Spec.SpecHolyPriest, 77485],\n\t[Spec.SpecShadowPriest, 77486],\n\t[Spec.SpecAfflictionWarlock, 77215],\n\t[Spec.SpecDemonologyWarlock, 77219],\n\t[Spec.SpecDestructionWarlock, 77220],\n]);\n","import { Class, PseudoStat, Stat, UnitStats } from '../proto/common.js';\nimport { getEnumValues } from '../utils.js';\nimport { getClassStatName, pseudoStatNames } from './names.js';\n\nconst STATS_LEN = getEnumValues(Stat).length;\nconst PSEUDOSTATS_LEN = getEnumValues(PseudoStat).length;\n\nexport class UnitStat {\n\tprivate readonly stat: Stat | null;\n\tprivate readonly pseudoStat: PseudoStat | null;\n\n\tprivate constructor(stat: Stat | null, pseudoStat: PseudoStat | null) {\n\t\tthis.stat = stat;\n\t\tthis.pseudoStat = pseudoStat;\n\t}\n\n\tisStat(): boolean {\n\t\treturn this.stat != null;\n\t}\n\tisPseudoStat(): boolean {\n\t\treturn this.pseudoStat != null;\n\t}\n\n\tgetStat(): Stat {\n\t\tif (!this.isStat()) {\n\t\t\tthrow new Error('Not a stat!');\n\t\t}\n\t\treturn this.stat!;\n\t}\n\tgetPseudoStat(): PseudoStat {\n\t\tif (!this.isPseudoStat()) {\n\t\t\tthrow new Error('Not a pseudo stat!');\n\t\t}\n\t\treturn this.pseudoStat!;\n\t}\n\n\tequals(other: UnitStat): boolean {\n\t\treturn this.stat == other.stat && this.pseudoStat == other.pseudoStat;\n\t}\n\n\tgetName(clazz: Class): string {\n\t\tif (this.isStat()) {\n\t\t\treturn getClassStatName(this.stat!, clazz);\n\t\t} else {\n\t\t\treturn pseudoStatNames.get(this.pseudoStat!)!;\n\t\t}\n\t}\n\n\tgetProtoValue(proto: UnitStats): number {\n\t\tif (this.isStat()) {\n\t\t\treturn proto.stats[this.stat!];\n\t\t} else {\n\t\t\treturn proto.pseudoStats[this.pseudoStat!];\n\t\t}\n\t}\n\n\tsetProtoValue(proto: UnitStats, val: number) {\n\t\tif (this.isStat()) {\n\t\t\tproto.stats[this.stat!] = val;\n\t\t} else {\n\t\t\tproto.pseudoStats[this.pseudoStat!] = val;\n\t\t}\n\t}\n\n\tstatic fromStat(stat: Stat): UnitStat {\n\t\treturn new UnitStat(stat, null);\n\t}\n\tstatic fromPseudoStat(pseudoStat: PseudoStat): UnitStat {\n\t\treturn new UnitStat(null, pseudoStat);\n\t}\n\n\tstatic getAll(): Array<UnitStat> {\n\t\tconst allStats = getEnumValues(Stat) as Array<Stat>;\n\t\tconst allPseudoStats = getEnumValues(PseudoStat) as Array<PseudoStat>;\n\t\treturn [allStats.map(stat => UnitStat.fromStat(stat)), allPseudoStats.map(stat => UnitStat.fromPseudoStat(stat))].flat();\n\t}\n}\n\n/**\n * Represents values for all character stats (stam, agi, spell power, hit raiting, etc).\n *\n * This is an immutable type.\n */\nexport class Stats {\n\tprivate readonly stats: Array<number>;\n\tprivate readonly pseudoStats: Array<number>;\n\n\tconstructor(stats?: Array<number>, pseudoStats?: Array<number>) {\n\t\tthis.stats = Stats.initStatsArray(STATS_LEN, stats);\n\t\tthis.pseudoStats = Stats.initStatsArray(PSEUDOSTATS_LEN, pseudoStats);\n\t}\n\n\tprivate static initStatsArray(expectedLen: number, newStats?: Array<number>): Array<number> {\n\t\tlet stats = newStats?.slice(0, expectedLen) || [];\n\n\t\tif (stats.length < expectedLen) {\n\t\t\tstats = stats.concat(new Array(expectedLen - (newStats?.length || 0)).fill(0));\n\t\t}\n\n\t\tfor (let i = 0; i < expectedLen; i++) {\n\t\t\tif (stats[i] == null) stats[i] = 0;\n\t\t}\n\t\treturn stats;\n\t}\n\n\tequals(other: Stats): boolean {\n\t\treturn (\n\t\t\tthis.stats.every((newStat, statIdx) => newStat == other.getStat(statIdx)) &&\n\t\t\tthis.pseudoStats.every((newStat, statIdx) => newStat == other.getPseudoStat(statIdx))\n\t\t);\n\t}\n\n\tgetStat(stat: Stat): number {\n\t\treturn this.stats[stat];\n\t}\n\tgetPseudoStat(stat: PseudoStat): number {\n\t\treturn this.pseudoStats[stat];\n\t}\n\tgetUnitStat(stat: UnitStat): number {\n\t\tif (stat.isStat()) {\n\t\t\treturn this.stats[stat.getStat()];\n\t\t} else {\n\t\t\treturn this.pseudoStats[stat.getPseudoStat()];\n\t\t}\n\t}\n\n\twithStat(stat: Stat, value: number): Stats {\n\t\tconst newStats = this.stats.slice();\n\t\tnewStats[stat] = value;\n\t\treturn new Stats(newStats, this.pseudoStats);\n\t}\n\twithPseudoStat(stat: PseudoStat, value: number): Stats {\n\t\tconst newStats = this.pseudoStats.slice();\n\t\tnewStats[stat] = value;\n\t\treturn new Stats(this.stats, newStats);\n\t}\n\twithUnitStat(stat: UnitStat, value: number): Stats {\n\t\tif (stat.isStat()) {\n\t\t\treturn this.withStat(stat.getStat(), value);\n\t\t} else {\n\t\t\treturn this.withPseudoStat(stat.getPseudoStat(), value);\n\t\t}\n\t}\n\n\taddStat(stat: Stat, value: number): Stats {\n\t\treturn this.withStat(stat, this.getStat(stat) + value);\n\t}\n\n\tadd(other: Stats): Stats {\n\t\treturn new Stats(\n\t\t\tthis.stats.map((value, stat) => value + other.stats[stat]),\n\t\t\tthis.pseudoStats.map((value, stat) => value + other.pseudoStats[stat]),\n\t\t);\n\t}\n\n\tsubtract(other: Stats): Stats {\n\t\treturn new Stats(\n\t\t\tthis.stats.map((value, stat) => value - other.stats[stat]),\n\t\t\tthis.pseudoStats.map((value, stat) => value - other.pseudoStats[stat]),\n\t\t);\n\t}\n\n\tscale(scalar: number): Stats {\n\t\treturn new Stats(\n\t\t\tthis.stats.map((value, _stat) => value * scalar),\n\t\t\tthis.pseudoStats.map((value, _stat) => value * scalar),\n\t\t);\n\t}\n\n\tcomputeEP(epWeights: Stats): number {\n\t\tlet total = 0;\n\t\tthis.stats.forEach((stat, idx) => {\n\t\t\ttotal += stat * epWeights.stats[idx];\n\t\t});\n\t\tthis.pseudoStats.forEach((stat, idx) => {\n\t\t\ttotal += stat * epWeights.pseudoStats[idx];\n\t\t});\n\t\treturn total;\n\t}\n\n\tbelowCaps(statCaps: Stats): boolean {\n\t\tfor (const [idx, stat] of this.stats.entries()) {\n\t\t\tif (statCaps.stats[idx] > 0 && stat > statCaps.stats[idx]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasArray(): Array<number> {\n\t\treturn this.stats.slice();\n\t}\n\n\ttoJson(): object {\n\t\treturn UnitStats.toJson(this.toProto()) as object;\n\t}\n\n\ttoProto(): UnitStats {\n\t\treturn UnitStats.create({\n\t\t\tstats: this.stats.slice(),\n\t\t\tpseudoStats: this.pseudoStats.slice(),\n\t\t});\n\t}\n\n\tstatic fromJson(obj: any): Stats {\n\t\treturn Stats.fromProto(UnitStats.fromJson(obj));\n\t}\n\n\tstatic fromMap(statsMap: Partial<Record<Stat, number>>, pseudoStatsMap?: Partial<Record<PseudoStat, number>>): Stats {\n\t\tconst statsArr = new Array(STATS_LEN).fill(0);\n\t\tObject.entries(statsMap).forEach(entry => {\n\t\t\tconst [statStr, value] = entry;\n\t\t\tstatsArr[Number(statStr)] = value;\n\t\t});\n\n\t\tconst pseudoStatsArr = new Array(PSEUDOSTATS_LEN).fill(0);\n\t\tif (pseudoStatsMap) {\n\t\t\tObject.entries(pseudoStatsMap).forEach(entry => {\n\t\t\t\tconst [pseudoStatstr, value] = entry;\n\t\t\t\tpseudoStatsArr[Number(pseudoStatstr)] = value;\n\t\t\t});\n\t\t}\n\n\t\treturn new Stats(statsArr, pseudoStatsArr);\n\t}\n\n\tstatic fromProto(unitStats?: UnitStats): Stats {\n\t\tif (unitStats) {\n\t\t\treturn new Stats(unitStats.stats, unitStats.pseudoStats);\n\t\t} else {\n\t\t\treturn new Stats();\n\t\t}\n\t}\n}\n","import { GemColor, ItemRandomSuffix, ItemSpec, ItemType, Profession, ReforgeStat } from '../proto/common.js';\nimport { UIEnchant as Enchant, UIGem as Gem, UIItem as Item } from '../proto/ui.js';\nimport { distinct } from '../utils.js';\nimport { ActionId } from './action_id.js';\nimport { gemEligibleForSocket, gemMatchesSocket } from './gems.js';\nimport { Stats } from './stats.js';\nimport { enchantAppliesToItem } from './utils.js';\n\nexport function getWeaponDPS(item: Item): number {\n\treturn (item.weaponDamageMin + item.weaponDamageMax) / 2 / (item.weaponSpeed || 1);\n}\n\n/**\n * Represents an equipped item along with enchants/gems attached to it.\n *\n * This is an immutable type.\n */\nexport class EquippedItem {\n\treadonly _item: Item;\n\treadonly _randomSuffix: ItemRandomSuffix | null;\n\treadonly _reforge: ReforgeStat | null;\n\treadonly _enchant: Enchant | null;\n\treadonly _gems: Array<Gem | null>;\n\n\treadonly numPossibleSockets: number;\n\n\tconstructor(item: Item, enchant?: Enchant | null, gems?: Array<Gem | null>, randomSuffix?: ItemRandomSuffix | null, reforge?: ReforgeStat | null) {\n\t\tthis._item = item;\n\t\tthis._enchant = enchant || null;\n\t\tthis._gems = gems || [];\n\t\tthis._randomSuffix = randomSuffix || null;\n\t\tthis._reforge = reforge || null;\n\n\t\tthis.numPossibleSockets = this.numSockets(true);\n\n\t\t// Fill gems with null so we always have the same number of gems as gem slots.\n\t\tif (this._gems.length < this.numPossibleSockets) {\n\t\t\tthis._gems = this._gems.concat(new Array(this.numPossibleSockets - this._gems.length).fill(null));\n\t\t}\n\t}\n\n\tget item(): Item {\n\t\t// Make a defensive copy\n\t\treturn Item.clone(this._item);\n\t}\n\n\tget id(): number {\n\t\treturn this._item.id;\n\t}\n\n\tget randomSuffix(): ItemRandomSuffix | null {\n\t\treturn this._randomSuffix ? ItemRandomSuffix.clone(this._randomSuffix) : null;\n\t}\n\n\tget enchant(): Enchant | null {\n\t\t// Make a defensive copy\n\t\treturn this._enchant ? Enchant.clone(this._enchant) : null;\n\t}\n\tget reforge(): ReforgeStat | null {\n\t\treturn this._reforge ? ReforgeStat.clone(this._reforge) : null;\n\t}\n\tget gems(): Array<Gem | null> {\n\t\t// Make a defensive copy\n\t\treturn this._gems.map(gem => (gem == null ? null : Gem.clone(gem)));\n\t}\n\n\tequals(other: EquippedItem) {\n\t\tif (!Item.equals(this._item, other.item)) return false;\n\n\t\tif ((this._randomSuffix == null) != (other.randomSuffix == null)) return false;\n\n\t\tif (this._randomSuffix && other.randomSuffix && !ItemRandomSuffix.equals(this._randomSuffix, other.randomSuffix)) return false;\n\n\t\tif ((this._reforge == null) != (other.reforge == null)) return false;\n\n\t\tif (this._reforge && other.reforge && !ReforgeStat.equals(this._reforge, other.reforge)) return false;\n\n\t\tif ((this._enchant == null) != (other.enchant == null)) return false;\n\n\t\tif (this._enchant && other.enchant && !Enchant.equals(this._enchant, other.enchant)) return false;\n\n\t\tif (this._gems.length != other.gems.length) return false;\n\n\t\tfor (let i = 0; i < this._gems.length; i++) {\n\t\t\tif ((this._gems[i] == null) != (other.gems[i] == null)) return false;\n\n\t\t\tif (this._gems[i] && other.gems[i] && !Gem.equals(this._gems[i]!, other.gems[i]!)) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Replaces the item and tries to keep the existing enchants/gems if possible.\n\t */\n\twithItem(item: Item): EquippedItem {\n\t\tlet newEnchant = null;\n\t\tif (this._enchant && enchantAppliesToItem(this._enchant, item)) newEnchant = this._enchant;\n\n\t\t// Reorganize gems to match as many colors in the new item as possible.\n\t\tconst newGems = new Array(item.gemSockets.length).fill(null);\n\t\tthis._gems\n\t\t\t.slice(0, this._item.gemSockets.length)\n\t\t\t.filter(gem => gem != null)\n\t\t\t.forEach(gem => {\n\t\t\t\tconst firstMatchingIndex = item.gemSockets.findIndex((socketColor, socketIdx) => !newGems[socketIdx] && gemMatchesSocket(gem!, socketColor));\n\t\t\t\tconst firstEligibleIndex = item.gemSockets.findIndex(\n\t\t\t\t\t(socketColor, socketIdx) => !newGems[socketIdx] && gemEligibleForSocket(gem!, socketColor),\n\t\t\t\t);\n\t\t\t\tif (firstMatchingIndex != -1) {\n\t\t\t\t\tnewGems[firstMatchingIndex] = gem;\n\t\t\t\t} else if (firstEligibleIndex != -1) {\n\t\t\t\t\tnewGems[firstEligibleIndex] = gem;\n\t\t\t\t}\n\t\t\t});\n\n\t\t// Copy the extra socket gem directly.\n\t\tif (this.couldHaveExtraSocket()) {\n\t\t\tnewGems.push(this._gems[this._gems.length - 1]);\n\t\t}\n\n\t\treturn new EquippedItem(item, newEnchant, newGems);\n\t}\n\n\t/**\n\t * Returns a new EquippedItem with the given enchant applied.\n\t */\n\twithEnchant(enchant: Enchant | null): EquippedItem {\n\t\treturn new EquippedItem(this._item, enchant, this._gems, this._randomSuffix, this._reforge);\n\t}\n\n\t/**\n\t * Returns a new EquippedItem with the given reforge applied.\n\t */\n\twithReforge(reforge: ReforgeStat): EquippedItem {\n\t\treturn new EquippedItem(this._item, this._enchant, this._gems, this._randomSuffix, reforge);\n\t}\n\n\t/**\n\t * Returns a new EquippedItem with the given gem socketed.\n\t */\n\tprivate withGemHelper(gem: Gem | null, socketIdx: number): EquippedItem {\n\t\tif (this._gems.length <= socketIdx) {\n\t\t\tthrow new Error('No gem socket with index ' + socketIdx);\n\t\t}\n\n\t\tconst newGems = this._gems.slice();\n\t\tnewGems[socketIdx] = gem;\n\n\t\treturn new EquippedItem(this._item, this._enchant, newGems, this._randomSuffix, this._reforge);\n\t}\n\n\t/**\n\t * Returns a new EquippedItem with the given gem socketed.\n\t *\n\t * Also ensures validity of the item on its own. Currently this just means enforcing unique gems.\n\t */\n\twithGem(gem: Gem | null, socketIdx: number): EquippedItem {\n\t\t// eslint-disable-next-line @typescript-eslint/no-this-alias\n\t\tlet curItem: EquippedItem | null = this;\n\n\t\tif (gem && gem.unique) {\n\t\t\tcurItem = curItem.removeGemsWithId(gem.id);\n\t\t}\n\n\t\treturn curItem.withGemHelper(gem, socketIdx);\n\t}\n\n\tremoveGemsWithId(gemId: number): EquippedItem {\n\t\t// eslint-disable-next-line @typescript-eslint/no-this-alias\n\t\tlet curItem: EquippedItem | null = this;\n\t\t// Remove any currently socketed identical gems.\n\t\tfor (let i = 0; i < curItem._gems.length; i++) {\n\t\t\tif (curItem._gems[i]?.id == gemId) {\n\t\t\t\tcurItem = curItem.withGemHelper(null, i);\n\t\t\t}\n\t\t}\n\t\treturn curItem;\n\t}\n\n\tremoveAllGems(): EquippedItem {\n\t\t// eslint-disable-next-line @typescript-eslint/no-this-alias\n\t\tlet curItem: EquippedItem | null = this;\n\n\t\tfor (let i = 0; i < curItem._gems.length; i++) {\n\t\t\tcurItem = curItem.withGemHelper(null, i);\n\t\t}\n\n\t\treturn curItem;\n\t}\n\n\twithRandomSuffix(randomSuffix: ItemRandomSuffix | null): EquippedItem {\n\t\treturn new EquippedItem(this._item, this._enchant, this._gems, randomSuffix, this._reforge);\n\t}\n\n\tasActionId(): ActionId {\n\t\tif (this._randomSuffix) return ActionId.fromRandomSuffix(this._item, this._randomSuffix);\n\n\t\treturn ActionId.fromItemId(this._item.id);\n\t}\n\n\tasSpec(): ItemSpec {\n\t\treturn ItemSpec.create({\n\t\t\tid: this._item.id,\n\t\t\trandomSuffix: this._randomSuffix?.id,\n\t\t\tenchant: this._enchant?.effectId,\n\t\t\tgems: this._gems.map(gem => gem?.id || 0),\n\t\t\treforging: this._reforge?.id,\n\t\t});\n\t}\n\n\tmeetsSocketBonus(): boolean {\n\t\treturn this._item.gemSockets.every((socketColor, i) => this._gems[i] && gemMatchesSocket(this._gems[i]!, socketColor));\n\t}\n\n\tsocketBonusStats(): Stats {\n\t\tif (this.meetsSocketBonus()) {\n\t\t\treturn new Stats(this._item.socketBonus);\n\t\t} else {\n\t\t\treturn new Stats();\n\t\t}\n\t}\n\n\t// Whether this item could have an extra socket, assuming Blacksmithing.\n\tcouldHaveExtraSocket(): boolean {\n\t\treturn [ItemType.ItemTypeWaist, ItemType.ItemTypeWrist, ItemType.ItemTypeHands].includes(this.item.type);\n\t}\n\n\trequiresExtraSocket(): boolean {\n\t\treturn [ItemType.ItemTypeWrist, ItemType.ItemTypeHands].includes(this.item.type) && this.hasExtraGem() && this._gems[this._gems.length - 1] != null;\n\t}\n\n\thasExtraSocket(isBlacksmithing: boolean): boolean {\n\t\treturn this.item.type == ItemType.ItemTypeWaist || (isBlacksmithing && [ItemType.ItemTypeWrist, ItemType.ItemTypeHands].includes(this.item.type));\n\t}\n\n\tnumSockets(isBlacksmithing: boolean): number {\n\t\treturn this._item.gemSockets.length + (this.hasExtraSocket(isBlacksmithing) ? 1 : 0);\n\t}\n\n\tnumSocketsOfColor(color: GemColor | null): number {\n\t\tlet numSockets = 0;\n\n\t\tfor (const socketColor of this._item.gemSockets) {\n\t\t\tif (socketColor == color) {\n\t\t\t\tnumSockets += 1;\n\t\t\t}\n\t\t}\n\n\t\treturn numSockets;\n\t}\n\n\thasRandomSuffixOptions() {\n\t\treturn !!this._item.randomSuffixOptions.length;\n\t}\n\n\thasExtraGem(): boolean {\n\t\treturn this._gems.length > this.item.gemSockets.length;\n\t}\n\n\thasSocketedGem(socketIdx: number): boolean {\n\t\treturn this._gems[socketIdx] != null;\n\t}\n\n\tallSocketColors(): Array<GemColor> {\n\t\treturn this.couldHaveExtraSocket() ? this._item.gemSockets.concat([GemColor.GemColorPrismatic]) : this._item.gemSockets;\n\t}\n\tcurSocketColors(isBlacksmithing: boolean): Array<GemColor> {\n\t\treturn this.hasExtraSocket(isBlacksmithing) ? this._item.gemSockets.concat([GemColor.GemColorPrismatic]) : this._item.gemSockets;\n\t}\n\n\tcurGems(isBlacksmithing: boolean): Array<Gem | null> {\n\t\treturn this._gems.slice(0, this.numSockets(isBlacksmithing));\n\t}\n\tcurEquippedGems(isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.curGems(isBlacksmithing).filter(g => g != null) as Array<Gem>;\n\t}\n\n\tgetProfessionRequirements(): Array<Profession> {\n\t\tconst profs: Array<Profession> = [];\n\t\tif (this._item.requiredProfession != Profession.ProfessionUnknown) {\n\t\t\tprofs.push(this._item.requiredProfession);\n\t\t}\n\t\tif (this._enchant != null && this._enchant.requiredProfession != Profession.ProfessionUnknown) {\n\t\t\tprofs.push(this._enchant.requiredProfession);\n\t\t}\n\t\tthis._gems.forEach(gem => {\n\t\t\tif (gem != null && gem.requiredProfession != Profession.ProfessionUnknown) {\n\t\t\t\tprofs.push(gem.requiredProfession);\n\t\t\t}\n\t\t});\n\t\tif (this.requiresExtraSocket()) {\n\t\t\tprofs.push(Profession.Blacksmithing);\n\t\t}\n\t\treturn distinct(profs);\n\t}\n\tgetFailedProfessionRequirements(professions: Array<Profession>): Array<Item | Gem | Enchant> {\n\t\tconst failed: Array<Item | Gem | Enchant> = [];\n\t\tif (this._item.requiredProfession != Profession.ProfessionUnknown && !professions.includes(this._item.requiredProfession)) {\n\t\t\tfailed.push(this._item);\n\t\t}\n\t\tif (\n\t\t\tthis._enchant != null &&\n\t\t\tthis._enchant.requiredProfession != Profession.ProfessionUnknown &&\n\t\t\t!professions.includes(this._enchant.requiredProfession)\n\t\t) {\n\t\t\tfailed.push(this._enchant);\n\t\t}\n\t\tthis._gems.forEach(gem => {\n\t\t\tif (gem != null && gem.requiredProfession != Profession.ProfessionUnknown && !professions.includes(gem.requiredProfession)) {\n\t\t\t\tfailed.push(gem);\n\t\t\t}\n\t\t});\n\t\treturn failed;\n\t}\n}\n","import { EquipmentSpec, GemColor, ItemSlot, ItemSpec, ItemSwap, Profession, SimDatabase, SimEnchant, SimGem, SimItem } from '../proto/common.js';\nimport { UIEnchant as Enchant, UIGem as Gem, UIItem as Item } from '../proto/ui.js';\nimport { isBluntWeaponType, isSharpWeaponType } from '../proto_utils/utils.js';\nimport { distinct, equalsOrBothNull, getEnumValues } from '../utils.js';\nimport { Database } from './database';\nimport { EquippedItem } from './equipped_item.js';\nimport { gemMatchesSocket, isMetaGemActive } from './gems.js';\nimport { Stats } from './stats.js';\nimport { validWeaponCombo } from './utils.js';\n\ntype InternalGear = Record<ItemSlot, EquippedItem | null>;\n\nabstract class BaseGear {\n\tprotected readonly gear: InternalGear;\n\n\tconstructor(gear: Partial<InternalGear>) {\n\t\tthis.getItemSlots().forEach(slot => {\n\t\t\tif (!gear[slot as ItemSlot]) gear[slot as ItemSlot] = null;\n\t\t});\n\t\tthis.gear = gear as InternalGear;\n\t}\n\n\tabstract getItemSlots(): ItemSlot[];\n\n\tequals(other: BaseGear): boolean {\n\t\tconst otherArray = other.asArray();\n\t\treturn this.asArray().every((thisItem, slot) => equalsOrBothNull(thisItem, otherArray[slot], (a, b) => a.equals(b)));\n\t}\n\n\tgetEquippedItem(slot: ItemSlot): EquippedItem | null {\n\t\treturn this.gear[slot] || null;\n\t}\n\n\tasArray(): Array<EquippedItem | null> {\n\t\treturn Object.values(this.gear);\n\t}\n\n\tasMap(): Partial<InternalGear> {\n\t\tconst newInternalGear: Partial<InternalGear> = {};\n\t\tthis.getItemSlots()\n\t\t\t.map(slot => Number(slot) as ItemSlot)\n\t\t\t.forEach(slot => {\n\t\t\t\tnewInternalGear[slot] = this.getEquippedItem(slot);\n\t\t\t});\n\t\treturn newInternalGear;\n\t}\n\n\t/**\n\t * Returns a new Gear set with the item equipped.\n\t *\n\t * Checks for validity and removes/exchanges items/gems as needed.\n\t */\n\tprotected withEquippedItemInternal(newSlot: ItemSlot, newItem: EquippedItem | null, canDualWield2H: boolean): Partial<InternalGear> {\n\t\t// Create a new identical set of gear\n\t\tconst newInternalGear = this.asMap();\n\n\t\tif (newItem) {\n\t\t\tthis.removeUniqueGems(newInternalGear, newItem);\n\t\t\tthis.removeUniqueItems(newInternalGear, newItem);\n\t\t}\n\n\t\t// Actually assign the new item.\n\t\tnewInternalGear[newSlot] = newItem;\n\n\t\tBaseGear.validateWeaponCombo(newInternalGear, newSlot, canDualWield2H);\n\n\t\treturn newInternalGear;\n\t}\n\n\tprivate removeUniqueGems(gear: Partial<InternalGear>, newItem: EquippedItem) {\n\t\t// If the new item has unique gems, remove matching.\n\t\tnewItem.gems\n\t\t\t.filter(gem => gem?.unique)\n\t\t\t.forEach(gem => {\n\t\t\t\tthis.getItemSlots()\n\t\t\t\t\t.map(slot => Number(slot) as ItemSlot)\n\t\t\t\t\t.forEach(slot => {\n\t\t\t\t\t\tgear[slot] = gear[slot]?.removeGemsWithId(gem!.id) || null;\n\t\t\t\t\t});\n\t\t\t});\n\t}\n\n\tprivate removeUniqueItems(gear: Partial<InternalGear>, newItem: EquippedItem) {\n\t\tif (newItem.item.unique) {\n\t\t\tthis.getItemSlots()\n\t\t\t\t.map(slot => Number(slot) as ItemSlot)\n\t\t\t\t.forEach(slot => {\n\t\t\t\t\tif (gear[slot]?.item.id == newItem.item.id) {\n\t\t\t\t\t\tgear[slot] = null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t}\n\n\tprivate static validateWeaponCombo(gear: Partial<InternalGear>, newSlot: ItemSlot, canDualWield2H: boolean) {\n\t\t// Check for valid weapon combos.\n\t\tif (!validWeaponCombo(gear[ItemSlot.ItemSlotMainHand]?.item, gear[ItemSlot.ItemSlotOffHand]?.item, canDualWield2H)) {\n\t\t\tif (newSlot == ItemSlot.ItemSlotOffHand) {\n\t\t\t\tgear[ItemSlot.ItemSlotMainHand] = null;\n\t\t\t} else {\n\t\t\t\tgear[ItemSlot.ItemSlotOffHand] = null;\n\t\t\t}\n\t\t}\n\t}\n\n\ttoDatabase(db: Database): SimDatabase {\n\t\tconst equippedItems = this.asArray().filter(ei => ei != null) as Array<EquippedItem>;\n\t\treturn SimDatabase.create({\n\t\t\titems: distinct(equippedItems.map(ei => BaseGear.itemToDB(ei.item))),\n\t\t\trandomSuffixes: distinct(equippedItems.filter(ei => ei.randomSuffix).map(ei => ei.randomSuffix!)),\n\t\t\treforgeStats: distinct(equippedItems.filter(ei => ei.reforge).map(ei => db.getReforgeById(ei.reforge!.id) ?? {})),\n\t\t\tenchants: distinct(equippedItems.filter(ei => ei.enchant).map(ei => BaseGear.enchantToDB(ei.enchant!))),\n\t\t\tgems: distinct(equippedItems.map(ei => (ei._gems.filter(g => g != null) as Array<Gem>).map(gem => BaseGear.gemToDB(gem))).flat()),\n\t\t});\n\t}\n\n\tprivate static itemToDB(item: Item): SimItem {\n\t\treturn SimItem.fromJson(Item.toJson(item), { ignoreUnknownFields: true });\n\t}\n\n\tprivate static enchantToDB(enchant: Enchant): SimEnchant {\n\t\treturn SimEnchant.fromJson(Enchant.toJson(enchant), { ignoreUnknownFields: true });\n\t}\n\n\tprivate static gemToDB(gem: Gem): SimGem {\n\t\treturn SimGem.fromJson(Gem.toJson(gem), { ignoreUnknownFields: true });\n\t}\n}\n\n/**\n * Represents a full gear set, including items/enchants/gems for every slot.\n *\n * This is an immutable type.\n */\nexport class Gear extends BaseGear {\n\tconstructor(gear: Partial<InternalGear>) {\n\t\tsuper(gear);\n\t}\n\n\tgetItemSlots(): ItemSlot[] {\n\t\treturn getEnumValues(ItemSlot);\n\t}\n\n\twithEquippedItem(newSlot: ItemSlot, newItem: EquippedItem | null, canDualWield2H: boolean): Gear {\n\t\treturn new Gear(this.withEquippedItemInternal(newSlot, newItem, canDualWield2H));\n\t}\n\n\tgetTrinkets(): Array<EquippedItem | null> {\n\t\treturn [this.getEquippedItem(ItemSlot.ItemSlotTrinket1), this.getEquippedItem(ItemSlot.ItemSlotTrinket2)];\n\t}\n\n\thasTrinket(itemId: number): boolean {\n\t\treturn this.getTrinkets()\n\t\t\t.map(t => t?.item.id)\n\t\t\t.includes(itemId);\n\t}\n\n\thasRelic(itemId: number): boolean {\n\t\tconst relicItem = this.getEquippedItem(ItemSlot.ItemSlotRanged);\n\n\t\tif (!relicItem) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn relicItem!.item.id == itemId;\n\t}\n\n\tasSpec(): EquipmentSpec {\n\t\treturn EquipmentSpec.create({\n\t\t\titems: this.asArray().map(ei => (ei ? ei.asSpec() : ItemSpec.create())),\n\t\t});\n\t}\n\n\tgetAllGems(isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.asArray()\n\t\t\t.map(ei => (ei == null ? [] : ei.curEquippedGems(isBlacksmithing)))\n\t\t\t.flat();\n\t}\n\n\tgetNonMetaGems(isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.getAllGems(isBlacksmithing).filter(gem => gem.color != GemColor.GemColorMeta);\n\t}\n\n\tstatsFromGems(isBlacksmithing: boolean): Stats {\n\t\tlet stats = new Stats();\n\n\t\t// Stats from just the gems.\n\t\tconst gems = this.getAllGems(isBlacksmithing);\n\t\tfor (let i = 0; i < gems.length; i++) {\n\t\t\tstats = stats.add(new Stats(gems[i].stats));\n\t\t}\n\n\t\t// Stats from socket bonuses.\n\t\tconst items = this.asArray().filter(ei => ei != null) as Array<EquippedItem>;\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tstats = stats.add(items[i].socketBonusStats());\n\t\t}\n\n\t\treturn stats;\n\t}\n\n\tgetGemsOfColor(color: GemColor, isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.getAllGems(isBlacksmithing).filter(gem => gem.color == color);\n\t}\n\n\tgetJCGems(isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.getAllGems(isBlacksmithing).filter(gem => gem.requiredProfession == Profession.Jewelcrafting);\n\t}\n\n\tgetMetaGem(): Gem | null {\n\t\treturn this.getGemsOfColor(GemColor.GemColorMeta, true)[0] || null;\n\t}\n\n\tgemColorCounts(isBlacksmithing: boolean): { red: number; yellow: number; blue: number } {\n\t\tconst gems = this.getAllGems(isBlacksmithing);\n\t\treturn {\n\t\t\tred: gems.filter(gem => gemMatchesSocket(gem, GemColor.GemColorRed)).length,\n\t\t\tyellow: gems.filter(gem => gemMatchesSocket(gem, GemColor.GemColorYellow)).length,\n\t\t\tblue: gems.filter(gem => gemMatchesSocket(gem, GemColor.GemColorBlue)).length,\n\t\t};\n\t}\n\n\t// Returns true if this gear set has a meta gem AND the other gems meet the meta's conditions.\n\thasActiveMetaGem(isBlacksmithing: boolean): boolean {\n\t\tconst metaGem = this.getMetaGem();\n\t\tif (!metaGem) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst gemColorCounts = this.gemColorCounts(isBlacksmithing);\n\t\treturn isMetaGemActive(metaGem, gemColorCounts.red, gemColorCounts.yellow, gemColorCounts.blue);\n\t}\n\n\thasInactiveMetaGem(isBlacksmithing: boolean): boolean {\n\t\treturn this.getMetaGem() != null && !this.hasActiveMetaGem(isBlacksmithing);\n\t}\n\n\twithGem(itemSlot: ItemSlot, socketIdx: number, gem: Gem | null): Gear {\n\t\tconst item = this.getEquippedItem(itemSlot);\n\n\t\tif (item) {\n\t\t\treturn this.withEquippedItem(itemSlot, item.withGem(gem, socketIdx), true);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\twithSingleGemSubstitution(oldGem: Gem | null, newGem: Gem | null, isBlacksmithing: boolean): Gear {\n\t\tfor (const slot of this.getItemSlots()) {\n\t\t\tconst item = this.getEquippedItem(slot);\n\n\t\t\tif (!item) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst currentGems = item!.curGems(isBlacksmithing);\n\n\t\t\tif (currentGems.includes(oldGem)) {\n\t\t\t\tconst socketIdx = currentGems.indexOf(oldGem);\n\t\t\t\treturn this.withGem(slot, socketIdx, newGem);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\twithMetaGem(metaGem: Gem | null): Gear {\n\t\tconst headItem = this.getEquippedItem(ItemSlot.ItemSlotHead);\n\n\t\tif (headItem) {\n\t\t\tfor (const [socketIdx, socketColor] of headItem.allSocketColors().entries()) {\n\t\t\t\tif (socketColor == GemColor.GemColorMeta) {\n\t\t\t\t\treturn this.withEquippedItem(ItemSlot.ItemSlotHead, headItem.withGem(metaGem, socketIdx), true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\twithoutMetaGem(): Gear {\n\t\tconst headItem = this.getEquippedItem(ItemSlot.ItemSlotHead);\n\t\tconst metaGem = this.getMetaGem();\n\t\tif (headItem && metaGem) {\n\t\t\treturn this.withEquippedItem(ItemSlot.ItemSlotHead, headItem.removeGemsWithId(metaGem.id), true);\n\t\t} else {\n\t\t\treturn this;\n\t\t}\n\t}\n\n\twithoutGems(): Gear {\n\t\tlet curGear: Gear = this;\n\n\t\tfor (const slot of this.getItemSlots()) {\n\t\t\tconst item = this.getEquippedItem(slot);\n\n\t\t\tif (item) {\n\t\t\t\tcurGear = curGear.withEquippedItem(slot, item.removeAllGems(), true);\n\t\t\t}\n\t\t}\n\n\t\treturn curGear;\n\t}\n\n\t// Removes bonus gems from blacksmith profession bonus.\n\twithoutBlacksmithSockets(): Gear {\n\t\tlet curGear: Gear = this;\n\n\t\tconst wristItem = this.getEquippedItem(ItemSlot.ItemSlotWrist);\n\t\tif (wristItem) {\n\t\t\tcurGear = curGear.withEquippedItem(ItemSlot.ItemSlotWrist, wristItem.withGem(null, wristItem.numPossibleSockets - 1), true);\n\t\t}\n\n\t\tconst handsItem = this.getEquippedItem(ItemSlot.ItemSlotHands);\n\t\tif (handsItem) {\n\t\t\tcurGear = curGear.withEquippedItem(ItemSlot.ItemSlotHands, handsItem.withGem(null, handsItem.numPossibleSockets - 1), true);\n\t\t}\n\n\t\treturn curGear;\n\t}\n\n\thasBluntMHWeapon(): boolean {\n\t\tconst weapon = this.getEquippedItem(ItemSlot.ItemSlotMainHand);\n\t\treturn weapon != null && isBluntWeaponType(weapon.item.weaponType);\n\t}\n\thasSharpMHWeapon(): boolean {\n\t\tconst weapon = this.getEquippedItem(ItemSlot.ItemSlotMainHand);\n\t\treturn weapon != null && isSharpWeaponType(weapon.item.weaponType);\n\t}\n\thasBluntOHWeapon(): boolean {\n\t\tconst weapon = this.getEquippedItem(ItemSlot.ItemSlotOffHand);\n\t\treturn weapon != null && isBluntWeaponType(weapon.item.weaponType);\n\t}\n\thasSharpOHWeapon(): boolean {\n\t\tconst weapon = this.getEquippedItem(ItemSlot.ItemSlotOffHand);\n\t\treturn weapon != null && isSharpWeaponType(weapon.item.weaponType);\n\t}\n\n\tgetProfessionRequirements(): Array<Profession> {\n\t\treturn distinct((this.asArray().filter(ei => ei != null) as Array<EquippedItem>).map(ei => ei.getProfessionRequirements()).flat());\n\t}\n\tgetFailedProfessionRequirements(professions: Array<Profession>): Array<Item | Gem | Enchant> {\n\t\treturn (this.asArray().filter(ei => ei != null) as Array<EquippedItem>).map(ei => ei.getFailedProfessionRequirements(professions)).flat();\n\t}\n}\n\n/**\n * Represents a item swap gear set, including items/enchants/gems.\n *\n * This is an immutable type.\n */\nexport class ItemSwapGear extends BaseGear {\n\tconstructor(gear: Partial<InternalGear>) {\n\t\tsuper(gear);\n\t}\n\n\tgetItemSlots(): ItemSlot[] {\n\t\treturn [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand, ItemSlot.ItemSlotRanged];\n\t}\n\n\twithEquippedItem(newSlot: ItemSlot, newItem: EquippedItem | null, canDualWield2H: boolean): ItemSwapGear {\n\t\treturn new ItemSwapGear(this.withEquippedItemInternal(newSlot, newItem, canDualWield2H));\n\t}\n\n\ttoProto(): ItemSwap {\n\t\treturn ItemSwap.create({\n\t\t\tmhItem: this.gear[ItemSlot.ItemSlotMainHand]?.asSpec(),\n\t\t\tohItem: this.gear[ItemSlot.ItemSlotOffHand]?.asSpec(),\n\t\t\trangedItem: this.gear[ItemSlot.ItemSlotRanged]?.asSpec(),\n\t\t});\n\t}\n}\n","import { CHARACTER_LEVEL } from '../constants/mechanics.js';\nimport {\n\tEquipmentSpec,\n\tGemColor,\n\tItemRandomSuffix,\n\tItemSlot,\n\tItemSpec,\n\tItemSwap,\n\tPresetEncounter,\n\tPresetTarget,\n\tReforgeStat,\n\tSimDatabase,\n} from '../proto/common.js';\nimport { GlyphID, IconData, UIDatabase, UIEnchant as Enchant, UIGem as Gem, UIItem as Item, UINPC as Npc, UIZone as Zone } from '../proto/ui.js';\nimport { distinct } from '../utils.js';\nimport { WOWHEAD_EXPANSION_ENV } from '../wowhead';\nimport { EquippedItem } from './equipped_item.js';\nimport { Gear, ItemSwapGear } from './gear.js';\nimport { gemEligibleForSocket, gemMatchesSocket } from './gems.js';\nimport { getEligibleEnchantSlots, getEligibleItemSlots } from './utils.js';\n\nconst dbUrlJson = '/cata/assets/database/db.json';\nconst dbUrlBin = '/cata/assets/database/db.bin';\nconst leftoversUrlJson = '/cata/assets/database/leftover_db.json';\nconst leftoversUrlBin = '/cata/assets/database/leftover_db.bin';\n// When changing this value, don't forget to change the html <link> for preloading!\nconst READ_JSON = true;\n\nexport class Database {\n\tprivate static loadPromise: Promise<Database> | null = null;\n\tstatic get(): Promise<Database> {\n\t\tif (Database.loadPromise == null) {\n\t\t\tif (READ_JSON) {\n\t\t\t\tDatabase.loadPromise = fetch(dbUrlJson)\n\t\t\t\t\t.then(response => response.json())\n\t\t\t\t\t.then(json => new Database(UIDatabase.fromJson(json)));\n\t\t\t} else {\n\t\t\t\tDatabase.loadPromise = fetch(dbUrlBin)\n\t\t\t\t\t.then(response => response.arrayBuffer())\n\t\t\t\t\t.then(buffer => new Database(UIDatabase.fromBinary(new Uint8Array(buffer))));\n\t\t\t}\n\t\t}\n\t\treturn Database.loadPromise;\n\t}\n\n\tstatic getLeftovers(): Promise<UIDatabase> {\n\t\tif (READ_JSON) {\n\t\t\treturn fetch(leftoversUrlJson)\n\t\t\t\t.then(response => response.json())\n\t\t\t\t.then(json => UIDatabase.fromJson(json));\n\t\t} else {\n\t\t\treturn fetch(leftoversUrlBin)\n\t\t\t\t.then(response => response.arrayBuffer())\n\t\t\t\t.then(buffer => UIDatabase.fromBinary(new Uint8Array(buffer)));\n\t\t}\n\t}\n\n\t// Checks if any items in the equipment are missing from the current DB. If so, loads the leftover DB.\n\tstatic async loadLeftoversIfNecessary(equipment: EquipmentSpec): Promise<Database> {\n\t\tconst db = await Database.get();\n\t\tif (db.loadedLeftovers) {\n\t\t\treturn db;\n\t\t}\n\n\t\tconst shouldLoadLeftovers = equipment.items.some(item => item.id != 0 && !db.items.has(item.id));\n\t\tif (shouldLoadLeftovers) {\n\t\t\tconst leftoverDb = await Database.getLeftovers();\n\t\t\tdb.loadProto(leftoverDb);\n\t\t\tdb.loadedLeftovers = true;\n\t\t}\n\t\treturn db;\n\t}\n\n\tprivate readonly items = new Map<number, Item>();\n\tprivate readonly randomSuffixes = new Map<number, ItemRandomSuffix>();\n\tprivate readonly reforgeStats = new Map<number, ReforgeStat>();\n\tprivate readonly enchantsBySlot: Partial<Record<ItemSlot, Enchant[]>> = {};\n\tprivate readonly gems = new Map<number, Gem>();\n\tprivate readonly npcs = new Map<number, Npc>();\n\tprivate readonly zones = new Map<number, Zone>();\n\tprivate readonly presetEncounters = new Map<string, PresetEncounter>();\n\tprivate readonly presetTargets = new Map<string, PresetTarget>();\n\tprivate readonly itemIcons: Record<number, Promise<IconData>> = {};\n\tprivate readonly spellIcons: Record<number, Promise<IconData>> = {};\n\tprivate readonly glyphIds: Array<GlyphID> = [];\n\tprivate loadedLeftovers = false;\n\n\tprivate constructor(db: UIDatabase) {\n\t\tthis.loadProto(db);\n\t}\n\n\t// Add all data from the db proto into this database.\n\tprivate loadProto(db: UIDatabase) {\n\t\tdb.items.forEach(item => this.items.set(item.id, item));\n\t\tdb.randomSuffixes.forEach(randomSuffix => this.randomSuffixes.set(randomSuffix.id, randomSuffix));\n\t\tdb.reforgeStats.forEach(reforgeStat => this.reforgeStats.set(reforgeStat.id, reforgeStat));\n\t\tdb.enchants.forEach(enchant => {\n\t\t\tconst slots = getEligibleEnchantSlots(enchant);\n\t\t\tslots.forEach(slot => {\n\t\t\t\tif (!this.enchantsBySlot[slot]) {\n\t\t\t\t\tthis.enchantsBySlot[slot] = [];\n\t\t\t\t}\n\t\t\t\tthis.enchantsBySlot[slot]!.push(enchant);\n\t\t\t});\n\t\t});\n\t\tdb.gems.forEach(gem => this.gems.set(gem.id, gem));\n\n\t\tdb.npcs.forEach(npc => this.npcs.set(npc.id, npc));\n\t\tdb.zones.forEach(zone => this.zones.set(zone.id, zone));\n\t\tdb.encounters.forEach(encounter => this.presetEncounters.set(encounter.path, encounter));\n\t\tdb.encounters\n\t\t\t.map(e => e.targets)\n\t\t\t.flat()\n\t\t\t.forEach(target => this.presetTargets.set(target.path, target));\n\n\t\tdb.items.forEach(\n\t\t\titem =>\n\t\t\t\t(this.itemIcons[item.id] = Promise.resolve(\n\t\t\t\t\tIconData.create({\n\t\t\t\t\t\tid: item.id,\n\t\t\t\t\t\tname: item.name,\n\t\t\t\t\t\ticon: item.icon,\n\t\t\t\t\t}),\n\t\t\t\t)),\n\t\t);\n\t\tdb.gems.forEach(\n\t\t\tgem =>\n\t\t\t\t(this.itemIcons[gem.id] = Promise.resolve(\n\t\t\t\t\tIconData.create({\n\t\t\t\t\t\tid: gem.id,\n\t\t\t\t\t\tname: gem.name,\n\t\t\t\t\t\ticon: gem.icon,\n\t\t\t\t\t}),\n\t\t\t\t)),\n\t\t);\n\t\tdb.itemIcons.forEach(data => (this.itemIcons[data.id] = Promise.resolve(data)));\n\t\tdb.spellIcons.forEach(data => (this.spellIcons[data.id] = Promise.resolve(data)));\n\t\tdb.glyphIds.forEach(id => this.glyphIds.push(id));\n\t}\n\n\tgetAllItems(): Array<Item> {\n\t\treturn Array.from(this.items.values());\n\t}\n\n\tgetItems(slot: ItemSlot): Array<Item> {\n\t\treturn this.getAllItems().filter(item => getEligibleItemSlots(item).includes(slot));\n\t}\n\n\tgetItemById(id: number): Item | undefined {\n\t\treturn this.items.get(id);\n\t}\n\n\tgetRandomSuffixById(id: number): ItemRandomSuffix | undefined {\n\t\treturn this.randomSuffixes.get(id);\n\t}\n\n\tgetReforgeById(id: number): ReforgeStat | undefined {\n\t\treturn this.reforgeStats.get(id);\n\t}\n\n\tgetAvailableReforges(item: Item): ReforgeStat[] {\n\t\treturn Array.from(this.reforgeStats.values()).filter(reforgeStat => {\n\t\t\tfor (let i = 0; i < reforgeStat.fromStat.length; i++) {\n\t\t\t\tconst statIndex = reforgeStat.fromStat[i];\n\t\t\t\tif (item.stats[statIndex] > 0 && item.stats[reforgeStat.toStat[0]] <= 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t}\n\n\tgetEnchants(slot: ItemSlot): Array<Enchant> {\n\t\treturn this.enchantsBySlot[slot] || [];\n\t}\n\n\tgetGems(socketColor?: GemColor): Array<Gem> {\n\t\tif (!socketColor) return Array.from(this.gems.values());\n\n\t\tconst ret = [];\n\t\tfor (const g of this.gems.values()) {\n\t\t\tif (gemEligibleForSocket(g, socketColor)) ret.push(g);\n\t\t}\n\t\treturn ret;\n\t}\n\n\tgetNpc(npcId: number): Npc | null {\n\t\treturn this.npcs.get(npcId) || null;\n\t}\n\tgetZone(zoneId: number): Zone | null {\n\t\treturn this.zones.get(zoneId) || null;\n\t}\n\n\tgetMatchingGems(socketColor: GemColor): Array<Gem> {\n\t\tconst ret = [];\n\t\tfor (const g of this.gems.values()) {\n\t\t\tif (gemMatchesSocket(g, socketColor)) ret.push(g);\n\t\t}\n\t\treturn ret;\n\t}\n\n\tlookupGem(itemID: number): Gem | null {\n\t\treturn this.gems.get(itemID) || null;\n\t}\n\n\tlookupItemSpec(itemSpec: ItemSpec): EquippedItem | null {\n\t\tconst item = this.items.get(itemSpec.id);\n\t\tif (!item) return null;\n\n\t\tlet enchant: Enchant | null = null;\n\t\tif (itemSpec.enchant) {\n\t\t\tconst slots = getEligibleItemSlots(item);\n\t\t\tfor (let i = 0; i < slots.length; i++) {\n\t\t\t\tenchant =\n\t\t\t\t\t(this.enchantsBySlot[slots[i]] || []).find(enchant => [enchant.effectId, enchant.itemId, enchant.spellId].includes(itemSpec.enchant)) ||\n\t\t\t\t\tnull;\n\t\t\t\tif (enchant) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst gems = itemSpec.gems.map(gemId => this.lookupGem(gemId));\n\n\t\tlet randomSuffix: ItemRandomSuffix | null = null;\n\t\tif (itemSpec.randomSuffix && !!this.getRandomSuffixById(itemSpec.randomSuffix)) {\n\t\t\trandomSuffix = this.getRandomSuffixById(itemSpec.randomSuffix)!;\n\t\t}\n\n\t\tlet reforge: ReforgeStat | null = null;\n\t\tif (itemSpec.reforging) {\n\t\t\treforge = this.getReforgeById(itemSpec.reforging) || null;\n\t\t}\n\n\t\treturn new EquippedItem(item, enchant, gems, randomSuffix, reforge);\n\t}\n\n\tlookupEquipmentSpec(equipSpec: EquipmentSpec): Gear {\n\t\t// EquipmentSpec is supposed to be indexed by slot, but here we assume\n\t\t// it isn't just in case.\n\t\tconst gearMap: Partial<Record<ItemSlot, EquippedItem | null>> = {};\n\t\tequipSpec.items.forEach(itemSpec => {\n\t\t\tconst item = this.lookupItemSpec(itemSpec);\n\t\t\tif (!item) return;\n\n\t\t\tconst itemSlots = getEligibleItemSlots(item.item);\n\n\t\t\tconst assignedSlot = itemSlots.find(slot => !gearMap[slot]);\n\t\t\tif (assignedSlot == null) throw new Error('No slots left to equip ' + Item.toJsonString(item.item));\n\n\t\t\tgearMap[assignedSlot] = item;\n\t\t});\n\n\t\treturn new Gear(gearMap);\n\t}\n\n\tlookupItemSwap(itemSwap: ItemSwap): ItemSwapGear {\n\t\treturn new ItemSwapGear({\n\t\t\t[ItemSlot.ItemSlotMainHand]: itemSwap.mhItem ? this.lookupItemSpec(itemSwap.mhItem) : null,\n\t\t\t[ItemSlot.ItemSlotOffHand]: itemSwap.ohItem ? this.lookupItemSpec(itemSwap.ohItem) : null,\n\t\t\t[ItemSlot.ItemSlotRanged]: itemSwap.rangedItem ? this.lookupItemSpec(itemSwap.rangedItem) : null,\n\t\t});\n\t}\n\n\tenchantSpellIdToEffectId(enchantSpellId: number): number {\n\t\tconst enchant = Object.values(this.enchantsBySlot)\n\t\t\t.flat()\n\t\t\t.find(enchant => enchant.spellId == enchantSpellId);\n\t\treturn enchant ? enchant.effectId : 0;\n\t}\n\n\tglyphItemToSpellId(itemId: number): number {\n\t\treturn this.glyphIds.find(gid => gid.itemId == itemId)?.spellId || 0;\n\t}\n\tglyphSpellToItemId(spellId: number): number {\n\t\treturn this.glyphIds.find(gid => gid.spellId == spellId)?.itemId || 0;\n\t}\n\n\tgetPresetEncounter(path: string): PresetEncounter | null {\n\t\treturn this.presetEncounters.get(path) || null;\n\t}\n\tgetPresetTarget(path: string): PresetTarget | null {\n\t\treturn this.presetTargets.get(path) || null;\n\t}\n\tgetAllPresetEncounters(): Array<PresetEncounter> {\n\t\treturn Array.from(this.presetEncounters.values());\n\t}\n\tgetAllPresetTargets(): Array<PresetTarget> {\n\t\treturn Array.from(this.presetTargets.values());\n\t}\n\n\tstatic async getItemIconData(itemId: number): Promise<IconData> {\n\t\tconst db = await Database.get();\n\t\tif (!db.itemIcons[itemId]) {\n\t\t\tdb.itemIcons[itemId] = Database.getWowheadItemTooltipData(itemId);\n\t\t}\n\t\treturn await db.itemIcons[itemId];\n\t}\n\n\tstatic async getSpellIconData(spellId: number): Promise<IconData> {\n\t\tconst db = await Database.get();\n\t\tif (!db.spellIcons[spellId]) {\n\t\t\tdb.spellIcons[spellId] = Database.getWowheadSpellTooltipData(spellId);\n\t\t}\n\t\treturn await db.spellIcons[spellId];\n\t}\n\n\tprivate static async getWowheadItemTooltipData(id: number): Promise<IconData> {\n\t\treturn Database.getWowheadTooltipData(id, 'item');\n\t}\n\tprivate static async getWowheadSpellTooltipData(id: number): Promise<IconData> {\n\t\treturn Database.getWowheadTooltipData(id, 'spell');\n\t}\n\tprivate static async getWowheadTooltipData(id: number, tooltipPostfix: string): Promise<IconData> {\n\t\tconst url = `https://nether.wowhead.com/cata/tooltip/${tooltipPostfix}/${id}?lvl=${CHARACTER_LEVEL}&dataEnv=${WOWHEAD_EXPANSION_ENV}`;\n\t\ttry {\n\t\t\tconst response = await fetch(url);\n\t\t\tconst json = await response.json();\n\t\t\treturn IconData.create({\n\t\t\t\tid: id,\n\t\t\t\tname: json['name'],\n\t\t\t\ticon: json['icon'],\n\t\t\t\thasBuff: json['buff'] !== '',\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tconsole.error('Error while fetching url: ' + url + '\\n\\n' + e);\n\t\t\treturn IconData.create();\n\t\t}\n\t}\n\n\tpublic static mergeSimDatabases(db1: SimDatabase, db2: SimDatabase): SimDatabase {\n\t\treturn SimDatabase.create({\n\t\t\titems: distinct(db1.items.concat(db2.items), (a, b) => a.id == b.id),\n\t\t\trandomSuffixes: distinct(db1.randomSuffixes.concat(db2.randomSuffixes), (a, b) => a.id == b.id),\n\t\t\treforgeStats: distinct(db1.reforgeStats.concat(db2.reforgeStats), (a, b) => a.id == b.id),\n\t\t\tenchants: distinct(db1.enchants.concat(db2.enchants), (a, b) => a.effectId == b.effectId),\n\t\t\tgems: distinct(db1.gems.concat(db2.gems), (a, b) => a.id == b.id),\n\t\t});\n\t}\n}\n","import { getLanguageCode } from './constants/lang';\nimport { CHARACTER_LEVEL } from './constants/mechanics';\nimport { Database } from './proto_utils/database';\n\nexport type WowheadTooltipItemParams = {\n\t/**\n\t * @description Item ID\n\t * @see item - mapped value from wowhead\n\t * */\n\titemId: number;\n\t/**\n\t * @description Item level\n\t * @see ilvl - mapped value from wowhead\n\t * */\n\titemLevel?: number;\n\t/**\n\t * @description Level\n\t * @see lvl - mapped value from wowhead\n\t * */\n\tlevel?: number;\n\t/**\n\t * @description Enchant\n\t * @see ench - mapped value from wowhead\n\t * */\n\tenchantId?: number;\n\t/**\n\t * @description Gems\n\t * @see gems - mapped value from wowhead\n\t * */\n\tgemIds?: number[];\n\t/**\n\t * @description Extra Socket\n\t * @see sock - mapped value from wowhead\n\t * */\n\thasExtraSocket?: boolean;\n\t/**\n\t * @description Item Set Pieces\n\t * @see pcs - mapped value from wowhead\n\t * */\n\tsetPieceIds?: number[];\n\t/**\n\t * @description Random Enchantment\n\t * @see rand - mapped value from wowhead\n\t * */\n\trandomEnchantmentId?: number;\n\t/**\n\t * @description Reforges\n\t * @see forg - mapped value from wowhead\n\t * */\n\treforgeId?: number;\n\t/**\n\t * @description Transmogrified to\n\t * @see transmog - mapped value from wowhead\n\t * */\n\ttransmogId?: number;\n};\n\nexport type WowheadTooltipSpellParams = {\n\t/**\n\t * @description Spell ID\n\t * @see spell - mapped value from wowhead\n\t * */\n\tspellId: number;\n\t/**\n\t * @description Level\n\t * @see lvl - mapped value from wowhead\n\t * */\n\tlevel?: number;\n\t/**\n\t * @description Buff\n\t * @see buff - mapped value from wowhead\n\t * */\n\tuseBuffAura?: boolean;\n\t/**\n\t * @description Difficulty\n\t * @see dd - mapped value from wowhead\n\t * */\n\tdifficultyId?: 14 | 15 | 16;\n};\n\nexport const WOWHEAD_EXPANSION_ENV = 11;\n\nexport const buildWowheadTooltipDataset = async (options: WowheadTooltipItemParams | WowheadTooltipSpellParams) => {\n\tconst lang = getLanguageCode();\n\tconst params = new URLSearchParams();\n\tconst langPrefix = lang ? lang + '.' : '';\n\tparams.set('domain', `${langPrefix}cata`);\n\tparams.set('dataEnv', String(WOWHEAD_EXPANSION_ENV));\n\n\tif (options.level) {\n\t\tparams.set('lvl', String(options.level || CHARACTER_LEVEL));\n\t}\n\n\tif ('spellId' in options) {\n\t\tif (options.spellId) {\n\t\t\tparams.set('spell', String(options.spellId));\n\t\t}\n\t\tif (options.useBuffAura) {\n\t\t\tconst data = await Database.getSpellIconData(options.spellId);\n\t\t\tif (data.hasBuff) params.set('buff', '1');\n\t\t}\n\t}\n\n\tif ('itemId' in options) {\n\t\tparams.set('item', String(options.itemId));\n\t\tif (options.itemLevel) {\n\t\t\tparams.set('ilvl', String(options.itemLevel));\n\t\t}\n\t\tif (options.gemIds?.length) {\n\t\t\tparams.set('gems', options.gemIds.join(':'));\n\t\t}\n\t\tif (options.enchantId) {\n\t\t\tparams.set('ench', String(options.enchantId));\n\t\t}\n\t\tif (options.reforgeId) {\n\t\t\tparams.set('forg', String(options.reforgeId));\n\t\t}\n\t\tif (options.randomEnchantmentId) {\n\t\t\tparams.set('rand', String(options.randomEnchantmentId));\n\t\t}\n\t\tif (options.setPieceIds?.length) {\n\t\t\tparams.set('pcs', options.setPieceIds.join(':'));\n\t\t}\n\t\tif (options.hasExtraSocket) {\n\t\t\tparams.set('sock', '');\n\t\t}\n\t\tif (options.transmogId) {\n\t\t\tparams.set('transmog', String(options.transmogId));\n\t\t}\n\t}\n\n\treturn params.toString();\n};\n","import { getWowheadLanguagePrefix } from '../constants/lang.js';\nimport { CHARACTER_LEVEL } from '../constants/mechanics.js';\nimport { ResourceType } from '../proto/api.js';\nimport { ActionID as ActionIdProto, ItemRandomSuffix, OtherAction, ReforgeStat } from '../proto/common.js';\nimport { IconData, UIItem as Item } from '../proto/ui.js';\nimport { buildWowheadTooltipDataset, WowheadTooltipItemParams, WowheadTooltipSpellParams } from '../wowhead';\nimport { Database } from './database.js';\n\n// If true uses wotlkdb.com, else uses wowhead.com.\nexport const USE_WOTLK_DB = false;\n\n// Uniquely identifies a specific item / spell / thing in WoW. This object is immutable.\nexport class ActionId {\n\treadonly itemId: number;\n\treadonly randomSuffixId: number;\n\treadonly reforgeId: number;\n\treadonly spellId: number;\n\treadonly otherId: OtherAction;\n\treadonly tag: number;\n\n\treadonly baseName: string; // The name without any tag additions.\n\treadonly name: string;\n\treadonly iconUrl: string;\n\n\tprivate constructor(\n\t\titemId: number,\n\t\tspellId: number,\n\t\totherId: OtherAction,\n\t\ttag: number,\n\t\tbaseName: string,\n\t\tname: string,\n\t\ticonUrl: string,\n\t\trandomSuffixId?: number,\n\t\treforgeId?: number,\n\t) {\n\t\tthis.itemId = itemId;\n\t\tthis.randomSuffixId = randomSuffixId || 0;\n\t\tthis.reforgeId = reforgeId || 0;\n\t\tthis.spellId = spellId;\n\t\tthis.otherId = otherId;\n\t\tthis.tag = tag;\n\n\t\tswitch (otherId) {\n\t\t\tcase OtherAction.OtherActionNone:\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionWait:\n\t\t\t\tbaseName = 'Wait';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_misc_pocketwatch_01.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionManaRegen:\n\t\t\t\tname = 'Mana Tick';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeMana];\n\t\t\t\tif (tag == 1) {\n\t\t\t\t\tname += ' (In Combat)';\n\t\t\t\t} else if (tag == 2) {\n\t\t\t\t\tname += ' (Out of Combat)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionEnergyRegen:\n\t\t\t\tbaseName = 'Energy Tick';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeEnergy];\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionFocusRegen:\n\t\t\t\tbaseName = 'Focus Tick';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeFocus];\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionManaGain:\n\t\t\t\tbaseName = 'Mana Gain';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeMana];\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionRageGain:\n\t\t\t\tbaseName = 'Rage Gain';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeRage];\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionAttack:\n\t\t\t\tname = 'Attack';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_sword_04.jpg';\n\t\t\t\tif (tag == 1) {\n\t\t\t\t\tname += ' (Main Hand)';\n\t\t\t\t} else if (tag == 2) {\n\t\t\t\t\tname += ' (Off Hand)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionShoot:\n\t\t\t\tname = 'Shoot';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/ability_marksmanship.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionPet:\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionRefund:\n\t\t\t\tbaseName = 'Refund';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_misc_coin_01.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionDamageTaken:\n\t\t\t\tbaseName = 'Damage Taken';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_sword_04.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionHealingModel:\n\t\t\t\tbaseName = 'Incoming HPS';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_renew.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionBloodRuneGain:\n\t\t\t\tbaseName = 'Blood Rune Gain';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_deathstrike.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionFrostRuneGain:\n\t\t\t\tbaseName = 'Frost Rune Gain';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_deathstrike2.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionUnholyRuneGain:\n\t\t\t\tbaseName = 'Unholy Rune Gain';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_empowerruneblade.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionDeathRuneGain:\n\t\t\t\tbaseName = 'Death Rune Gain';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_empowerruneblade.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionPotion:\n\t\t\t\tbaseName = 'Potion';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_alchemy_elixir_04.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionMove:\n\t\t\t\tbaseName = 'Moving';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/medium/inv_boots_cloth_03.jpg';\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.baseName = baseName;\n\t\tthis.name = name || baseName;\n\t\tthis.iconUrl = iconUrl;\n\t}\n\n\tanyId(): number {\n\t\treturn this.itemId || this.spellId || this.otherId;\n\t}\n\n\tequals(other: ActionId): boolean {\n\t\treturn this.equalsIgnoringTag(other) && this.tag == other.tag;\n\t}\n\n\tequalsIgnoringTag(other: ActionId): boolean {\n\t\treturn this.itemId == other.itemId && this.randomSuffixId == other.randomSuffixId && this.spellId == other.spellId && this.otherId == other.otherId;\n\t}\n\n\tsetBackground(elem: HTMLElement) {\n\t\tif (this.iconUrl) {\n\t\t\telem.style.backgroundImage = `url('${this.iconUrl}')`;\n\t\t}\n\t}\n\n\tstatic makeItemUrl(id: number, randomSuffixId?: number, reforgeId?: number): string {\n\t\tconst langPrefix = getWowheadLanguagePrefix();\n\t\tconst url = new URL(`https://wowhead.com/cata/${langPrefix}item=${id}`);\n\t\turl.searchParams.set('level', String(CHARACTER_LEVEL));\n\t\turl.searchParams.set('rand', String(randomSuffixId || 0));\n\t\tif (reforgeId) url.searchParams.set('forg', String(reforgeId));\n\t\treturn url.toString();\n\t}\n\tstatic makeSpellUrl(id: number): string {\n\t\tconst langPrefix = getWowheadLanguagePrefix();\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn `https://wotlkdb.com/?spell=${id}`;\n\t\t} else {\n\t\t\treturn `https://wowhead.com/cata/${langPrefix}spell=${id}`;\n\t\t}\n\t}\n\tstatic async makeItemTooltipData(id: number, params?: Omit<WowheadTooltipItemParams, 'itemId'>) {\n\t\treturn buildWowheadTooltipDataset({ itemId: id, ...params });\n\t}\n\tstatic async makeSpellTooltipData(id: number, params?: Omit<WowheadTooltipSpellParams, 'spellId'>) {\n\t\treturn buildWowheadTooltipDataset({ spellId: id, ...params });\n\t}\n\tstatic makeQuestUrl(id: number): string {\n\t\tconst langPrefix = getWowheadLanguagePrefix();\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn 'https://wotlkdb.com/?quest=' + id;\n\t\t} else {\n\t\t\treturn `https://wowhead.com/cata/${langPrefix}quest=${id}`;\n\t\t}\n\t}\n\tstatic makeNpcUrl(id: number): string {\n\t\tconst langPrefix = getWowheadLanguagePrefix();\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn 'https://wotlkdb.com/?npc=' + id;\n\t\t} else {\n\t\t\treturn `https://wowhead.com/cata/${langPrefix}npc=${id}`;\n\t\t}\n\t}\n\tstatic makeZoneUrl(id: number): string {\n\t\tconst langPrefix = getWowheadLanguagePrefix();\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn 'https://wotlkdb.com/?zone=' + id;\n\t\t} else {\n\t\t\treturn `https://wowhead.com/cata/${langPrefix}zone=${id}`;\n\t\t}\n\t}\n\n\tsetWowheadHref(elem: HTMLAnchorElement) {\n\t\tif (this.itemId) {\n\t\t\telem.href = ActionId.makeItemUrl(this.itemId, this.randomSuffixId, this.reforgeId);\n\t\t} else if (this.spellId) {\n\t\t\telem.href = ActionId.makeSpellUrl(this.spellId);\n\t\t}\n\t}\n\n\tasync setWowheadDataset(elem: HTMLElement, params?: Omit<WowheadTooltipItemParams, 'itemId'> | Omit<WowheadTooltipSpellParams, 'spellId'>) {\n\t\t(this.itemId ? ActionId.makeItemTooltipData(this.itemId, params) : ActionId.makeSpellTooltipData(this.spellId, params)).then(url => {\n\t\t\tif (elem) elem.dataset.wowhead = url;\n\t\t});\n\t}\n\n\tsetBackgroundAndHref(elem: HTMLAnchorElement) {\n\t\tthis.setBackground(elem);\n\t\tthis.setWowheadHref(elem);\n\t}\n\n\tasync fillAndSet(elem: HTMLAnchorElement, setHref: boolean, setBackground: boolean): Promise<ActionId> {\n\t\tconst filled = await this.fill();\n\t\tif (setHref) {\n\t\t\tfilled.setWowheadHref(elem);\n\t\t}\n\t\tif (setBackground) {\n\t\t\tfilled.setBackground(elem);\n\t\t}\n\t\treturn filled;\n\t}\n\n\t// Returns an ActionId with the name and iconUrl fields filled.\n\t// playerIndex is the optional index of the player to whom this ID corresponds.\n\tasync fill(playerIndex?: number): Promise<ActionId> {\n\t\tif (this.name || this.iconUrl) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (this.otherId) {\n\t\t\treturn this;\n\t\t}\n\n\t\tconst tooltipData = await ActionId.getTooltipData(this);\n\n\t\tconst baseName = tooltipData['name'];\n\t\tlet name = baseName;\n\t\tswitch (baseName) {\n\t\t\tcase 'Explosive Shot':\n\t\t\t\tif (this.spellId == 60053) {\n\t\t\t\t\tname += ' (R4)';\n\t\t\t\t} else if (this.spellId == 60052) {\n\t\t\t\t\tname += ' (R3)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Explosive Trap':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Weaving)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Arcane Blast':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (No Stacks)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ` (1 Stack)`;\n\t\t\t\t} else if (this.tag > 2) {\n\t\t\t\t\tname += ` (${this.tag - 1} Stacks)`;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Hot Streak':\n\t\t\t\tif (this.tag) name += ' (Crits)';\n\t\t\t\tbreak;\n\t\t\tcase 'Fireball':\n\t\t\tcase 'Flamestrike':\n\t\t\t\tif (this.tag == 8) {\n\t\t\t\t\tname += ' (Rank 8)';\n\t\t\t\t} else if (this.tag == 9) {\n\t\t\t\t\tname += ' (Rank 9)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Pyroblast':\n\t\t\tcase 'Combustion':\n\t\t\t\tif (this.tag) name += ' (DoT)';\n\t\t\t\tbreak;\n\t\t\tcase 'Living Bomb':\n\t\t\t\tif (this.tag == 1) name += ' (DoT)';\n\t\t\t\telse if (this.tag == 2) name += ' (Explosion)';\n\t\t\t\tbreak;\n\t\t\tcase 'Evocation':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (1 Tick)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (2 Tick)';\n\t\t\t\t} else if (this.tag == 3) {\n\t\t\t\t\tname += ' (3 Tick)';\n\t\t\t\t} else if (this.tag == 4) {\n\t\t\t\t\tname += ' (4 Tick)';\n\t\t\t\t} else if (this.tag == 5) {\n\t\t\t\t\tname += ' (5 Tick)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Mind Flay':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (1 Tick)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (2 Tick)';\n\t\t\t\t} else if (this.tag == 3) {\n\t\t\t\t\tname += ' (3 Tick)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Mind Sear':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (1 Tick)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (2 Tick)';\n\t\t\t\t} else if (this.tag == 3) {\n\t\t\t\t\tname += ' (3 Tick)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Shattering Throw':\n\t\t\t\tif (this.tag === playerIndex) {\n\t\t\t\t\tname += ` (self)`;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Envenom':\n\t\t\tcase 'Eviscerate':\n\t\t\tcase 'Expose Armor':\n\t\t\tcase 'Rupture':\n\t\t\tcase 'Slice and Dice':\n\t\t\tcase 'Recuperate':\n\t\t\t\tif (this.tag) name += ` (${this.tag} CP)`;\n\t\t\t\tbreak;\n\t\t\tcase 'Instant Poison':\n\t\t\tcase 'Wound Poison':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Deadly)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Shiv)';\n\t\t\t\t} else if (this.tag == 3) {\n\t\t\t\t\tname += ' (Fan of Knives)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Fan of Knives':\n\t\t\tcase 'Killing Spree':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Main Hand)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Off Hand)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Tricks of the Trade':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Not Self)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Mutilate':\n\t\t\t\tif (this.tag == 0) {\n\t\t\t\t\tname += ' (Cast)';\n\t\t\t\t} else if (this.tag == 1) {\n\t\t\t\t\tname += ' (Main Hand)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Off Hand)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Hemorrhage':\n\t\t\t\tif (this.spellId == 89775) {\n\t\t\t\t\tname += ' (DoT)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Stormstrike':\n\t\t\t\tif (this.tag == 0) {\n\t\t\t\t\tname += ' (Cast)';\n\t\t\t\t} else if (this.tag == 1) {\n\t\t\t\t\tname += ' (Main Hand)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Off Hand)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Chain Lightning':\n\t\t\tcase 'Lightning Bolt':\n\t\t\tcase 'Lava Burst':\n\t\t\t\tif (this.tag == 6) {\n\t\t\t\t\tname += ' (Overload)';\n\t\t\t\t} else if (this.tag) {\n\t\t\t\t\tname += ` (${this.tag} MW)`;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Flame Shock':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (DoT)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Fulmination':\n\t\t\t\tname += ` (${this.tag + 3})`;\n\t\t\tcase 'Moonfire':\n\t\t\tcase 'Sunfire':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (DoT)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Holy Shield':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Proc)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Righteous Vengeance':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Application)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (DoT)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Holy Vengeance':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Application)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (DoT)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t// For targetted buffs, tag is the source player's raid index or -1 if none.\n\t\t\tcase 'Bloodlust':\n\t\t\tcase 'Ferocious Inspiration':\n\t\t\tcase 'Innervate':\n\t\t\tcase 'Focus Magic':\n\t\t\tcase 'Mana Tide Totem':\n\t\t\tcase 'Unholy Frenzy':\n\t\t\tcase 'Power Infusion':\n\t\t\t\tif (this.tag != -1) {\n\t\t\t\t\tif (this.tag === playerIndex || playerIndex == undefined) {\n\t\t\t\t\t\tname += ` (self)`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tname += ` (from #${this.tag + 1})`;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tname += ' (raid)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Darkmoon Card: Crusade':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Melee)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Spell)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Frozen Blows':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Physical)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Frost)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Scourge Strike':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Physical)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Shadow)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Heart Strike':\n\t\t\t\t/*if (this.tag == 1) {\n\t\t\t\t\tname += ' (Physical)';\n\t\t\t\t} else */ if (this.tag == 2) {\n\t\t\t\t\tname += ' (Off-target)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Rune Strike':\n\t\t\t\tif (this.tag == 0) {\n\t\t\t\t\tname += ' (Queue)';\n\t\t\t\t} else if (this.tag == 1) {\n\t\t\t\t\tname += ' (Main Hand)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Off Hand)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Frost Strike':\n\t\t\tcase 'Plague Strike':\n\t\t\tcase 'Blood Strike':\n\t\t\tcase 'Obliterate':\n\t\t\tcase 'Blood-Caked Strike':\n\t\t\tcase 'Festering Strike':\n\t\t\tcase 'Razor Frost':\n\t\t\tcase 'Lightning Speed':\n\t\t\tcase 'Windfury Weapon':\n\t\t\tcase 'Berserk':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Main Hand)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Off Hand)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Death Strike':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Main Hand)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Off Hand)';\n\t\t\t\t} else if (this.tag == 3) {\n\t\t\t\t\tname += ' (Heal)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Battle Shout':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Snapshot)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Heroic Strike':\n\t\t\tcase 'Cleave':\n\t\t\tcase 'Maul':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Queue)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Whirlwind':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (OH)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Seed of Corruption':\n\t\t\t\tif (this.tag == 0) {\n\t\t\t\t\tname += ' (DoT)';\n\t\t\t\t} else if (this.tag == 1) {\n\t\t\t\t\tname += ' (Explosion)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Thunderfury':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (ST)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (MT)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Devouring Plague':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Improved)';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase 'Improved Steady Shot':\n\t\t\t\tif (this.tag == 2) {\n\t\t\t\t\tname += ' (pre)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Immolate':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (DoT)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Opportunity Strike':\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (this.tag) {\n\t\t\t\t\tname += ' (??)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst idString = this.toProtoString();\n\t\tconst iconOverrideId = idOverrides[idString] || null;\n\n\t\tlet iconUrl = ActionId.makeIconUrl(tooltipData['icon']);\n\t\tif (iconOverrideId) {\n\t\t\tconst overrideTooltipData = await ActionId.getTooltipData(iconOverrideId);\n\t\t\ticonUrl = ActionId.makeIconUrl(overrideTooltipData['icon']);\n\t\t}\n\n\t\treturn new ActionId(this.itemId, this.spellId, this.otherId, this.tag, baseName, name, iconUrl, this.randomSuffixId, this.reforgeId);\n\t}\n\n\ttoString(): string {\n\t\treturn this.toStringIgnoringTag() + (this.tag ? '-' + this.tag : '');\n\t}\n\n\ttoStringIgnoringTag(): string {\n\t\tif (this.itemId) {\n\t\t\treturn 'item-' + this.itemId;\n\t\t} else if (this.spellId) {\n\t\t\treturn 'spell-' + this.spellId;\n\t\t} else if (this.otherId) {\n\t\t\treturn 'other-' + this.otherId;\n\t\t} else {\n\t\t\tthrow new Error('Empty action id!');\n\t\t}\n\t}\n\n\ttoProto(): ActionIdProto {\n\t\tconst protoId = ActionIdProto.create({\n\t\t\ttag: this.tag,\n\t\t});\n\n\t\tif (this.itemId) {\n\t\t\tprotoId.rawId = {\n\t\t\t\toneofKind: 'itemId',\n\t\t\t\titemId: this.itemId,\n\t\t\t};\n\t\t} else if (this.spellId) {\n\t\t\tprotoId.rawId = {\n\t\t\t\toneofKind: 'spellId',\n\t\t\t\tspellId: this.spellId,\n\t\t\t};\n\t\t} else if (this.otherId) {\n\t\t\tprotoId.rawId = {\n\t\t\t\toneofKind: 'otherId',\n\t\t\t\totherId: this.otherId,\n\t\t\t};\n\t\t}\n\n\t\treturn protoId;\n\t}\n\n\ttoProtoString(): string {\n\t\treturn ActionIdProto.toJsonString(this.toProto());\n\t}\n\n\twithoutTag(): ActionId {\n\t\treturn new ActionId(this.itemId, this.spellId, this.otherId, 0, this.baseName, this.baseName, this.iconUrl, this.randomSuffixId, this.reforgeId);\n\t}\n\n\tstatic fromEmpty(): ActionId {\n\t\treturn new ActionId(0, 0, OtherAction.OtherActionNone, 0, '', '', '');\n\t}\n\n\tstatic fromItemId(itemId: number, tag?: number, randomSuffixId?: number, reforgeId?: number): ActionId {\n\t\treturn new ActionId(itemId, 0, OtherAction.OtherActionNone, tag || 0, '', '', '', randomSuffixId, reforgeId);\n\t}\n\n\tstatic fromSpellId(spellId: number, tag?: number): ActionId {\n\t\treturn new ActionId(0, spellId, OtherAction.OtherActionNone, tag || 0, '', '', '');\n\t}\n\n\tstatic fromOtherId(otherId: OtherAction, tag?: number): ActionId {\n\t\treturn new ActionId(0, 0, otherId, tag || 0, '', '', '');\n\t}\n\n\tstatic fromPetName(petName: string): ActionId {\n\t\treturn petNameToActionId[petName] || new ActionId(0, 0, OtherAction.OtherActionPet, 0, petName, petName, petNameToIcon[petName] || '');\n\t}\n\n\tstatic fromItem(item: Item): ActionId {\n\t\treturn ActionId.fromItemId(item.id);\n\t}\n\n\tstatic fromRandomSuffix(item: Item, randomSuffix: ItemRandomSuffix): ActionId {\n\t\treturn ActionId.fromItemId(item.id, 0, randomSuffix.id);\n\t}\n\n\tstatic fromReforge(item: Item, reforge: ReforgeStat): ActionId {\n\t\treturn ActionId.fromItemId(item.id, 0, 0, reforge.id);\n\t}\n\n\tstatic fromProto(protoId: ActionIdProto): ActionId {\n\t\tif (protoId.rawId.oneofKind == 'spellId') {\n\t\t\treturn ActionId.fromSpellId(protoId.rawId.spellId, protoId.tag);\n\t\t} else if (protoId.rawId.oneofKind == 'itemId') {\n\t\t\treturn ActionId.fromItemId(protoId.rawId.itemId, protoId.tag);\n\t\t} else if (protoId.rawId.oneofKind == 'otherId') {\n\t\t\treturn ActionId.fromOtherId(protoId.rawId.otherId, protoId.tag);\n\t\t} else {\n\t\t\treturn ActionId.fromEmpty();\n\t\t}\n\t}\n\n\tprivate static readonly logRegex = /{((SpellID)|(ItemID)|(OtherID)): (\\d+)(, Tag: (-?\\d+))?}/;\n\tprivate static readonly logRegexGlobal = new RegExp(ActionId.logRegex, 'g');\n\tprivate static fromMatch(match: RegExpMatchArray): ActionId {\n\t\tconst idType = match[1];\n\t\tconst id = parseInt(match[5]);\n\t\treturn new ActionId(\n\t\t\tidType == 'ItemID' ? id : 0,\n\t\t\tidType == 'SpellID' ? id : 0,\n\t\t\tidType == 'OtherID' ? id : 0,\n\t\t\tmatch[7] ? parseInt(match[7]) : 0,\n\t\t\t'',\n\t\t\t'',\n\t\t\t'',\n\t\t);\n\t}\n\tstatic fromLogString(str: string): ActionId {\n\t\tconst match = str.match(ActionId.logRegex);\n\t\tif (match) {\n\t\t\treturn ActionId.fromMatch(match);\n\t\t} else {\n\t\t\tconsole.warn('Failed to parse action id from log: ' + str);\n\t\t\treturn ActionId.fromEmpty();\n\t\t}\n\t}\n\n\tstatic async replaceAllInString(str: string): Promise<string> {\n\t\tconst matches = [...str.matchAll(ActionId.logRegexGlobal)];\n\n\t\tconst replaceData = await Promise.all(\n\t\t\tmatches.map(async match => {\n\t\t\t\tconst actionId = ActionId.fromMatch(match);\n\t\t\t\tconst filledId = await actionId.fill();\n\t\t\t\treturn {\n\t\t\t\t\tfirstIndex: match.index || 0,\n\t\t\t\t\tlen: match[0].length,\n\t\t\t\t\tactionId: filledId,\n\t\t\t\t};\n\t\t\t}),\n\t\t);\n\n\t\t// Loop in reverse order so we can greedily apply the string replacements.\n\t\tfor (let i = replaceData.length - 1; i >= 0; i--) {\n\t\t\tconst data = replaceData[i];\n\t\t\tstr = str.substring(0, data.firstIndex) + data.actionId.name + str.substring(data.firstIndex + data.len);\n\t\t}\n\n\t\treturn str;\n\t}\n\n\tprivate static makeIconUrl(iconLabel: string): string {\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn `https://wotlkdb.com/static/images/wow/icons/large/${iconLabel}.jpg`;\n\t\t} else {\n\t\t\treturn `https://wow.zamimg.com/images/wow/icons/large/${iconLabel}.jpg`;\n\t\t}\n\t}\n\n\tstatic async getTooltipData(actionId: ActionId): Promise<IconData> {\n\t\tif (actionId.itemId) {\n\t\t\treturn await Database.getItemIconData(actionId.itemId);\n\t\t} else {\n\t\t\treturn await Database.getSpellIconData(actionId.spellId);\n\t\t}\n\t}\n}\n\n// Some items/spells have weird icons, so use this to show a different icon instead.\nconst idOverrides: Record<string, ActionId> = {};\nidOverrides[ActionId.fromSpellId(37212).toProtoString()] = ActionId.fromItemId(29035); // Improved Wrath of Air Totem\nidOverrides[ActionId.fromSpellId(37223).toProtoString()] = ActionId.fromItemId(29040); // Improved Strength of Earth Totem\nidOverrides[ActionId.fromSpellId(37447).toProtoString()] = ActionId.fromItemId(30720); // Serpent-Coil Braid\nidOverrides[ActionId.fromSpellId(37443).toProtoString()] = ActionId.fromItemId(30196); // Robes of Tirisfal (4pc bonus)\n\nexport const defaultTargetIcon = 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_metamorphosis.jpg';\n\nconst petNameToActionId: Record<string, ActionId> = {\n\t'Gnomish Flame Turret': ActionId.fromItemId(23841),\n\t'Mirror Image': ActionId.fromSpellId(55342),\n\t'Water Elemental': ActionId.fromSpellId(31687),\n\t'Greater Fire Elemental': ActionId.fromSpellId(2894),\n\tShadowfiend: ActionId.fromSpellId(34433),\n\t'Spirit Wolf 1': ActionId.fromSpellId(51533),\n\t'Spirit Wolf 2': ActionId.fromSpellId(51533),\n\t'Rune Weapon': ActionId.fromSpellId(49028),\n\tBloodworm: ActionId.fromSpellId(50452),\n\tGargoyle: ActionId.fromSpellId(49206),\n\tGhoul: ActionId.fromSpellId(46584),\n\t'Army of the Dead': ActionId.fromSpellId(42650),\n\tValkyr: ActionId.fromSpellId(71844),\n};\n\n// https://wowhead.com/cata/hunter-pets\nconst petNameToIcon: Record<string, string> = {\n\tBat: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_bat.jpg',\n\tBear: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_bear.jpg',\n\t'Bird of Prey': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_owl.jpg',\n\tBoar: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_boar.jpg',\n\t'Carrion Bird': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_vulture.jpg',\n\tCat: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_cat.jpg',\n\tChimaera: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_chimera.jpg',\n\t'Core Hound': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_corehound.jpg',\n\tCrab: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_crab.jpg',\n\tCrocolisk: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_crocolisk.jpg',\n\tDevilsaur: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_devilsaur.jpg',\n\tDragonhawk: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_dragonhawk.jpg',\n\tFelguard: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonfelguard.jpg',\n\tFelhunter: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonfelhunter.jpg',\n\tInfernal: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summoninfernal.jpg',\n\tGorilla: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_gorilla.jpg',\n\tHyena: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_hyena.jpg',\n\tImp: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonimp.jpg',\n\t'Mirror Image': 'https://wow.zamimg.com/images/wow/icons/large/spell_magic_lesserinvisibilty.jpg',\n\tMoth: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_moth.jpg',\n\t'Nether Ray': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_netherray.jpg',\n\tOwl: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_owl.jpg',\n\tRaptor: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_raptor.jpg',\n\tRavager: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_ravager.jpg',\n\tRhino: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_rhino.jpg',\n\tScorpid: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_scorpid.jpg',\n\tSerpent: 'https://wow.zamimg.com/images/wow/icons/medium/spell_nature_guardianward.jpg',\n\tSilithid: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_silithid.jpg',\n\tSpider: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_spider.jpg',\n\t'Shale Spider': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_spider.jpg',\n\t'Spirit Beast': 'https://wow.zamimg.com/images/wow/icons/medium/ability_druid_primalprecision.jpg',\n\t'Spore Bat': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_sporebat.jpg',\n\tSuccubus: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonsuccubus.jpg',\n\tTallstrider: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_tallstrider.jpg',\n\tTurtle: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_turtle.jpg',\n\t'Warp Stalker': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_warpstalker.jpg',\n\tWasp: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_wasp.jpg',\n\t'Wind Serpent': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_windserpent.jpg',\n\tWolf: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_wolf.jpg',\n\tWorm: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_worm.jpg',\n\tFox: 'https://wow.zamimg.com/images/wow/icons/medium/inv_misc_monstertail_07.jpg',\n};\n\nexport function getPetIconFromName(name: string): string | ActionId | undefined {\n\treturn petNameToActionId[name] || petNameToIcon[name];\n}\n\nexport const resourceTypeToIcon: Record<ResourceType, string> = {\n\t[ResourceType.ResourceTypeNone]: '',\n\t[ResourceType.ResourceTypeHealth]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_elemental_mote_life01.jpg',\n\t[ResourceType.ResourceTypeMana]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_elemental_mote_mana.jpg',\n\t[ResourceType.ResourceTypeEnergy]: 'https://wow.zamimg.com/images/wow/icons/medium/spell_shadow_shadowworddominate.jpg',\n\t[ResourceType.ResourceTypeRage]: 'https://wow.zamimg.com/images/wow/icons/medium/spell_misc_emotionangry.jpg',\n\t[ResourceType.ResourceTypeComboPoints]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_mace_2h_pvp410_c_01.jpg',\n\t[ResourceType.ResourceTypeFocus]: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_focusfire.jpg',\n\t[ResourceType.ResourceTypeRunicPower]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_sword_62.jpg',\n\t[ResourceType.ResourceTypeBloodRune]: 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_bloodpresence.jpg',\n\t[ResourceType.ResourceTypeFrostRune]: 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_frostpresence.jpg',\n\t[ResourceType.ResourceTypeUnholyRune]: 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_unholypresence.jpg',\n\t[ResourceType.ResourceTypeDeathRune]: '/cata/assets/img/death_rune.png',\n\t[ResourceType.ResourceTypeSolarEnergy]: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_eclipseorange.jpg',\n\t[ResourceType.ResourceTypeLunarEnergy]: 'https://wow.zamimg.com/images/wow/icons/large/ability_druid_eclipse.jpg',\n};\n\n// Use this to connect a buff row to a cast row in the timeline view\nexport const buffAuraToSpellIdMap: Record<number, ActionId> = {\n\t96228: ActionId.fromSpellId(82174), // Synapse Springs - Agi\n\t96229: ActionId.fromSpellId(82174), // Synapse Springs - Str\n\t96230: ActionId.fromSpellId(82174), // Synapse Springs - Int\n};\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { element, fragment } from 'tsx-vanilla';\n\nimport { RaidSimResult, ResourceType } from '../proto/api.js';\nimport { bucket, getEnumValues, stringComparator, sum } from '../utils.js';\nimport { ActionId } from './action_id.js';\nimport { resourceNames, stringToResourceType } from './names.js';\n\nexport class Entity {\n\treadonly name: string;\n\treadonly ownerName: string; // Blank if not a pet.\n\n\t// Either target index, player index, or owner index depending on what kind\n\t// of entity this is.\n\treadonly index: number;\n\n\treadonly isTarget: boolean;\n\treadonly isPet: boolean;\n\n\tconstructor(name: string, ownerName: string, index: number, isTarget: boolean, isPet: boolean) {\n\t\tthis.name = name;\n\t\tthis.ownerName = ownerName;\n\t\tthis.index = index;\n\t\tthis.isTarget = isTarget;\n\t\tthis.isPet = isPet;\n\t}\n\n\tequals(other: Entity) {\n\t\treturn this.isTarget == other.isTarget && this.isPet == other.isPet && this.index == other.index && this.name == other.name;\n\t}\n\n\ttoString(): string {\n\t\tif (this.isTarget) {\n\t\t\treturn `Target ${this.index + 1}`;\n\t\t} else if (this.isPet) {\n\t\t\treturn `${this.ownerName} (#${this.index + 1}) - ${this.name}`;\n\t\t} else {\n\t\t\treturn `${this.name} (#${this.index + 1})`;\n\t\t}\n\t}\n\n\ttoHTML() {\n\t\tif (this.isTarget) {\n\t\t\treturn <span className=\"text-danger\">[Target {this.index + 1}]</span>;\n\t\t} else if (this.isPet) {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<span className=\"text-primary\">{`[${this.ownerName} ${this.index + 1}]`}</span>\n\t\t\t\t\t{` - `}\n\t\t\t\t\t{this.name}\n\t\t\t\t</>\n\t\t\t);\n\t\t} else {\n\t\t\treturn <span className=\"text-primary\">{`[${this.name} ${this.index + 1}]`}</span>;\n\t\t}\n\t}\n\n\t// Parses one or more Entities from a string.\n\t// Each entity label should be one of:\n\t//   'Target 1' if a target,\n\t//   'PlayerName (#1)' if a player, or\n\t//   'PlayerName (#1) - PetName' if a pet.\n\tstatic parseRegex = /\\[(Target (\\d+))|(([a-zA-Z0-9]+) \\(#(\\d+)\\) - ([a-zA-Z0-9\\s]+))|(([a-zA-Z0-9\\s]+) \\(#(\\d+)\\))\\]/g;\n\tstatic parseAll(str: string): Array<Entity> {\n\t\treturn Array.from(str.matchAll(Entity.parseRegex)).map(match => {\n\t\t\tif (match[1]) {\n\t\t\t\treturn new Entity(match[1], '', parseInt(match[2]) - 1, true, false);\n\t\t\t} else if (match[3]) {\n\t\t\t\treturn new Entity(match[6], match[4], parseInt(match[5]) - 1, false, true);\n\t\t\t} else if (match[7]) {\n\t\t\t\treturn new Entity(match[8], '', parseInt(match[9]) - 1, false, false);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Invalid Entity match');\n\t\t\t}\n\t\t});\n\t}\n}\n\ninterface SimLogParams {\n\traw: string;\n\tlogIndex: number;\n\ttimestamp: number;\n\tsource: Entity | null;\n\ttarget: Entity | null;\n\tactionId: ActionId | null;\n\tthreat: number;\n}\n\nexport class SimLog {\n\treadonly raw: string;\n\n\t// Index of this log within the full log output.\n\t// When comparing timestamps this should be used instead of timestamp, because\n\t// timestamp is scraped from log text and doesn't have enough precision.\n\treadonly logIndex: number;\n\n\t// Time in seconds from the encounter start.\n\treadonly timestamp: number;\n\n\treadonly source: Entity | null;\n\treadonly target: Entity | null;\n\treadonly actionId: ActionId | null;\n\n\t// Amount of threat generated from this event. Note that not all events generate threat, so this will be 0.\n\treadonly threat: number;\n\n\t// Logs for auras that were active at this timestamp.\n\t// This is only filled if populateActiveAuras() is called.\n\tactiveAuras: Array<AuraUptimeLog>;\n\n\tcachedHTML: Record<string | number, Element | null> = {};\n\n\tconstructor(params: SimLogParams) {\n\t\tthis.raw = params.raw;\n\t\tthis.logIndex = params.logIndex;\n\t\tthis.timestamp = params.timestamp;\n\t\tthis.source = params.source;\n\t\tthis.target = params.target;\n\t\tthis.actionId = params.actionId;\n\t\tthis.threat = params.threat;\n\t\tthis.activeAuras = [];\n\t}\n\n\ttoHTML(includeTimestamp = true) {\n\t\treturn this.cacheOutput(includeTimestamp, () => {\n\t\t\tlet html = <>{this.raw}</>;\n\t\t\t// Base logs already have the timestamp appended by default\n\t\t\tif (!includeTimestamp) {\n\t\t\t\tconst regexp = /(\\[[0-9.-]+\\]) (\\[[0-9a-zA-Z\\s\\-()#]+\\])?(.*)/;\n\t\t\t\tif (this.raw.match(regexp)) {\n\t\t\t\t\t// TypeScript doesn't handle regex capture typing well\n\t\t\t\t\tconst captureArr = regexp.exec(this.raw);\n\n\t\t\t\t\tif (captureArr && captureArr.length == 4) {\n\t\t\t\t\t\thtml = <>{captureArr[3]}</>;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.source) {\n\t\t\t\thtml = (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{this.source.toHTML()} {html}\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn html;\n\t\t});\n\t}\n\n\ttoPrefix(includeTimestamp = true) {\n\t\tlet prefix = '';\n\t\tif (includeTimestamp) {\n\t\t\tprefix = `[${this.timestamp.toFixed(2)}]`;\n\t\t}\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{prefix}\n\t\t\t\t{this.source?.toHTML()}\n\t\t\t</>\n\t\t);\n\t}\n\n\tformattedTimestamp(): string {\n\t\tconst positiveTimestamp = Math.abs(this.timestamp);\n\t\tconst minutes = Math.floor(positiveTimestamp / 60);\n\t\tconst seconds = Math.floor(positiveTimestamp - minutes * 60);\n\t\tconst milliseconds = ((positiveTimestamp - Math.floor(positiveTimestamp)) * 1000).toFixed();\n\n\t\tlet formatted = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}:${String(milliseconds).padStart(3, '0')}`;\n\t\tif (this.timestamp < 0) {\n\t\t\tformatted = `-${formatted}`;\n\t\t}\n\t\treturn formatted;\n\t}\n\n\tprotected newActionIdLink(isAura?: boolean) {\n\t\tconst iconElem = <span className=\"icon icon-sm\"></span>;\n\t\tconst actionAnchor = (\n\t\t\t<a className=\"log-action\" target=\"_blank\">\n\t\t\t\t<span>\n\t\t\t\t\t{iconElem} {this.actionId!.name}\n\t\t\t\t</span>\n\t\t\t</a>\n\t\t);\n\t\tthis.actionId?.setBackground(iconElem as HTMLAnchorElement);\n\t\tthis.actionId?.setWowheadHref(actionAnchor as HTMLAnchorElement);\n\t\tthis.actionId?.setWowheadDataset(actionAnchor as HTMLAnchorElement, { useBuffAura: isAura });\n\t\treturn actionAnchor;\n\t}\n\n\tstatic async parseAll(result: RaidSimResult): Promise<SimLog[]> {\n\t\tconst lines = result.logs.split('\\n');\n\t\treturn Promise.all(\n\t\t\tlines.map((line, lineIndex) => {\n\t\t\t\tconst params: SimLogParams = {\n\t\t\t\t\traw: line,\n\t\t\t\t\tlogIndex: lineIndex,\n\t\t\t\t\ttimestamp: 0,\n\t\t\t\t\tsource: null,\n\t\t\t\t\ttarget: null,\n\t\t\t\t\tactionId: null,\n\t\t\t\t\tthreat: 0,\n\t\t\t\t};\n\n\t\t\t\tconst threatMatch = line.match(/ \\(Threat: (-?[0-9]+\\.[0-9]+)\\)/);\n\t\t\t\tif (threatMatch) {\n\t\t\t\t\tparams.threat = parseFloat(threatMatch[1]);\n\t\t\t\t\tline = line.substring(0, threatMatch.index);\n\t\t\t\t}\n\n\t\t\t\tconst match = line.match(/\\[(-?[0-9]+\\.[0-9]+)\\]\\w*(.*)/);\n\t\t\t\tif (!match || !match[1]) {\n\t\t\t\t\treturn new SimLog(params);\n\t\t\t\t}\n\n\t\t\t\tparams.timestamp = parseFloat(match[1]);\n\t\t\t\tconst remainder = match[2];\n\n\t\t\t\tconst entities = Entity.parseAll(remainder);\n\t\t\t\tparams.source = entities[0] || null;\n\t\t\t\tparams.target = entities[1] || null;\n\n\t\t\t\t// Order from most to least common to reduce number of checks.\n\t\t\t\treturn (\n\t\t\t\t\tDamageDealtLog.parse(params) ||\n\t\t\t\t\tResourceChangedLog.parse(params) ||\n\t\t\t\t\tAuraEventLog.parse(params) ||\n\t\t\t\t\tAuraStacksChangeLog.parse(params) ||\n\t\t\t\t\tMajorCooldownUsedLog.parse(params) ||\n\t\t\t\t\tCastBeganLog.parse(params) ||\n\t\t\t\t\tCastCompletedLog.parse(params) ||\n\t\t\t\t\tStatChangeLog.parse(params) ||\n\t\t\t\t\tPromise.resolve(new SimLog(params))\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t}\n\n\tisDamageDealt(): this is DamageDealtLog {\n\t\treturn this instanceof DamageDealtLog;\n\t}\n\n\tisResourceChanged(): this is ResourceChangedLog {\n\t\treturn this instanceof ResourceChangedLog;\n\t}\n\n\tisAuraEvent(): this is AuraEventLog {\n\t\treturn this instanceof AuraEventLog;\n\t}\n\n\tisAuraStacksChange(): this is AuraStacksChangeLog {\n\t\treturn this instanceof AuraStacksChangeLog;\n\t}\n\n\tisMajorCooldownUsed(): this is MajorCooldownUsedLog {\n\t\treturn this instanceof MajorCooldownUsedLog;\n\t}\n\n\tisCastBegan(): this is CastBeganLog {\n\t\treturn this instanceof CastBeganLog;\n\t}\n\n\tisCastCompleted(): this is CastCompletedLog {\n\t\treturn this instanceof CastCompletedLog;\n\t}\n\n\tisStatChange(): this is StatChangeLog {\n\t\treturn this instanceof StatChangeLog;\n\t}\n\n\t// Group events that happen at the same time.\n\tstatic groupDuplicateTimestamps<LogType extends SimLog>(logs: Array<LogType>): Array<Array<LogType>> {\n\t\tconst grouped: Array<Array<LogType>> = [];\n\t\tlet curGroup: Array<LogType> = [];\n\n\t\tlogs.forEach(log => {\n\t\t\tif (curGroup.length == 0 || log.timestamp == curGroup[0].timestamp) {\n\t\t\t\tcurGroup.push(log);\n\t\t\t} else {\n\t\t\t\tgrouped.push(curGroup);\n\t\t\t\tcurGroup = [log];\n\t\t\t}\n\t\t});\n\t\tif (curGroup.length > 0) {\n\t\t\tgrouped.push(curGroup);\n\t\t}\n\n\t\treturn grouped;\n\t}\n\n\tcacheOutput(cacheKey: string | number | boolean, fn: () => Element) {\n\t\tif (this.cachedHTML[String(cacheKey)]) return this.cachedHTML[String(cacheKey)] as Element;\n\t\tthis.cachedHTML[String(cacheKey)] = fn();\n\t\treturn this.cachedHTML[String(cacheKey)]! as Element;\n\t}\n}\n\nexport class DamageDealtLog extends SimLog {\n\treadonly amount: number;\n\treadonly type: string;\n\treadonly miss: boolean;\n\treadonly hit: boolean;\n\treadonly crit: boolean;\n\treadonly crush: boolean;\n\treadonly glance: boolean;\n\treadonly dodge: boolean;\n\treadonly parry: boolean;\n\treadonly block: boolean;\n\treadonly tick: boolean;\n\treadonly partialResist1_4: boolean;\n\treadonly partialResist2_4: boolean;\n\treadonly partialResist3_4: boolean;\n\n\tconstructor(\n\t\tparams: SimLogParams,\n\t\tamount: number,\n\t\ttype: string,\n\t\tmiss: boolean,\n\t\tcrit: boolean,\n\t\tcrush: boolean,\n\t\tglance: boolean,\n\t\tdodge: boolean,\n\t\tparry: boolean,\n\t\tblock: boolean,\n\t\ttick: boolean,\n\t\tpartialResist1_4: boolean,\n\t\tpartialResist2_4: boolean,\n\t\tpartialResist3_4: boolean,\n\t) {\n\t\tsuper(params);\n\t\tthis.amount = amount;\n\t\tthis.type = type;\n\t\tthis.miss = miss;\n\t\tthis.glance = glance;\n\t\tthis.dodge = dodge;\n\t\tthis.parry = parry;\n\t\tthis.block = block;\n\t\tthis.hit = !miss && !crit;\n\t\tthis.crit = crit;\n\t\tthis.crush = crush;\n\t\tthis.tick = tick;\n\t\tthis.partialResist1_4 = partialResist1_4;\n\t\tthis.partialResist2_4 = partialResist2_4;\n\t\tthis.partialResist3_4 = partialResist3_4;\n\t}\n\n\tisDamage(): boolean {\n\t\treturn this.type == 'damage';\n\t}\n\n\tisHealing(): boolean {\n\t\treturn this.type == 'healing';\n\t}\n\n\tisShielding(): boolean {\n\t\treturn this.type == 'shielding';\n\t}\n\n\tresult() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t{this.isHealing() ? `Heal ` : ''}\n\t\t\t\t{this.isShielding() ? `Shield ` : ''}\n\t\t\t\t{this.miss\n\t\t\t\t\t? 'Miss'\n\t\t\t\t\t: this.dodge\n\t\t\t\t\t? 'Dodge'\n\t\t\t\t\t: this.parry\n\t\t\t\t\t? 'Parry'\n\t\t\t\t\t: this.glance\n\t\t\t\t\t? 'Glance'\n\t\t\t\t\t: this.block\n\t\t\t\t\t? this.crit\n\t\t\t\t\t\t? 'Critical Block'\n\t\t\t\t\t\t: 'Block'\n\t\t\t\t\t: this.crit\n\t\t\t\t\t? 'Crit'\n\t\t\t\t\t: this.crush\n\t\t\t\t\t? 'Crush'\n\t\t\t\t\t: this.tick\n\t\t\t\t\t? 'Tick'\n\t\t\t\t\t: 'Hit'}\n\t\t\t\t{` `}\n\t\t\t\t{this.target?.toHTML() || ''}\n\t\t\t\t{!this.miss && !this.dodge && !this.parry ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\tfor <strong className=\"text-danger\">{this.amount.toFixed(2)} damage</strong>\n\t\t\t\t\t\t{this.partialResist1_4 ? (\n\t\t\t\t\t\t\t<> (10% Resist)</>\n\t\t\t\t\t\t) : this.partialResist2_4 ? (\n\t\t\t\t\t\t\t<> (20% Resist)</>\n\t\t\t\t\t\t) : this.partialResist3_4 ? (\n\t\t\t\t\t\t\t<> (30% Resist)</>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t''\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t.\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t''\n\t\t\t\t)}\n\t\t\t</>\n\t\t);\n\t}\n\n\ttoHTML(includeTimestamp = true) {\n\t\treturn this.cacheOutput(includeTimestamp, () => {\n\t\t\tconst threatPostfix = this.source?.isTarget ? '' : ` (${this.threat.toFixed(2)} Threat)`;\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t{this.toPrefix(includeTimestamp)} {this.newActionIdLink()} {this.result()}\n\t\t\t\t\t{threatPostfix}\n\t\t\t\t</>\n\t\t\t);\n\t\t});\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<DamageDealtLog> | null {\n\t\tconst match = params.raw.match(\n\t\t\t/] (.*?) (tick )?((Miss)|(Hit)|(CriticalBlock)|(Crit)|(Crush)|(Glance)|(Dodge)|(Parry)|(Block))( \\((\\d+)% Resist\\))?( for (\\d+\\.\\d+) ((damage)|(healing)|(shielding)))?/,\n\t\t);\n\t\tif (match) {\n\t\t\treturn ActionId.fromLogString(match[1])\n\t\t\t\t.fill(params.source?.index)\n\t\t\t\t.then(cause => {\n\t\t\t\t\tparams.actionId = cause;\n\n\t\t\t\t\tconst amount = match[16] ? parseFloat(match[16]) : 0;\n\t\t\t\t\tconst type = match[17] || '';\n\n\t\t\t\t\treturn new DamageDealtLog(\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\tamount,\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tmatch[3] == 'Miss',\n\t\t\t\t\t\tmatch[3] == 'Crit' || match[3] == 'CriticalBlock',\n\t\t\t\t\t\tmatch[3] == 'Crush',\n\t\t\t\t\t\tmatch[3] == 'Glance',\n\t\t\t\t\t\tmatch[3] == 'Dodge',\n\t\t\t\t\t\tmatch[3] == 'Parry',\n\t\t\t\t\t\tmatch[3] == 'Block' || match[3] == 'CriticalBlock',\n\t\t\t\t\t\tBoolean(match[2]) && match[2].includes('tick'),\n\t\t\t\t\t\tmatch[14] == '10',\n\t\t\t\t\t\tmatch[14] == '20',\n\t\t\t\t\t\tmatch[14] == '30',\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class DpsLog extends SimLog {\n\treadonly dps: number;\n\n\t// Damage events that occurred at the same time as this log.\n\treadonly damageLogs: Array<DamageDealtLog>;\n\n\tconstructor(params: SimLogParams, dps: number, damageLogs: Array<DamageDealtLog>) {\n\t\tsuper(params);\n\t\tthis.dps = dps;\n\t\tthis.damageLogs = damageLogs;\n\t}\n\n\tstatic DPS_WINDOW = 15; // Window over which to calculate DPS.\n\tstatic fromLogs(damageDealtLogs: Array<DamageDealtLog>): Array<DpsLog> {\n\t\tconst groupedDamageLogs = SimLog.groupDuplicateTimestamps(damageDealtLogs);\n\n\t\tlet curDamageLogs: Array<DamageDealtLog> = [];\n\t\tlet curDamageTotal = 0;\n\n\t\treturn groupedDamageLogs.map(ddLogGroup => {\n\t\t\tddLogGroup.forEach(ddLog => {\n\t\t\t\tcurDamageLogs.push(ddLog);\n\t\t\t\tcurDamageTotal += ddLog.amount;\n\t\t\t});\n\n\t\t\tconst newStartIdx = curDamageLogs.findIndex(curLog => {\n\t\t\t\tconst inWindow = curLog.timestamp > ddLogGroup[0].timestamp - DpsLog.DPS_WINDOW;\n\t\t\t\tif (!inWindow) {\n\t\t\t\t\tcurDamageTotal -= curLog.amount;\n\t\t\t\t}\n\t\t\t\treturn inWindow;\n\t\t\t});\n\t\t\tif (newStartIdx == -1) {\n\t\t\t\tcurDamageLogs = [];\n\t\t\t} else {\n\t\t\t\tcurDamageLogs = curDamageLogs.slice(newStartIdx);\n\t\t\t}\n\n\t\t\tconst dps = curDamageTotal / DpsLog.DPS_WINDOW;\n\t\t\tif (isNaN(dps)) {\n\t\t\t\tconsole.warn('NaN dps!');\n\t\t\t}\n\n\t\t\treturn new DpsLog(\n\t\t\t\t{\n\t\t\t\t\traw: '',\n\t\t\t\t\tlogIndex: ddLogGroup[0].logIndex,\n\t\t\t\t\ttimestamp: ddLogGroup[0].timestamp,\n\t\t\t\t\tsource: ddLogGroup[0].source,\n\t\t\t\t\ttarget: null,\n\t\t\t\t\tactionId: null,\n\t\t\t\t\tthreat: 0,\n\t\t\t\t},\n\t\t\t\tdps,\n\t\t\t\tddLogGroup,\n\t\t\t);\n\t\t});\n\t}\n}\n\nexport class ThreatLogGroup extends SimLog {\n\treadonly threatBefore: number;\n\treadonly threatAfter: number;\n\treadonly logs: Array<SimLog>;\n\n\tconstructor(params: SimLogParams, threatBefore: number, threatAfter: number, logs: Array<SimLog>) {\n\t\tsuper(params);\n\t\tthis.threatBefore = threatBefore;\n\t\tthis.threatAfter = threatAfter;\n\t\tthis.logs = logs;\n\t}\n\n\tstatic fromLogs(logs: Array<SimLog>): Array<ThreatLogGroup> {\n\t\tconst groupedLogs = SimLog.groupDuplicateTimestamps(logs.filter(log => log.threat != 0));\n\t\tlet curThreat = 0;\n\t\treturn groupedLogs.map(logGroup => {\n\t\t\tconst newThreat = sum(logGroup.map(log => log.threat));\n\t\t\tconst threatLog = new ThreatLogGroup(\n\t\t\t\t{\n\t\t\t\t\traw: '',\n\t\t\t\t\tlogIndex: logGroup[0].logIndex,\n\t\t\t\t\ttimestamp: logGroup[0].timestamp,\n\t\t\t\t\tsource: logGroup[0].source,\n\t\t\t\t\ttarget: logGroup[0].target,\n\t\t\t\t\tactionId: null,\n\t\t\t\t\tthreat: newThreat,\n\t\t\t\t},\n\t\t\t\tcurThreat,\n\t\t\t\tcurThreat + newThreat,\n\t\t\t\tlogGroup,\n\t\t\t);\n\n\t\t\tcurThreat += newThreat;\n\t\t\treturn threatLog;\n\t\t});\n\t}\n}\n\nexport class AuraEventLog extends SimLog {\n\treadonly isGained: boolean;\n\treadonly isFaded: boolean;\n\treadonly isRefreshed: boolean;\n\n\tconstructor(params: SimLogParams, isGained: boolean, isFaded: boolean, isRefreshed: boolean) {\n\t\tsuper(params);\n\t\tthis.isGained = isGained;\n\t\tthis.isFaded = isFaded;\n\t\tthis.isRefreshed = isRefreshed;\n\t}\n\n\ttoHTML(includeTimestamp = true) {\n\t\treturn this.cacheOutput(includeTimestamp, () => (\n\t\t\t<>\n\t\t\t\t{this.toPrefix(includeTimestamp)}\n\t\t\t\t{`  Aura  `}\n\t\t\t\t{this.isGained ? 'gained' : this.isFaded ? 'faded' : 'refreshed'}: {this.newActionIdLink(true)}.\n\t\t\t</>\n\t\t));\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<AuraEventLog> | null {\n\t\tconst match = params.raw.match(/Aura ((gained)|(faded)|(refreshed)): (.*)/);\n\t\tif (match && match[5]) {\n\t\t\treturn ActionId.fromLogString(match[5])\n\t\t\t\t.fill(params.source?.index)\n\t\t\t\t.then(aura => {\n\t\t\t\t\tparams.actionId = aura;\n\t\t\t\t\tconst event = match[1];\n\t\t\t\t\treturn new AuraEventLog(params, event == 'gained', event == 'faded', event == 'refreshed');\n\t\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class AuraStacksChangeLog extends SimLog {\n\treadonly oldStacks: number;\n\treadonly newStacks: number;\n\n\tconstructor(params: SimLogParams, oldStacks: number, newStacks: number) {\n\t\tsuper(params);\n\t\tthis.oldStacks = oldStacks;\n\t\tthis.newStacks = newStacks;\n\t}\n\n\ttoHTML(includeTimestamp = true) {\n\t\treturn this.cacheOutput(includeTimestamp, () => (\n\t\t\t<>\n\t\t\t\t{this.toPrefix(includeTimestamp)} {this.newActionIdLink(true)} stacks: {this.oldStacks} &rarr; {this.newStacks}.\n\t\t\t</>\n\t\t));\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<AuraStacksChangeLog> | null {\n\t\tconst match = params.raw.match(/(.*) stacks: ([0-9]+) --> ([0-9]+)/);\n\t\tif (match && match[1]) {\n\t\t\treturn ActionId.fromLogString(match[1])\n\t\t\t\t.fill(params.source?.index)\n\t\t\t\t.then(aura => {\n\t\t\t\t\tparams.actionId = aura;\n\t\t\t\t\treturn new AuraStacksChangeLog(params, parseInt(match[2]), parseInt(match[3]));\n\t\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class AuraUptimeLog extends SimLog {\n\treadonly gainedAt: number;\n\treadonly fadedAt: number;\n\treadonly stacksChange: Array<AuraStacksChangeLog>;\n\n\tconstructor(params: SimLogParams, fadedAt: number, stacksChange: Array<AuraStacksChangeLog>) {\n\t\tsuper(params);\n\t\tthis.gainedAt = params.timestamp;\n\t\tthis.fadedAt = fadedAt;\n\t\tthis.stacksChange = stacksChange;\n\t}\n\n\tstatic fromLogs(logs: Array<SimLog>, entity: Entity, encounterDuration: number): Array<AuraUptimeLog> {\n\t\tconst unmatchedGainedLogs: Array<{ gained: AuraEventLog; stacks: Array<AuraStacksChangeLog> }> = [];\n\t\tconst uptimeLogs: Array<AuraUptimeLog> = [];\n\n\t\tlogs.forEach((log: SimLog) => {\n\t\t\tif (!log.source || !log.source.equals(entity)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (log.isAuraStacksChange()) {\n\t\t\t\tconst matchingGainedIdx = unmatchedGainedLogs.findIndex(gainedLog => gainedLog.gained.actionId!.equals(log.actionId!));\n\t\t\t\tif (matchingGainedIdx == -1) {\n\t\t\t\t\tconsole.warn('Unmatched aura stacks change log: ' + log.actionId!.name);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tunmatchedGainedLogs[matchingGainedIdx].stacks.push(log);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!log.isAuraEvent()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (log.isGained) {\n\t\t\t\tunmatchedGainedLogs.push({ gained: log, stacks: [] });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchingGainedIdx = unmatchedGainedLogs.findIndex(gainedLog => gainedLog.gained.actionId!.equals(log.actionId!));\n\t\t\tif (matchingGainedIdx == -1) {\n\t\t\t\tconsole.warn('Unmatched aura faded log: ' + log.actionId!.name);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst { gained: gainedLog, stacks: stacksChangeLogs } = unmatchedGainedLogs.splice(matchingGainedIdx, 1)[0];\n\n\t\t\tuptimeLogs.push(\n\t\t\t\tnew AuraUptimeLog(\n\t\t\t\t\t{\n\t\t\t\t\t\traw: log.raw,\n\t\t\t\t\t\tlogIndex: gainedLog.logIndex,\n\t\t\t\t\t\ttimestamp: gainedLog.timestamp,\n\t\t\t\t\t\tsource: log.source,\n\t\t\t\t\t\ttarget: log.target,\n\t\t\t\t\t\tactionId: gainedLog.actionId,\n\t\t\t\t\t\tthreat: gainedLog.threat,\n\t\t\t\t\t},\n\t\t\t\t\tlog.timestamp,\n\t\t\t\t\tstacksChangeLogs,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (log.isRefreshed) {\n\t\t\t\tunmatchedGainedLogs.push({ gained: log, stacks: [] });\n\t\t\t}\n\t\t});\n\n\t\t// Auras active at the end won't have a faded log, so need to add them separately.\n\t\tunmatchedGainedLogs.forEach(unmatchedLog => {\n\t\t\tconst { gained: gainedLog, stacks: stacksChangeLogs } = unmatchedLog;\n\t\t\tuptimeLogs.push(\n\t\t\t\tnew AuraUptimeLog(\n\t\t\t\t\t{\n\t\t\t\t\t\traw: gainedLog.raw,\n\t\t\t\t\t\tlogIndex: gainedLog.logIndex,\n\t\t\t\t\t\ttimestamp: gainedLog.timestamp,\n\t\t\t\t\t\tsource: gainedLog.source,\n\t\t\t\t\t\ttarget: gainedLog.target,\n\t\t\t\t\t\tactionId: gainedLog.actionId,\n\t\t\t\t\t\tthreat: gainedLog.threat,\n\t\t\t\t\t},\n\t\t\t\t\tencounterDuration,\n\t\t\t\t\tstacksChangeLogs,\n\t\t\t\t),\n\t\t\t);\n\t\t});\n\n\t\tuptimeLogs.sort((a, b) => a.gainedAt - b.gainedAt);\n\t\treturn uptimeLogs;\n\t}\n\n\t// Populates the activeAuras field for all logs using the provided auras.\n\tstatic populateActiveAuras(logs: Array<SimLog>, auraLogs: Array<AuraUptimeLog>) {\n\t\tlet curAuras: Array<AuraUptimeLog> = [];\n\t\tlet auraLogsIndex = 0;\n\n\t\tlogs.forEach(log => {\n\t\t\twhile (auraLogsIndex < auraLogs.length && auraLogs[auraLogsIndex].gainedAt <= log.timestamp) {\n\t\t\t\tcurAuras.push(auraLogs[auraLogsIndex]);\n\t\t\t\tauraLogsIndex++;\n\t\t\t}\n\t\t\tcurAuras = curAuras.filter(curAura => curAura.fadedAt > log.timestamp);\n\n\t\t\tconst activeAuras = curAuras.slice();\n\t\t\tactiveAuras.sort((a, b) => stringComparator(a.actionId!.name, b.actionId!.name));\n\t\t\tlog.activeAuras = activeAuras;\n\t\t});\n\t}\n}\n\nexport class ResourceChangedLog extends SimLog {\n\treadonly resourceType: ResourceType;\n\treadonly valueBefore: number;\n\treadonly valueAfter: number;\n\treadonly isSpend: boolean;\n\treadonly total: number;\n\n\tconstructor(params: SimLogParams, resourceType: ResourceType, valueBefore: number, valueAfter: number, isSpend: boolean, total: number) {\n\t\tsuper(params);\n\t\tthis.resourceType = resourceType;\n\t\tthis.valueBefore = valueBefore;\n\t\tthis.valueAfter = valueAfter;\n\t\tthis.isSpend = isSpend;\n\t\tthis.total = total;\n\t}\n\n\ttoHTML(includeTimestamp = true) {\n\t\treturn this.cacheOutput(includeTimestamp, () => {\n\t\t\tconst signedDiff = (this.valueAfter - this.valueBefore) * (this.isSpend ? -1 : 1);\n\t\t\tconst isHealth = this.resourceType == ResourceType.ResourceTypeHealth;\n\t\t\tconst verb = isHealth ? (this.isSpend ? 'Lost' : 'Recovered') : this.isSpend ? 'Spent' : 'Gained';\n\t\t\tconst resourceName = resourceNames.get(this.resourceType)!;\n\t\t\tconst resourceClass = `resource-${resourceName.replace(/\\s/g, '-').toLowerCase()}`;\n\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t{this.toPrefix(includeTimestamp)} {verb}{' '}\n\t\t\t\t\t<strong className={resourceClass}>\n\t\t\t\t\t\t{signedDiff.toFixed(1)} {resourceName}\n\t\t\t\t\t</strong>\n\t\t\t\t\t{` from `}\n\t\t\t\t\t{this.newActionIdLink()}. ({this.valueBefore.toFixed(1)} &rarr; {this.valueAfter.toFixed(1)})\n\t\t\t\t</>\n\t\t\t);\n\t\t});\n\t}\n\n\tresultString(): string {\n\t\tconst delta = this.valueAfter - this.valueBefore;\n\t\tif (delta < 0) {\n\t\t\treturn delta.toFixed(1);\n\t\t} else {\n\t\t\treturn '+' + delta.toFixed(1);\n\t\t}\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<ResourceChangedLog> | null {\n\t\tconst match = params.raw.match(\n\t\t\t/((Gained)|(Spent)) \\d+\\.?\\d* ((health)|(mana)|(energy)|(focus)|(rage)|(combo points)|(runic power)|(blood rune)|(frost rune)|(unholy rune)|(death rune)|(solar energy)|(lunar energy)) from (.*) \\((\\d+\\.?\\d*) --> (\\d+\\.?\\d*)\\)( of (\\d+\\.?\\d*) total)?/,\n\t\t);\n\t\tif (match) {\n\t\t\tconst resourceType = stringToResourceType(match[4]);\n\t\t\tconst total = match[22] !== undefined ? parseFloat(match[22]) : 0;\n\t\t\treturn ActionId.fromLogString(match[18])\n\t\t\t\t.fill(params.source?.index)\n\t\t\t\t.then(cause => {\n\t\t\t\t\tparams.actionId = cause;\n\t\t\t\t\treturn new ResourceChangedLog(params, resourceType, parseFloat(match[19]), parseFloat(match[20]), match[1] == 'Spent', total);\n\t\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class ResourceChangedLogGroup extends SimLog {\n\treadonly resourceType: ResourceType;\n\treadonly valueBefore: number;\n\treadonly valueAfter: number;\n\treadonly maxValue: number;\n\treadonly logs: Array<ResourceChangedLog>;\n\n\tconstructor(params: SimLogParams, resourceType: ResourceType, valueBefore: number, valueAfter: number, maxValue: number, logs: Array<ResourceChangedLog>) {\n\t\tsuper(params);\n\t\tthis.resourceType = resourceType;\n\t\tthis.valueBefore = valueBefore;\n\t\tthis.valueAfter = valueAfter;\n\t\tthis.maxValue = maxValue;\n\t\tthis.logs = logs;\n\t}\n\n\ttoHTML(includeTimestamp = true) {\n\t\treturn this.cacheOutput(includeTimestamp, () => (\n\t\t\t<>\n\t\t\t\t{this.toPrefix(includeTimestamp)} {resourceNames.get(this.resourceType)}: {this.valueBefore.toFixed(1)} &rarr; {this.valueAfter.toFixed(1)}\n\t\t\t</>\n\t\t));\n\t}\n\n\tstatic fromLogs(logs: Array<SimLog>): Record<ResourceType, Array<ResourceChangedLogGroup>> {\n\t\tconst allResourceChangedLogs = logs.filter((log): log is ResourceChangedLog => log.isResourceChanged());\n\n\t\tconst maxResource = function (logs: ResourceChangedLog[]) {\n\t\t\tlet max = 0;\n\t\t\tlogs.forEach(l => {\n\t\t\t\tif (l.total > max) {\n\t\t\t\t\tmax = l.total;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn max;\n\t\t};\n\t\tconst results: Partial<Record<ResourceType, Array<ResourceChangedLogGroup>>> = {};\n\t\tconst resourceTypes = (getEnumValues(ResourceType) as Array<ResourceType>).filter(val => val != ResourceType.ResourceTypeNone);\n\t\tresourceTypes.forEach(resourceType => {\n\t\t\tconst resourceChangedLogs = allResourceChangedLogs.filter(log => log.resourceType == resourceType);\n\n\t\t\tconst groupedLogs = SimLog.groupDuplicateTimestamps(resourceChangedLogs);\n\t\t\tresults[resourceType] = groupedLogs.map(\n\t\t\t\tlogGroup =>\n\t\t\t\t\tnew ResourceChangedLogGroup(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\traw: '',\n\t\t\t\t\t\t\tlogIndex: logGroup[0].logIndex,\n\t\t\t\t\t\t\ttimestamp: logGroup[0].timestamp,\n\t\t\t\t\t\t\tsource: logGroup[0].source,\n\t\t\t\t\t\t\ttarget: logGroup[0].target,\n\t\t\t\t\t\t\tactionId: null,\n\t\t\t\t\t\t\tthreat: 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tresourceType,\n\t\t\t\t\t\tlogGroup[0].valueBefore,\n\t\t\t\t\t\tlogGroup[logGroup.length - 1].valueAfter,\n\t\t\t\t\t\tmaxResource(logGroup),\n\t\t\t\t\t\tlogGroup,\n\t\t\t\t\t),\n\t\t\t);\n\t\t});\n\n\t\treturn results as Record<ResourceType, Array<ResourceChangedLogGroup>>;\n\t}\n}\n\nexport class MajorCooldownUsedLog extends SimLog {\n\tconstructor(params: SimLogParams) {\n\t\tsuper(params);\n\t}\n\n\ttoHTML(includeTimestamp = true) {\n\t\treturn this.cacheOutput(includeTimestamp, () => (\n\t\t\t<>\n\t\t\t\t{this.toPrefix(includeTimestamp)} Major cooldown used: {this.newActionIdLink()}.\n\t\t\t</>\n\t\t));\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<MajorCooldownUsedLog> | null {\n\t\tconst match = params.raw.match(/Major cooldown used: (.*)/);\n\t\tif (match) {\n\t\t\treturn ActionId.fromLogString(match[1])\n\t\t\t\t.fill(params.source?.index)\n\t\t\t\t.then(cooldownId => {\n\t\t\t\t\tparams.actionId = cooldownId;\n\t\t\t\t\treturn new MajorCooldownUsedLog(params);\n\t\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class CastBeganLog extends SimLog {\n\treadonly manaCost: number;\n\treadonly castTime: number;\n\treadonly effectiveTime: number;\n\n\tconstructor(params: SimLogParams, manaCost: number, castTime: number, effectiveTime: number) {\n\t\tsuper(params);\n\t\tthis.manaCost = manaCost;\n\t\tthis.castTime = castTime;\n\t\tthis.effectiveTime = effectiveTime;\n\t}\n\n\ttoHTML(includeTimestamp = true) {\n\t\treturn this.cacheOutput(includeTimestamp, () => (\n\t\t\t<>\n\t\t\t\t{this.toPrefix(includeTimestamp)} Casting {this.newActionIdLink()} (Cast time: {this.castTime.toFixed(2)}s, Cost: {this.manaCost.toFixed(1)}{' '}\n\t\t\t\tMana).\n\t\t\t</>\n\t\t));\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<CastBeganLog> | null {\n\t\tconst match = params.raw.match(/Casting (.*) \\(Cost = (\\d+\\.?\\d*), Cast Time = (\\d+\\.?\\d*)(m?s), Effective Time = (\\d+\\.?\\d*)(m?s)\\)/);\n\t\tif (match) {\n\t\t\tlet castTime = parseFloat(match[3]);\n\t\t\tif (match[4] == 'ms') {\n\t\t\t\tcastTime /= 1000;\n\t\t\t}\n\t\t\tlet effectiveTime = parseFloat(match[5]);\n\t\t\tif (match[6] == 'ms') {\n\t\t\t\teffectiveTime /= 1000;\n\t\t\t}\n\t\t\treturn ActionId.fromLogString(match[1])\n\t\t\t\t.fill(params.source?.index)\n\t\t\t\t.then(castId => {\n\t\t\t\t\tparams.actionId = castId;\n\t\t\t\t\treturn new CastBeganLog(params, parseFloat(match[2]), castTime, effectiveTime);\n\t\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class CastCompletedLog extends SimLog {\n\tconstructor(params: SimLogParams) {\n\t\tsuper(params);\n\t}\n\n\ttoHTML(includeTimestamp = true) {\n\t\treturn this.cacheOutput(includeTimestamp, () => (\n\t\t\t<>\n\t\t\t\t{this.toPrefix(includeTimestamp)} Completed cast {this.actionId!.name}.\n\t\t\t</>\n\t\t));\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<CastCompletedLog> | null {\n\t\tconst match = params.raw.match(/Completed cast (.*)/);\n\t\tif (match) {\n\t\t\treturn ActionId.fromLogString(match[1])\n\t\t\t\t.fill(params.source?.index)\n\t\t\t\t.then(castId => {\n\t\t\t\t\tparams.actionId = castId;\n\t\t\t\t\treturn new CastCompletedLog(params);\n\t\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class CastLog extends SimLog {\n\treadonly castTime: number;\n\treadonly effectiveTime: number;\n\treadonly travelTime: number;\n\n\treadonly castBeganLog: CastBeganLog;\n\treadonly castCompletedLog: CastCompletedLog | null;\n\n\t// All instances of damage dealt from the completion of this cast until the completion of the next cast.\n\treadonly damageDealtLogs: Array<DamageDealtLog>;\n\n\tconstructor(castBeganLog: CastBeganLog, castCompletedLog: CastCompletedLog | null, damageDealtLogs: Array<DamageDealtLog>) {\n\t\tsuper({\n\t\t\traw: castBeganLog.raw,\n\t\t\tlogIndex: castBeganLog.logIndex,\n\t\t\ttimestamp: castBeganLog.timestamp,\n\t\t\tsource: castBeganLog.source,\n\t\t\ttarget: castBeganLog.target,\n\t\t\tactionId: castCompletedLog?.actionId || castBeganLog.actionId, // Use completed log because of arcane blast\n\t\t\tthreat: castCompletedLog?.threat || castBeganLog.threat,\n\t\t});\n\t\tthis.castTime = castBeganLog.castTime;\n\t\tthis.effectiveTime = castBeganLog.effectiveTime;\n\t\tthis.castBeganLog = castBeganLog;\n\t\tthis.castCompletedLog = castCompletedLog;\n\t\tthis.damageDealtLogs = damageDealtLogs;\n\n\t\tif (this.castCompletedLog && this.castBeganLog) {\n\t\t\tthis.castTime = this.castCompletedLog.timestamp - this.castBeganLog.timestamp;\n\t\t\tthis.effectiveTime = this.castCompletedLog.timestamp - this.castBeganLog.timestamp;\n\t\t}\n\t\tif (\n\t\t\tthis.castCompletedLog &&\n\t\t\tthis.damageDealtLogs.length == 1 &&\n\t\t\tthis.castCompletedLog.timestamp < this.damageDealtLogs[0].timestamp &&\n\t\t\t!this.damageDealtLogs[0].tick\n\t\t) {\n\t\t\tthis.travelTime = this.damageDealtLogs[0].timestamp - this.castCompletedLog.timestamp;\n\t\t} else {\n\t\t\tthis.travelTime = 0;\n\t\t}\n\t}\n\n\ttoHTML(includeTimestamp = true) {\n\t\treturn this.cacheOutput(includeTimestamp, () => (\n\t\t\t<>\n\t\t\t\t{this.toPrefix(includeTimestamp)} Casting {this.actionId!.name} (Cast time = {this.castTime.toFixed(2)}s).\n\t\t\t</>\n\t\t));\n\t}\n\n\ttotalDamage(): number {\n\t\treturn sum(this.damageDealtLogs.map(ddl => ddl.amount));\n\t}\n\n\tstatic fromLogs(logs: Array<SimLog>): Array<CastLog> {\n\t\tconst castBeganLogs = logs.filter((log): log is CastBeganLog => log.isCastBegan());\n\t\tconst castCompletedLogs = logs.filter((log): log is CastCompletedLog => log.isCastCompleted());\n\t\tconst damageDealtLogs = logs.filter((log): log is DamageDealtLog => log.isDamageDealt());\n\n\t\tconst toBucketKey = (actionId: ActionId) => {\n\t\t\tif (actionId.spellId == 30451) {\n\t\t\t\t// Arcane Blast is unique because it can finish its cast as a different\n\t\t\t\t// spell than it started (if stacks drop).\n\t\t\t\treturn actionId.toStringIgnoringTag();\n\t\t\t} else {\n\t\t\t\treturn actionId.toString();\n\t\t\t}\n\t\t};\n\t\tconst castBeganLogsByAbility = bucket(castBeganLogs, log => toBucketKey(log.actionId!));\n\t\tconst castCompletedLogsByAbility = bucket(castCompletedLogs, log => toBucketKey(log.actionId!));\n\t\tconst damageDealtLogsByAbility = bucket(damageDealtLogs, log => toBucketKey(log.actionId!));\n\n\t\tconst castLogs: Array<CastLog> = [];\n\t\tObject.keys(castBeganLogsByAbility).forEach(bucketKey => {\n\t\t\tconst abilityCastsBegan = castBeganLogsByAbility[bucketKey]!;\n\t\t\tconst abilityCastsCompleted = castCompletedLogsByAbility[bucketKey];\n\t\t\tconst abilityDamageDealt = damageDealtLogsByAbility[bucketKey];\n\n\t\t\tlet ddIdx = 0;\n\t\t\tfor (let cbIdx = 0; cbIdx < abilityCastsBegan.length; cbIdx++) {\n\t\t\t\tconst cbLog = abilityCastsBegan[cbIdx];\n\n\t\t\t\t// Assume cast completed log is the same index because they always come in pairs.\n\t\t\t\t// Only exception is final pair, where there might be a cast began without a cast completed.\n\t\t\t\tlet ccLog: CastCompletedLog | null = null;\n\t\t\t\tlet nextCcLog: CastCompletedLog | null = null;\n\t\t\t\tif (abilityCastsCompleted && cbIdx < abilityCastsCompleted.length) {\n\t\t\t\t\tccLog = abilityCastsCompleted[cbIdx];\n\t\t\t\t\tif (cbIdx + 1 < abilityCastsCompleted.length) {\n\t\t\t\t\t\tnextCcLog = abilityCastsCompleted[cbIdx + 1];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Find all damage dealt logs between the cur and next cast completed logs.\n\t\t\t\tconst ddLogs = [];\n\t\t\t\twhile (abilityDamageDealt && ddIdx < abilityDamageDealt.length && (!nextCcLog || abilityDamageDealt[ddIdx].timestamp < nextCcLog.timestamp)) {\n\t\t\t\t\tddLogs.push(abilityDamageDealt[ddIdx]);\n\t\t\t\t\tddIdx++;\n\t\t\t\t}\n\t\t\t\tcastLogs.push(new CastLog(cbLog, ccLog, ddLogs));\n\t\t\t}\n\t\t});\n\n\t\tcastLogs.sort((a, b) => a.timestamp - b.timestamp);\n\t\treturn castLogs;\n\t}\n}\n\nexport class StatChangeLog extends SimLog {\n\treadonly isGain: boolean;\n\treadonly stats: string;\n\n\tconstructor(params: SimLogParams, isGain: boolean, stats: string) {\n\t\tsuper(params);\n\t\tthis.isGain = isGain;\n\t\tthis.stats = stats;\n\t}\n\n\ttoHTML(includeTimestamp = true) {\n\t\treturn this.cacheOutput(includeTimestamp, () => {\n\t\t\tif (this.isGain) {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{this.toPrefix(includeTimestamp)} Gained {this.stats} from {this.newActionIdLink()}.\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{this.toPrefix(includeTimestamp)} Lost {this.stats} from fading {this.newActionIdLink()}.\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<StatChangeLog> | null {\n\t\tconst match = params.raw.match(/((Gained)|(Lost)) ({.*}) from (fading )?(.*)/);\n\t\tif (match) {\n\t\t\treturn ActionId.fromLogString(match[6])\n\t\t\t\t.fill(params.source?.index)\n\t\t\t\t.then(effectId => {\n\t\t\t\t\tparams.actionId = effectId;\n\t\t\t\t\tconst sign = match[1] == 'Lost' ? -1 : 1;\n\t\t\t\t\treturn new StatChangeLog(params, sign == 1, match[4]);\n\t\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n","import { PlayerSpec } from '../player_spec.js';\nimport { PlayerSpecs } from '../player_specs';\nimport {\n\tActionMetrics as ActionMetricsProto,\n\tAuraMetrics as AuraMetricsProto,\n\tDistributionMetrics as DistributionMetricsProto,\n\tEncounterMetrics as EncounterMetricsProto,\n\tParty as PartyProto,\n\tPartyMetrics as PartyMetricsProto,\n\tPlayer as PlayerProto,\n\tRaid as RaidProto,\n\tRaidMetrics as RaidMetricsProto,\n\tRaidSimRequest,\n\tRaidSimResult,\n\tResourceMetrics as ResourceMetricsProto,\n\tResourceType,\n\tTargetedActionMetrics as TargetedActionMetricsProto,\n\tUnitMetrics as UnitMetricsProto,\n} from '../proto/api.js';\nimport { Class, Encounter as EncounterProto, Target as TargetProto } from '../proto/common.js';\nimport { SimRun } from '../proto/ui.js';\nimport { ActionId, defaultTargetIcon } from '../proto_utils/action_id.js';\nimport { getPlayerSpecFromPlayer } from '../proto_utils/utils.js';\nimport { bucket, sum } from '../utils.js';\nimport {\n\tAuraUptimeLog,\n\tCastLog,\n\tDamageDealtLog,\n\tDpsLog,\n\tEntity,\n\tMajorCooldownUsedLog,\n\tResourceChangedLogGroup,\n\tSimLog,\n\tThreatLogGroup,\n} from './logs_parser.js';\n\nexport interface SimResultFilter {\n\t// Raid index of the player to display, or null for all players.\n\tplayer?: number | null;\n\n\t// Target index of the target to display, or null for all targets.\n\ttarget?: number | null;\n}\n\nclass SimResultData {\n\treadonly request: RaidSimRequest;\n\treadonly result: RaidSimResult;\n\n\tconstructor(request: RaidSimRequest, result: RaidSimResult) {\n\t\tthis.request = request;\n\t\tthis.result = result;\n\t}\n\n\tget iterations() {\n\t\treturn this.request.simOptions?.iterations || 1;\n\t}\n\n\tget duration() {\n\t\treturn this.result.avgIterationDuration || 1;\n\t}\n\n\tget firstIterationDuration() {\n\t\treturn this.result.firstIterationDuration || 1;\n\t}\n}\n\n// Holds all the data from a simulation call, and provides helper functions\n// for parsing it.\nexport class SimResult {\n\treadonly request: RaidSimRequest;\n\treadonly result: RaidSimResult;\n\n\treadonly raidMetrics: RaidMetrics;\n\treadonly encounterMetrics: EncounterMetrics;\n\treadonly logs: Array<SimLog>;\n\n\tprivate players: Array<UnitMetrics>;\n\tprivate units: Array<UnitMetrics>;\n\n\tprivate constructor(request: RaidSimRequest, result: RaidSimResult, raidMetrics: RaidMetrics, encounterMetrics: EncounterMetrics, logs: Array<SimLog>) {\n\t\tthis.request = request;\n\t\tthis.result = result;\n\t\tthis.raidMetrics = raidMetrics;\n\t\tthis.encounterMetrics = encounterMetrics;\n\t\tthis.logs = logs;\n\n\t\tthis.players = raidMetrics.parties.map(party => party.players).flat();\n\t\tthis.units = this.players.concat(encounterMetrics.targets);\n\t}\n\n\tget iterations() {\n\t\treturn this.request.simOptions?.iterations || 1;\n\t}\n\n\tget duration() {\n\t\treturn this.result.avgIterationDuration || 1;\n\t}\n\n\tget firstIterationDuration() {\n\t\treturn this.result.firstIterationDuration || 1;\n\t}\n\n\tgetPlayers(filter?: SimResultFilter): Array<UnitMetrics> {\n\t\tif (filter?.player || filter?.player === 0) {\n\t\t\tconst player = this.getUnitWithIndex(filter.player);\n\t\t\treturn player ? [player] : [];\n\t\t} else {\n\t\t\treturn this.raidMetrics.parties.map(party => party.players).flat();\n\t\t}\n\t}\n\n\tgetRaidIndexedPlayers(filter?: SimResultFilter): Array<UnitMetrics> {\n\t\tif (filter?.player || filter?.player === 0) {\n\t\t\tconst player = this.getPlayerWithRaidIndex(filter.player);\n\t\t\treturn player ? [player] : [];\n\t\t} else {\n\t\t\treturn this.raidMetrics.parties.map(party => party.players).flat();\n\t\t}\n\t}\n\n\t// Returns the first player, regardless of which party / raid slot its in.\n\tgetFirstPlayer(): UnitMetrics | null {\n\t\treturn this.getPlayers()[0] || null;\n\t}\n\n\tgetPlayerWithIndex(unitIndex: number): UnitMetrics | null {\n\t\treturn this.players.find(player => player.unitIndex == unitIndex) || null;\n\t}\n\tgetPlayerWithRaidIndex(raidIndex: number): UnitMetrics | null {\n\t\treturn this.players.find(player => player.index == raidIndex) || null;\n\t}\n\n\tgetTargets(filter?: SimResultFilter): Array<UnitMetrics> {\n\t\tif (filter?.target || filter?.target === 0) {\n\t\t\tconst target = this.getUnitWithIndex(filter.target);\n\t\t\treturn target ? [target] : [];\n\t\t} else {\n\t\t\treturn this.encounterMetrics.targets.slice();\n\t\t}\n\t}\n\n\tgetTargetWithIndex(unitIndex: number): UnitMetrics | null {\n\t\treturn this.getTargets().find(target => target.unitIndex == unitIndex) || null;\n\t}\n\tgetTargetWithEncounterIndex(index: number): UnitMetrics | null {\n\t\treturn this.getTargets().find(target => target.index == index) || null;\n\t}\n\tgetUnitWithIndex(unitIndex: number): UnitMetrics | null {\n\t\treturn this.units.find(unit => unit.unitIndex == unitIndex) || null;\n\t}\n\n\tgetDamageMetrics(filter: SimResultFilter): DistributionMetricsProto {\n\t\tif (filter.player || filter.player === 0) {\n\t\t\treturn this.getPlayerWithIndex(filter.player)?.dps || DistributionMetricsProto.create();\n\t\t}\n\n\t\treturn this.raidMetrics.dps;\n\t}\n\n\tgetActionMetrics(filter?: SimResultFilter): Array<ActionMetrics> {\n\t\treturn ActionMetrics.joinById(\n\t\t\tthis.getPlayers(filter)\n\t\t\t\t.map(player => player.getPlayerAndPetActions().map(action => action.forTarget(filter)))\n\t\t\t\t.flat(),\n\t\t);\n\t}\n\n\tgetRaidIndexedActionMetrics(filter?: SimResultFilter): Array<ActionMetrics> {\n\t\treturn ActionMetrics.joinById(\n\t\t\tthis.getRaidIndexedPlayers(filter)\n\t\t\t\t.map(player => player.getPlayerAndPetActions().map(action => action.forTarget(filter)))\n\t\t\t\t.flat(),\n\t\t);\n\t}\n\n\tgetSpellMetrics(filter?: SimResultFilter): Array<ActionMetrics> {\n\t\treturn this.getActionMetrics(filter).filter(e => e.hitAttempts != 0 && !e.isMeleeAction);\n\t}\n\n\tgetMeleeMetrics(filter?: SimResultFilter): Array<ActionMetrics> {\n\t\treturn this.getActionMetrics(filter).filter(e => e.hitAttempts != 0 && e.isMeleeAction);\n\t}\n\n\tgetResourceMetrics(resourceType: ResourceType, filter?: SimResultFilter): Array<ResourceMetrics> {\n\t\treturn ResourceMetrics.joinById(\n\t\t\tthis.getPlayers(filter)\n\t\t\t\t.map(player => player.resources.filter(resource => resource.type == resourceType))\n\t\t\t\t.flat(),\n\t\t);\n\t}\n\n\tgetBuffMetrics(filter?: SimResultFilter): Array<AuraMetrics> {\n\t\treturn AuraMetrics.joinById(\n\t\t\tthis.getPlayers(filter)\n\t\t\t\t.map(player => player.auras)\n\t\t\t\t.flat(),\n\t\t);\n\t}\n\n\tgetDebuffMetrics(filter?: SimResultFilter): Array<AuraMetrics> {\n\t\treturn AuraMetrics.joinById(\n\t\t\tthis.getTargets(filter)\n\t\t\t\t.map(target => target.auras)\n\t\t\t\t.flat(),\n\t\t).filter(aura => aura.uptimePercent != 0);\n\t}\n\n\ttoProto(): SimRun {\n\t\treturn SimRun.create({\n\t\t\trequest: this.request,\n\t\t\tresult: this.result,\n\t\t});\n\t}\n\n\tstatic async fromProto(proto: SimRun): Promise<SimResult> {\n\t\treturn SimResult.makeNew(proto.request || RaidSimRequest.create(), proto.result || RaidSimResult.create());\n\t}\n\n\tstatic async makeNew(request: RaidSimRequest, result: RaidSimResult): Promise<SimResult> {\n\t\tconst resultData = new SimResultData(request, result);\n\t\tconst logs = await SimLog.parseAll(result);\n\n\t\tconst raidPromise = RaidMetrics.makeNew(resultData, request.raid!, result.raidMetrics!, logs);\n\t\tconst encounterPromise = EncounterMetrics.makeNew(resultData, request.encounter!, result.encounterMetrics!, logs);\n\n\t\tconst raidMetrics = await raidPromise;\n\t\tconst encounterMetrics = await encounterPromise;\n\n\t\treturn new SimResult(request, result, raidMetrics, encounterMetrics, logs);\n\t}\n}\n\nexport class RaidMetrics {\n\tprivate readonly raid: RaidProto;\n\tprivate readonly metrics: RaidMetricsProto;\n\n\treadonly dps: DistributionMetricsProto;\n\treadonly hps: DistributionMetricsProto;\n\treadonly parties: Array<PartyMetrics>;\n\n\tprivate constructor(raid: RaidProto, metrics: RaidMetricsProto, parties: Array<PartyMetrics>) {\n\t\tthis.raid = raid;\n\t\tthis.metrics = metrics;\n\t\tthis.dps = this.metrics.dps!;\n\t\tthis.hps = this.metrics.hps!;\n\t\tthis.parties = parties;\n\t}\n\n\tstatic async makeNew(resultData: SimResultData, raid: RaidProto, metrics: RaidMetricsProto, logs: Array<SimLog>): Promise<RaidMetrics> {\n\t\tconst numParties = Math.min(raid.parties.length, metrics.parties.length);\n\n\t\tconst parties = await Promise.all(\n\t\t\t[...new Array(numParties).keys()].map(i => PartyMetrics.makeNew(resultData, raid.parties[i], metrics.parties[i], i, logs)),\n\t\t);\n\n\t\treturn new RaidMetrics(raid, metrics, parties);\n\t}\n}\n\nexport class PartyMetrics {\n\tprivate readonly party: PartyProto;\n\tprivate readonly metrics: PartyMetricsProto;\n\n\treadonly partyIndex: number;\n\treadonly dps: DistributionMetricsProto;\n\treadonly hps: DistributionMetricsProto;\n\treadonly players: Array<UnitMetrics>;\n\n\tprivate constructor(party: PartyProto, metrics: PartyMetricsProto, partyIndex: number, players: Array<UnitMetrics>) {\n\t\tthis.party = party;\n\t\tthis.metrics = metrics;\n\t\tthis.partyIndex = partyIndex;\n\t\tthis.dps = this.metrics.dps!;\n\t\tthis.hps = this.metrics.hps!;\n\t\tthis.players = players;\n\t}\n\n\tstatic async makeNew(\n\t\tresultData: SimResultData,\n\t\tparty: PartyProto,\n\t\tmetrics: PartyMetricsProto,\n\t\tpartyIndex: number,\n\t\tlogs: Array<SimLog>,\n\t): Promise<PartyMetrics> {\n\t\tconst numPlayers = Math.min(party.players.length, metrics.players.length);\n\t\tconst players = await Promise.all(\n\t\t\t[...new Array(numPlayers).keys()]\n\t\t\t\t.filter(i => party.players[i].class != Class.ClassUnknown)\n\t\t\t\t.map(i => UnitMetrics.makeNewPlayer(resultData, party.players[i], metrics.players[i], partyIndex * 5 + i, false, logs)),\n\t\t);\n\n\t\treturn new PartyMetrics(party, metrics, partyIndex, players);\n\t}\n}\n\nexport class UnitMetrics {\n\t// If this Unit is a pet, player is the owner. If it's a target, player is null.\n\tprivate readonly player: PlayerProto | null;\n\tprivate readonly target: TargetProto | null;\n\tprivate readonly metrics: UnitMetricsProto;\n\n\treadonly index: number;\n\treadonly unitIndex: number;\n\treadonly name: string;\n\treadonly spec: PlayerSpec<any> | null;\n\treadonly petActionId: ActionId | null;\n\treadonly iconUrl: string;\n\treadonly classColor: string;\n\treadonly dps: DistributionMetricsProto;\n\treadonly dpasp: DistributionMetricsProto;\n\treadonly hps: DistributionMetricsProto;\n\treadonly tps: DistributionMetricsProto;\n\treadonly dtps: DistributionMetricsProto;\n\treadonly tmi: DistributionMetricsProto;\n\treadonly tto: DistributionMetricsProto;\n\treadonly actions: Array<ActionMetrics>;\n\treadonly auras: Array<AuraMetrics>;\n\treadonly resources: Array<ResourceMetrics>;\n\treadonly pets: Array<UnitMetrics>;\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\n\treadonly logs: Array<SimLog>;\n\treadonly damageDealtLogs: Array<DamageDealtLog>;\n\treadonly groupedResourceLogs: Record<ResourceType, Array<ResourceChangedLogGroup>>;\n\treadonly dpsLogs: Array<DpsLog>;\n\treadonly auraUptimeLogs: Array<AuraUptimeLog>;\n\treadonly majorCooldownLogs: Array<MajorCooldownUsedLog>;\n\treadonly castLogs: Array<CastLog>;\n\treadonly threatLogs: Array<ThreatLogGroup>;\n\n\t// Aura uptime logs, filtered to include only auras that correspond to a\n\t// major cooldown.\n\treadonly majorCooldownAuraUptimeLogs: Array<AuraUptimeLog>;\n\n\tprivate constructor(\n\t\tplayer: PlayerProto | null,\n\t\ttarget: TargetProto | null,\n\t\tpetActionId: ActionId | null,\n\t\tmetrics: UnitMetricsProto,\n\t\tindex: number,\n\t\tactions: Array<ActionMetrics>,\n\t\tauras: Array<AuraMetrics>,\n\t\tresources: Array<ResourceMetrics>,\n\t\tpets: Array<UnitMetrics>,\n\t\tlogs: Array<SimLog>,\n\t\tresultData: SimResultData,\n\t) {\n\t\tthis.player = player;\n\t\tthis.target = target;\n\t\tthis.metrics = metrics;\n\n\t\tthis.index = index;\n\t\tthis.unitIndex = metrics.unitIndex;\n\t\tthis.name = metrics.name;\n\t\tthis.spec = this.player ? getPlayerSpecFromPlayer(this.player) : null;\n\t\tthis.petActionId = petActionId;\n\t\tthis.iconUrl = this.isPlayer ? this.spec?.getIcon('medium') ?? '' : this.isTarget ? defaultTargetIcon : '';\n\t\tthis.classColor = this.isTarget ? '' : PlayerSpecs.getPlayerClass(this.spec as PlayerSpec<any>).friendlyName.toLowerCase().replace(/\\s/g, '-') ?? '';\n\t\tthis.dps = this.metrics.dps!;\n\t\tthis.dpasp = this.metrics.dpasp!;\n\t\tthis.hps = this.metrics.hps!;\n\t\tthis.tps = this.metrics.threat!;\n\t\tthis.dtps = this.metrics.dtps!;\n\t\tthis.tmi = this.metrics.tmi!;\n\t\tthis.tto = this.metrics.tto!;\n\t\tthis.actions = actions;\n\t\tthis.auras = auras;\n\t\tthis.resources = resources;\n\t\tthis.pets = pets;\n\t\tthis.logs = logs;\n\t\tthis.iterations = resultData.iterations;\n\t\tthis.duration = resultData.duration;\n\n\t\tthis.damageDealtLogs = this.logs.filter((log): log is DamageDealtLog => log.isDamageDealt());\n\t\tthis.dpsLogs = DpsLog.fromLogs(this.damageDealtLogs);\n\t\tthis.castLogs = CastLog.fromLogs(this.logs);\n\t\tthis.threatLogs = ThreatLogGroup.fromLogs(this.logs);\n\n\t\tthis.auraUptimeLogs = AuraUptimeLog.fromLogs(\n\t\t\tthis.logs,\n\t\t\tnew Entity(this.name, '', this.index, this.target != null, this.isPet),\n\t\t\tresultData.firstIterationDuration,\n\t\t);\n\t\tthis.majorCooldownLogs = this.logs.filter((log): log is MajorCooldownUsedLog => log.isMajorCooldownUsed());\n\n\t\tthis.groupedResourceLogs = ResourceChangedLogGroup.fromLogs(this.logs);\n\t\tAuraUptimeLog.populateActiveAuras(this.dpsLogs, this.auraUptimeLogs);\n\t\tAuraUptimeLog.populateActiveAuras(this.groupedResourceLogs[ResourceType.ResourceTypeMana], this.auraUptimeLogs);\n\n\t\tthis.majorCooldownAuraUptimeLogs = this.auraUptimeLogs.filter(auraLog =>\n\t\t\tthis.majorCooldownLogs.find(mcdLog => mcdLog.actionId!.equals(auraLog.actionId!)),\n\t\t);\n\t}\n\n\tget label() {\n\t\tif (this.target == null) {\n\t\t\treturn `${this.name} (#${this.index + 1})`;\n\t\t} else {\n\t\t\treturn this.name;\n\t\t}\n\t}\n\n\tget isPlayer() {\n\t\treturn this.player != null;\n\t}\n\n\tget isTarget() {\n\t\treturn this.target != null;\n\t}\n\n\tget isPet() {\n\t\treturn this.petActionId != null;\n\t}\n\n\t// Returns the unit index of the target of this unit, as selected by the filter.\n\tgetTargetIndex(filter?: SimResultFilter): number | null {\n\t\tif (!filter) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst index = this.isPlayer ? filter.target : filter.player;\n\t\tif (index == null || index == -1) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn index;\n\t}\n\n\tget inFrontOfTarget(): boolean {\n\t\tif (this.isTarget) {\n\t\t\treturn true;\n\t\t} else if (this.isPlayer) {\n\t\t\treturn this.player!.inFrontOfTarget;\n\t\t} else {\n\t\t\treturn false; // TODO pets\n\t\t}\n\t}\n\n\tget chanceOfDeath(): number {\n\t\treturn this.metrics.chanceOfDeath * 100;\n\t}\n\n\tget maxThreat() {\n\t\treturn this.threatLogs[this.threatLogs.length - 1]?.threatAfter || 0;\n\t}\n\n\tget secondsOomAvg() {\n\t\treturn this.metrics.secondsOomAvg;\n\t}\n\n\tget totalDamage() {\n\t\treturn this.dps.avg * this.duration;\n\t}\n\n\tget totalDamageTaken() {\n\t\treturn this.dtps.avg * this.duration;\n\t}\n\n\tgetPlayerAndPetActions(): Array<ActionMetrics> {\n\t\treturn this.actions.concat(this.pets.map(pet => pet.getPlayerAndPetActions()).flat());\n\t}\n\n\tprivate getActionsForDisplay(): Array<ActionMetrics> {\n\t\treturn this.actions.filter(e => e.hitAttempts != 0 || e.tps != 0 || e.dps != 0);\n\t}\n\n\tgetMeleeActions(): Array<ActionMetrics> {\n\t\treturn this.getActionsForDisplay().filter(e => e.isMeleeAction);\n\t}\n\n\tgetSpellActions(): Array<ActionMetrics> {\n\t\treturn this.getActionsForDisplay().filter(e => !e.isMeleeAction);\n\t}\n\n\tgetHealingActions(): Array<ActionMetrics> {\n\t\treturn this.getActionsForDisplay();\n\t}\n\n\tgetResourceMetrics(resourceType: ResourceType): Array<ResourceMetrics> {\n\t\treturn this.resources.filter(resource => resource.type == resourceType);\n\t}\n\n\tstatic async makeNewPlayer(\n\t\tresultData: SimResultData,\n\t\tplayer: PlayerProto,\n\t\tmetrics: UnitMetricsProto,\n\t\traidIndex: number,\n\t\tisPet: boolean,\n\t\tlogs: Array<SimLog>,\n\t): Promise<UnitMetrics> {\n\t\tconst playerLogs = logs.filter(\n\t\t\tlog => log.source && !log.source.isTarget && isPet == log.source.isPet && (isPet ? log.source.name == metrics.name : log.source.index == raidIndex),\n\t\t);\n\t\tconst petLogs = logs.filter(log => log.source && !log.source.isTarget && log.source.isPet && log.source.index == raidIndex);\n\n\t\tconst actionsPromise = Promise.all(metrics.actions.map(actionMetrics => ActionMetrics.makeNew(null, resultData, actionMetrics, raidIndex)));\n\t\tconst aurasPromise = Promise.all(metrics.auras.map(auraMetrics => AuraMetrics.makeNew(null, resultData, auraMetrics, raidIndex)));\n\t\tconst resourcesPromise = Promise.all(metrics.resources.map(resourceMetrics => ResourceMetrics.makeNew(null, resultData, resourceMetrics, raidIndex)));\n\t\tconst petsPromise = Promise.all(metrics.pets.map(petMetrics => UnitMetrics.makeNewPlayer(resultData, player, petMetrics, raidIndex, true, petLogs)));\n\n\t\tlet petIdPromise: Promise<ActionId | null> = Promise.resolve(null);\n\t\tif (isPet) {\n\t\t\tpetIdPromise = ActionId.fromPetName(metrics.name).fill(raidIndex);\n\t\t}\n\n\t\tconst actions = await actionsPromise;\n\t\tconst auras = await aurasPromise;\n\t\tconst resources = await resourcesPromise;\n\t\tconst pets = await petsPromise;\n\t\tconst petActionId = await petIdPromise;\n\n\t\tconst playerMetrics = new UnitMetrics(player, null, petActionId, metrics, raidIndex, actions, auras, resources, pets, playerLogs, resultData);\n\t\tactions.forEach(action => {\n\t\t\taction.unit = playerMetrics;\n\t\t\taction.resources = resources.filter(resourceMetrics => resourceMetrics.actionId.equals(action.actionId));\n\t\t});\n\t\tauras.forEach(aura => (aura.unit = playerMetrics));\n\t\tresources.forEach(resource => (resource.unit = playerMetrics));\n\t\treturn playerMetrics;\n\t}\n\n\tstatic async makeNewTarget(\n\t\tresultData: SimResultData,\n\t\ttarget: TargetProto,\n\t\tmetrics: UnitMetricsProto,\n\t\tindex: number,\n\t\tlogs: Array<SimLog>,\n\t): Promise<UnitMetrics> {\n\t\tconst targetLogs = logs.filter(log => log.source && log.source.isTarget && log.source.index == index);\n\n\t\tconst actionsPromise = Promise.all(metrics.actions.map(actionMetrics => ActionMetrics.makeNew(null, resultData, actionMetrics, index)));\n\t\tconst aurasPromise = Promise.all(metrics.auras.map(auraMetrics => AuraMetrics.makeNew(null, resultData, auraMetrics)));\n\n\t\tconst actions = await actionsPromise;\n\t\tconst auras = await aurasPromise;\n\n\t\tconst targetMetrics = new UnitMetrics(null, target, null, metrics, index, actions, auras, [], [], targetLogs, resultData);\n\t\tactions.forEach(action => (action.unit = targetMetrics));\n\t\tauras.forEach(aura => (aura.unit = targetMetrics));\n\t\treturn targetMetrics;\n\t}\n}\n\nexport class EncounterMetrics {\n\tprivate readonly encounter: EncounterProto;\n\tprivate readonly metrics: EncounterMetricsProto;\n\n\treadonly targets: Array<UnitMetrics>;\n\n\tprivate constructor(encounter: EncounterProto, metrics: EncounterMetricsProto, targets: Array<UnitMetrics>) {\n\t\tthis.encounter = encounter;\n\t\tthis.metrics = metrics;\n\t\tthis.targets = targets;\n\t}\n\n\tstatic async makeNew(resultData: SimResultData, encounter: EncounterProto, metrics: EncounterMetricsProto, logs: Array<SimLog>): Promise<EncounterMetrics> {\n\t\tconst numTargets = Math.min(encounter.targets.length, metrics.targets.length);\n\t\tconst targets = await Promise.all(\n\t\t\t[...new Array(numTargets).keys()].map(i => UnitMetrics.makeNewTarget(resultData, encounter.targets[i], metrics.targets[i], i, logs)),\n\t\t);\n\n\t\treturn new EncounterMetrics(encounter, metrics, targets);\n\t}\n\n\tget durationSeconds() {\n\t\treturn this.encounter.duration;\n\t}\n}\n\nexport class AuraMetrics {\n\tunit: UnitMetrics | null;\n\treadonly actionId: ActionId;\n\treadonly name: string;\n\treadonly iconUrl: string;\n\tprivate readonly resultData: SimResultData;\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\tprivate readonly data: AuraMetricsProto;\n\n\tprivate constructor(unit: UnitMetrics | null, actionId: ActionId, data: AuraMetricsProto, resultData: SimResultData) {\n\t\tthis.unit = unit;\n\t\tthis.actionId = actionId;\n\t\tthis.name = actionId.name;\n\t\tthis.iconUrl = actionId.iconUrl;\n\t\tthis.data = data;\n\t\tthis.resultData = resultData;\n\t\tthis.iterations = resultData.iterations;\n\t\tthis.duration = resultData.duration;\n\t}\n\n\tget uptimePercent() {\n\t\treturn (this.data.uptimeSecondsAvg / this.duration) * 100;\n\t}\n\n\tget averageProcs() {\n\t\treturn this.data.procsAvg;\n\t}\n\n\tget ppm() {\n\t\treturn this.data.procsAvg / (this.duration / 60);\n\t}\n\n\tstatic async makeNew(unit: UnitMetrics | null, resultData: SimResultData, auraMetrics: AuraMetricsProto, playerIndex?: number): Promise<AuraMetrics> {\n\t\tconst actionId = await ActionId.fromProto(auraMetrics.id!).fill(playerIndex);\n\t\treturn new AuraMetrics(unit, actionId, auraMetrics, resultData);\n\t}\n\n\t// Merges an array of metrics into a single metrics.\n\tstatic merge(auras: Array<AuraMetrics>, removeTag?: boolean, actionIdOverride?: ActionId): AuraMetrics {\n\t\tconst firstAura = auras[0];\n\t\tconst unit = auras.every(aura => aura.unit == firstAura.unit) ? firstAura.unit : null;\n\t\tlet actionId = actionIdOverride || firstAura.actionId;\n\t\tif (removeTag) {\n\t\t\tactionId = actionId.withoutTag();\n\t\t}\n\t\treturn new AuraMetrics(\n\t\t\tunit,\n\t\t\tactionId,\n\t\t\tAuraMetricsProto.create({\n\t\t\t\tuptimeSecondsAvg: Math.max(...auras.map(a => a.data.uptimeSecondsAvg)),\n\t\t\t}),\n\t\t\tfirstAura.resultData,\n\t\t);\n\t}\n\n\t// Groups similar metrics, i.e. metrics with the same item/spell/other ID but\n\t// different tags, and returns them as separate arrays.\n\tstatic groupById(auras: Array<AuraMetrics>, useTag?: boolean): Array<Array<AuraMetrics>> {\n\t\tif (useTag) {\n\t\t\treturn Object.values(bucket(auras, aura => aura.actionId.toString()));\n\t\t} else {\n\t\t\treturn Object.values(bucket(auras, aura => aura.actionId.toStringIgnoringTag()));\n\t\t}\n\t}\n\n\t// Merges aura metrics that have the same name/ID, adding their stats together.\n\tstatic joinById(auras: Array<AuraMetrics>, useTag?: boolean): Array<AuraMetrics> {\n\t\treturn AuraMetrics.groupById(auras, useTag).map(aurasToJoin => AuraMetrics.merge(aurasToJoin));\n\t}\n}\n\nexport class ResourceMetrics {\n\tunit: UnitMetrics | null;\n\treadonly actionId: ActionId;\n\treadonly name: string;\n\treadonly iconUrl: string;\n\treadonly type: ResourceType;\n\tprivate readonly resultData: SimResultData;\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\tprivate readonly data: ResourceMetricsProto;\n\n\tprivate constructor(unit: UnitMetrics | null, actionId: ActionId, data: ResourceMetricsProto, resultData: SimResultData) {\n\t\tthis.unit = unit;\n\t\tthis.actionId = actionId;\n\t\tthis.name = actionId.name;\n\t\tthis.iconUrl = actionId.iconUrl;\n\t\tthis.type = data.type;\n\t\tthis.resultData = resultData;\n\t\tthis.iterations = resultData.iterations;\n\t\tthis.duration = resultData.duration;\n\t\tthis.data = data;\n\t}\n\n\tget events() {\n\t\treturn this.data.events / this.iterations;\n\t}\n\n\tget gain() {\n\t\treturn this.data.gain / this.iterations;\n\t}\n\n\tget gainPerSecond() {\n\t\treturn this.data.gain / this.iterations / this.duration;\n\t}\n\n\tget avgGain() {\n\t\treturn this.data.gain / this.data.events;\n\t}\n\n\tget wastedGain() {\n\t\treturn (this.data.gain - this.data.actualGain) / this.iterations;\n\t}\n\n\tstatic async makeNew(\n\t\tunit: UnitMetrics | null,\n\t\tresultData: SimResultData,\n\t\tresourceMetrics: ResourceMetricsProto,\n\t\tplayerIndex?: number,\n\t): Promise<ResourceMetrics> {\n\t\tconst actionId = await ActionId.fromProto(resourceMetrics.id!).fill(playerIndex);\n\t\treturn new ResourceMetrics(unit, actionId, resourceMetrics, resultData);\n\t}\n\n\t// Merges an array of metrics into a single metrics.\n\tstatic merge(resources: Array<ResourceMetrics>, removeTag?: boolean, actionIdOverride?: ActionId): ResourceMetrics {\n\t\tconst firstResource = resources[0];\n\t\tconst unit = resources.every(resource => resource.unit == firstResource.unit) ? firstResource.unit : null;\n\t\tlet actionId = actionIdOverride || firstResource.actionId;\n\t\tif (removeTag) {\n\t\t\tactionId = actionId.withoutTag();\n\t\t}\n\t\treturn new ResourceMetrics(\n\t\t\tunit,\n\t\t\tactionId,\n\t\t\tResourceMetricsProto.create({\n\t\t\t\tevents: sum(resources.map(a => a.data.events)),\n\t\t\t\tgain: sum(resources.map(a => a.data.gain)),\n\t\t\t\tactualGain: sum(resources.map(a => a.data.actualGain)),\n\t\t\t}),\n\t\t\tfirstResource.resultData,\n\t\t);\n\t}\n\n\t// Groups similar metrics, i.e. metrics with the same item/spell/other ID but\n\t// different tags, and returns them as separate arrays.\n\tstatic groupById(resources: Array<ResourceMetrics>, useTag?: boolean): Array<Array<ResourceMetrics>> {\n\t\tif (useTag) {\n\t\t\treturn Object.values(bucket(resources, resource => resource.actionId.toString()));\n\t\t} else {\n\t\t\treturn Object.values(bucket(resources, resource => resource.actionId.toStringIgnoringTag()));\n\t\t}\n\t}\n\n\t// Merges resource metrics that have the same name/ID, adding their stats together.\n\tstatic joinById(resources: Array<ResourceMetrics>, useTag?: boolean): Array<ResourceMetrics> {\n\t\treturn ResourceMetrics.groupById(resources, useTag).map(resourcesToJoin => ResourceMetrics.merge(resourcesToJoin));\n\t}\n}\n\n// Manages the metrics for a single unit action (e.g. Lightning Bolt).\nexport class ActionMetrics {\n\tunit: UnitMetrics | null;\n\treadonly actionId: ActionId;\n\treadonly name: string;\n\treadonly iconUrl: string;\n\treadonly targets: Array<TargetedActionMetrics>;\n\tprivate readonly resultData: SimResultData;\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\tprivate readonly data: ActionMetricsProto;\n\tprivate readonly combinedMetrics: TargetedActionMetrics;\n\tresources: Array<ResourceMetrics>;\n\n\tprivate constructor(unit: UnitMetrics | null, actionId: ActionId, data: ActionMetricsProto, resultData: SimResultData) {\n\t\tthis.unit = unit;\n\t\tthis.actionId = actionId;\n\t\tthis.name = actionId.name;\n\t\tthis.iconUrl = actionId.iconUrl;\n\t\tthis.resultData = resultData;\n\t\tthis.iterations = resultData.iterations;\n\t\tthis.duration = resultData.duration;\n\t\tthis.data = data;\n\t\tthis.targets = data.targets.map(tam => new TargetedActionMetrics(this.iterations, this.duration, tam));\n\t\tthis.combinedMetrics = TargetedActionMetrics.merge(this.targets);\n\t\tthis.resources = [];\n\t}\n\n\tget isMeleeAction() {\n\t\treturn this.data.isMelee;\n\t}\n\n\tget damage() {\n\t\treturn this.combinedMetrics.damage;\n\t}\n\n\tget dps() {\n\t\treturn this.combinedMetrics.dps;\n\t}\n\n\tget hps() {\n\t\treturn this.combinedMetrics.hps;\n\t}\n\n\tget tps() {\n\t\treturn this.combinedMetrics.tps;\n\t}\n\n\tget casts() {\n\t\treturn this.combinedMetrics.casts;\n\t}\n\n\tget castsPerMinute() {\n\t\treturn this.combinedMetrics.castsPerMinute;\n\t}\n\n\tget avgCastTimeMs() {\n\t\treturn this.combinedMetrics.avgCastTimeMs;\n\t}\n\n\tget hpm() {\n\t\tconst totalHealing = this.combinedMetrics.hps * this.duration;\n\t\tconst manaMetrics = this.resources.find(r => r.type == ResourceType.ResourceTypeMana);\n\t\tif (manaMetrics) {\n\t\t\treturn totalHealing / -manaMetrics.gain;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tget healingThroughput() {\n\t\treturn this.combinedMetrics.healingThroughput;\n\t}\n\n\tget avgCast() {\n\t\treturn this.combinedMetrics.avgCast;\n\t}\n\n\tget avgCastHealing() {\n\t\treturn this.combinedMetrics.avgCastHealing;\n\t}\n\n\tget avgCastThreat() {\n\t\treturn this.combinedMetrics.avgCastThreat;\n\t}\n\n\tget landedHits() {\n\t\treturn this.combinedMetrics.landedHits;\n\t}\n\n\tget hitAttempts() {\n\t\treturn this.combinedMetrics.hitAttempts;\n\t}\n\n\tget avgHit() {\n\t\treturn this.combinedMetrics.avgHit;\n\t}\n\n\tget avgHitThreat() {\n\t\treturn this.combinedMetrics.avgHitThreat;\n\t}\n\n\tget critPercent() {\n\t\treturn this.combinedMetrics.critPercent;\n\t}\n\n\tget misses() {\n\t\treturn this.combinedMetrics.misses;\n\t}\n\n\tget missPercent() {\n\t\treturn this.combinedMetrics.missPercent;\n\t}\n\n\tget dodges() {\n\t\treturn this.combinedMetrics.dodges;\n\t}\n\n\tget dodgePercent() {\n\t\treturn this.combinedMetrics.dodgePercent;\n\t}\n\n\tget parries() {\n\t\treturn this.combinedMetrics.parries;\n\t}\n\n\tget parryPercent() {\n\t\treturn this.combinedMetrics.parryPercent;\n\t}\n\n\tget blocks() {\n\t\treturn this.combinedMetrics.blocks;\n\t}\n\n\tget blockPercent() {\n\t\treturn this.combinedMetrics.blockPercent;\n\t}\n\n\tget glances() {\n\t\treturn this.combinedMetrics.glances;\n\t}\n\n\tget glancePercent() {\n\t\treturn this.combinedMetrics.glancePercent;\n\t}\n\n\tforTarget(filter?: SimResultFilter): ActionMetrics {\n\t\tconst unitIndex = this.unit!.getTargetIndex(filter);\n\t\tif (unitIndex == null) {\n\t\t\treturn this;\n\t\t} else {\n\t\t\tconst target = this.targets.find(target => target.data.unitIndex == unitIndex);\n\t\t\tif (target) {\n\t\t\t\tconst targetData = ActionMetricsProto.clone(this.data);\n\t\t\t\ttargetData.targets = [target.data];\n\t\t\t\treturn new ActionMetrics(this.unit, this.actionId, targetData, this.resultData);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Could not find target with unitIndex ' + unitIndex);\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic async makeNew(unit: UnitMetrics | null, resultData: SimResultData, actionMetrics: ActionMetricsProto, playerIndex?: number): Promise<ActionMetrics> {\n\t\tconst actionId = await ActionId.fromProto(actionMetrics.id!).fill(playerIndex);\n\t\treturn new ActionMetrics(unit, actionId, actionMetrics, resultData);\n\t}\n\n\t// Merges an array of metrics into a single metric.\n\tstatic merge(actions: Array<ActionMetrics>, removeTag?: boolean, actionIdOverride?: ActionId): ActionMetrics {\n\t\tconst firstAction = actions[0];\n\t\tconst unit = firstAction.unit;\n\t\tlet actionId = actionIdOverride || firstAction.actionId;\n\t\tif (removeTag) {\n\t\t\tactionId = actionId.withoutTag();\n\t\t}\n\n\t\tconst maxTargets = Math.max(...actions.map(action => action.targets.length));\n\t\tconst mergedTargets = [...Array(maxTargets).keys()].map(i => TargetedActionMetrics.merge(actions.map(action => action.targets[i])));\n\n\t\treturn new ActionMetrics(\n\t\t\tunit,\n\t\t\tactionId,\n\t\t\tActionMetricsProto.create({\n\t\t\t\tisMelee: firstAction.isMeleeAction,\n\t\t\t\ttargets: mergedTargets.map(t => t.data),\n\t\t\t}),\n\t\t\tfirstAction.resultData,\n\t\t);\n\t}\n\n\t// Groups similar metrics, i.e. metrics with the same item/spell/other ID but\n\t// different tags, and returns them as separate arrays.\n\tstatic groupById(actions: Array<ActionMetrics>, useTag?: boolean): Array<Array<ActionMetrics>> {\n\t\tif (useTag) {\n\t\t\treturn Object.values(bucket(actions, action => action.actionId.toString()));\n\t\t} else {\n\t\t\treturn Object.values(bucket(actions, action => action.actionId.toStringIgnoringTag()));\n\t\t}\n\t}\n\n\t// Merges action metrics that have the same name/ID, adding their stats together.\n\tstatic joinById(actions: Array<ActionMetrics>, useTag?: boolean): Array<ActionMetrics> {\n\t\treturn ActionMetrics.groupById(actions, useTag).map(actionsToJoin => ActionMetrics.merge(actionsToJoin));\n\t}\n}\n\n// Manages the metrics for a single action applied to a specific target.\nexport class TargetedActionMetrics {\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\treadonly data: TargetedActionMetricsProto;\n\n\treadonly landedHitsRaw: number;\n\treadonly hitAttempts: number;\n\n\tconstructor(iterations: number, duration: number, data: TargetedActionMetricsProto) {\n\t\tthis.iterations = iterations;\n\t\tthis.duration = duration;\n\t\tthis.data = data;\n\n\t\tthis.landedHitsRaw = this.data.hits + this.data.crits + this.data.blocks + this.data.glances;\n\n\t\tthis.hitAttempts = this.data.misses + this.data.dodges + this.data.parries + this.data.blocks + this.data.glances + this.data.crits + this.data.hits;\n\t}\n\n\tget damage() {\n\t\treturn this.data.damage;\n\t}\n\n\tget dps() {\n\t\treturn this.data.damage / this.iterations / this.duration;\n\t}\n\n\tget hps() {\n\t\treturn (this.data.healing + this.data.shielding) / this.iterations / this.duration;\n\t}\n\n\tget tps() {\n\t\treturn this.data.threat / this.iterations / this.duration;\n\t}\n\n\tget casts() {\n\t\treturn (this.data.casts || this.hitAttempts) / this.iterations;\n\t}\n\n\tget castsPerMinute() {\n\t\treturn this.casts / (this.duration / 60);\n\t}\n\n\tget avgCastTimeMs() {\n\t\treturn this.data.castTimeMs / this.iterations / this.casts;\n\t}\n\n\tget healingThroughput() {\n\t\tif (this.avgCastTimeMs) {\n\t\t\treturn this.hps / (this.avgCastTimeMs / 1000);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tget timeSpentCastingMs() {\n\t\treturn this.data.castTimeMs / this.iterations;\n\t}\n\n\tget avgCast() {\n\t\treturn this.data.damage / this.iterations / (this.casts || 1);\n\t}\n\n\tget avgCastHealing() {\n\t\treturn (this.data.healing + this.data.shielding) / this.iterations / (this.casts || 1);\n\t}\n\n\tget avgCastThreat() {\n\t\treturn this.data.threat / this.iterations / (this.casts || 1);\n\t}\n\n\tget landedHits() {\n\t\treturn this.landedHitsRaw / this.iterations;\n\t}\n\n\tget avgHit() {\n\t\tconst lhr = this.landedHitsRaw;\n\t\treturn lhr == 0 ? 0 : this.data.damage / lhr;\n\t}\n\n\tget avgHitThreat() {\n\t\tconst lhr = this.landedHitsRaw;\n\t\treturn lhr == 0 ? 0 : this.data.threat / lhr;\n\t}\n\n\tget critPercent() {\n\t\treturn (this.data.crits / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget misses() {\n\t\treturn this.data.misses / this.iterations;\n\t}\n\n\tget missPercent() {\n\t\treturn (this.data.misses / (this.data.casts || 1)) * 100;\n\t}\n\n\tget dodges() {\n\t\treturn this.data.dodges / this.iterations;\n\t}\n\n\tget dodgePercent() {\n\t\treturn (this.data.dodges / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget parries() {\n\t\treturn this.data.parries / this.iterations;\n\t}\n\n\tget parryPercent() {\n\t\treturn (this.data.parries / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget blocks() {\n\t\treturn this.data.blocks / this.iterations;\n\t}\n\n\tget blockPercent() {\n\t\treturn (this.data.blocks / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget glances() {\n\t\treturn this.data.glances / this.iterations;\n\t}\n\n\tget glancePercent() {\n\t\treturn (this.data.glances / (this.hitAttempts || 1)) * 100;\n\t}\n\n\t// Merges an array of metrics into a single metric.\n\tstatic merge(actions: Array<TargetedActionMetrics>): TargetedActionMetrics {\n\t\treturn new TargetedActionMetrics(\n\t\t\tactions[0]?.iterations || 1,\n\t\t\tactions[0]?.duration || 1,\n\t\t\tTargetedActionMetricsProto.create({\n\t\t\t\tcasts: sum(actions.map(a => a.data.casts)),\n\t\t\t\thits: sum(actions.map(a => a.data.hits)),\n\t\t\t\tcrits: sum(actions.map(a => a.data.crits)),\n\t\t\t\tmisses: sum(actions.map(a => a.data.misses)),\n\t\t\t\tdodges: sum(actions.map(a => a.data.dodges)),\n\t\t\t\tparries: sum(actions.map(a => a.data.parries)),\n\t\t\t\tblocks: sum(actions.map(a => a.data.blocks)),\n\t\t\t\tglances: sum(actions.map(a => a.data.glances)),\n\t\t\t\tdamage: sum(actions.map(a => a.data.damage)),\n\t\t\t\tthreat: sum(actions.map(a => a.data.threat)),\n\t\t\t\thealing: sum(actions.map(a => a.data.healing)),\n\t\t\t\tshielding: sum(actions.map(a => a.data.shielding)),\n\t\t\t\tcastTimeMs: sum(actions.map(a => a.data.castTimeMs)),\n\t\t\t}),\n\t\t);\n\t}\n}\n","export abstract class Component {\n\tprotected customRootElement?(): HTMLElement;\n\n\tprivate disposeCallbacks: Array<() => void> = [];\n\tprivate disposed = false;\n\n\treadonly rootElem: HTMLElement;\n\n\tconstructor(parentElem: HTMLElement | null, rootCssClass: string, rootElem?: HTMLElement) {\n\t\tthis.rootElem = rootElem || this.customRootElement?.() || document.createElement('div');\n\t\tthis.rootElem.classList.add(rootCssClass);\n\t\tif (parentElem) {\n\t\t\tparentElem.appendChild(this.rootElem);\n\t\t}\n\t}\n\n\taddOnDisposeCallback(callback: () => void) {\n\t\tthis.disposeCallbacks.push(callback);\n\t}\n\n\tdispose() {\n\t\tif (this.disposed) {\n\t\t\treturn;\n\t\t}\n\t\tthis.disposed = true;\n\n\t\tthis.disposeCallbacks.forEach(callback => callback());\n\t\tthis.disposeCallbacks = [];\n\t}\n}\n","import tippy from 'tippy.js';\nimport { element, fragment } from 'tsx-vanilla';\n\nimport { EventID, TypedEvent } from '../typed_event.js';\nimport { Component } from './component.js';\n\n/**\n * Data for creating a new input UI element.\n */\nexport interface InputConfig<ModObject, T, V = T> {\n\tlabel?: string;\n\tlabelTooltip?: string;\n\tinline?: boolean;\n\textraCssClasses?: Array<string>;\n\n\tdefaultValue?: T;\n\n\t// Returns the event indicating the mapped value has changed.\n\tchangedEvent: (obj: ModObject) => TypedEvent<any>;\n\n\t// Get and set the mapped value.\n\tgetValue: (obj: ModObject) => T;\n\tsetValue: (eventID: EventID, obj: ModObject, newValue: T) => void;\n\n\t// If set, will automatically disable the input when this evaluates to false.\n\tenableWhen?: (obj: ModObject) => boolean;\n\n\t// If set, will automatically hide the input when this evaluates to false.\n\tshowWhen?: (obj: ModObject) => boolean;\n\n\t// Overrides the default root element (new div).\n\trootElem?: HTMLElement;\n\n\t// Convert between source value and input value types. In most cases this is not needed\n\t// because source and input use the same type. These functions must be set if T != V.\n\tsourceToValue?: (src: T) => V;\n\tvalueToSource?: (val: V) => T;\n}\n\n// Shared logic for UI elements that are mapped to a value for some modifiable object.\nexport abstract class Input<ModObject, T, V = T> extends Component {\n\tprivate readonly inputConfig: InputConfig<ModObject, T, V>;\n\treadonly modObject: ModObject;\n\n\tprotected enabled = true;\n\n\treadonly changeEmitter = new TypedEvent<void>();\n\n\tconstructor(parent: HTMLElement | null, cssClass: string, modObject: ModObject, config: InputConfig<ModObject, T, V>) {\n\t\tsuper(parent, 'input-root', config.rootElem);\n\t\tthis.inputConfig = config;\n\t\tthis.modObject = modObject;\n\t\tthis.rootElem.classList.add(cssClass);\n\n\t\tif (config.inline) this.rootElem.classList.add('input-inline');\n\t\tif (config.extraCssClasses) this.rootElem.classList.add(...config.extraCssClasses);\n\t\tif (config.label) this.rootElem.appendChild(this.buildLabel(config));\n\n\t\tconfig.changedEvent(this.modObject).on(() => {\n\t\t\tthis.setInputValue(this.getSourceValue());\n\t\t\tthis.update();\n\t\t});\n\t}\n\n\tprivate buildLabel(config: InputConfig<ModObject, T, V>): JSX.Element {\n\t\tconst dataset = {};\n\n\t\tconst label = <label className=\"form-label\">{config.label}</label>;\n\n\t\tif (config.labelTooltip)\n\t\t\ttippy(label, {\n\t\t\t\tcontent: config.labelTooltip,\n\t\t\t});\n\n\t\treturn label;\n\t}\n\n\tupdate() {\n\t\tconst enable = !this.inputConfig.enableWhen || this.inputConfig.enableWhen(this.modObject);\n\t\tif (enable) {\n\t\t\tthis.enabled = true;\n\t\t\tthis.rootElem.classList.remove('disabled');\n\t\t\tthis.getInputElem()?.removeAttribute('disabled');\n\t\t} else {\n\t\t\tthis.enabled = false;\n\t\t\tthis.rootElem.classList.add('disabled');\n\t\t\tthis.getInputElem()?.setAttribute('disabled', '');\n\t\t}\n\n\t\tconst show = !this.inputConfig.showWhen || this.inputConfig.showWhen(this.modObject);\n\t\tif (show) {\n\t\t\tthis.rootElem.classList.remove('hide');\n\t\t} else {\n\t\t\tthis.rootElem.classList.add('hide');\n\t\t}\n\t}\n\n\t// Can't call abstract functions in constructor, so need an init() call.\n\tinit() {\n\t\tconst initialValue = this.inputConfig.defaultValue ? this.inputConfig.defaultValue : this.inputConfig.getValue(this.modObject);\n\t\tthis.setInputValue(initialValue);\n\t\tthis.update();\n\t}\n\n\tabstract getInputElem(): HTMLElement | null;\n\n\tabstract getInputValue(): T;\n\n\tabstract setInputValue(newValue: T): void;\n\n\tprotected getSourceValue(): T {\n\t\treturn this.inputConfig.getValue(this.modObject);\n\t}\n\n\tprotected setSourceValue(eventID: EventID, newValue: T) {\n\t\tthis.inputConfig.setValue(eventID, this.modObject, newValue);\n\t}\n\n\tprotected sourceToValue(src: T): V {\n\t\treturn this.inputConfig.sourceToValue ? this.inputConfig.sourceToValue(src) : (src as unknown as V);\n\t}\n\tprotected valueToSource(val: V): T {\n\t\treturn this.inputConfig.valueToSource ? this.inputConfig.valueToSource(val) : (val as unknown as T);\n\t}\n\n\t// Child classes should call this method when the value in the input element changes.\n\tinputChanged(eventID: EventID) {\n\t\tthis.setSourceValue(eventID, this.getInputValue());\n\t\tthis.changeEmitter.emit(eventID);\n\t}\n\n\t// Sets the underlying value directly.\n\tsetValue(eventID: EventID, newValue: T) {\n\t\tthis.inputConfig.setValue(eventID, this.modObject, newValue);\n\t}\n\n\tstatic newGroupContainer(): HTMLElement {\n\t\tconst group = document.createElement('div');\n\t\tgroup.classList.add('picker-group');\n\t\treturn group;\n\t}\n}\n","import { TypedEvent } from '../typed_event.js';\nimport { Input, InputConfig } from './input.js';\n\n/**\n * Data for creating a boolean picker (checkbox).\n */\nexport interface BooleanPickerConfig<ModObject> extends InputConfig<ModObject, boolean> {\n\treverse?: boolean;\n}\n\n// UI element for picking an arbitrary number field.\nexport class BooleanPicker<ModObject> extends Input<ModObject, boolean> {\n\tprivate readonly inputElem: HTMLInputElement;\n\n\tconstructor(parent: HTMLElement, modObject: ModObject, config: BooleanPickerConfig<ModObject>) {\n\t\tsuper(parent, 'boolean-picker-root', modObject, config);\n\n\t\tthis.rootElem.classList.add('form-check');\n\n\t\tthis.inputElem = document.createElement('input');\n\t\tthis.inputElem.type = 'checkbox';\n\t\tthis.inputElem.classList.add('boolean-picker-input', 'form-check-input');\n\n\t\tif (config.reverse) {\n\t\t\tthis.rootElem.classList.add('form-check-reverse');\n\t\t\tthis.rootElem.appendChild(this.inputElem);\n\t\t} else {\n\t\t\tthis.rootElem.prepend(this.inputElem);\n\t\t}\n\n\t\tthis.init();\n\n\t\tthis.inputElem.addEventListener('change', () => {\n\t\t\tthis.inputChanged(TypedEvent.nextEventID());\n\t\t});\n\t}\n\n\tgetInputElem(): HTMLElement {\n\t\treturn this.inputElem;\n\t}\n\n\tgetInputValue(): boolean {\n\t\treturn Boolean(this.inputElem.checked);\n\t}\n\n\tsetInputValue(newValue: boolean) {\n\t\tthis.inputElem.checked = newValue;\n\t}\n}\n","import { SimResult, SimResultFilter } from '../..//proto_utils/sim_result.js';\nimport { Component } from '../../components/component.js';\nimport { EventID, TypedEvent } from '../../typed_event.js';\n\nexport interface SimResultData {\n\teventID: EventID,\n\tresult: SimResult,\n\tfilter: SimResultFilter,\n};\n\nexport interface ResultComponentConfig {\n\tparent: HTMLElement,\n\trootCssClass?: string,\n\tcssScheme?: string | null,\n\tresultsEmitter: TypedEvent<SimResultData | null>,\n};\n\nexport abstract class ResultComponent extends Component {\n\tprivate lastSimResult: SimResultData | null;\n\n\tconstructor(config: ResultComponentConfig) {\n\t\tsuper(config.parent, config.rootCssClass || 'result-component');\n\t\tthis.lastSimResult = null;\n\n\t\tconfig.resultsEmitter.on((_, resultData) => {\n\t\t\tif (!resultData)\n\t\t\t\treturn;\n\n\t\t\tthis.lastSimResult = resultData;\n\t\t\tthis.onSimResult(resultData);\n\t\t});\n\t}\n\n\thasLastSimResult(): boolean {\n\t\treturn this.lastSimResult != null;\n\t}\n\n\tgetLastSimResult(): SimResultData {\n\t\tif (this.lastSimResult) {\n\t\t\treturn this.lastSimResult;\n\t\t} else {\n\t\t\tthrow new Error('No last sim result!');\n\t\t}\n\t}\n\n\tabstract onSimResult(resultData: SimResultData): void;\n}\n","import tippy from 'tippy.js';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { element, fragment, ref } from 'tsx-vanilla';\n\nimport { ActionId } from '../../proto_utils/action_id.js';\nimport { UnitMetrics } from '../../proto_utils/sim_result';\nimport { TypedEvent } from '../../typed_event.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\ndeclare let $: any;\n\nexport enum ColumnSortType {\n\tNone,\n\tAscending,\n\tDescending,\n}\n\nexport interface MetricsColumnConfig<T> {\n\tname: string;\n\ttooltip?: string;\n\theaderCellClass?: string;\n\tcolumnClass?: string;\n\tsort?: ColumnSortType;\n\n\tgetValue?: (metric: T) => number;\n\n\t// Either getDisplayString or fillCell must be specified.\n\tgetDisplayString?: (metric: T) => string;\n\tfillCell?: (metric: T, cellElem: HTMLElement, rowElem: HTMLElement) => void;\n}\n\nexport abstract class MetricsTable<T> extends ResultComponent {\n\tprivate readonly columnConfigs: Array<MetricsColumnConfig<T>>;\n\n\tprotected readonly tableElem: HTMLElement;\n\tprotected readonly bodyElem: HTMLElement;\n\n\treadonly onUpdate = new TypedEvent<void>('MetricsTableUpdate');\n\n\tconstructor(config: ResultComponentConfig, columnConfigs: Array<MetricsColumnConfig<T>>) {\n\t\tsuper(config);\n\t\tthis.columnConfigs = columnConfigs;\n\n\t\tthis.rootElem.appendChild(\n\t\t\t<table className=\"metrics-table tablesorter\">\n\t\t\t\t<thead className=\"metrics-table-header\">\n\t\t\t\t\t<tr className=\"metrics-table-header-row\"></tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody className=\"metrics-table-body\"></tbody>\n\t\t\t</table>,\n\t\t);\n\n\t\tthis.tableElem = this.rootElem.getElementsByClassName('metrics-table')[0] as HTMLTableSectionElement;\n\t\tthis.bodyElem = this.rootElem.getElementsByClassName('metrics-table-body')[0] as HTMLElement;\n\n\t\tconst headerRowElem = this.rootElem.getElementsByClassName('metrics-table-header-row')[0] as HTMLElement;\n\t\tthis.columnConfigs.forEach(columnConfig => {\n\t\t\tconst headerCell = document.createElement('th');\n\t\t\theaderCell.classList.add('metrics-table-header-cell');\n\t\t\tif (columnConfig.headerCellClass) {\n\t\t\t\theaderCell.classList.add(columnConfig.headerCellClass);\n\t\t\t}\n\t\t\tif (columnConfig.columnClass) {\n\t\t\t\theaderCell.classList.add(columnConfig.columnClass);\n\t\t\t}\n\t\t\theaderCell.appendChild(<span>{columnConfig.name}</span>);\n\t\t\tif (columnConfig.tooltip) {\n\t\t\t\ttippy(headerCell, {\n\t\t\t\t\tcontent: columnConfig.tooltip,\n\t\t\t\t\tignoreAttributes: true,\n\t\t\t\t});\n\t\t\t}\n\t\t\theaderRowElem.appendChild(headerCell);\n\t\t});\n\n\t\tconst sortList = this.columnConfigs\n\t\t\t.map((config, i) => [i, config.sort == ColumnSortType.Ascending ? 0 : 1])\n\t\t\t.filter(sortData => this.columnConfigs[sortData[0]].sort);\n\t\t$(this.tableElem).tablesorter({\n\t\t\tsortList: sortList,\n\t\t\tcssChildRow: 'child-metric',\n\t\t});\n\t}\n\n\tprotected sortMetrics(metrics: Array<T>) {\n\t\tthis.columnConfigs\n\t\t\t.filter(config => config.sort)\n\t\t\t.forEach(config => {\n\t\t\t\tif (!config.getValue) {\n\t\t\t\t\tthrow new Error(\"Can' apply group sorting without getValue\");\n\t\t\t\t}\n\t\t\t\tif (config.sort == ColumnSortType.Ascending) {\n\t\t\t\t\tmetrics.sort((a, b) => config.getValue!(a) - config.getValue!(b));\n\t\t\t\t} else {\n\t\t\t\t\tmetrics.sort((a, b) => config.getValue!(b) - config.getValue!(a));\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate addRow(metric: T): HTMLElement {\n\t\tconst rowElem = document.createElement('tr');\n\t\tthis.bodyElem.appendChild(rowElem);\n\n\t\tthis.columnConfigs.forEach(columnConfig => {\n\t\t\tconst cellElem = document.createElement('td');\n\t\t\tif (columnConfig.columnClass) {\n\t\t\t\tcellElem.classList.add(columnConfig.columnClass);\n\t\t\t}\n\t\t\tif (columnConfig.fillCell) {\n\t\t\t\tcolumnConfig.fillCell(metric, cellElem, rowElem);\n\t\t\t} else if (columnConfig.getDisplayString) {\n\t\t\t\tcellElem.textContent = columnConfig.getDisplayString(metric);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Metrics column config does not provide content function: ' + columnConfig.name);\n\t\t\t}\n\t\t\trowElem.appendChild(cellElem);\n\t\t});\n\n\t\tthis.customizeRowElem(metric, rowElem);\n\t\treturn rowElem;\n\t}\n\n\tprivate addGroup(metrics: Array<T>) {\n\t\tif (metrics.length == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (metrics.length == 1 && this.shouldCollapse(metrics[0])) {\n\t\t\tthis.addRow(metrics[0]);\n\t\t\treturn;\n\t\t}\n\n\t\t// Manually sort because tablesorter doesn't let us apply sorting to child rows.\n\t\tthis.sortMetrics(metrics);\n\n\t\tconst mergedMetrics = this.mergeMetrics(metrics);\n\t\tconst parentRow = this.addRow(mergedMetrics);\n\t\tconst childRows = metrics.map(metric => this.addRow(metric));\n\t\tchildRows.forEach(childRow => childRow.classList.add('child-metric'));\n\n\t\tlet expand = true;\n\t\tparentRow.classList.add('parent-metric', 'expand');\n\t\tparentRow.addEventListener('click', () => {\n\t\t\texpand = !expand;\n\t\t\tif (expand) {\n\t\t\t\tchildRows.forEach(row => row.classList.remove('hide'));\n\t\t\t\tparentRow.classList.add('expand');\n\t\t\t} else {\n\t\t\t\tchildRows.forEach(row => row.classList.add('hide'));\n\t\t\t\tparentRow.classList.remove('expand');\n\t\t\t}\n\t\t});\n\t}\n\n\tonSimResult(resultData: SimResultData) {\n\t\tthis.bodyElem.textContent = '';\n\t\tconst groupedMetrics = this.getGroupedMetrics(resultData).filter(group => group.length > 0);\n\t\tif (groupedMetrics.length == 0) {\n\t\t\tthis.rootElem.classList.add('hide');\n\t\t\tthis.onUpdate.emit(resultData.eventID);\n\t\t\treturn;\n\t\t} else {\n\t\t\tthis.rootElem.classList.remove('hide');\n\t\t}\n\n\t\tgroupedMetrics.forEach(group => this.addGroup(group));\n\t\t$(this.tableElem).trigger('update');\n\t\tthis.onUpdate.emit(resultData.eventID);\n\t}\n\n\t// Whether a single-element group should have its parent row removed.\n\t// Override this to add custom behavior.\n\tprotected shouldCollapse(metric: T): boolean {\n\t\treturn true;\n\t}\n\n\t// Override this to customize rowElem after it has been populated.\n\tprotected customizeRowElem(metric: T, rowElem: HTMLElement) {\n\t\treturn;\n\t}\n\n\t// Override this to provide custom merge behavior.\n\tprotected mergeMetrics(metrics: Array<T>): T {\n\t\treturn metrics[0];\n\t}\n\n\t// Returns grouped metrics to display.\n\tabstract getGroupedMetrics(resultData: SimResultData): Array<Array<T>>;\n\n\tstatic nameCellConfig<T>(\n\t\tgetData: (metric: T) => {\n\t\t\tname: string;\n\t\t\tactionId: ActionId;\n\t\t\tmetricType: string;\n\t\t},\n\t): MetricsColumnConfig<T> {\n\t\treturn {\n\t\t\tname: 'Name',\n\t\t\tfillCell: (metric: T, cellElem: HTMLElement, rowElem: HTMLElement) => {\n\t\t\t\tconst data = getData(metric);\n\t\t\t\tconst iconElem = ref<HTMLAnchorElement>();\n\t\t\t\tcellElem.appendChild(\n\t\t\t\t\t<>\n\t\t\t\t\t\t<a ref={iconElem} className=\"metrics-action-icon\"></a>\n\t\t\t\t\t\t<span className=\"metrics-action-name\">{data.name}</span>\n\t\t\t\t\t\t<span className=\"expand-toggle fa fa-caret-down\"></span>\n\t\t\t\t\t\t<span className=\"expand-toggle fa fa-caret-right\"></span>\n\t\t\t\t\t</>,\n\t\t\t\t);\n\t\t\t\tif (iconElem.value) {\n\t\t\t\t\tdata.actionId.setBackgroundAndHref(iconElem.value);\n\t\t\t\t\tdata.actionId.setWowheadDataset(iconElem.value, {\n\t\t\t\t\t\tuseBuffAura: data.metricType === 'AuraMetrics',\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t}\n\n\tstatic playerNameCellConfig(): MetricsColumnConfig<UnitMetrics> {\n\t\treturn {\n\t\t\tname: 'Name',\n\t\t\tcolumnClass: 'name-cell',\n\t\t\tfillCell: (player: UnitMetrics, cellElem: HTMLElement, rowElem: HTMLElement) => {\n\t\t\t\tcellElem.appendChild(\n\t\t\t\t\t<>\n\t\t\t\t\t\t<img className=\"metrics-action-icon\" src={player.iconUrl}></img>\n\t\t\t\t\t\t<span className={`metrics-action-name text-${player.classColor}`}>{player.label}</span>\n\t\t\t\t\t</>,\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\t}\n}\n","import { AuraMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result';\nimport { ColumnSortType, MetricsTable } from './metrics_table';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component';\n\nexport class AuraMetricsTable extends MetricsTable<AuraMetrics> {\n\tprivate readonly useDebuffs: boolean;\n\n\tconstructor(config: ResultComponentConfig, useDebuffs: boolean) {\n\t\tif (useDebuffs) {\n\t\t\tconfig.rootCssClass = 'debuff-metrics-root';\n\t\t} else {\n\t\t\tconfig.rootCssClass = 'buff-metrics-root';\n\t\t}\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: AuraMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t\tmetricType: metric?.constructor?.name,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'Procs',\n\t\t\t\ttooltip: 'Procs',\n\t\t\t\tgetValue: (metric: AuraMetrics) => metric.averageProcs,\n\t\t\t\tgetDisplayString: (metric: AuraMetrics) => metric.averageProcs.toFixed(2),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'PPM',\n\t\t\t\ttooltip: 'Procs Per Minute',\n\t\t\t\tgetValue: (metric: AuraMetrics) => metric.ppm,\n\t\t\t\tgetDisplayString: (metric: AuraMetrics) => metric.ppm.toFixed(2),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Uptime',\n\t\t\t\ttooltip: 'Uptime / Encounter Duration',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: AuraMetrics) => metric.uptimePercent,\n\t\t\t\tgetDisplayString: (metric: AuraMetrics) => metric.uptimePercent.toFixed(2) + '%',\n\t\t\t},\n\t\t]);\n\t\tthis.useDebuffs = useDebuffs;\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<AuraMetrics>> {\n\t\tif (this.useDebuffs) {\n\t\t\treturn AuraMetrics.groupById(resultData.result.getDebuffMetrics(resultData.filter));\n\t\t} else {\n\t\t\tconst players = resultData.result.getRaidIndexedPlayers(resultData.filter);\n\t\t\tif (players.length != 1) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tconst player = players[0];\n\n\t\t\tconst auras = player.auras;\n\t\t\tconst actionGroups = AuraMetrics.groupById(auras);\n\t\t\tconst petGroups = player.pets.map(pet => pet.auras);\n\n\t\t\treturn actionGroups.concat(petGroups);\n\t\t}\n\t}\n\n\tmergeMetrics(metrics: Array<AuraMetrics>): AuraMetrics {\n\t\treturn AuraMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n\n\tshouldCollapse(metric: AuraMetrics): boolean {\n\t\treturn !metric.unit?.isPet;\n\t}\n}\n","import { ActionMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\nexport class CastMetricsTable extends MetricsTable<ActionMetrics> {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'cast-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: ActionMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t\tmetricType: metric.constructor?.name,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'Casts',\n\t\t\t\ttooltip: 'Casts',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.casts,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.casts.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'CPM',\n\t\t\t\ttooltip: 'Casts / (Encounter Duration / 60 Seconds)',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.castsPerMinute,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.castsPerMinute.toFixed(1),\n\t\t\t},\n\t\t]);\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<ActionMetrics>> {\n\t\t//const actionMetrics = resultData.result.getActionMetrics(resultData.filter);\n\t\tconst players = resultData.result.getRaidIndexedPlayers(resultData.filter);\n\t\tif (players.length != 1) {\n\t\t\treturn [];\n\t\t}\n\t\tconst player = players[0];\n\n\t\tconst actions = player.actions.filter(action => action.casts != 0).map(action => action.forTarget(resultData.filter));\n\t\tconst actionGroups = ActionMetrics.groupById(actions);\n\t\tconst petGroups = player.pets.map(pet => pet.actions.filter(action => action.casts != 0).map(action => action.forTarget(resultData.filter)));\n\n\t\treturn actionGroups.concat(petGroups);\n\t}\n\n\tmergeMetrics(metrics: Array<ActionMetrics>): ActionMetrics {\n\t\treturn ActionMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n\n\tshouldCollapse(metric: ActionMetrics): boolean {\n\t\treturn !metric.unit?.isPet;\n\t}\n}\n","import { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\ndeclare var Chart: any;\n\nexport class DpsHistogram extends ResultComponent {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'dps-histogram-root';\n\t\tsuper(config);\n\t}\n\n\tonSimResult(resultData: SimResultData) {\n\t\tconst chartBounds = this.rootElem.getBoundingClientRect();\n\n\t\tthis.rootElem.textContent = '';\n\t\tconst chartCanvas = document.createElement(\"canvas\");\n\t\tchartCanvas.height = chartBounds.height;\n\t\tchartCanvas.width = chartBounds.width;\n\n\t\tconst damageMetrics = resultData.result.getDamageMetrics(resultData.filter);\n\n\t\tconst min = damageMetrics.avg - damageMetrics.stdev;\n\t\tconst max = damageMetrics.avg + damageMetrics.stdev;\n\t\tconst vals: Array<number> = [];\n\t\tconst colors: Array<string> = [];\n\n\t\tconst labels = Object.keys(damageMetrics.hist);\n\t\tlabels.forEach((k, i) => {\n\t\t\tvals.push(damageMetrics.hist[Number(k)]);\n\t\t\tconst val = parseInt(k);\n\t\t\tif (val > min && val < max) {\n\t\t\t\tcolors.push('#1E87F0');\n\t\t\t} else {\n\t\t\t\tcolors.push('#FF6961');\n\t\t\t}\n\t\t});\n\n\t\tconst ctx = chartCanvas.getContext('2d');\n\t\tthis.rootElem.appendChild(chartCanvas);\n\n\t\tconst chart = new Chart(ctx, {\n\t\t\ttype: 'bar',\n\t\t\tdata: {\n\t\t\t\tlabels: labels,\n\t\t\t\tdatasets: [{\n\t\t\t\t\tdata: vals,\n\t\t\t\t\tbackgroundColor: colors,\n\t\t\t\t}],\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tplugins: {\n\t\t\t\t\ttitle: {\n\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\ttext: 'DPS Histogram',\n\t\t\t\t\t},\n\t\t\t\t\tlegend: {\n\t\t\t\t\t\tdisplay: false,\n\t\t\t\t\t\tlabels: {},\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tscales: {\n\t\t\t\t\ty: {\n\t\t\t\t\t\tbeginAtZero: true,\n\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\tdisplay: false\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n}\n","import { ActionMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\nexport class DtpsMeleeMetricsTable extends MetricsTable<ActionMetrics> {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'dtps-melee-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: ActionMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t\tmetricType: metric.constructor?.name,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'DPS',\n\t\t\t\ttooltip: 'Damage / Encounter Duration',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.dps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.dps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Damage / Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCast,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCast.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Hit',\n\t\t\t\ttooltip: 'Damage / (Hits + Crits + Glances + Blocks)',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgHit,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgHit.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Casts',\n\t\t\t\ttooltip: 'Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.casts,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.casts.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Hits',\n\t\t\t\ttooltip: 'Hits + Crits + Glances + Blocks',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.landedHits,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.landedHits.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Miss %',\n\t\t\t\ttooltip: 'Misses / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.missPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.missPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Dodge %',\n\t\t\t\ttooltip: 'Dodges / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.dodgePercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.dodgePercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Parry %',\n\t\t\t\ttooltip: 'Parries / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.parryPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.parryPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Block %',\n\t\t\t\ttooltip: 'Blocks / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.blockPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.blockPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Crit %',\n\t\t\t\ttooltip: 'Crits / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.critPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.critPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t]);\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<ActionMetrics>> {\n\t\tconst players = resultData.result.getRaidIndexedPlayers(resultData.filter);\n\t\tif (players.length != 1) {\n\t\t\treturn [];\n\t\t}\n\t\tconst player = players[0];\n\n\t\tconst targets = resultData.result.getTargets(resultData.filter);\n\t\tconst targetActions = targets.map(target => target.getMeleeActions().map(action => action.forTarget({player: player.unitIndex}))).flat();\n\t\tconst actionGroups = ActionMetrics.groupById(targetActions);\n\n\t\treturn actionGroups;\n\t}\n\n\tmergeMetrics(metrics: Array<ActionMetrics>): ActionMetrics {\n\t\t// TODO: Use NPC ID here instead of pet ID.\n\t\treturn ActionMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n}\n","import { ActionMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\nexport class DtpsSpellMetricsTable extends MetricsTable<ActionMetrics> {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'dtps-spell-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: ActionMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t\tmetricType: metric.constructor?.name,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'DPS',\n\t\t\t\ttooltip: 'Damage / Encounter Duration',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.dps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.dps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Damage / Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCast,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCast.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Hit',\n\t\t\t\ttooltip: 'Damage / (Hits + Crits)',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgHit,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgHit.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Casts',\n\t\t\t\ttooltip: 'Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.casts,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.casts.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Hits',\n\t\t\t\ttooltip: 'Hits + Crits',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.landedHits,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.landedHits.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Miss %',\n\t\t\t\ttooltip: 'Misses / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.missPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.missPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Crit %',\n\t\t\t\ttooltip: 'Crits / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.critPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.critPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t]);\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<ActionMetrics>> {\n\t\tconst players = resultData.result.getRaidIndexedPlayers(resultData.filter);\n\t\tif (players.length != 1) {\n\t\t\treturn [];\n\t\t}\n\t\tconst player = players[0];\n\n\t\tconst targets = resultData.result.getTargets(resultData.filter);\n\t\tconst targetActions = targets.map(target => target.getSpellActions().map(action => action.forTarget({player: player.unitIndex}))).flat();\n\t\tconst actionGroups = ActionMetrics.groupById(targetActions);\n\n\t\treturn actionGroups;\n\t}\n\n\tmergeMetrics(metrics: Array<ActionMetrics>): ActionMetrics {\n\t\t// TODO: Use NPC ID here instead of pet ID.\n\t\treturn ActionMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n}\n","import { ActionMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\nexport class HealingMetricsTable extends MetricsTable<ActionMetrics> {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'healing-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: ActionMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t\tmetricType: metric.constructor?.name,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'Casts',\n\t\t\t\ttooltip: 'Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.casts,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.casts.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'CPM',\n\t\t\t\ttooltip: 'Casts / (Encounter Duration / 60 Seconds)',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.castsPerMinute,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.castsPerMinute.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Cast Time',\n\t\t\t\ttooltip: 'Average cast time in seconds',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCastTimeMs,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => (metric.avgCastTimeMs / 1000).toFixed(2),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'HPM',\n\t\t\t\ttooltip: 'Healing / Mana',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.hpm,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.hpm.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'HPET',\n\t\t\t\ttooltip: 'Healing / Avg Cast Time',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.healingThroughput,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.healingThroughput.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'HPS',\n\t\t\t\ttooltip: 'Healing / Encounter Duration',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.hps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.hps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Healing / Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCastHealing,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCastHealing.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'TPS',\n\t\t\t\ttooltip: 'Threat / Encounter Duration',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.tps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.tps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Threat / Casts',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCastThreat,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCastThreat.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Crit %',\n\t\t\t\ttooltip: 'Crits / Hits',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.critPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.critPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t]);\n\t}\n\n\tcustomizeRowElem(action: ActionMetrics, rowElem: HTMLElement) {\n\t\tif (action.hitAttempts == 0 && action.hps == 0) {\n\t\t\trowElem.classList.add('threat-metrics');\n\t\t}\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<ActionMetrics>> {\n\t\tconst players = resultData.result.getRaidIndexedPlayers(resultData.filter);\n\t\tif (players.length != 1) {\n\t\t\treturn [];\n\t\t}\n\t\tconst player = players[0];\n\n\t\t//const actions = player.getSpellActions().map(action => action.forTarget(resultData.filter));\n\t\t// TODO: Do we want to show 0 hps metrics in here? Make it conditional for healing sims\n\t\t// in case they want to show the threat for non healing spells\n\t\tconst actions = player.getHealingActions().filter(action => action.hps > 0);\n\t\tconst actionGroups = ActionMetrics.groupById(actions);\n\n\t\treturn actionGroups;\n\t}\n\n\tmergeMetrics(metrics: Array<ActionMetrics>): ActionMetrics {\n\t\treturn ActionMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n\n\tshouldCollapse(metric: ActionMetrics): boolean {\n\t\treturn !metric.unit?.isPet;\n\t}\n}\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var root = require('./_root');\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nmodule.exports = trimmedEndIndex;\n","var trimmedEndIndex = require('./_trimmedEndIndex');\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nmodule.exports = baseTrim;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var baseTrim = require('./_baseTrim'),\n    isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n","// @ts-expect-error\nimport debounce from 'lodash/debounce';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { element, fragment } from 'tsx-vanilla';\n\nimport { SimLog } from '../../proto_utils/logs_parser';\nimport { TypedEvent } from '../../typed_event.js';\nimport { BooleanPicker } from '../boolean_picker.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\nexport class LogRunner extends ResultComponent {\n\tprivate virtualScroll: CustomVirtualScroll | null = null;\n\treadonly showDebugChangeEmitter = new TypedEvent<void>('Show Debug');\n\tprivate showDebug = false;\n\tcacheOutput: {\n\t\tcacheKey: number | null;\n\t\tlogs: SimLog[] | null;\n\t\tlogsAsHTML: Element[] | null;\n\t\tlogsAsText: string[] | null;\n\t} = { cacheKey: null, logs: null, logsAsHTML: null, logsAsText: null };\n\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'log-runner-root';\n\t\tsuper(config);\n\n\t\t// Existing setup code for the component...\n\t\tthis.rootElem.innerHTML += `\n\t\t\t<div class=\"log-runner-actions\">\n\t\t\t\t<input type=\"text\" id=\"log-search-input\" class=\"form-control\" placeholder=\"Filter logs\">\n\t\t\t\t<button id=\"log-runner-scroll-to-top-btn\" class=\"btn btn-primary order-last\">Top</button>\n\t\t\t</div>\n\t\t\t<div id=\"log-runner-logs-scroll\" class=\"log-runner-scroll\">\n\t\t\t\t<table class=\"metrics-table log-runner-table\">\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr class=\"metrics-table-header-row\">\n\t\t\t\t\t\t\t<th>Time</th>\n\t\t\t\t\t\t\t<th><div class=\"d-flex align-items-end\">Event</div></th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody id=\"log-runner-logs\" class=\"log-runner-logs\"></tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t`;\n\t\tconst searchInput = this.rootElem.querySelector('#log-search-input') as HTMLInputElement;\n\n\t\t// Use the 'input' event to trigger search as the user types\n\t\tconst onSearchHandler = () => {\n\t\t\tthis.searchLogs(searchInput.value);\n\t\t};\n\t\tsearchInput.addEventListener('input', debounce(onSearchHandler, 150));\n\t\tconst scrollToTopBtn = this.rootElem.querySelector('#log-runner-scroll-to-top-btn');\n\t\tscrollToTopBtn?.addEventListener('click', () => {\n\t\t\tthis.virtualScroll?.scrollToTop();\n\t\t});\n\t\tnew BooleanPicker<LogRunner>(this.rootElem.querySelector('.log-runner-actions')!, this, {\n\t\t\textraCssClasses: ['show-debug-picker'],\n\t\t\tlabel: 'Show Debug Statements',\n\t\t\tinline: true,\n\t\t\treverse: true,\n\t\t\tchangedEvent: () => this.showDebugChangeEmitter,\n\t\t\tgetValue: () => this.showDebug,\n\t\t\tsetValue: (eventID, _logRunner, newValue) => {\n\t\t\t\tthis.showDebug = newValue;\n\t\t\t\tthis.showDebugChangeEmitter.emit(eventID);\n\t\t\t},\n\t\t});\n\n\t\tthis.showDebugChangeEmitter.on(() => {\n\t\t\tconst lastResults = this.getLastSimResult();\n\t\t\tthis.onSimResult(lastResults);\n\t\t});\n\t\tthis.initializeClusterize();\n\t}\n\n\tprivate initializeClusterize(): void {\n\t\tconst scrollElem = this.rootElem.querySelector('#log-runner-logs-scroll') as HTMLElement;\n\t\tconst contentElem = this.rootElem.querySelector('#log-runner-logs') as HTMLElement;\n\n\t\tthis.virtualScroll = new CustomVirtualScroll({\n\t\t\tscrollContainer: scrollElem,\n\t\t\tcontentContainer: contentElem,\n\t\t\titemHeight: 30,\n\t\t});\n\t}\n\n\tsearchLogs(searchQuery: string): void {\n\t\t// Regular expression to match quoted phrases or words\n\t\tconst matchQuotesRegex = /\"([^\"]+)\"|\\S+/g;\n\t\tlet match;\n\t\tconst keywords: any[] = [];\n\t\t// Extract keywords and quoted phrases from the search query\n\t\twhile ((match = matchQuotesRegex.exec(searchQuery))) {\n\t\t\tkeywords.push(match[1] ? match[1].toLowerCase() : match[0].toLowerCase());\n\t\t}\n\t\tconst filteredLogs = this.cacheOutput.logsAsHTML?.filter((_, index) => {\n\t\t\tconst logText = this.cacheOutput.logsAsText![index];\n\t\t\treturn keywords.every(keyword => {\n\t\t\t\tif (keyword.startsWith('\"') && keyword.endsWith('\"')) {\n\t\t\t\t\t// Remove quotes for exact phrase match\n\t\t\t\t\treturn logText.includes(keyword.slice(1, -1));\n\t\t\t\t}\n\t\t\t\treturn logText.includes(keyword);\n\t\t\t});\n\t\t});\n\n\t\tif (filteredLogs) {\n\t\t\tthis.virtualScroll?.setItems(filteredLogs);\n\t\t}\n\t}\n\n\tonSimResult(resultData: SimResultData): void {\n\t\tthis.virtualScroll?.setItems(this.getLogs(resultData) || []);\n\t}\n\n\tgetLogs(resultData: SimResultData) {\n\t\tif (!resultData) return [];\n\t\tif (this.cacheOutput.cacheKey === resultData?.eventID) {\n\t\t\treturn this.cacheOutput.logsAsHTML;\n\t\t}\n\n\t\tconst validLogs = resultData.result.logs.filter(log => !log.isCastCompleted());\n\t\tthis.cacheOutput.cacheKey = resultData?.eventID;\n\t\tthis.cacheOutput.logs = validLogs;\n\t\tthis.cacheOutput.logsAsHTML = validLogs.map(log => (\n\t\t\t<tr>\n\t\t\t\t<td className=\"log-timestamp\">{log.formattedTimestamp()}</td>\n\t\t\t\t<td className=\"log-evdsfent\">{log.toHTML(false)}</td>\n\t\t\t</tr>\n\t\t));\n\t\tthis.cacheOutput.logsAsText = this.cacheOutput.logsAsHTML.map(element => fragmentToString(element).trim().toLowerCase());\n\n\t\treturn this.cacheOutput.logsAsHTML;\n\t}\n}\n\nconst fragmentToString = (element: Node | Element) => {\n\tconst div = document.createElement('div');\n\tdiv.appendChild(element.cloneNode(true));\n\treturn div.innerHTML;\n};\n\nclass CustomVirtualScroll {\n\tprivate scrollContainer: HTMLElement;\n\tprivate contentContainer: HTMLElement;\n\tprivate items: Element[];\n\tprivate itemHeight: number;\n\tprivate visibleItemsCount: number;\n\tprivate startIndex: number;\n\tprivate placeholderTop: HTMLElement;\n\tprivate placeholderBottom: HTMLElement;\n\n\tconstructor({ scrollContainer, contentContainer, itemHeight }: { scrollContainer: HTMLElement; contentContainer: HTMLElement; itemHeight: number }) {\n\t\tthis.scrollContainer = scrollContainer;\n\t\tthis.contentContainer = contentContainer;\n\t\tthis.items = [];\n\t\tthis.itemHeight = itemHeight;\n\t\tthis.visibleItemsCount = 50; // +1 for buffer\n\t\tthis.startIndex = 0;\n\n\t\tthis.placeholderTop = document.createElement('div');\n\t\tthis.placeholderBottom = document.createElement('div');\n\t\tcontentContainer.prepend(this.placeholderTop);\n\t\tcontentContainer.append(this.placeholderBottom);\n\n\t\tthis.attachScrollListener();\n\t}\n\n\tscrollToTop(): void {\n\t\tthis.scrollContainer.scrollTop = 0;\n\t\tthis.startIndex = 0; // Reset startIndex to ensure items are updated correctly\n\t\tthis.updateVisibleItems(); // Update the visible items after scrolling to top\n\t}\n\n\tsetItems(newItems: CustomVirtualScroll['items']): void {\n\t\t// Adjust the type of newItems as needed\n\t\tthis.items = newItems;\n\t\tthis.scrollToTop();\n\t}\n\n\tprivate attachScrollListener(): void {\n\t\tthis.scrollContainer.addEventListener('scroll', () => {\n\t\t\tconst newIndex = Math.floor(this.scrollContainer.scrollTop / this.itemHeight);\n\t\t\tif (newIndex !== this.startIndex) {\n\t\t\t\tthis.startIndex = newIndex;\n\t\t\t\tthis.updateVisibleItems();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate updateVisibleItems(): void {\n\t\tconst endIndex = this.startIndex + this.visibleItemsCount;\n\t\tconst visibleItems = this.items.slice(this.startIndex, endIndex);\n\n\t\t// Reset content and adjust placeholders\n\t\tthis.contentContainer.innerHTML = '';\n\t\tthis.contentContainer.appendChild(this.placeholderTop);\n\t\tthis.placeholderTop.style.height = `${this.startIndex * this.itemHeight}px`;\n\t\tconst fragment = document.createDocumentFragment();\n\t\tvisibleItems.forEach(item => fragment.appendChild(item));\n\t\tthis.contentContainer.appendChild(fragment);\n\n\t\tthis.contentContainer.appendChild(this.placeholderBottom);\n\t\tconst remainingItems = this.items.length - endIndex;\n\t\tthis.placeholderBottom.style.height = `${remainingItems * this.itemHeight}px`;\n\t}\n}\n","import { ActionMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\nimport { bucket } from '../../utils.js';\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\nexport class MeleeMetricsTable extends MetricsTable<ActionMetrics> {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'melee-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: ActionMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t\tmetricType: metric.constructor?.name,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'DPS',\n\t\t\t\ttooltip: 'Damage / Encounter Duration',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.dps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.dps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Damage / Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCast,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCast.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Hit',\n\t\t\t\ttooltip: 'Damage / (Hits + Crits + Glances + Blocks)',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgHit,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgHit.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'TPS',\n\t\t\t\ttooltip: 'Threat / Encounter Duration',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.tps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.tps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Threat / Casts',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCastThreat,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCastThreat.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Hit',\n\t\t\t\ttooltip: 'Threat / (Hits + Crits + Glances + Blocks)',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgHitThreat,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgHitThreat.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Casts',\n\t\t\t\ttooltip: 'Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.casts,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.casts.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Hits',\n\t\t\t\ttooltip: 'Hits + Crits + Glances + Blocks',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.landedHits,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.landedHits.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Miss %',\n\t\t\t\ttooltip: 'Misses / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.missPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.missPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Dodge %',\n\t\t\t\ttooltip: 'Dodges / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.dodgePercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.dodgePercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Parry %',\n\t\t\t\ttooltip: 'Parries / Swings',\n\t\t\t\tcolumnClass: 'in-front-of-target',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.parryPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.parryPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Block %',\n\t\t\t\ttooltip: 'Blocks / Swings',\n\t\t\t\tcolumnClass: 'in-front-of-target',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.blockPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.blockPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Glance %',\n\t\t\t\ttooltip: 'Glances / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.glancePercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.glancePercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Crit %',\n\t\t\t\ttooltip: 'Crits / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.critPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.critPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t]);\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<ActionMetrics>> {\n\t\tconst players = resultData.result.getRaidIndexedPlayers(resultData.filter);\n\t\tif (players.length != 1) {\n\t\t\treturn [];\n\t\t}\n\t\tconst player = players[0];\n\n\t\tif (player.inFrontOfTarget) {\n\t\t\tthis.rootElem.classList.remove('hide-in-front-of-target');\n\t\t} else {\n\t\t\tthis.rootElem.classList.add('hide-in-front-of-target');\n\t\t}\n\n\t\tconst actions = player.getMeleeActions().map(action => action.forTarget(resultData.filter));\n\t\tconst actionGroups = ActionMetrics.groupById(actions);\n\n\t\tconst petsByName = bucket(player.pets, pet => pet.name);\n\t\tconst petGroups = Object.values(petsByName).map(pets =>\n\t\t\tActionMetrics.joinById(pets.map(pet => pet.getMeleeActions().map(action => action.forTarget(resultData.filter))).flat(), true),\n\t\t);\n\n\t\treturn actionGroups.concat(petGroups);\n\t}\n\n\tmergeMetrics(metrics: Array<ActionMetrics>): ActionMetrics {\n\t\treturn ActionMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n\n\tshouldCollapse(metric: ActionMetrics): boolean {\n\t\treturn !metric.unit?.isPet;\n\t}\n}\n","export const actionColors: Array<string> = [\n\t'#dd9933',\n\t'#67074e',\n\t'#5a175d',\n\t'#074e67',\n\t'#05878a',\n\t'#c9c1e7',\n\t'#bdd5ef',\n\t'#c7e3d0',\n\t'#e7e6ce',\n\t'#f2d8cc',\n\t'#e9ccce',\n];\n","import { Component } from '../../components/component.js';\nimport { SimResult, SimResultFilter, ActionMetrics } from '../../proto_utils/sim_result.js';\nimport { sum } from '../../utils.js';\n\nimport { actionColors } from './color_settings.js';\n\ndeclare var Chart: any;\n\nexport class SourceChart extends Component {\n\tconstructor(parentElem: HTMLElement, allActionMetrics: Array<ActionMetrics>) {\n\t\tconst chartCanvas = document.createElement(\"canvas\");\n\t\tsuper(parentElem, 'source-chart-root', chartCanvas);\n\n\t\tchartCanvas.style.height = '400px';\n\t\tchartCanvas.style.width = '600px';\n\t\tchartCanvas.height = 400;\n\t\tchartCanvas.width = 600;\n\n\t\tconst actionMetrics = allActionMetrics\n\t\t\t.filter(actionMetric => actionMetric.damage > 0)\n\t\t\t.sort((a, b) => b.damage - a.damage);\n\t\tconst names = actionMetrics.map(am => am.name);\n\t\tconst totalDmg = sum(actionMetrics.map(actionMetric => actionMetric.damage));\n\t\tconst vals = actionMetrics.map(actionMetric => actionMetric.damage / totalDmg);\n\t\tconst bgColors = actionColors.slice(0, actionMetrics.length);\n\n\t\tconst ctx = chartCanvas.getContext('2d');\n\t\tconst chart = new Chart(ctx, {\n\t\t\ttype: 'pie',\n\t\t\tdata: {\n\t\t\t\tlabels: names,\n\t\t\t\tdatasets: [{\n\t\t\t\t\tdata: vals,\n\t\t\t\t\tbackgroundColor: bgColors,\n\t\t\t\t}],\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tplugins: {\n\t\t\t\t\tlegend: {\n\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\tposition: 'right',\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n}\n","import tippy from 'tippy.js';\n\nimport { SimResult, SimResultFilter,UnitMetrics } from '../../proto_utils/sim_result.js';\nimport { maxIndex, sum } from '../../utils.js';\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\nimport { ResultsFilter } from './results_filter.js';\nimport { SourceChart } from './source_chart.js';\n\nexport class PlayerDamageMetricsTable extends MetricsTable<UnitMetrics> {\n\tprivate readonly resultsFilter: ResultsFilter;\n\n\t// Cached values from most recent result.\n\tprivate raidDps: number;\n\tprivate maxDps: number;\n\n\tconstructor(config: ResultComponentConfig, resultsFilter: ResultsFilter) {\n\t\tconfig.rootCssClass = 'player-damage-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.playerNameCellConfig(),\n\t\t\t{\n\t\t\t\tname: 'Amount',\n\t\t\t\ttooltip: 'Player Damage / Raid Damage',\n\t\t\t\theaderCellClass: 'amount-header-cell',\n\t\t\t\tfillCell: (player: UnitMetrics, cellElem: HTMLElement, rowElem: HTMLElement) => {\n\t\t\t\t\tcellElem.classList.add('amount-cell');\n\n\t\t\t\t\tlet chart: HTMLElement | null = null;\n\t\t\t\t\tconst makeChart = () => {\n\t\t\t\t\t\tconst chartContainer = document.createElement('div');\n\t\t\t\t\t\trowElem.appendChild(chartContainer);\n\t\t\t\t\t\tconst sourceChart = new SourceChart(chartContainer, player.actions);\n\t\t\t\t\t\treturn chartContainer;\n\t\t\t\t\t};\n\n\t\t\t\t\ttippy(rowElem, {\n\t\t\t\t\t\tcontent: 'Loading...',\n\t\t\t\t\t\tplacement: 'bottom',\n\t\t\t\t\t\tignoreAttributes: true,\n\t\t\t\t\t\tonShow(instance: any) {\n\t\t\t\t\t\t\tif (!chart) {\n\t\t\t\t\t\t\t\tchart = makeChart();\n\t\t\t\t\t\t\t\tinstance.setContent(chart);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\n\t\t\t\t\tconst playerDps = this.getPlayerDps(player)\n\t\t\t\t\tcellElem.innerHTML = `\n\t\t\t\t\t\t<div class=\"player-damage-percent\">\n\t\t\t\t\t\t\t<span>${(playerDps / this.raidDps * 100).toFixed(2)}%</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"player-damage-bar-container\">\n\t\t\t\t\t\t\t<div class=\"player-damage-bar bg-${player.classColor}\" style=\"width:${playerDps / this.maxDps * 100}%\"></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"player-damage-total\">\n\t\t\t\t\t\t\t<span>${(playerDps * this.getLastSimResult().result.duration / 1000).toFixed(1)}k</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t`;\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'DPS',\n\t\t\t\ttooltip: 'Damage / Encounter Duration',\n\t\t\t\tcolumnClass: 'dps-cell',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (player: UnitMetrics) => this.getPlayerDps(player),\n\t\t\t\tgetDisplayString: (player: UnitMetrics) => this.getPlayerDps(player).toFixed(1),\n\t\t\t},\n\t\t]);\n\t\tthis.resultsFilter = resultsFilter;\n\t\tthis.raidDps = 0;\n\t\tthis.maxDps = 0;\n\t}\n\n\tprivate getPlayerDps(player:UnitMetrics): number {\n\t\tconst playerActions = player.getPlayerAndPetActions().map(action => action.forTarget(this.resultsFilter.getFilter())).flat();\n\t\tconst playerDps = sum(playerActions.map(action => action.dps))\n\t\treturn playerDps\n\t}\n\n\tcustomizeRowElem(player: UnitMetrics, rowElem: HTMLElement) {\n\t\trowElem.classList.add('player-damage-row');\n\t\trowElem.addEventListener('click', event => {\n\t\t\tthis.resultsFilter.setPlayer(this.getLastSimResult().eventID, player.index);\n\t\t});\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<UnitMetrics>> {\n\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\n\t\tconst targetActions = players.map(player => player.getPlayerAndPetActions().map(action => action.forTarget(resultData.filter))).flat();\n\n\t\tthis.raidDps = sum(targetActions.map(action => action.dps));\n\t\tconst maxDpsIndex = maxIndex(players.map(player => {\n\t\t\tconst targetActions = player.getPlayerAndPetActions().map(action => action.forTarget(resultData.filter)).flat();\n\t\t\treturn sum(targetActions.map(action => action.dps));\n\t\t}))!;\n\n\t\tconst maxDpsTargetActions = players[maxDpsIndex].getPlayerAndPetActions().map(action => action.forTarget(resultData.filter)).flat();\n\t\tthis.maxDps = sum(maxDpsTargetActions.map(action => action.dps));\n\n\t\treturn players.map(player => [player]);\n\t}\n}\n","import tippy from 'tippy.js';\n\nimport { SimResult, SimResultFilter,UnitMetrics } from '../../proto_utils/sim_result.js';\nimport { maxIndex, sum } from '../../utils.js';\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\nimport { ResultsFilter } from './results_filter.js';\nimport { SourceChart } from './source_chart.js';\n\nexport class PlayerDamageTakenMetricsTable extends MetricsTable<UnitMetrics> {\n\tprivate readonly resultsFilter: ResultsFilter;\n\n\t// Cached values from most recent result.\n\tprivate resultData: SimResultData | undefined;\n\tprivate raidDtps: number;\n\tprivate maxDtps: number;\n\n\tconstructor(config: ResultComponentConfig, resultsFilter: ResultsFilter) {\n\t\tconfig.rootCssClass = 'player-damage-taken-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.playerNameCellConfig(),\n\t\t\t{\n\t\t\t\tname: 'Amount',\n\t\t\t\ttooltip: 'Player Damage Taken / Raid Damage Taken',\n\t\t\t\theaderCellClass: 'amount-header-cell',\n\t\t\t\tfillCell: (player: UnitMetrics, cellElem: HTMLElement, rowElem: HTMLElement) => {\n\t\t\t\t\tcellElem.classList.add('amount-cell');\n\n\t\t\t\t\tlet chart: HTMLElement | null = null;\n\t\t\t\t\tconst makeChart = () => {\n\t\t\t\t\t\tconst chartContainer = document.createElement('div');\n\t\t\t\t\t\trowElem.appendChild(chartContainer);\n\t\t\t\t\t\tif (this.resultData) {\n\t\t\t\t\t\t\tconst targets = this.resultData.result.getTargets(this.resultData.filter);\n\t\t\t\t\t\t\tconst playerFilter = {\n\t\t\t\t\t\t\t\tplayer: player.unitIndex,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst targetActions = targets.map(target => target.getMeleeActions().concat(target.getSpellActions()).map(action => action.forTarget(playerFilter))).flat();\n\t\t\t\t\t\t\tconst sourceChart = new SourceChart(chartContainer, targetActions);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn chartContainer;\n\t\t\t\t\t};\n\n\t\t\t\t\ttippy(rowElem, {\n\t\t\t\t\t\tcontent: 'Loading...',\n\t\t\t\t\t\tplacement: 'bottom',\n\t\t\t\t\t\tignoreAttributes: true,\n\t\t\t\t\t\tonShow(instance: any) {\n\t\t\t\t\t\t\tif (!chart) {\n\t\t\t\t\t\t\t\tchart = makeChart();\n\t\t\t\t\t\t\t\tinstance.setContent(chart);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\n\t\t\t\t\tconst playerDtps = this.getPlayerDtps(player)\n\t\t\t\t\tcellElem.innerHTML = `\n\t\t\t\t\t\t<div class=\"player-damage-percent\">\n\t\t\t\t\t\t\t<span>${(playerDtps / this.raidDtps * 100).toFixed(2)}%</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"player-damage-bar-container\">\n\t\t\t\t\t\t\t<div class=\"player-damage-bar bg-${player.classColor}\" style=\"width:${playerDtps / this.maxDtps * 100}%\"></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"player-damage-total\">\n\t\t\t\t\t\t\t<span>${(playerDtps * this.resultData!.result.duration / 1000).toFixed(1)}k</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t`;\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'DTPS',\n\t\t\t\ttooltip: 'Damage Taken / Encounter Duration',\n\t\t\t\tcolumnClass: 'dps-cell',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (player: UnitMetrics) => this.getPlayerDtps(player),\n\t\t\t\tgetDisplayString: (player: UnitMetrics) => this.getPlayerDtps(player).toFixed(1),\n\t\t\t},\n\t\t]);\n\t\tthis.resultsFilter = resultsFilter;\n\t\tthis.raidDtps = 0;\n\t\tthis.maxDtps = 0;\n\t}\n\n\tprivate getPlayerDtps(player: UnitMetrics): number {\n\t\tconst targets = this.resultData!.result.getTargets(this.resultData!.filter);\n\t\tconst targetActions = targets.map(target => target.getPlayerAndPetActions().map(action => action.forTarget({ player: player.unitIndex }))).flat();\n\t\tconst playerDtps = sum(targetActions.map(action => action.dps))\n\t\treturn playerDtps\n\t}\n\n\tcustomizeRowElem(player: UnitMetrics, rowElem: HTMLElement) {\n\t\trowElem.classList.add('player-damage-row');\n\t\trowElem.addEventListener('click', event => {\n\t\t\tthis.resultsFilter.setPlayer(this.getLastSimResult().eventID, player.index);\n\t\t});\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<UnitMetrics>> {\n\t\tthis.resultData = resultData;\n\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\n\t\tconst targets = resultData.result.getTargets(resultData.filter);\n\t\tconst targetActions = targets.map(target => target.getPlayerAndPetActions().map(action => action.forTarget(resultData.filter))).flat();\n\n\t\tthis.raidDtps = sum(targetActions.map(action => action.dps));\n\t\tconst maxDpsIndex = maxIndex(players.map(player => {\n\t\t\tconst targetActions = targets.map(target => target.getPlayerAndPetActions().map(action => action.forTarget({ player: player.unitIndex }))).flat();\n\t\t\treturn sum(targetActions.map(action => action.dps))\n\t\t}))!;\n\n\t\tconst maxDtpsTargetActions = targets.map(target => target.getPlayerAndPetActions().map(action => action.forTarget({ player: players[maxDpsIndex].unitIndex }))).flat();\n\t\tthis.maxDtps = sum(maxDtpsTargetActions.map(action => action.dps));\n\n\t\treturn players.map(player => [player]);\n\t}\n}\n","import { ResourceType } from '../../proto/api.js';\nimport { resourceNames } from '../../proto_utils/names.js';\nimport { ResourceMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\nimport { orderedResourceTypes } from '../../proto_utils/utils.js';\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\nexport class ResourceMetricsTable extends ResultComponent {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'resource-metrics-root';\n\t\tsuper(config);\n\n\t\torderedResourceTypes.forEach(resourceType => {\n\t\t\tconst containerElem = document.createElement('div');\n\t\t\tcontainerElem.classList.add('resource-metrics-table-container', 'hide');\n\t\t\tcontainerElem.innerHTML = `<span class=\"resource-metrics-table-title\">${resourceNames.get(resourceType)}</span>`;\n\t\t\tthis.rootElem.appendChild(containerElem);\n\n\t\t\tconst childConfig = config;\n\t\t\tchildConfig.parent = containerElem;\n\t\t\tconst table = new TypedResourceMetricsTable(childConfig, resourceType);\n\t\t\ttable.onUpdate.on(() => {\n\t\t\t\tif (table.rootElem.classList.contains('hide')) {\n\t\t\t\t\tcontainerElem.classList.add('hide');\n\t\t\t\t} else {\n\t\t\t\t\tcontainerElem.classList.remove('hide');\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tonSimResult(resultData: SimResultData) {}\n}\n\nexport class TypedResourceMetricsTable extends MetricsTable<ResourceMetrics> {\n\treadonly resourceType: ResourceType;\n\n\tconstructor(config: ResultComponentConfig, resourceType: ResourceType) {\n\t\tconfig.rootCssClass = 'resource-metrics-table-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: ResourceMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t\tmetricType: metric.constructor?.name,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'Casts',\n\t\t\t\ttooltip: 'Casts',\n\t\t\t\tgetValue: (metric: ResourceMetrics) => metric.events,\n\t\t\t\tgetDisplayString: (metric: ResourceMetrics) => metric.events.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Gain',\n\t\t\t\ttooltip: 'Gain',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: ResourceMetrics) => metric.gain,\n\t\t\t\tgetDisplayString: (metric: ResourceMetrics) => metric.gain.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Gain / s',\n\t\t\t\ttooltip: 'Gain / Second',\n\t\t\t\tgetValue: (metric: ResourceMetrics) => metric.gainPerSecond,\n\t\t\t\tgetDisplayString: (metric: ResourceMetrics) => metric.gainPerSecond.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Gain',\n\t\t\t\ttooltip: 'Gain / Event',\n\t\t\t\tgetValue: (metric: ResourceMetrics) => metric.avgGain,\n\t\t\t\tgetDisplayString: (metric: ResourceMetrics) => metric.avgGain.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Wasted Gain',\n\t\t\t\ttooltip: 'Gain that was wasted because of resource cap.',\n\t\t\t\tgetValue: (metric: ResourceMetrics) => metric.wastedGain,\n\t\t\t\tgetDisplayString: (metric: ResourceMetrics) => metric.wastedGain.toFixed(1),\n\t\t\t},\n\t\t]);\n\t\tthis.resourceType = resourceType;\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<ResourceMetrics>> {\n\t\tconst players = resultData.result.getRaidIndexedPlayers(resultData.filter);\n\t\tif (players.length != 1) {\n\t\t\treturn [];\n\t\t}\n\t\tconst player = players[0];\n\n\t\tconst resources = player.getResourceMetrics(this.resourceType);\n\t\tconst resourceGroups = ResourceMetrics.groupById(resources);\n\t\treturn resourceGroups;\n\t}\n\n\tmergeMetrics(metrics: Array<ResourceMetrics>): ResourceMetrics {\n\t\treturn ResourceMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n}\n","import tippy from 'tippy.js';\n\nimport { TypedEvent } from '../typed_event.js';\nimport { Input, InputConfig } from './input.js';\n\nexport interface DropdownValueConfig<V> {\n\tvalue: V;\n\tsubmenu?: Array<string | V>;\n\theaderText?: string;\n\ttooltip?: string;\n\textraCssClasses?: Array<string>;\n}\n\nexport interface DropdownPickerConfig<ModObject, T, V = T> extends InputConfig<ModObject, T, V> {\n\tvalues: Array<DropdownValueConfig<V>>;\n\tequals: (a: V | undefined, b: V | undefined) => boolean;\n\tsetOptionContent: (button: HTMLButtonElement, valueConfig: DropdownValueConfig<V>, isSelectButton: boolean) => void;\n\tcreateMissingValue?: (val: V) => Promise<DropdownValueConfig<V>>;\n\tdefaultLabel: string;\n}\n\ninterface DropdownSubmenu<V> {\n\tpath: Array<string | V>;\n\n\tlistElem: HTMLUListElement;\n}\n\n/** UI Input that uses a dropdown menu. */\nexport class DropdownPicker<ModObject, T, V = T> extends Input<ModObject, T, V> {\n\tprivate readonly config: DropdownPickerConfig<ModObject, T, V>;\n\tprivate valueConfigs: Array<DropdownValueConfig<V>>;\n\n\tprivate readonly buttonElem: HTMLButtonElement;\n\tprivate readonly listElem: HTMLUListElement;\n\n\tprivate currentSelection: DropdownValueConfig<V> | null;\n\tprivate submenus: Array<DropdownSubmenu<V>>;\n\n\tconstructor(parent: HTMLElement, modObject: ModObject, config: DropdownPickerConfig<ModObject, T, V>) {\n\t\tsuper(parent, 'dropdown-picker-root', modObject, config);\n\t\tthis.config = config;\n\t\tthis.valueConfigs = this.config.values.filter(vc => !vc.headerText);\n\t\tthis.currentSelection = null;\n\t\tthis.submenus = [];\n\n\t\tthis.rootElem.classList.add('dropdown');\n\n\t\tthis.buttonElem = document.createElement('button');\n\t\tthis.buttonElem.classList.add('dropdown-picker-button', 'btn', 'dropdown-toggle', 'open-on-click');\n\t\tthis.buttonElem.setAttribute('data-bs-toggle', 'dropdown');\n\t\tthis.buttonElem.setAttribute('aria-expanded', 'false');\n\t\tthis.buttonElem.setAttribute('role', 'button');\n\t\tthis.buttonElem.textContent = config.defaultLabel;\n\t\tthis.rootElem.appendChild(this.buttonElem);\n\n\t\tthis.listElem = document.createElement('ul');\n\t\tthis.listElem.classList.add('dropdown-picker-list', 'dropdown-menu');\n\t\tthis.rootElem.appendChild(this.listElem);\n\n\t\tthis.buildDropdown(this.valueConfigs);\n\t\tthis.init();\n\t}\n\n\tsetOptions(newValueConfigs: Array<DropdownValueConfig<V>>) {\n\t\tthis.buildDropdown(newValueConfigs);\n\t\tthis.valueConfigs = newValueConfigs.filter(vc => !vc.headerText);\n\t\tthis.setInputValue(this.getSourceValue());\n\t}\n\n\tprivate buildDropdown(valueConfigs: Array<DropdownValueConfig<V>>) {\n\t\tthis.listElem.innerHTML = '';\n\t\tthis.submenus = [];\n\t\tvalueConfigs.forEach(valueConfig => {\n\t\t\tconst itemElem = document.createElement('li');\n\t\t\tconst containsSubmenuChildren = valueConfigs.some(vc => vc.submenu?.some(e => !(typeof e == 'string') && this.config.equals(e, valueConfig.value)));\n\t\t\tif (valueConfig.extraCssClasses) {\n\t\t\t\titemElem.classList.add(...valueConfig.extraCssClasses);\n\t\t\t}\n\t\t\tif (valueConfig.headerText) {\n\t\t\t\titemElem.classList.add('dropdown-picker-header');\n\n\t\t\t\tconst headerElem = document.createElement('h6');\n\t\t\t\theaderElem.classList.add('dropdown-header');\n\t\t\t\theaderElem.textContent = valueConfig.headerText;\n\t\t\t\titemElem.appendChild(headerElem);\n\t\t\t} else {\n\t\t\t\titemElem.classList.add('dropdown-picker-item');\n\n\t\t\t\tconst buttonElem = document.createElement('button');\n\t\t\t\tbuttonElem.classList.add('dropdown-item');\n\t\t\t\tbuttonElem.type = 'button';\n\t\t\t\tthis.config.setOptionContent(buttonElem, valueConfig, false);\n\n\t\t\t\tif (valueConfig.tooltip) {\n\t\t\t\t\ttippy(buttonElem, {\n\t\t\t\t\t\t// animation: false,\n\t\t\t\t\t\t// placement: 'right',\n\t\t\t\t\t\t// fallbackPlacements: ['left', 'bottom'],\n\t\t\t\t\t\t// offset: [0, 10],\n\t\t\t\t\t\ttheme: 'dropdown-tooltip',\n\t\t\t\t\t\tcontent: valueConfig.tooltip,\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tbuttonElem.addEventListener('click', () => {\n\t\t\t\t\tthis.updateValue(valueConfig);\n\t\t\t\t\tthis.inputChanged(TypedEvent.nextEventID());\n\t\t\t\t});\n\n\t\t\t\tif (containsSubmenuChildren) {\n\t\t\t\t\tthis.createSubmenu((valueConfig.submenu || []).concat([valueConfig.value]), buttonElem, itemElem);\n\t\t\t\t} else {\n\t\t\t\t\titemElem.appendChild(buttonElem);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!containsSubmenuChildren) {\n\t\t\t\tif (valueConfig.submenu && valueConfig.submenu.length > 0) {\n\t\t\t\t\tthis.createSubmenu(valueConfig.submenu);\n\t\t\t\t}\n\t\t\t\tconst submenu = this.getSubmenu(valueConfig.submenu);\n\t\t\t\tif (submenu) {\n\t\t\t\t\tsubmenu.listElem.appendChild(itemElem);\n\t\t\t\t} else {\n\t\t\t\t\tthis.listElem.appendChild(itemElem);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getSubmenu(path: Array<string | V> | undefined): DropdownSubmenu<V> | null {\n\t\tif (!path) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.submenus.find(submenu => this.equalPaths(submenu.path, path)) || null;\n\t}\n\n\tprivate createSubmenu(path: Array<string | V>, buttonElem?: HTMLButtonElement, itemElem?: HTMLLIElement): DropdownSubmenu<V> {\n\t\tconst submenu = this.getSubmenu(path);\n\t\tif (submenu) {\n\t\t\treturn submenu;\n\t\t}\n\n\t\tlet parent: DropdownSubmenu<V> | null = null;\n\t\tif (path.length > 1) {\n\t\t\tparent = this.createSubmenu(path.slice(0, path.length - 1));\n\t\t}\n\n\t\tif (!itemElem) {\n\t\t\titemElem = document.createElement('li');\n\t\t}\n\t\titemElem.classList.add('dropdown-picker-item');\n\n\t\tconst containerElem = document.createElement('div');\n\t\tcontainerElem.classList.add('dropend');\n\t\titemElem.appendChild(containerElem);\n\n\t\tif (!buttonElem) {\n\t\t\tbuttonElem = document.createElement('button');\n\t\t}\n\t\tbuttonElem.classList.add('dropdown-item');\n\t\tbuttonElem.setAttribute('data-bs-toggle', 'dropdown');\n\t\tbuttonElem.setAttribute('role', 'button');\n\t\tbuttonElem.setAttribute('aria-expanded', 'false');\n\t\tif (buttonElem.childNodes.length == 0) {\n\t\t\tbuttonElem.textContent = path[path.length - 1] + ' \\u00bb';\n\t\t}\n\t\tcontainerElem.appendChild(buttonElem);\n\n\t\tconst listElem = document.createElement('ul');\n\t\tlistElem.classList.add('dropdown-submenu', 'dropdown-menu');\n\t\tcontainerElem.appendChild(listElem);\n\n\t\tif (parent) {\n\t\t\tparent.listElem.appendChild(itemElem);\n\t\t} else {\n\t\t\tthis.listElem.appendChild(itemElem);\n\t\t}\n\n\t\tconst newSubmenu = {\n\t\t\tpath: path,\n\t\t\tlistElem: listElem,\n\t\t};\n\t\tthis.submenus.push(newSubmenu);\n\t\treturn newSubmenu;\n\t}\n\n\tprivate equalPaths(a: Array<string | V> | null | undefined, b: Array<string | V> | null | undefined): boolean {\n\t\treturn (\n\t\t\t(a?.length || 0) == (b?.length || 0) &&\n\t\t\t(a || []).every((aVal, i) => (typeof aVal == 'string' ? aVal == (b![i] as string) : this.config.equals(aVal, b![i] as V)))\n\t\t);\n\t}\n\n\tgetInputElem(): HTMLElement {\n\t\treturn this.listElem;\n\t}\n\n\tgetInputValue(): T {\n\t\treturn this.valueToSource(this.currentSelection?.value as V);\n\t}\n\n\tsetInputValue(newSrcValue: T) {\n\t\tconst newValue = this.sourceToValue(newSrcValue);\n\t\tconst newSelection = this.valueConfigs.find(v => this.config.equals(v.value, newValue))!;\n\t\tif (newSelection) {\n\t\t\tthis.updateValue(newSelection);\n\t\t} else if (newValue == null) {\n\t\t\tthis.updateValue(null);\n\t\t} else if (this.config.createMissingValue) {\n\t\t\tthis.config.createMissingValue(newValue).then(newSelection => this.updateValue(newSelection));\n\t\t} else {\n\t\t\tthis.updateValue(null);\n\t\t}\n\t}\n\n\tprivate updateValue(newValue: DropdownValueConfig<V> | null) {\n\t\tthis.currentSelection = newValue;\n\n\t\t// Update button\n\t\tif (newValue) {\n\t\t\tthis.buttonElem.innerHTML = '';\n\t\t\tthis.config.setOptionContent(this.buttonElem, newValue, true);\n\t\t} else {\n\t\t\tthis.buttonElem.textContent = this.config.defaultLabel;\n\t\t}\n\t}\n}\n\nexport interface TextDropdownValueConfig<T> extends DropdownValueConfig<T> {\n\tlabel: string;\n}\n\nexport interface TextDropdownPickerConfig<ModObject, T> extends Omit<DropdownPickerConfig<ModObject, T>, 'values' | 'setOptionContent'> {\n\tvalues: Array<TextDropdownValueConfig<T>>;\n}\n\nexport class TextDropdownPicker<ModObject, T> extends DropdownPicker<ModObject, T> {\n\tconstructor(parent: HTMLElement, modObject: ModObject, config: TextDropdownPickerConfig<ModObject, T>) {\n\t\tsuper(parent, modObject, {\n\t\t\t...config,\n\t\t\tsetOptionContent: (button: HTMLButtonElement, valueConfig: DropdownValueConfig<T>) => {\n\t\t\t\tbutton.textContent = (valueConfig as TextDropdownValueConfig<T>).label;\n\t\t\t},\n\t\t});\n\t}\n}\n","import { UnitReference } from '../proto/common.js';\nimport { ActionId } from '../proto_utils/action_id.js';\nimport { DropdownPicker, DropdownPickerConfig, DropdownValueConfig } from './dropdown_picker.js';\n\nexport interface UnitValue {\n    value: UnitReference|undefined,\n\ttext?: string,\n\ticonUrl?: string|ActionId,\n\tcolor?: string,\n}\n\nexport interface UnitValueConfig extends DropdownValueConfig<UnitValue> {}\nexport interface UnitPickerConfig<ModObject> extends Omit<DropdownPickerConfig<ModObject, UnitReference|undefined, UnitValue>, 'equals' | 'setOptionContent' | 'defaultLabel'> {\n    hideLabelWhenDefaultSelected?: boolean,\n}\n\nexport class UnitPicker<ModObject> extends DropdownPicker<ModObject, UnitReference|undefined, UnitValue> {\n\tconstructor(parent: HTMLElement, modObject: ModObject, config: UnitPickerConfig<ModObject>) {\n\t\tsuper(parent, modObject, {\n\t\t\t...config,\n\t\t\tequals: (a, b) => UnitReference.equals(a?.value || UnitReference.create(), b?.value || UnitReference.create()),\n            defaultLabel: 'Unit',\n\t\t\tsetOptionContent: (button: HTMLButtonElement, valueConfig: DropdownValueConfig<UnitValue>, isSelectButton: boolean) => {\n                const unitConfig = valueConfig.value;\n\n                button.className = button.className.replace(/text-[\\w]*/, '')\n                if (unitConfig.color) {\n                    button.classList.add(`text-${unitConfig.color}`);\n                }\n\n                if (unitConfig.iconUrl) {\n                    let icon = null;\n                    if (unitConfig.iconUrl instanceof ActionId) {\n                        const img = document.createElement('img');\n                        img.classList.add('unit-picker-item-icon');\n                        unitConfig.iconUrl.fill().then(filledId => {\n                            img.src = filledId.iconUrl;\n                        });\n                        icon = img;\n                    } else if (unitConfig.iconUrl.startsWith('fa-')) {\n                        const img = document.createElement('i');\n                        img.classList.add('fa', unitConfig.iconUrl, 'unit-picker-item-icon');\n                        icon = img;\n                    } else {\n                        const img = document.createElement('img');\n                        img.classList.add('unit-picker-item-icon');\n                        img.src = unitConfig.iconUrl;\n                        icon = img;\n                    }\n                    button.appendChild(icon);\n                }\n\n                const hideLabel = config.hideLabelWhenDefaultSelected && isSelectButton && !unitConfig.value;\n                if (unitConfig.text && !hideLabel) {\n                    button.insertAdjacentText('beforeend', unitConfig.text);\n                }\n\t\t\t}\n\t\t});\n        this.rootElem.classList.add('unit-picker-root');\n\t}\n}\n","import { UnitPicker, UnitValue,UnitValueConfig } from '../../components/unit_picker.js';\nimport { UnitReference, UnitReference_Type as UnitType } from '../../proto/common.js';\nimport { SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\nimport { EventID, TypedEvent } from '../../typed_event.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\nconst ALL_UNITS = -1;\n\ninterface FilterData {\n\tplayer: number,\n\ttarget: number,\n};\n\nexport class ResultsFilter extends ResultComponent {\n\tprivate readonly currentFilter: FilterData;\n\n\treadonly changeEmitter: TypedEvent<void>;\n\n\tprivate readonly playerFilter: UnitPicker<FilterData>;\n\tprivate readonly targetFilter: UnitPicker<FilterData>;\n\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'results-filter-root';\n\t\tsuper(config);\n\t\tthis.currentFilter = {\n\t\t\tplayer: ALL_UNITS,\n\t\t\ttarget: ALL_UNITS,\n\t\t};\n\t\tthis.changeEmitter = new TypedEvent<void>();\n\n\t\tthis.playerFilter = new UnitPicker(this.rootElem, this.currentFilter, {\n\t\t\textraCssClasses: [\n\t\t\t\t'player-filter-root',\n\t\t\t\t'd-none',\n\t\t\t],\n\t\t\tchangedEvent: (_filterData: FilterData) => this.changeEmitter,\n\t\t\tsourceToValue: (src: UnitReference|undefined) => this.refToValue(src),\n\t\t\tvalueToSource: (val: UnitValue) => val.value,\n\t\t\tgetValue: (filterData: FilterData) => this.numToRef(filterData.player, true),\n\t\t\tsetValue: (eventID: EventID, filterData: FilterData, newValue: UnitReference|undefined) => this.setPlayer(eventID, this.refToNum(newValue)),\n\t\t\tvalues: [],\n\t\t});\n\n\t\tthis.targetFilter = new UnitPicker(this.rootElem, this.currentFilter, {\n\t\t\textraCssClasses: [\n\t\t\t\t'target-filter-root',\n\t\t\t\t'd-none',\n\t\t\t],\n\t\t\tchangedEvent: (_filterData: FilterData) => this.changeEmitter,\n\t\t\tsourceToValue: (src: UnitReference|undefined) => this.refToValue(src),\n\t\t\tvalueToSource: (val: UnitValue) => val.value,\n\t\t\tgetValue: (filterData: FilterData) => this.numToRef(filterData.target, false),\n\t\t\tsetValue: (eventID: EventID, filterData: FilterData, newValue: UnitReference|undefined) => this.setTarget(eventID, this.refToNum(newValue)),\n\t\t\tvalues: [],\n\t\t});\n\t}\n\n\tgetFilter(): SimResultFilter {\n\t\treturn {\n\t\t\tplayer: this.currentFilter.player == ALL_UNITS ? null : this.currentFilter.player,\n\t\t\ttarget: this.currentFilter.target == ALL_UNITS ? null : this.currentFilter.target,\n\t\t};\n\t}\n\n\tonSimResult(resultData: SimResultData) {\n\t\tthis.playerFilter.setOptions(this.getUnitOptions(resultData.eventID, resultData.result, true));\n\t\tthis.targetFilter.setOptions(this.getUnitOptions(resultData.eventID, resultData.result, false));\n\t\tthis.playerFilter.rootElem.classList.remove('d-none');\n\t\tthis.targetFilter.rootElem.classList.remove('d-none');\n\t}\n\n\tsetPlayer(eventID: EventID, newPlayer: number | null) {\n\t\tthis.currentFilter.player = (newPlayer === null) ? ALL_UNITS : newPlayer;\n\t\tthis.changeEmitter.emit(eventID);\n\t}\n\n\tsetTarget(eventID: EventID, newTarget: number | null) {\n\t\tthis.currentFilter.target = (newTarget === null) ? ALL_UNITS : newTarget;\n\t\tthis.changeEmitter.emit(eventID);\n\t}\n\n\tprivate refToValue(ref: UnitReference|undefined): UnitValue {\n\t\tif (!ref || ref.type == UnitType.Unknown) {\n\t\t\treturn {\n\t\t\t\tvalue: ref,\n\t\t\t};\n\t\t} else if (ref.type == UnitType.AllPlayers) {\n\t\t\treturn {\n\t\t\t\ticonUrl: '',\n\t\t\t\ttext: 'All Players',\n\t\t\t\tvalue: ref,\n\t\t\t};\n\t\t} else if (ref.type == UnitType.AllTargets) {\n\t\t\treturn {\n\t\t\t\ticonUrl: '',\n\t\t\t\ttext: 'All Targets',\n\t\t\t\tvalue: ref,\n\t\t\t};\n\t\t} else if (this.hasLastSimResult()) {\n\t\t\tconst simResult = this.getLastSimResult();\n\t\t\tconst unit = ref.type == UnitType.Player\n\t\t\t\t? simResult.result.getPlayerWithRaidIndex(ref.index)\n\t\t\t\t: ref.type == UnitType.Target\n\t\t\t\t\t? simResult.result.getTargetWithEncounterIndex(ref.index)\n\t\t\t\t\t: null;\n\n\t\t\tif (unit) {\n\t\t\t\treturn {\n\t\t\t\t\ticonUrl: unit.iconUrl || '',\n\t\t\t\t\ttext: unit.label,\n\t\t\t\t\tcolor: unit.classColor || '',\n\t\t\t\t\tvalue: ref,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tvalue: ref,\n\t\t};\n\t}\n\n\tprivate refToNum(ref: UnitReference|undefined): number {\n\t\treturn (!ref || ref.type == UnitType.AllPlayers || ref.type == UnitType.AllTargets) ? ALL_UNITS : ref.index;\n\t}\n\n\tprivate numToRef(idx: number, isPlayer: boolean): UnitReference {\n\t\tif (isPlayer) {\n\t\t\treturn idx == ALL_UNITS\n\t\t\t\t? UnitReference.create({type: UnitType.AllPlayers})\n\t\t\t\t: UnitReference.create({type: UnitType.Player, index: idx});\n\t\t} else {\n\t\t\treturn idx == ALL_UNITS\n\t\t\t\t? UnitReference.create({type: UnitType.AllTargets})\n\t\t\t\t: UnitReference.create({type: UnitType.Target, index: idx});\n\t\t}\n\t}\n\n\tprivate getUnitOptions(eventID: EventID, simResult: SimResult, isPlayer: boolean): Array<UnitValueConfig> {\n\t\tconst allUnitsOption = UnitReference.create({type: isPlayer ? UnitType.AllPlayers : UnitType.AllTargets});\n\n\t\tconst unitOptions = (isPlayer ? simResult.getPlayers() : simResult.getTargets())\n\t\t\t.map(unit => UnitReference.create({type: isPlayer ? UnitType.Player : UnitType.Target, index: unit.index}));\n\n\t\tconst options = [allUnitsOption].concat(unitOptions);\n\n\t\tconst curRef = this.numToRef(isPlayer ? this.currentFilter.player : this.currentFilter.target, isPlayer);\n\t\tconst hasSameOption = options.find(option => UnitReference.equals(option, curRef)) != null;\n\t\tif (!hasSameOption) {\n\t\t\tif (isPlayer) {\n\t\t\t\tthis.currentFilter.player = ALL_UNITS;\n\t\t\t} else {\n\t\t\t\tthis.currentFilter.target = ALL_UNITS;\n\t\t\t}\n\t\t\tthis.changeEmitter.emit(eventID);\n\t\t}\n\n\t\treturn options.map(o => {\n\t\t\treturn {\n\t\t\t\tvalue: this.refToValue(o),\n\t\t\t};\n\t\t});\n\t}\n}\n","import { ActionMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\nimport { bucket } from '../../utils.js';\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\nexport class SpellMetricsTable extends MetricsTable<ActionMetrics> {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'spell-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: ActionMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t\tmetricType: metric.constructor?.name,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'DPS',\n\t\t\t\ttooltip: 'Damage / Encounter Duration',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.dps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.dps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Damage / Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCast,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCast.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Hit',\n\t\t\t\ttooltip: 'Damage / Hits',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgHit,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgHit.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'TPS',\n\t\t\t\ttooltip: 'Threat / Encounter Duration',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.tps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.tps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Threat / Casts',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCastThreat,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCastThreat.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Hit',\n\t\t\t\ttooltip: 'Threat / Hits',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgHitThreat,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgHitThreat.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Casts',\n\t\t\t\ttooltip: 'Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.casts,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.casts.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Hits',\n\t\t\t\ttooltip: 'Hits',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.landedHits,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.landedHits.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Miss %',\n\t\t\t\ttooltip: 'Misses / Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.missPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.missPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Crit %',\n\t\t\t\ttooltip: 'Crits / Hits',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.critPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.critPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t]);\n\t}\n\n\tcustomizeRowElem(action: ActionMetrics, rowElem: HTMLElement) {\n\t\tif (action.hitAttempts == 0 && action.dps == 0) {\n\t\t\trowElem.classList.add('threat-metrics');\n\t\t}\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<ActionMetrics>> {\n\t\tconst players = resultData.result.getRaidIndexedPlayers(resultData.filter);\n\t\tif (players.length != 1) {\n\t\t\treturn [];\n\t\t}\n\t\tconst player = players[0];\n\n\t\tconst actions = player.getSpellActions().map(action => action.forTarget(resultData.filter));\n\t\tconst actionGroups = ActionMetrics.groupById(actions);\n\n\t\tconst petsByName = bucket(player.pets, pet => pet.name);\n\t\tconst petGroups = Object.values(petsByName).map(pets =>\n\t\t\tActionMetrics.joinById(pets.map(pet => pet.getSpellActions().map(action => action.forTarget(resultData.filter))).flat(), true),\n\t\t);\n\n\t\treturn actionGroups.concat(petGroups);\n\t}\n\n\tmergeMetrics(metrics: Array<ActionMetrics>): ActionMetrics {\n\t\treturn ActionMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n\n\tshouldCollapse(metric: ActionMetrics): boolean {\n\t\treturn !metric.unit?.isPet;\n\t}\n}\n","import tippy from 'tippy.js';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { element, fragment, ref } from 'tsx-vanilla';\n\nimport { ResourceType } from '../../proto/api.js';\nimport { OtherAction } from '../../proto/common.js';\nimport { ActionId, buffAuraToSpellIdMap, resourceTypeToIcon } from '../../proto_utils/action_id.js';\nimport { AuraUptimeLog, CastLog, DpsLog, ResourceChangedLogGroup, SimLog, ThreatLogGroup } from '../../proto_utils/logs_parser.js';\nimport { resourceNames } from '../../proto_utils/names.js';\nimport { UnitMetrics } from '../../proto_utils/sim_result.js';\nimport { orderedResourceTypes } from '../../proto_utils/utils.js';\nimport { TypedEvent } from '../../typed_event.js';\nimport { bucket, distinct, maxIndex, stringComparator } from '../../utils.js';\nimport { actionColors } from './color_settings.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\ndeclare let ApexCharts: any;\n\ntype TooltipHandler = (dataPointIndex: number) => Element;\n\nconst dpsColor = '#ed5653';\nconst manaColor = '#2E93fA';\nconst threatColor = '#b56d07';\n\nexport class Timeline extends ResultComponent {\n\tprivate readonly dpsResourcesPlotElem: HTMLElement;\n\tprivate dpsResourcesPlot: any;\n\n\tprivate readonly rotationPlotElem: HTMLElement;\n\tprivate readonly rotationLabels: HTMLElement;\n\tprivate readonly rotationTimeline: HTMLElement;\n\tprivate readonly rotationHiddenIdsContainer: HTMLElement;\n\tprivate readonly chartPicker: HTMLSelectElement;\n\n\tprivate resultData: SimResultData | null;\n\tprivate rendered: boolean;\n\n\tprivate hiddenIds: Array<ActionId>;\n\tprivate hiddenIdsChangeEmitter;\n\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'timeline-root';\n\t\tsuper(config);\n\t\tthis.resultData = null;\n\t\tthis.rendered = false;\n\t\tthis.hiddenIds = [];\n\t\tthis.hiddenIdsChangeEmitter = new TypedEvent<void>();\n\n\t\tthis.rootElem.appendChild(\n\t\t\t<div className=\"timeline-disclaimer\">\n\t\t\t\t<div className=\"d-flex flex-column\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<i className=\"warning fa fa-exclamation-triangle fa-xl me-2\"></i>\n\t\t\t\t\t\tTimeline data visualizes only 1 sim iteration.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tNote: You can move the timeline by holding <kbd>Shift</kbd> while scrolling, or by clicking and dragging.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<select className=\"timeline-chart-picker form-select\">\n\t\t\t\t\t<option className=\"rotation-option\" value=\"rotation\">\n\t\t\t\t\t\tRotation\n\t\t\t\t\t</option>\n\t\t\t\t\t<option className=\"dps-option\" value=\"dps\">\n\t\t\t\t\t\tDPS\n\t\t\t\t\t</option>\n\t\t\t\t\t<option className=\"threat-option\" value=\"threat\">\n\t\t\t\t\t\tThreat\n\t\t\t\t\t</option>\n\t\t\t\t</select>\n\t\t\t</div>,\n\t\t);\n\t\tthis.rootElem.appendChild(\n\t\t\t<div className=\"timeline-plots-container\">\n\t\t\t\t<div className=\"timeline-plot dps-resources-plot hide\"></div>\n\t\t\t\t<div className=\"timeline-plot rotation-plot\">\n\t\t\t\t\t<div className=\"rotation-container\">\n\t\t\t\t\t\t<div className=\"rotation-labels\"></div>\n\t\t\t\t\t\t<div className=\"rotation-timeline\" draggable={true}></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"rotation-hidden-ids\"></div>\n\t\t\t\t</div>\n\t\t\t</div>,\n\t\t);\n\n\t\tthis.chartPicker = this.rootElem.querySelector('.timeline-chart-picker')!;\n\t\tthis.chartPicker.addEventListener('change', () => {\n\t\t\tif (this.chartPicker.value == 'rotation') {\n\t\t\t\tthis.dpsResourcesPlotElem.classList.add('hide');\n\t\t\t\tthis.rotationPlotElem.classList.remove('hide');\n\t\t\t} else {\n\t\t\t\tthis.dpsResourcesPlotElem.classList.remove('hide');\n\t\t\t\tthis.rotationPlotElem.classList.add('hide');\n\t\t\t}\n\t\t\tthis.updatePlot();\n\t\t});\n\n\t\tthis.dpsResourcesPlotElem = this.rootElem.querySelector('.dps-resources-plot')!;\n\t\tthis.dpsResourcesPlot = new ApexCharts(this.dpsResourcesPlotElem, {\n\t\t\tchart: {\n\t\t\t\ttype: 'line',\n\t\t\t\tforeColor: 'white',\n\t\t\t\tid: 'dpsResources',\n\t\t\t\tanimations: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t},\n\t\t\t},\n\t\t\tseries: [], // Set dynamically\n\t\t\txaxis: {\n\t\t\t\ttitle: {\n\t\t\t\t\ttext: 'Time (s)',\n\t\t\t\t},\n\t\t\t},\n\t\t\tnoData: {\n\t\t\t\ttext: 'Waiting for data...',\n\t\t\t},\n\t\t\tstroke: {\n\t\t\t\twidth: 2,\n\t\t\t\tcurve: 'straight',\n\t\t\t},\n\t\t});\n\n\t\tthis.rotationPlotElem = this.rootElem.querySelector('.rotation-plot')!;\n\t\tthis.rotationLabels = this.rootElem.querySelector('.rotation-labels')!;\n\t\tthis.rotationTimeline = this.rootElem.querySelector('.rotation-timeline')!;\n\t\tthis.rotationHiddenIdsContainer = this.rootElem.querySelector('.rotation-hidden-ids')!;\n\n\t\tlet isMouseDown = false;\n\t\tlet startX = 0;\n\t\tlet scrollLeft = 0;\n\t\tthis.rotationTimeline.ondragstart = event => {\n\t\t\tevent.preventDefault();\n\t\t};\n\t\tthis.rotationTimeline.onmousedown = event => {\n\t\t\tisMouseDown = true;\n\t\t\tstartX = event.pageX - this.rotationTimeline.offsetLeft;\n\t\t\tscrollLeft = this.rotationTimeline.scrollLeft;\n\t\t};\n\t\tthis.rotationTimeline.onmouseleave = () => {\n\t\t\tisMouseDown = false;\n\t\t\tthis.rotationTimeline.classList.remove('active');\n\t\t};\n\t\tthis.rotationTimeline.onmouseup = () => {\n\t\t\tisMouseDown = false;\n\t\t\tthis.rotationTimeline.classList.remove('active');\n\t\t};\n\t\tthis.rotationTimeline.onmousemove = e => {\n\t\t\tif (!isMouseDown) return;\n\t\t\te.preventDefault();\n\t\t\tconst x = e.pageX - this.rotationTimeline.offsetLeft;\n\t\t\tconst walk = (x - startX) * 3; //scroll-fast\n\t\t\tthis.rotationTimeline.scrollLeft = scrollLeft - walk;\n\t\t};\n\t}\n\n\tonSimResult(resultData: SimResultData) {\n\t\tthis.resultData = resultData;\n\n\t\tif (this.rendered) {\n\t\t\tthis.updatePlot();\n\t\t}\n\t}\n\n\tprivate updatePlot() {\n\t\tif (this.resultData == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst duration = this.resultData!.result.result.firstIterationDuration || 1;\n\t\tconst options: any = {\n\t\t\tseries: [],\n\t\t\tcolors: [],\n\t\t\txaxis: {\n\t\t\t\tmin: 0,\n\t\t\t\tmax: duration,\n\t\t\t\ttickAmount: 10,\n\t\t\t\tdecimalsInFloat: 1,\n\t\t\t\tlabels: {\n\t\t\t\t\tshow: true,\n\t\t\t\t},\n\t\t\t\ttitle: {\n\t\t\t\t\ttext: 'Time (s)',\n\t\t\t\t},\n\t\t\t},\n\t\t\tyaxis: [],\n\t\t\tchart: {\n\t\t\t\tevents: {\n\t\t\t\t\tbeforeResetZoom: () => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\txaxis: {\n\t\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\t\tmax: duration,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttoolbar: {\n\t\t\t\t\tshow: false,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tlet tooltipHandlers: Array<TooltipHandler | null> = [];\n\t\toptions.tooltip = {\n\t\t\tenabled: true,\n\t\t\tcustom: (data: { series: any; seriesIndex: number; dataPointIndex: number; w: any }) => {\n\t\t\t\tif (tooltipHandlers[data.seriesIndex]) {\n\t\t\t\t\treturn tooltipHandlers[data.seriesIndex]!(data.dataPointIndex);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('No tooltip handler for series ' + data.seriesIndex);\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\n\t\tconst players = this.resultData!.result.getRaidIndexedPlayers(this.resultData!.filter);\n\t\tif (players.length == 1) {\n\t\t\tconst player = players[0];\n\n\t\t\tconst rotationOption = this.rootElem.querySelector('.rotation-option')!;\n\t\t\trotationOption.classList.remove('hide');\n\t\t\tconst threatOption = this.rootElem.querySelector('.threat-option')!;\n\t\t\tthreatOption.classList.add('hide');\n\n\t\t\ttry {\n\t\t\t\tthis.updateRotationChart(player, duration);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log('Failed to update rotation chart: ', e);\n\t\t\t}\n\n\t\t\tconst dpsData = this.addDpsSeries(player, options, '');\n\t\t\tthis.addDpsYAxis(dpsData.maxDps, options);\n\t\t\ttooltipHandlers.push(dpsData.tooltipHandler);\n\t\t\ttooltipHandlers.push(this.addManaSeries(player, options));\n\t\t\ttooltipHandlers.push(this.addThreatSeries(player, options, ''));\n\t\t\ttooltipHandlers = tooltipHandlers.filter(handler => handler != null);\n\n\t\t\tthis.addMajorCooldownAnnotations(player, options);\n\t\t} else {\n\t\t\tif (this.chartPicker.value == 'rotation') {\n\t\t\t\tthis.chartPicker.value = 'dps';\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst rotationOption = this.rootElem.querySelector('.rotation-option')!;\n\t\t\trotationOption.classList.add('hide');\n\t\t\tconst threatOption = this.rootElem.querySelector('.threat-option')!;\n\t\t\tthreatOption.classList.remove('hide');\n\n\t\t\tthis.clearRotationChart();\n\n\t\t\tif (this.chartPicker.value == 'dps') {\n\t\t\t\tlet maxDps = 0;\n\t\t\t\tplayers.forEach(player => {\n\t\t\t\t\tconst dpsData = this.addDpsSeries(player, options, `var(--bs-${player.classColor}`);\n\t\t\t\t\tmaxDps = Math.max(maxDps, dpsData.maxDps);\n\t\t\t\t\ttooltipHandlers.push(dpsData.tooltipHandler);\n\t\t\t\t});\n\t\t\t\tthis.addDpsYAxis(maxDps, options);\n\t\t\t} else {\n\t\t\t\t// threat\n\t\t\t\tlet maxThreat = 0;\n\t\t\t\tplayers.forEach(player => {\n\t\t\t\t\ttooltipHandlers.push(this.addThreatSeries(player, options, player.classColor));\n\t\t\t\t\tmaxThreat = Math.max(maxThreat, player.maxThreat);\n\t\t\t\t});\n\t\t\t\tthis.addThreatYAxis(maxThreat, options);\n\t\t\t}\n\t\t}\n\n\t\tthis.dpsResourcesPlot.updateOptions(options);\n\t}\n\n\tprivate addDpsYAxis(maxDps: number, options: any) {\n\t\tconst dpsAxisMax = Math.ceil(maxDps / 100) * 100;\n\t\toptions.yaxis.push({\n\t\t\tcolor: dpsColor,\n\t\t\tseriesName: 'DPS',\n\t\t\tmin: 0,\n\t\t\tmax: dpsAxisMax,\n\t\t\ttickAmount: 10,\n\t\t\tdecimalsInFloat: 0,\n\t\t\ttitle: {\n\t\t\t\ttext: 'DPS',\n\t\t\t\tstyle: {\n\t\t\t\t\tcolor: dpsColor,\n\t\t\t\t},\n\t\t\t},\n\t\t\taxisBorder: {\n\t\t\t\tshow: true,\n\t\t\t\tcolor: dpsColor,\n\t\t\t},\n\t\t\taxisTicks: {\n\t\t\t\tcolor: dpsColor,\n\t\t\t},\n\t\t\tlabels: {\n\t\t\t\tminWidth: 30,\n\t\t\t\tstyle: {\n\t\t\t\t\tcolors: [dpsColor],\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate addThreatYAxis(maxThreat: number, options: any) {\n\t\tconst axisMax = Math.ceil(maxThreat / 10000) * 10000;\n\t\toptions.yaxis.push({\n\t\t\tcolor: threatColor,\n\t\t\tseriesName: 'Threat',\n\t\t\tmin: 0,\n\t\t\tmax: axisMax,\n\t\t\ttickAmount: 10,\n\t\t\tdecimalsInFloat: 0,\n\t\t\ttitle: {\n\t\t\t\ttext: 'Threat',\n\t\t\t\tstyle: {\n\t\t\t\t\tcolor: threatColor,\n\t\t\t\t},\n\t\t\t},\n\t\t\taxisBorder: {\n\t\t\t\tshow: true,\n\t\t\t\tcolor: threatColor,\n\t\t\t},\n\t\t\taxisTicks: {\n\t\t\t\tcolor: threatColor,\n\t\t\t},\n\t\t\tlabels: {\n\t\t\t\tminWidth: 30,\n\t\t\t\tstyle: {\n\t\t\t\t\tcolors: [threatColor],\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\t// Returns a function for drawing the tooltip, or null if no series was added.\n\tprivate addDpsSeries(unit: UnitMetrics, options: any, colorOverride: string): { maxDps: number; tooltipHandler: TooltipHandler } {\n\t\tconst dpsLogs = unit.dpsLogs.filter(log => log.timestamp >= 0);\n\n\t\toptions.colors.push(colorOverride || dpsColor);\n\t\toptions.series.push({\n\t\t\tname: 'DPS',\n\t\t\ttype: 'line',\n\t\t\tdata: dpsLogs.map(log => {\n\t\t\t\treturn {\n\t\t\t\t\tx: log.timestamp,\n\t\t\t\t\ty: log.dps,\n\t\t\t\t};\n\t\t\t}),\n\t\t});\n\n\t\treturn {\n\t\t\tmaxDps: dpsLogs[maxIndex(dpsLogs.map(l => l.dps))!].dps,\n\t\t\ttooltipHandler: (dataPointIndex: number) => {\n\t\t\t\tconst log = dpsLogs[dataPointIndex];\n\t\t\t\treturn this.dpsTooltip(log, true, unit, colorOverride);\n\t\t\t},\n\t\t};\n\t}\n\n\t// Returns a function for drawing the tooltip, or null if no series was added.\n\tprivate addManaSeries(unit: UnitMetrics, options: any): TooltipHandler | null {\n\t\tconst manaLogs = unit.groupedResourceLogs[ResourceType.ResourceTypeMana].filter(log => log.timestamp >= 0);\n\t\tif (manaLogs.length == 0) {\n\t\t\treturn null;\n\t\t}\n\t\tconst maxMana = manaLogs[0].valueBefore;\n\n\t\toptions.colors.push(manaColor);\n\t\toptions.series.push({\n\t\t\tname: 'Mana',\n\t\t\ttype: 'line',\n\t\t\tdata: manaLogs.map(log => {\n\t\t\t\treturn {\n\t\t\t\t\tx: log.timestamp,\n\t\t\t\t\ty: log.valueAfter,\n\t\t\t\t};\n\t\t\t}),\n\t\t});\n\t\toptions.yaxis.push({\n\t\t\tseriesName: 'Mana',\n\t\t\topposite: true, // Appear on right side\n\t\t\tmin: 0,\n\t\t\tmax: maxMana,\n\t\t\ttickAmount: 10,\n\t\t\ttitle: {\n\t\t\t\ttext: 'Mana',\n\t\t\t\tstyle: {\n\t\t\t\t\tcolor: manaColor,\n\t\t\t\t},\n\t\t\t},\n\t\t\taxisBorder: {\n\t\t\t\tshow: true,\n\t\t\t\tcolor: manaColor,\n\t\t\t},\n\t\t\taxisTicks: {\n\t\t\t\tcolor: manaColor,\n\t\t\t},\n\t\t\tlabels: {\n\t\t\t\tminWidth: 30,\n\t\t\t\tstyle: {\n\t\t\t\t\tcolors: [manaColor],\n\t\t\t\t},\n\t\t\t\tformatter: (val: string) => {\n\t\t\t\t\tconst v = parseFloat(val);\n\t\t\t\t\treturn `${v.toFixed(0)} (${((v / maxMana) * 100).toFixed(0)}%)`;\n\t\t\t\t},\n\t\t\t},\n\t\t} as any);\n\n\t\treturn (dataPointIndex: number) => {\n\t\t\tconst log = manaLogs[dataPointIndex];\n\t\t\treturn this.resourceTooltip(log, maxMana, true);\n\t\t};\n\t}\n\n\t// Returns a function for drawing the tooltip, or null if no series was added.\n\tprivate addThreatSeries(unit: UnitMetrics, options: any, colorOverride: string): TooltipHandler | null {\n\t\toptions.colors.push(colorOverride || threatColor);\n\t\toptions.series.push({\n\t\t\tname: 'Threat',\n\t\t\ttype: 'line',\n\t\t\tdata: unit.threatLogs\n\t\t\t\t.filter(log => log.timestamp >= 0)\n\t\t\t\t.map(log => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tx: log.timestamp,\n\t\t\t\t\t\ty: log.threatAfter,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t});\n\n\t\treturn (dataPointIndex: number) => {\n\t\t\tconst log = unit.threatLogs[dataPointIndex];\n\t\t\treturn this.threatTooltip(log, true, unit, colorOverride);\n\t\t};\n\t}\n\n\tprivate addMajorCooldownAnnotations(unit: UnitMetrics, options: any) {\n\t\tconst mcdLogs = unit.majorCooldownLogs;\n\t\tconst mcdAuraLogs = unit.majorCooldownAuraUptimeLogs;\n\n\t\t// Figure out how much to vertically offset cooldown icons, for cooldowns\n\t\t// used very close to each other. This is so the icons don't overlap.\n\t\tconst MAX_ALLOWED_DIST = 10;\n\t\tconst cooldownIconOffsets = mcdLogs.map(\n\t\t\t(mcdLog, mcdIdx) => mcdLogs.filter((cdLog, cdIdx) => cdIdx < mcdIdx && cdLog.timestamp > mcdLog.timestamp - MAX_ALLOWED_DIST).length,\n\t\t);\n\n\t\tconst distinctMcdAuras = distinct(mcdAuraLogs, (a, b) => a.actionId!.equalsIgnoringTag(b.actionId!));\n\t\t// Sort by name so auras keep their same colors even if timings change.\n\t\tdistinctMcdAuras.sort((a, b) => stringComparator(a.actionId!.name, b.actionId!.name));\n\t\tconst mcdAuraColors = mcdAuraLogs.map(\n\t\t\tmcdAuraLog => actionColors[distinctMcdAuras.findIndex(dAura => dAura.actionId!.equalsIgnoringTag(mcdAuraLog.actionId!))],\n\t\t);\n\n\t\toptions.annotations = {\n\t\t\tposition: 'back',\n\t\t\txaxis: mcdAuraLogs.map((log, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tx: log.gainedAt,\n\t\t\t\t\tx2: log.fadedAt,\n\t\t\t\t\tfillColor: mcdAuraColors[i],\n\t\t\t\t};\n\t\t\t}),\n\t\t\tpoints: mcdLogs.map((log, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tx: log.timestamp,\n\t\t\t\t\ty: 0,\n\t\t\t\t\timage: {\n\t\t\t\t\t\tpath: log.actionId!.iconUrl,\n\t\t\t\t\t\twidth: 20,\n\t\t\t\t\t\theight: 20,\n\t\t\t\t\t\toffsetY: cooldownIconOffsets[i] * -25,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}),\n\t\t};\n\t}\n\n\tprivate clearRotationChart() {\n\t\tthis.rotationLabels.innerText = '';\n\t\tthis.rotationLabels.appendChild(<div className=\"rotation-label-header\"></div>);\n\n\t\tthis.rotationTimeline.innerText = '';\n\t\tthis.rotationTimeline.appendChild(\n\t\t\t<div className=\"rotation-timeline-header\">\n\t\t\t\t<canvas className=\"rotation-timeline-canvas\"></canvas>\n\t\t\t</div>,\n\t\t);\n\t\tthis.rotationHiddenIdsContainer.innerText = '';\n\t\tthis.hiddenIdsChangeEmitter = new TypedEvent<void>();\n\t}\n\n\tprivate updateRotationChart(player: UnitMetrics, duration: number) {\n\t\tconst targets = this.resultData!.result.getTargets(this.resultData!.filter);\n\t\tif (targets.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst target = targets[0];\n\n\t\tthis.clearRotationChart();\n\n\t\ttry {\n\t\t\tthis.drawRotationTimeRuler(this.rotationTimeline.querySelector('.rotation-timeline-canvas')!, duration);\n\t\t} catch (e) {\n\t\t\tconsole.log('Failed to draw rotation: ', e);\n\t\t}\n\n\t\torderedResourceTypes.forEach(resourceType => this.addResourceRow(resourceType, player.groupedResourceLogs[resourceType], duration));\n\n\t\tconst buffsById = Object.values(bucket(player.auraUptimeLogs, log => log.actionId!.toString()));\n\t\tbuffsById.sort((a, b) => stringComparator(a[0].actionId!.name, b[0].actionId!.name));\n\t\tconst debuffsById = Object.values(bucket(target.auraUptimeLogs, log => log.actionId!.toString()));\n\t\tdebuffsById.sort((a, b) => stringComparator(a[0].actionId!.name, b[0].actionId!.name));\n\t\tconst buffsAndDebuffsById = buffsById.concat(debuffsById);\n\n\t\tconst playerCastsByAbility = this.getSortedCastsByAbility(player);\n\t\tplayerCastsByAbility.forEach(castLogs => this.addCastRow(castLogs, buffsAndDebuffsById, duration));\n\n\t\tif (player.pets.length > 0) {\n\t\t\tconst playerPets = new Map<string, UnitMetrics>();\n\t\t\tplayer.pets.forEach(petsLog => {\n\t\t\t\tconst petCastsByAbility = this.getSortedCastsByAbility(petsLog);\n\t\t\t\tif (petCastsByAbility.length > 0) {\n\t\t\t\t\t// Because multiple pets can have the same name and we parse cast logs\n\t\t\t\t\t// by pet name each individual pet ends up with all the casts of pets\n\t\t\t\t\t// with the same name. Because of this we can just grab the first pet\n\t\t\t\t\t// of each name and visualize only that.\n\t\t\t\t\tif (!playerPets.has(petsLog.name)) {\n\t\t\t\t\t\tplayerPets.set(petsLog.name, petsLog);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tplayerPets.forEach(pet => {\n\t\t\t\tthis.addSeparatorRow(duration);\n\t\t\t\tthis.addPetRow(pet.name, duration);\n\t\t\t\torderedResourceTypes.forEach(resourceType => this.addResourceRow(resourceType, pet.groupedResourceLogs[resourceType], duration));\n\t\t\t\tconst petCastsByAbility = this.getSortedCastsByAbility(pet);\n\t\t\t\tpetCastsByAbility.forEach(castLogs => this.addCastRow(castLogs, buffsAndDebuffsById, duration));\n\t\t\t});\n\t\t}\n\n\t\t// Don't add a row for buffs that were already visualized in a cast row.\n\t\tconst buffsToShow = buffsById.filter(auraUptimeLogs =>\n\t\t\tplayerCastsByAbility.findIndex(casts => casts[0].actionId!.equalsIgnoringTag(auraUptimeLogs[0].actionId!)),\n\t\t);\n\t\tif (buffsToShow.length > 0) {\n\t\t\tthis.addSeparatorRow(duration);\n\t\t\tbuffsToShow.forEach(auraUptimeLogs => this.addAuraRow(auraUptimeLogs, duration));\n\t\t}\n\n\t\tconst targetCastsByAbility = this.getSortedCastsByAbility(target);\n\t\tif (targetCastsByAbility.length > 0) {\n\t\t\tthis.addSeparatorRow(duration);\n\t\t\ttargetCastsByAbility.forEach(castLogs => this.addCastRow(castLogs, buffsAndDebuffsById, duration));\n\t\t}\n\n\t\t// Add a row for all debuffs, even those which have already been visualized in a cast row.\n\t\tconst debuffsToShow = debuffsById;\n\t\tif (debuffsToShow.length > 0) {\n\t\t\tthis.addSeparatorRow(duration);\n\t\t\tdebuffsToShow.forEach(auraUptimeLogs => this.addAuraRow(auraUptimeLogs, duration));\n\t\t}\n\t}\n\n\tprivate getSortedCastsByAbility(player: UnitMetrics): Array<Array<CastLog>> {\n\t\tconst meleeActionIds = player.getMeleeActions().map(action => action.actionId);\n\t\tconst spellActionIds = player.getSpellActions().map(action => action.actionId);\n\t\tconst getActionCategory = (actionId: ActionId): number => {\n\t\t\tconst fixedCategory = idToCategoryMap[actionId.anyId()];\n\t\t\tif (fixedCategory != null) {\n\t\t\t\treturn fixedCategory;\n\t\t\t} else if (meleeActionIds.find(meleeActionId => meleeActionId.equals(actionId))) {\n\t\t\t\treturn MELEE_ACTION_CATEGORY;\n\t\t\t} else if (spellActionIds.find(spellActionId => spellActionId.equals(actionId))) {\n\t\t\t\treturn SPELL_ACTION_CATEGORY;\n\t\t\t} else {\n\t\t\t\treturn DEFAULT_ACTION_CATEGORY;\n\t\t\t}\n\t\t};\n\n\t\tconst castsByAbility = Object.values(\n\t\t\tbucket(player.castLogs, log => {\n\t\t\t\tif (idsToGroupForRotation.includes(log.actionId!.spellId)) {\n\t\t\t\t\treturn log.actionId!.toStringIgnoringTag();\n\t\t\t\t} else {\n\t\t\t\t\treturn log.actionId!.toString();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tcastsByAbility.sort((a, b) => {\n\t\t\tconst categoryA = getActionCategory(a[0].actionId!);\n\t\t\tconst categoryB = getActionCategory(b[0].actionId!);\n\t\t\tif (categoryA != categoryB) {\n\t\t\t\treturn categoryA - categoryB;\n\t\t\t} else if (a[0].actionId!.anyId() == b[0].actionId!.anyId()) {\n\t\t\t\treturn a[0].actionId!.tag - b[0].actionId!.tag;\n\t\t\t} else {\n\t\t\t\treturn stringComparator(a[0].actionId!.name, b[0].actionId!.name);\n\t\t\t}\n\t\t});\n\n\t\treturn castsByAbility;\n\t}\n\n\tprivate makeLabelElem(actionId: ActionId, isHiddenLabel: boolean, isAura?: boolean): JSX.Element {\n\t\tconst labelText = idsToGroupForRotation.includes(actionId.spellId) ? actionId.baseName : actionId.name;\n\t\tconst labelIcon = ref<HTMLAnchorElement>();\n\t\tconst hideElem = ref<HTMLElement>();\n\t\tconst labelElem = (\n\t\t\t<div className={`rotation-label rotation-row ${isHiddenLabel ? 'rotation-label-hidden' : ''}`}>\n\t\t\t\t<span ref={hideElem} className={`fas fa-eye${isHiddenLabel ? '' : '-slash'}`}></span>\n\t\t\t\t<a ref={labelIcon} className=\"rotation-label-icon\"></a>\n\t\t\t\t<span className=\"rotation-label-text\">{labelText}</span>\n\t\t\t</div>\n\t\t);\n\t\thideElem.value!.addEventListener('click', () => {\n\t\t\tif (isHiddenLabel) {\n\t\t\t\tconst index = this.hiddenIds.findIndex(hiddenId => hiddenId.equals(actionId));\n\t\t\t\tif (index != -1) {\n\t\t\t\t\tthis.hiddenIds.splice(index, 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.hiddenIds.push(actionId);\n\t\t\t}\n\t\t\tthis.hiddenIdsChangeEmitter.emit(TypedEvent.nextEventID());\n\t\t});\n\t\ttippy(hideElem.value!, {\n\t\t\ttheme: 'timeline-tooltip',\n\t\t\tplacement: 'bottom',\n\t\t\tcontent: isHiddenLabel ? 'Show Row' : 'Hide Row',\n\t\t});\n\t\tconst updateHidden = () => {\n\t\t\tif (isHiddenLabel == Boolean(this.hiddenIds.find(hiddenId => hiddenId.equals(actionId)))) {\n\t\t\t\tlabelElem.classList.remove('hide');\n\t\t\t} else {\n\t\t\t\tlabelElem.classList.add('hide');\n\t\t\t}\n\t\t};\n\t\tthis.hiddenIdsChangeEmitter.on(updateHidden);\n\t\tupdateHidden();\n\t\tactionId.setBackgroundAndHref(labelIcon.value!);\n\t\tactionId.setWowheadDataset(labelIcon.value!, { useBuffAura: isAura });\n\t\treturn labelElem;\n\t}\n\n\tprivate makeRowElem(actionId: ActionId, duration: number): JSX.Element {\n\t\tconst rowElem = (\n\t\t\t<div\n\t\t\t\tclassName=\"rotation-timeline-row rotation-row\"\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: this.timeToPx(duration),\n\t\t\t\t}}></div>\n\t\t);\n\n\t\tconst updateHidden = () => {\n\t\t\tif (this.hiddenIds.find(hiddenId => hiddenId.equals(actionId))) {\n\t\t\t\trowElem.classList.add('hide');\n\t\t\t} else {\n\t\t\t\trowElem.classList.remove('hide');\n\t\t\t}\n\t\t};\n\t\tthis.hiddenIdsChangeEmitter.on(updateHidden);\n\t\tupdateHidden();\n\t\treturn rowElem;\n\t}\n\n\tprivate addPetRow(petName: string, duration: number) {\n\t\tconst actionId = ActionId.fromPetName(petName);\n\t\tconst rowElem = this.makeRowElem(actionId, duration);\n\n\t\tconst iconElem = document.createElement('div');\n\t\tthis.rotationLabels.appendChild(iconElem);\n\n\t\tactionId.fill().then(filledActionId => {\n\t\t\tconst labelText = idsToGroupForRotation.includes(filledActionId.spellId) ? filledActionId.baseName : filledActionId.name;\n\t\t\tconst labelIcon = ref<HTMLAnchorElement>();\n\t\t\tconst labelElem = (\n\t\t\t\t<div className=\"rotation-label rotation-row\">\n\t\t\t\t\t<a ref={labelIcon} className=\"rotation-label-icon\"></a>\n\t\t\t\t\t<span className=\"rotation-label-text\">{labelText}</span>\n\t\t\t\t</div>\n\t\t\t);\n\t\t\tfilledActionId.setBackgroundAndHref(labelIcon.value!);\n\t\t\ticonElem.appendChild(labelElem);\n\t\t});\n\n\t\tthis.rotationTimeline.appendChild(rowElem);\n\t}\n\n\tprivate addSeparatorRow(duration: number) {\n\t\tconst separatorElem = <div className=\"rotation-timeline-separator\"></div>;\n\t\tthis.rotationLabels.appendChild(separatorElem.cloneNode());\n\t\tseparatorElem.style.width = this.timeToPx(duration);\n\t\tthis.rotationTimeline.appendChild(separatorElem);\n\t}\n\n\tprivate addResourceRow(resourceType: ResourceType, resourceLogs: Array<ResourceChangedLogGroup>, duration: number) {\n\t\tif (resourceLogs.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst startValue = function (group: ResourceChangedLogGroup): number {\n\t\t\tif (group.maxValue == null) {\n\t\t\t\treturn resourceLogs[0].valueBefore;\n\t\t\t}\n\n\t\t\treturn group.maxValue;\n\t\t};\n\t\tconst labelElem = (\n\t\t\t<div className=\"rotation-label rotation-row\">\n\t\t\t\t<a\n\t\t\t\t\tclassName=\"rotation-label-icon\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackgroundImage: `url('${resourceTypeToIcon[resourceType]}')`,\n\t\t\t\t\t}}></a>\n\t\t\t\t<span className=\"rotation-label-text\">{resourceNames.get(resourceType)}</span>\n\t\t\t</div>\n\t\t);\n\n\t\tthis.rotationLabels.appendChild(labelElem);\n\n\t\tconst rowElem = (\n\t\t\t<div\n\t\t\t\tclassName=\"rotation-timeline-row rotation-row\"\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: this.timeToPx(duration),\n\t\t\t\t}}></div>\n\t\t);\n\n\t\tresourceLogs.forEach((resourceLogGroup, i) => {\n\t\t\tconst cNames = resourceNames.get(resourceType)!.toLowerCase().replaceAll(' ', '-');\n\t\t\tconst resourceElem = (\n\t\t\t\t<div\n\t\t\t\t\tclassName={`rotation-timeline-resource series-color ${cNames}`}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tleft: this.timeToPx(resourceLogGroup.timestamp),\n\t\t\t\t\t\twidth: this.timeToPx((resourceLogs[i + 1]?.timestamp || duration) - resourceLogGroup.timestamp),\n\t\t\t\t\t}}></div>\n\t\t\t);\n\n\t\t\tif (percentageResources.includes(resourceType)) {\n\t\t\t\tresourceElem.textContent = ((resourceLogGroup.valueAfter / startValue(resourceLogGroup)) * 100).toFixed(0) + '%';\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tresourceType == ResourceType.ResourceTypeEnergy ||\n\t\t\t\t\tresourceType == ResourceType.ResourceTypeFocus ||\n\t\t\t\t\tresourceType == ResourceType.ResourceTypeSolarEnergy ||\n\t\t\t\t\tresourceType == ResourceType.ResourceTypeLunarEnergy\n\t\t\t\t) {\n\t\t\t\t\tconst bgElem = document.createElement('div');\n\t\t\t\t\tbgElem.classList.add('rotation-timeline-resource-fill');\n\t\t\t\t\tbgElem.classList.add(cNames);\n\t\t\t\t\tbgElem.style.height = ((resourceLogGroup.valueAfter / startValue(resourceLogGroup)) * 100).toFixed(0) + '%';\n\t\t\t\t\tresourceElem.appendChild(bgElem);\n\t\t\t\t} else {\n\t\t\t\t\tresourceElem.textContent = Math.floor(resourceLogGroup.valueAfter).toFixed(0);\n\t\t\t\t}\n\t\t\t}\n\t\t\trowElem.appendChild(resourceElem);\n\n\t\t\ttippy(resourceElem, {\n\t\t\t\tplacement: 'bottom',\n\t\t\t\tcontent: this.resourceTooltipElem(resourceLogGroup, startValue(resourceLogGroup), false),\n\t\t\t});\n\t\t});\n\t\tthis.rotationTimeline.appendChild(rowElem);\n\t}\n\n\tprivate addCastRow(castLogs: Array<CastLog>, aurasById: Array<Array<AuraUptimeLog>>, duration: number) {\n\t\tconst actionId = castLogs[0].actionId!;\n\n\t\tthis.rotationLabels.appendChild(this.makeLabelElem(actionId, false));\n\t\tthis.rotationHiddenIdsContainer.appendChild(this.makeLabelElem(actionId, true));\n\n\t\tconst rowElem = this.makeRowElem(actionId, duration);\n\t\tcastLogs.forEach(castLog => {\n\t\t\tconst castElem = (\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"rotation-timeline-cast\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tleft: this.timeToPx(castLog.timestamp),\n\t\t\t\t\t\tminWidth: this.timeToPx(castLog.castTime + castLog.travelTime),\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t);\n\t\t\trowElem.appendChild(castElem);\n\n\t\t\tif (castLog.travelTime != 0) {\n\t\t\t\tconst travelTimeElem = (\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"rotation-timeline-travel-time\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tleft: this.timeToPx(castLog.castTime),\n\t\t\t\t\t\t\tminWidth: this.timeToPx(castLog.travelTime),\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t\tcastElem.appendChild(travelTimeElem);\n\t\t\t}\n\n\t\t\tif (castLog.damageDealtLogs.length > 0) {\n\t\t\t\tconst ddl = castLog.damageDealtLogs[0];\n\t\t\t\tif (ddl.miss || ddl.dodge || ddl.parry) {\n\t\t\t\t\tcastElem.classList.add('outcome-miss');\n\t\t\t\t} else if (ddl.glance || ddl.block || ddl.partialResist1_4 || ddl.partialResist2_4 || ddl.partialResist3_4) {\n\t\t\t\t\tcastElem.classList.add('outcome-partial');\n\t\t\t\t} else if (ddl.crit) {\n\t\t\t\t\tcastElem.classList.add('outcome-crit');\n\t\t\t\t} else {\n\t\t\t\t\tcastElem.classList.add('outcome-hit');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst iconElem = (<a className=\"rotation-timeline-cast-icon\" />) as HTMLAnchorElement;\n\t\t\tactionId.setBackground(iconElem);\n\t\t\tcastElem.appendChild(iconElem);\n\n\t\t\tconst travelTimeStr = castLog.travelTime == 0 ? '' : ` + ${castLog.travelTime.toFixed(2)}s travel time`;\n\t\t\tconst totalDamage = castLog.totalDamage();\n\n\t\t\tconst tt = (\n\t\t\t\t<div className=\"timeline-tooltip\">\n\t\t\t\t\t<span>\n\t\t\t\t\t\t{castLog.actionId!.name} from {castLog.timestamp.toFixed(2)}s to {(castLog.timestamp + castLog.castTime).toFixed(2)}s (\n\t\t\t\t\t\t{castLog.castTime > 0 && `${castLog.castTime.toFixed(2)}s, `} {castLog.effectiveTime.toFixed(2)}s GCD Time)\n\t\t\t\t\t\t{travelTimeStr.length > 0 && travelTimeStr}\n\t\t\t\t\t</span>\n\t\t\t\t\t{castLog.damageDealtLogs.length > 0 && (\n\t\t\t\t\t\t<ul className=\"rotation-timeline-cast-damage-list\">\n\t\t\t\t\t\t\t{castLog.damageDealtLogs.map(ddl => (\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t{ddl.timestamp.toFixed(2)}s - {ddl.result()}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t{ddl.source?.isTarget && <span className=\"threat-metrics\"> ({ddl.threat.toFixed(1)} Threat)</span>}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t)}\n\t\t\t\t\t{totalDamage > 0 && (\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\tTotal: {totalDamage.toFixed(2)} ({(totalDamage / (castLog.effectiveTime || 1)).toFixed(2)} DPET)\n\t\t\t\t\t\t</span>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t);\n\n\t\t\ttippy(castElem, {\n\t\t\t\tplacement: 'bottom',\n\t\t\t\tcontent: tt,\n\t\t\t});\n\n\t\t\tcastLog.damageDealtLogs\n\t\t\t\t.filter(ddl => ddl.tick)\n\t\t\t\t.forEach(ddl => {\n\t\t\t\t\tconst tickElem = (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=\"rotation-timeline-tick\"\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tleft: this.timeToPx(ddl.timestamp),\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t\trowElem.appendChild(tickElem);\n\n\t\t\t\t\tconst tt = (\n\t\t\t\t\t\t<div className=\"timeline-tooltip\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t{ddl.timestamp.toFixed(2)}s - {ddl.actionId!.name} {ddl.result()}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t{ddl.source?.isTarget && <span className=\"threat-metrics\"> ({ddl.threat.toFixed(1)} Threat)</span>}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\n\t\t\t\t\ttippy(tickElem, {\n\t\t\t\t\t\tplacement: 'bottom',\n\t\t\t\t\t\tcontent: tt,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t});\n\n\t\t// If there are any auras that correspond to this cast, visualize them in the same row.\n\t\taurasById\n\t\t\t.filter(auraUptimeLogs => actionId.equalsIgnoringTag(buffAuraToSpellIdMap[auraUptimeLogs[0].actionId!.spellId] ?? auraUptimeLogs[0].actionId!))\n\t\t\t.forEach(auraUptimeLogs => this.applyAuraUptimeLogsToRow(auraUptimeLogs, rowElem));\n\n\t\tthis.rotationTimeline.appendChild(rowElem);\n\t}\n\n\tprivate addAuraRow(auraUptimeLogs: Array<AuraUptimeLog>, duration: number) {\n\t\tconst actionId = auraUptimeLogs[0].actionId!;\n\n\t\tconst rowElem = this.makeRowElem(actionId, duration);\n\t\tthis.rotationLabels.appendChild(this.makeLabelElem(actionId, false, true));\n\t\tthis.rotationHiddenIdsContainer.appendChild(this.makeLabelElem(actionId, true, true));\n\t\tthis.rotationTimeline.appendChild(rowElem);\n\n\t\tthis.applyAuraUptimeLogsToRow(auraUptimeLogs, rowElem);\n\t}\n\n\tprivate applyAuraUptimeLogsToRow(auraUptimeLogs: Array<AuraUptimeLog>, rowElem: JSX.Element) {\n\t\tauraUptimeLogs.forEach(aul => {\n\t\t\tconst auraElem = (\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"rotation-timeline-aura\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tleft: this.timeToPx(aul.gainedAt),\n\t\t\t\t\t\tminWidth: this.timeToPx(aul.fadedAt === aul.gainedAt ? 0.001 : aul.fadedAt - aul.gainedAt),\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t);\n\t\t\trowElem.appendChild(auraElem);\n\n\t\t\tconst tt = (\n\t\t\t\t<div className=\"timeline-tooltip\">\n\t\t\t\t\t<span>\n\t\t\t\t\t\t{aul.actionId!.name}: {aul.gainedAt.toFixed(2)}s - {aul.fadedAt.toFixed(2)}s\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t);\n\n\t\t\ttippy(auraElem, {\n\t\t\t\tplacement: 'bottom',\n\t\t\t\tcontent: tt,\n\t\t\t});\n\n\t\t\taul.stacksChange.forEach((scl, i) => {\n\t\t\t\tif (scl.timestamp == aul.fadedAt) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst stacksChangeElem = (\n\t\t\t\t\t<div\n\t\t\t\t\t\tclassName=\"rotation-timeline-stacks-change\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tleft: this.timeToPx(scl.timestamp - aul.timestamp),\n\t\t\t\t\t\t\twidth: this.timeToPx(aul.stacksChange[i + 1] ? aul.stacksChange[i + 1].timestamp - scl.timestamp : aul.fadedAt - scl.timestamp),\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t{String(scl.newStacks)}\n\t\t\t\t\t</div>\n\t\t\t\t);\n\t\t\t\tauraElem.appendChild(stacksChangeElem);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate timeToPxValue(time: number): number {\n\t\treturn time * 100;\n\t}\n\tprivate timeToPx(time: number): string {\n\t\treturn this.timeToPxValue(time) + 'px';\n\t}\n\n\tprivate drawRotationTimeRuler(canvas: HTMLCanvasElement, duration: number) {\n\t\tconst height = 30;\n\t\tcanvas.width = this.timeToPxValue(duration);\n\t\tcanvas.height = height;\n\n\t\tconst ctx = canvas.getContext('2d')!;\n\t\tctx.strokeStyle = 'white';\n\n\t\tctx.font = 'bold 14px SimDefaultFont';\n\t\tctx.fillStyle = 'white';\n\t\tctx.lineWidth = 2;\n\t\tctx.beginPath();\n\n\t\t// Bottom border line\n\t\tctx.moveTo(0, height);\n\t\tctx.lineTo(canvas.width, height);\n\n\t\t// Tick lines\n\t\tconst numTicks = 1 + Math.floor(duration * 10);\n\t\tfor (let i = 0; i <= numTicks; i++) {\n\t\t\tconst time = i * 0.1;\n\t\t\tlet x = this.timeToPxValue(time);\n\t\t\tif (i == 0) {\n\t\t\t\tctx.textAlign = 'left';\n\t\t\t\tx++;\n\t\t\t} else if (i % 10 == 0 && time + 1 > duration) {\n\t\t\t\tctx.textAlign = 'right';\n\t\t\t\tx--;\n\t\t\t} else {\n\t\t\t\tctx.textAlign = 'center';\n\t\t\t}\n\n\t\t\tlet lineHeight = 0;\n\t\t\tif (i % 10 == 0) {\n\t\t\t\tlineHeight = height * 0.5;\n\t\t\t\tctx.fillText(time + 's', x, height - height * 0.6);\n\t\t\t} else if (i % 5 == 0) {\n\t\t\t\tlineHeight = height * 0.25;\n\t\t\t} else {\n\t\t\t\tlineHeight = height * 0.125;\n\t\t\t}\n\t\t\tctx.moveTo(x, height);\n\t\t\tctx.lineTo(x, height - lineHeight);\n\t\t}\n\t\tctx.stroke();\n\t}\n\n\tprivate dpsTooltip(log: DpsLog, _includeAuras: boolean, player: UnitMetrics, colorOverride: string) {\n\t\tconst showPlayerLabel = colorOverride != '';\n\t\treturn (\n\t\t\t<div className=\"timeline-tooltip dps\">\n\t\t\t\t<div className=\"timeline-tooltip-header\">\n\t\t\t\t\t{showPlayerLabel ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<img className=\"timeline-tooltip-icon\" src=\"${player.iconUrl}\" />\n\t\t\t\t\t\t\t<span className=\"\" style=\"color: ${colorOverride}\">\n\t\t\t\t\t\t\t\t${player.label}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<span> - </span>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : null}\n\t\t\t\t\t<span className=\"bold\">{log.timestamp.toFixed(2)}s</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"timeline-tooltip-body\">\n\t\t\t\t\t<ul className=\"timeline-dps-events\">{log.damageLogs.map(damageLog => this.tooltipLogItem(damageLog, damageLog.result())).join('')}</ul>\n\t\t\t\t\t<div className=\"timeline-tooltip-body-row\">\n\t\t\t\t\t\t<span className=\"series-color\">DPS: {log.dps.toFixed(2)}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{this.tooltipAurasSection(log)}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tprivate threatTooltip(log: ThreatLogGroup, includeAuras: boolean, player: UnitMetrics, colorOverride: string) {\n\t\tconst showPlayerLabel = colorOverride != '';\n\t\treturn (\n\t\t\t<div className=\"timeline-tooltip threat\">\n\t\t\t\t<div className=\"timeline-tooltip-header\">\n\t\t\t\t\t{showPlayerLabel ? (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<img className=\"timeline-tooltip-icon\" src={player.iconUrl} />\n\t\t\t\t\t\t\t<span className=\"\" style={{ color: colorOverride }}>\n\t\t\t\t\t\t\t\t{player.label}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t<span> - </span>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) : null}\n\t\t\t\t\t<span className=\"bold\">{log.timestamp.toFixed(2)}s</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"timeline-tooltip-body\">\n\t\t\t\t\t<div className=\"timeline-tooltip-body-row\">\n\t\t\t\t\t\t<span className=\"series-color\">Before: {log.threatBefore.toFixed(1)}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<ul className=\"timeline-threat-events\">{log.logs.map(log => this.tooltipLogItem(log, <>{log.threat.toFixed(1)} Threat</>)).join('')}</ul>\n\t\t\t\t\t<div className=\"timeline-tooltip-body-row\">\n\t\t\t\t\t\t<span className=\"series-color\">After: {log.threatAfter.toFixed(1)}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t${includeAuras ? this.tooltipAurasSection(log) : null}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tprivate resourceTooltipElem(log: ResourceChangedLogGroup, maxValue: number, includeAuras: boolean) {\n\t\tconst valToDisplayString = percentageResources.includes(log.resourceType)\n\t\t\t? (val: number) => `${val.toFixed(1)} (${((val / maxValue) * 100).toFixed(0)}%)`\n\t\t\t: (val: number) => `${val.toFixed(1)}`;\n\n\t\treturn (\n\t\t\t<div className={`timeline-tooltip ${resourceNames.get(log.resourceType)!.toLowerCase().replaceAll(' ', '-')}`}>\n\t\t\t\t<div className=\"timeline-tooltip-header\">\n\t\t\t\t\t<span className=\"bold\">{log.timestamp.toFixed(2)}s</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"timeline-tooltip-body\">\n\t\t\t\t\t<div className=\"timeline-tooltip-body-row\">\n\t\t\t\t\t\t<span className=\"series-color\">Before: {valToDisplayString(log.valueBefore)}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<ul className=\"timeline-mana-events\">\n\t\t\t\t\t\t{log.logs.map(manaChangedLog => this.tooltipLogItemElem(manaChangedLog, <>{manaChangedLog.resultString()}</>))}\n\t\t\t\t\t</ul>\n\t\t\t\t\t<div className=\"timeline-tooltip-body-row\">\n\t\t\t\t\t\t<span className=\"series-color\">After: {valToDisplayString(log.valueAfter)}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{includeAuras && this.tooltipAurasSectionElem(log)}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tprivate resourceTooltip(log: ResourceChangedLogGroup, maxValue: number, includeAuras: boolean) {\n\t\treturn this.resourceTooltipElem(log, maxValue, includeAuras);\n\t}\n\n\tprivate tooltipLogItem(log: SimLog, value: Element) {\n\t\treturn this.tooltipLogItemElem(log, value);\n\t}\n\n\tprivate tooltipLogItemElem(log: SimLog, value: Element): JSX.Element {\n\t\treturn (\n\t\t\t<li>\n\t\t\t\t{log.actionId && log.actionId.iconUrl && <img className=\"timeline-tooltip-icon\" src={log.actionId.iconUrl}></img>}\n\t\t\t\t{log.actionId && <span>{log.actionId.name}</span>}\n\t\t\t\t<span className=\"series-color\">{value}</span>\n\t\t\t</li>\n\t\t);\n\t}\n\n\tprivate tooltipAurasSection(log: SimLog) {\n\t\tif (log.activeAuras.length == 0) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this.tooltipAurasSectionElem(log);\n\t}\n\n\tprivate tooltipAurasSectionElem(log: SimLog): JSX.Element {\n\t\tif (log.activeAuras.length == 0) {\n\t\t\treturn <></>;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"timeline-tooltip-auras\">\n\t\t\t\t<div className=\"timeline-tooltip-body-row\">\n\t\t\t\t\t<span className=\"bold\">Active Auras</span>\n\t\t\t\t</div>\n\t\t\t\t<ul className=\"timeline-active-auras\">\n\t\t\t\t\t{log.activeAuras.map(auraLog => (\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t{auraLog.actionId!.iconUrl && <img className=\"timeline-tooltip-icon\" src={auraLog.actionId!.iconUrl}></img>}\n\t\t\t\t\t\t\t<span>{auraLog.actionId!.name}</span>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trender() {\n\t\tthis.dpsResourcesPlot.render();\n\t\tthis.rendered = true;\n\t\tthis.updatePlot();\n\t}\n}\n\nconst MELEE_ACTION_CATEGORY = 1;\nconst SPELL_ACTION_CATEGORY = 2;\nconst DEFAULT_ACTION_CATEGORY = 3;\n\n// Hard-coded spell categories for controlling rotation ordering.\nconst idToCategoryMap: Record<number, number> = {\n\t[OtherAction.OtherActionAttack]: 0,\n\t[OtherAction.OtherActionShoot]: 0.5,\n\n\t// Druid\n\t[48480]: 0.1, // Maul\n\t[48564]: MELEE_ACTION_CATEGORY + 0.1, // Mangle (Bear)\n\t[48568]: MELEE_ACTION_CATEGORY + 0.2, // Lacerate\n\t[48562]: MELEE_ACTION_CATEGORY + 0.3, // Swipe (Bear)\n\n\t[48566]: MELEE_ACTION_CATEGORY + 0.1, // Mangle (Cat)\n\t[48572]: MELEE_ACTION_CATEGORY + 0.2, // Shred\n\t[49800]: MELEE_ACTION_CATEGORY + 0.51, // Rip\n\t[52610]: MELEE_ACTION_CATEGORY + 0.52, // Savage Roar\n\t[48577]: MELEE_ACTION_CATEGORY + 0.53, // Ferocious Bite\n\n\t[48465]: SPELL_ACTION_CATEGORY + 0.1, // Starfire\n\t[48461]: SPELL_ACTION_CATEGORY + 0.2, // Wrath\n\t[53201]: SPELL_ACTION_CATEGORY + 0.3, // Starfall\n\t[48468]: SPELL_ACTION_CATEGORY + 0.4, // Insect Swarm\n\t[48463]: SPELL_ACTION_CATEGORY + 0.5, // Moonfire\n\n\t// Hunter\n\t[48996]: 0.1, // Raptor Strike\n\t[53217]: 0.6, // Wild Quiver\n\t[53209]: MELEE_ACTION_CATEGORY + 0.1, // Chimera Shot\n\t[53353]: MELEE_ACTION_CATEGORY + 0.11, // Chimera Shot Serpent\n\t[60053]: MELEE_ACTION_CATEGORY + 0.1, // Explosive Shot\n\t[49050]: MELEE_ACTION_CATEGORY + 0.2, // Aimed Shot\n\t[49048]: MELEE_ACTION_CATEGORY + 0.21, // Multi Shot\n\t[3044]: MELEE_ACTION_CATEGORY + 0.22, // Arcane Shot\n\t[56641]: MELEE_ACTION_CATEGORY + 0.27, // Steady Shot\n\t[53351]: MELEE_ACTION_CATEGORY + 0.28, // Kill Shot\n\t[34490]: MELEE_ACTION_CATEGORY + 0.29, // Silencing Shot\n\t[49001]: MELEE_ACTION_CATEGORY + 0.3, // Serpent Sting\n\t[53238]: MELEE_ACTION_CATEGORY + 0.31, // Piercing Shots\n\t[63672]: MELEE_ACTION_CATEGORY + 0.32, // Black Arrow\n\t[49067]: MELEE_ACTION_CATEGORY + 0.33, // Explosive Trap\n\t[77767]: MELEE_ACTION_CATEGORY + 0.34, // Cobra Shot\n\n\t// Paladin\n\t[35395]: MELEE_ACTION_CATEGORY + 0.1, // Crusader Strike\n\t[53385]: MELEE_ACTION_CATEGORY + 0.2, // Divine Storm\n\t[42463]: MELEE_ACTION_CATEGORY + 0.3, // Seal of Vengeance\n\t[61840]: MELEE_ACTION_CATEGORY + 0.4, // Righteous Vengeance\n\t[61411]: MELEE_ACTION_CATEGORY + 0.5, // Shield of Righteousness\n\t[53595]: MELEE_ACTION_CATEGORY + 0.51, // Hammer of Righteousness\n\t[20182]: MELEE_ACTION_CATEGORY + 0.6, // Reckoning\n\t[48952]: SPELL_ACTION_CATEGORY + 0.1, // Holy Shield\n\t[31803]: SPELL_ACTION_CATEGORY + 0.2, // Holy Vengeance\n\t[48801]: SPELL_ACTION_CATEGORY + 0.3, // Exorcism\n\t[48819]: SPELL_ACTION_CATEGORY + 0.4, // Consecration\n\t[53408]: SPELL_ACTION_CATEGORY + 0.51, // Judgement of Wisdom\n\t[20271]: SPELL_ACTION_CATEGORY + 0.52, // Judgement of Light\n\t[31804]: SPELL_ACTION_CATEGORY + 0.53, // Judgement of Vengeance\n\t[20467]: SPELL_ACTION_CATEGORY + 0.54, // Judgement of Command\n\t[20187]: SPELL_ACTION_CATEGORY + 0.55, // Judgement of Righteousness\n\t[31878]: SPELL_ACTION_CATEGORY + 0.56, // Judgements of the Wise\n\t[48817]: SPELL_ACTION_CATEGORY + 0.5, // Holy Wrath\n\t[48806]: SPELL_ACTION_CATEGORY + 0.6, // Hammer of Wrath\n\t[54428]: SPELL_ACTION_CATEGORY + 0.7, // Divine Plea\n\t[66233]: SPELL_ACTION_CATEGORY + 0.8, // Ardent Defender\n\n\t// Priest\n\t[48300]: SPELL_ACTION_CATEGORY + 0.11, // Devouring Plague\n\t[48125]: SPELL_ACTION_CATEGORY + 0.12, // Shadow Word: Pain\n\t[48160]: SPELL_ACTION_CATEGORY + 0.13, // Vampiric Touch\n\t[48135]: SPELL_ACTION_CATEGORY + 0.14, // Holy Fire\n\t[48123]: SPELL_ACTION_CATEGORY + 0.19, // Smite\n\t[48127]: SPELL_ACTION_CATEGORY + 0.2, // Mind Blast\n\t[48158]: SPELL_ACTION_CATEGORY + 0.3, // Shadow Word: Death\n\t[48156]: SPELL_ACTION_CATEGORY + 0.4, // Mind Flay\n\n\t// Rogue\n\t[6774]: MELEE_ACTION_CATEGORY + 0.1, // Slice and Dice\n\t[8647]: MELEE_ACTION_CATEGORY + 0.2, // Expose Armor\n\t[48672]: MELEE_ACTION_CATEGORY + 0.3, // Rupture\n\t[57993]: MELEE_ACTION_CATEGORY + 0.3, // Envenom\n\t[48668]: MELEE_ACTION_CATEGORY + 0.4, // Eviscerate\n\t[48666]: MELEE_ACTION_CATEGORY + 0.5, // Mutilate\n\t[48665]: MELEE_ACTION_CATEGORY + 0.6, // Mutilate (MH)\n\t[48664]: MELEE_ACTION_CATEGORY + 0.7, // Mutilate (OH)\n\t[48638]: MELEE_ACTION_CATEGORY + 0.5, // Sinister Strike\n\t[51723]: MELEE_ACTION_CATEGORY + 0.8, // Fan of Knives\n\t[57973]: SPELL_ACTION_CATEGORY + 0.1, // Deadly Poison\n\t[57968]: SPELL_ACTION_CATEGORY + 0.2, // Instant Poison\n\n\t// Shaman\n\t[8232]: 0.11, // Windfury Weapon\n\t[8024]: 0.12, // Flametongue Weapon\n\t[8033]: 0.12, // Frostbrand Weapon\n\t[17364]: MELEE_ACTION_CATEGORY + 0.1, // Stormstrike\n\t[60103]: MELEE_ACTION_CATEGORY + 0.2, // Lava Lash\n\t[49233]: SPELL_ACTION_CATEGORY + 0.21, // Flame Shock\n\t[49231]: SPELL_ACTION_CATEGORY + 0.22, // Earth Shock\n\t[49236]: SPELL_ACTION_CATEGORY + 0.23, // Frost Shock\n\t[60043]: SPELL_ACTION_CATEGORY + 0.31, // Lava Burst\n\t[49238]: SPELL_ACTION_CATEGORY + 0.32, // Lightning Bolt\n\t[49271]: SPELL_ACTION_CATEGORY + 0.33, // Chain Lightning\n\t[61657]: SPELL_ACTION_CATEGORY + 0.41, // Fire Nova\n\t[58734]: SPELL_ACTION_CATEGORY + 0.42, // Magma Totem\n\t[58704]: SPELL_ACTION_CATEGORY + 0.43, // Searing Totem\n\t[49281]: SPELL_ACTION_CATEGORY + 0.51, // Lightning Shield\n\t[49279]: SPELL_ACTION_CATEGORY + 0.52, // Lightning Shield (Proc)\n\t[2825]: DEFAULT_ACTION_CATEGORY + 0.1, // Bloodlust\n\n\t// Warlock\n\t[603]: SPELL_ACTION_CATEGORY + 0.01, // Curse of Doom\n\t[980]: SPELL_ACTION_CATEGORY + 0.02, // Curse of Agony\n\t[172]: SPELL_ACTION_CATEGORY + 0.1, // Corruption\n\t[48181]: SPELL_ACTION_CATEGORY + 0.2, // Haunt\n\t[30108]: SPELL_ACTION_CATEGORY + 0.3, // Unstable Affliction\n\t[348]: SPELL_ACTION_CATEGORY + 0.31, // Immolate\n\t[17962]: SPELL_ACTION_CATEGORY + 0.32, // Conflagrate\n\t[50796]: SPELL_ACTION_CATEGORY + 0.49, // Chaos Bolt\n\t[686]: SPELL_ACTION_CATEGORY + 0.5, // Shadow Bolt\n\t[29722]: SPELL_ACTION_CATEGORY + 0.51, // Incinerate\n\t[6353]: SPELL_ACTION_CATEGORY + 0.52, // Soul Fire\n\t[1120]: SPELL_ACTION_CATEGORY + 0.6, // Drain Soul\n\t[1454]: SPELL_ACTION_CATEGORY + 0.7, // Life Tap\n\t[59672]: SPELL_ACTION_CATEGORY + 0.8, // Metamorphosis\n\t[50589]: SPELL_ACTION_CATEGORY + 0.81, // Immolation Aura\n\t[47193]: SPELL_ACTION_CATEGORY + 0.82, // Demonic Empowerment\n\n\t// Mage\n\t[42842]: SPELL_ACTION_CATEGORY + 0.01, // Frostbolt\n\t[47610]: SPELL_ACTION_CATEGORY + 0.02, // Frostfire Bolt\n\t[42897]: SPELL_ACTION_CATEGORY + 0.02, // Arcane Blast\n\t[42833]: SPELL_ACTION_CATEGORY + 0.02, // Fireball\n\t[42859]: SPELL_ACTION_CATEGORY + 0.03, // Scorch\n\t[42891]: SPELL_ACTION_CATEGORY + 0.1, // Pyroblast\n\t[42846]: SPELL_ACTION_CATEGORY + 0.1, // Arcane Missiles\n\t[44572]: SPELL_ACTION_CATEGORY + 0.1, // Deep Freeze\n\t[44781]: SPELL_ACTION_CATEGORY + 0.2, // Arcane Barrage\n\t[42914]: SPELL_ACTION_CATEGORY + 0.2, // Ice Lance\n\t[55360]: SPELL_ACTION_CATEGORY + 0.2, // Living Bomb\n\t[55362]: SPELL_ACTION_CATEGORY + 0.21, // Living Bomb (Explosion)\n\t[12654]: SPELL_ACTION_CATEGORY + 0.3, // Ignite\n\t[12472]: SPELL_ACTION_CATEGORY + 0.4, // Icy Veins\n\t[11129]: SPELL_ACTION_CATEGORY + 0.4, // Combustion\n\t[12042]: SPELL_ACTION_CATEGORY + 0.4, // Arcane Power\n\t[11958]: SPELL_ACTION_CATEGORY + 0.41, // Cold Snap\n\t[12043]: SPELL_ACTION_CATEGORY + 0.41, // Presence of Mind\n\t[31687]: SPELL_ACTION_CATEGORY + 0.41, // Water Elemental\n\t[55342]: SPELL_ACTION_CATEGORY + 0.5, // Mirror Image\n\t[33312]: SPELL_ACTION_CATEGORY + 0.51, // Mana Gems\n\t[12051]: SPELL_ACTION_CATEGORY + 0.52, // Evocate\n\t[44401]: SPELL_ACTION_CATEGORY + 0.6, // Missile Barrage\n\t[44448]: SPELL_ACTION_CATEGORY + 0.6, // Hot Streak\n\t[44545]: SPELL_ACTION_CATEGORY + 0.6, // Fingers of Frost\n\t[44549]: SPELL_ACTION_CATEGORY + 0.61, // Brain Freeze\n\t[12536]: SPELL_ACTION_CATEGORY + 0.61, // Clearcasting\n\n\t// Warrior\n\t[47520]: 0.1, // Cleave\n\t[47450]: 0.1, // Heroic Strike\n\t[47475]: MELEE_ACTION_CATEGORY + 0.05, // Slam\n\t[23881]: MELEE_ACTION_CATEGORY + 0.1, // Bloodthirst\n\t[47486]: MELEE_ACTION_CATEGORY + 0.1, // Mortal Strike\n\t[30356]: MELEE_ACTION_CATEGORY + 0.1, // Shield Slam\n\t[47498]: MELEE_ACTION_CATEGORY + 0.21, // Devastate\n\t[47467]: MELEE_ACTION_CATEGORY + 0.22, // Sunder Armor\n\t[57823]: MELEE_ACTION_CATEGORY + 0.23, // Revenge\n\t[1680]: MELEE_ACTION_CATEGORY + 0.24, // Whirlwind\n\t[7384]: MELEE_ACTION_CATEGORY + 0.25, // Overpower\n\t[47471]: MELEE_ACTION_CATEGORY + 0.42, // Execute\n\t[12867]: SPELL_ACTION_CATEGORY + 0.51, // Deep Wounds\n\t[58874]: SPELL_ACTION_CATEGORY + 0.52, // Damage Shield\n\t[47296]: SPELL_ACTION_CATEGORY + 0.53, // Critical Block\n\t[46924]: SPELL_ACTION_CATEGORY + 0.61, // Bladestorm\n\t[2565]: SPELL_ACTION_CATEGORY + 0.62, // Shield Block\n\t[64382]: SPELL_ACTION_CATEGORY + 0.65, // Shattering Throw\n\t[71]: DEFAULT_ACTION_CATEGORY + 0.1, // Defensive Stance\n\t[2457]: DEFAULT_ACTION_CATEGORY + 0.1, // Battle Stance\n\t[2458]: DEFAULT_ACTION_CATEGORY + 0.1, // Berserker Stance\n\n\t// Death Knight\n\t[51425]: MELEE_ACTION_CATEGORY + 0.05, // Obliterate\n\t[55268]: MELEE_ACTION_CATEGORY + 0.1, // Frost strike\n\t[49930]: MELEE_ACTION_CATEGORY + 0.15, // Blood strike\n\t[50842]: MELEE_ACTION_CATEGORY + 0.2, // Pestilence\n\t[51411]: MELEE_ACTION_CATEGORY + 0.25, // Howling Blast\n\t[49895]: MELEE_ACTION_CATEGORY + 0.25, // Death Coil\n\t[49938]: MELEE_ACTION_CATEGORY + 0.25, // Death and Decay\n\t[63560]: MELEE_ACTION_CATEGORY + 0.25, // Ghoul Frenzy\n\t[50536]: MELEE_ACTION_CATEGORY + 0.25, // Unholy Blight\n\t[57623]: MELEE_ACTION_CATEGORY + 0.25, // HoW\n\t[59131]: MELEE_ACTION_CATEGORY + 0.3, // Icy touch\n\t[49921]: MELEE_ACTION_CATEGORY + 0.3, // Plague strike\n\t[51271]: MELEE_ACTION_CATEGORY + 0.35, // UA\n\t[45529]: MELEE_ACTION_CATEGORY + 0.35, // BT\n\t[47568]: MELEE_ACTION_CATEGORY + 0.35, // ERW\n\t[49206]: MELEE_ACTION_CATEGORY + 0.35, // Summon Gargoyle\n\t[46584]: MELEE_ACTION_CATEGORY + 0.35, // Raise Dead\n\t[55095]: MELEE_ACTION_CATEGORY + 0.4, // Frost Fever\n\t[55078]: MELEE_ACTION_CATEGORY + 0.4, // Blood Plague\n\t[49655]: MELEE_ACTION_CATEGORY + 0.4, // Wandering Plague\n\t[50401]: MELEE_ACTION_CATEGORY + 0.5, // Razor Frost\n\t[51460]: MELEE_ACTION_CATEGORY + 0.5, // Necrosis\n\t[50463]: MELEE_ACTION_CATEGORY + 0.5, // BCB\n\t[50689]: DEFAULT_ACTION_CATEGORY + 0.1, // Blood Presence\n\t[48263]: DEFAULT_ACTION_CATEGORY + 0.1, // Frost Presence\n\t[48265]: DEFAULT_ACTION_CATEGORY + 0.1, // Unholy Presence\n\n\t// Generic\n\t[53307]: SPELL_ACTION_CATEGORY + 0.931, // Thorns\n\t[54043]: SPELL_ACTION_CATEGORY + 0.932, // Retribution Aura\n\t[54758]: SPELL_ACTION_CATEGORY + 0.933, // Hyperspeed Acceleration\n\t[42641]: SPELL_ACTION_CATEGORY + 0.941, // Sapper\n\t[40536]: SPELL_ACTION_CATEGORY + 0.942, // Explosive Decoy\n\t[41119]: SPELL_ACTION_CATEGORY + 0.943, // Saronite Bomb\n\t[40771]: SPELL_ACTION_CATEGORY + 0.944, // Cobalt Frag Bomb\n};\n\nconst idsToGroupForRotation: Array<number> = [\n\t6774, // Slice and Dice\n\t8647, // Expose Armor\n\t48668, // Eviscerate\n\t48672, // Rupture\n\t51690, // Killing Spree\n\t57993, // Envenom\n];\n\nconst percentageResources: Array<ResourceType> = [ResourceType.ResourceTypeHealth, ResourceType.ResourceTypeMana];\n","import tippy from 'tippy.js';\nimport { element, fragment, ref } from 'tsx-vanilla';\n\nimport { DistributionMetrics as DistributionMetricsProto, ProgressMetrics, Raid as RaidProto } from '../proto/api.js';\nimport { Encounter as EncounterProto, Spec } from '../proto/common.js';\nimport { SimRunData } from '../proto/ui.js';\nimport { ActionMetrics, SimResult, SimResultFilter } from '../proto_utils/sim_result.js';\nimport { SimUI } from '../sim_ui.jsx';\nimport { EventID, TypedEvent } from '../typed_event.js';\nimport { formatDeltaTextElem, sum } from '../utils.js';\n\nexport function addRaidSimAction(simUI: SimUI): RaidSimResultsManager {\n\tsimUI.addAction('Simulate', 'dps-action', async () =>\n\t\tsimUI.runSim((progress: ProgressMetrics) => {\n\t\t\tresultsManager.setSimProgress(progress);\n\t\t}),\n\t);\n\n\tconst resultsManager = new RaidSimResultsManager(simUI);\n\tsimUI.sim.simResultEmitter.on((eventID, simResult) => {\n\t\tresultsManager.setSimResult(eventID, simResult);\n\t});\n\treturn resultsManager;\n}\n\nexport type ReferenceData = {\n\tsimResult: SimResult;\n\tsettings: any;\n\traidProto: RaidProto;\n\tencounterProto: EncounterProto;\n};\n\nexport interface ResultMetrics {\n\tcod: string;\n\tdps: string;\n\tdpasp: string;\n\tdtps: string;\n\ttmi: string;\n\tdur: string;\n\thps: string;\n\ttps: string;\n\ttto: string;\n}\n\nexport interface ResultMetricCategories {\n\tdamage: string;\n\tdemo: string;\n\thealing: string;\n\tthreat: string;\n}\n\nexport interface ResultsLineArgs {\n\taverage: number;\n\tstdev?: number;\n\tclasses?: string;\n}\n\nexport class RaidSimResultsManager {\n\tstatic resultMetricCategories: { [ResultMetrics: string]: keyof ResultMetricCategories } = {\n\t\tdps: 'damage',\n\t\tdpasp: 'demo',\n\t\ttps: 'threat',\n\t\tdtps: 'threat',\n\t\ttmi: 'threat',\n\t\tcod: 'threat',\n\t\ttto: 'healing',\n\t\thps: 'healing',\n\t};\n\n\tstatic resultMetricClasses: { [ResultMetrics: string]: string } = {\n\t\tcod: 'results-sim-cod',\n\t\tdps: 'results-sim-dps',\n\t\tdpasp: 'results-sim-dpasp',\n\t\tdtps: 'results-sim-dtps',\n\t\ttmi: 'results-sim-tmi',\n\t\tdur: 'results-sim-dur',\n\t\thps: 'results-sim-hps',\n\t\ttps: 'results-sim-tps',\n\t\ttto: 'results-sim-tto',\n\t};\n\n\tstatic metricsClasses: { [ResultMetricCategories: string]: string } = {\n\t\tdamage: 'damage-metrics',\n\t\tdemo: 'demo-metrics',\n\t\thealing: 'healing-metrics',\n\t\tthreat: 'threat-metrics',\n\t};\n\n\treadonly currentChangeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\treadonly referenceChangeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly simUI: SimUI;\n\n\tprivate currentData: ReferenceData | null = null;\n\tprivate referenceData: ReferenceData | null = null;\n\n\tconstructor(simUI: SimUI) {\n\t\tthis.simUI = simUI;\n\n\t\t[this.currentChangeEmitter, this.referenceChangeEmitter].forEach(emitter => emitter.on(eventID => this.changeEmitter.emit(eventID)));\n\t}\n\n\tsetSimProgress(progress: ProgressMetrics) {\n\t\tthis.simUI.resultsViewer.setContent(\n\t\t\t<div className=\"results-sim\">\n\t\t\t\t<div className=\"results-sim-dps damage-metrics\">\n\t\t\t\t\t<span className=\"topline-result-avg\">{progress.dps.toFixed(2)}</span>\n\t\t\t\t</div>\n\t\t\t\t{this.simUI.isIndividualSim() && (\n\t\t\t\t\t<div className=\"results-sim-hps healing-metrics\">\n\t\t\t\t\t\t<span className=\"topline-result-avg\">{progress.hps.toFixed(2)}</span>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t\t<div>\n\t\t\t\t\t{progress.presimRunning ? 'presimulations running' : `${progress.completedIterations} / ${progress.totalIterations}`}\n\t\t\t\t\t<br />\n\t\t\t\t\titerations complete\n\t\t\t\t</div>\n\t\t\t</div>,\n\t\t);\n\t}\n\n\tsetSimResult(eventID: EventID, simResult: SimResult) {\n\t\tthis.currentData = {\n\t\t\tsimResult: simResult,\n\t\t\tsettings: {\n\t\t\t\traid: RaidProto.toJson(this.simUI.sim.raid.toProto()),\n\t\t\t\tencounter: EncounterProto.toJson(this.simUI.sim.encounter.toProto()),\n\t\t\t},\n\t\t\traidProto: RaidProto.clone(simResult.request.raid || RaidProto.create()),\n\t\t\tencounterProto: EncounterProto.clone(simResult.request.encounter || EncounterProto.create()),\n\t\t};\n\t\tthis.currentChangeEmitter.emit(eventID);\n\n\t\tthis.simUI.resultsViewer.setContent(\n\t\t\t<div className=\"results-sim\">\n\t\t\t\t{RaidSimResultsManager.makeToplineResultsContent(simResult)}\n\t\t\t\t<div className=\"results-sim-reference\">\n\t\t\t\t\t<a href=\"javascript:void(0)\" className=\"results-sim-set-reference\" attributes={{ role: 'button' }}>\n\t\t\t\t\t\t<i className={`fa fa-map-pin fa-lg text-${this.simUI.cssScheme} me-2`}></i>Save as Reference\n\t\t\t\t\t</a>\n\t\t\t\t\t<div className=\"results-sim-reference-bar\">\n\t\t\t\t\t\t<a href=\"javascript:void(0)\" className=\"results-sim-reference-swap me-3\" attributes={{ role: 'button' }}>\n\t\t\t\t\t\t\t<i className=\"fas fa-arrows-rotate me-1\"></i>Swap\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"javascript:void(0)\" className=\"results-sim-reference-delete\" attributes={{ role: 'button' }}>\n\t\t\t\t\t\t\t<i className=\"fa fa-times fa-lg me-1\"></i>Cancel\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>,\n\t\t);\n\n\t\tconst setResultTooltip = (selector: string, content: Element | HTMLElement | string) => {\n\t\t\tconst resultDivElem = this.simUI.resultsViewer.contentElem.querySelector<HTMLElement>(selector);\n\t\t\tif (resultDivElem) {\n\t\t\t\ttippy(resultDivElem, { content, placement: 'right' });\n\t\t\t}\n\t\t};\n\t\tsetResultTooltip('.results-sim-dps', 'Damage Per Second');\n\t\tsetResultTooltip('.results-sim-dpasp', 'Demonic Pact Average Spell Power');\n\t\tsetResultTooltip('.results-sim-tto', 'Time To OOM');\n\t\tsetResultTooltip('.results-sim-hps', 'Healing+Shielding Per Second, including overhealing.');\n\t\tsetResultTooltip('.results-sim-tps', 'Threat Per Second');\n\t\tsetResultTooltip('.results-sim-dtps', 'Damage Taken Per Second');\n\t\tsetResultTooltip('.results-sim-dur', 'Average Fight Duration');\n\t\tsetResultTooltip(\n\t\t\t'.results-sim-tmi',\n\t\t\t<>\n\t\t\t\t<p>Theck-Meloree Index (TMI)</p>\n\t\t\t\t<p>A measure of incoming damage smoothness which combines the benefits of avoidance with effective health.</p>\n\t\t\t\t<p>\n\t\t\t\t\t<b>Lower is better.</b> This represents the % of your HP to expect in a 6-second burst window based on the encounter settings.\n\t\t\t\t</p>\n\t\t\t</>,\n\t\t);\n\t\tsetResultTooltip(\n\t\t\t'.results-sim-cod',\n\t\t\t<>\n\t\t\t\t<p>Chance of Death</p>\n\t\t\t\t<p>\n\t\t\t\t\tThe percentage of iterations in which the player died, based on incoming damage from the enemies and incoming healing (see the{' '}\n\t\t\t\t\t<b>Incoming HPS</b> and <b>Healing Cadence</b> options).\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tDTPS alone is not a good measure of tankiness because it is not affected by health and ignores damage spikes. Chance of Death attempts to\n\t\t\t\t\tcapture overall tankiness.\n\t\t\t\t</p>\n\t\t\t</>,\n\t\t);\n\n\t\tif (!this.simUI.isIndividualSim()) {\n\t\t\t[...this.simUI.resultsViewer.contentElem.querySelectorAll('results-sim-reference-diff-separator')].forEach(e => e.remove());\n\t\t\t[...this.simUI.resultsViewer.contentElem.querySelectorAll('results-sim-dpasp')].forEach(e => e.remove());\n\t\t\t[...this.simUI.resultsViewer.contentElem.querySelectorAll('results-sim-tto')].forEach(e => e.remove());\n\t\t\t[...this.simUI.resultsViewer.contentElem.querySelectorAll('results-sim-hps')].forEach(e => e.remove());\n\t\t\t[...this.simUI.resultsViewer.contentElem.querySelectorAll('results-sim-tps')].forEach(e => e.remove());\n\t\t\t[...this.simUI.resultsViewer.contentElem.querySelectorAll('results-sim-dtps')].forEach(e => e.remove());\n\t\t\t[...this.simUI.resultsViewer.contentElem.querySelectorAll('results-sim-tmi')].forEach(e => e.remove());\n\t\t\t[...this.simUI.resultsViewer.contentElem.querySelectorAll('results-sim-cod')].forEach(e => e.remove());\n\t\t}\n\n\t\tconst simReferenceSetButton = this.simUI.resultsViewer.contentElem.querySelector<HTMLSpanElement>('.results-sim-set-reference');\n\t\tif (simReferenceSetButton) {\n\t\t\tsimReferenceSetButton.addEventListener('click', () => {\n\t\t\t\tthis.referenceData = this.currentData;\n\t\t\t\tthis.referenceChangeEmitter.emit(TypedEvent.nextEventID());\n\t\t\t\tthis.updateReference();\n\t\t\t});\n\t\t\ttippy(simReferenceSetButton, { content: 'Use as reference' });\n\t\t}\n\n\t\tconst simReferenceSwapButton = this.simUI.resultsViewer.contentElem.querySelector<HTMLSpanElement>('.results-sim-reference-swap');\n\t\tif (simReferenceSwapButton) {\n\t\t\tsimReferenceSwapButton.addEventListener('click', () => {\n\t\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\t\tif (this.currentData && this.referenceData) {\n\t\t\t\t\t\tconst swapEventID = TypedEvent.nextEventID();\n\t\t\t\t\t\tconst tmpData = this.currentData;\n\t\t\t\t\t\tthis.currentData = this.referenceData;\n\t\t\t\t\t\tthis.referenceData = tmpData;\n\n\t\t\t\t\t\tthis.simUI.sim.raid.fromProto(swapEventID, this.currentData.raidProto);\n\t\t\t\t\t\tthis.simUI.sim.encounter.fromProto(swapEventID, this.currentData.encounterProto);\n\t\t\t\t\t\tthis.setSimResult(swapEventID, this.currentData.simResult);\n\n\t\t\t\t\t\tthis.referenceChangeEmitter.emit(swapEventID);\n\t\t\t\t\t\tthis.updateReference();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\ttippy(simReferenceSwapButton, {\n\t\t\t\tcontent: 'Swap reference with current',\n\t\t\t\tignoreAttributes: true,\n\t\t\t});\n\t\t}\n\t\tconst simReferenceDeleteButton = this.simUI.resultsViewer.contentElem.querySelector<HTMLSpanElement>('.results-sim-reference-delete');\n\t\tif (simReferenceDeleteButton) {\n\t\t\tsimReferenceDeleteButton.addEventListener('click', () => {\n\t\t\t\tthis.referenceData = null;\n\t\t\t\tthis.referenceChangeEmitter.emit(TypedEvent.nextEventID());\n\t\t\t\tthis.updateReference();\n\t\t\t});\n\t\t\ttippy(simReferenceDeleteButton, {\n\t\t\t\tcontent: 'Remove reference',\n\t\t\t\tignoreAttributes: true,\n\t\t\t});\n\t\t}\n\n\t\tthis.updateReference();\n\t}\n\n\tprivate updateReference() {\n\t\tif (!this.referenceData || !this.currentData) {\n\t\t\t// Remove references\n\t\t\tthis.simUI.resultsViewer.contentElem.querySelector('.results-sim-reference')?.classList.remove('has-reference');\n\t\t\tthis.simUI.resultsViewer.contentElem.querySelectorAll('.results-reference').forEach(e => e.classList.add('hide'));\n\t\t\treturn;\n\t\t} else {\n\t\t\t// Add references references\n\t\t\tthis.simUI.resultsViewer.contentElem.querySelector('.results-sim-reference')?.classList.add('has-reference');\n\t\t\tthis.simUI.resultsViewer.contentElem.querySelectorAll('.results-reference').forEach(e => e.classList.remove('hide'));\n\t\t}\n\n\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['dps']} .results-reference-diff`, res => res.raidMetrics.dps, 2);\n\t\tif (this.simUI.isIndividualSim()) {\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['hps']} .results-reference-diff`, res => res.raidMetrics.hps, 2);\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['dpasp']} .results-reference-diff`, res => res.getFirstPlayer()!.dpasp, 2);\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['tto']} .results-reference-diff`, res => res.getFirstPlayer()!.tto, 2);\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['tps']} .results-reference-diff`, res => res.getFirstPlayer()!.tps, 2);\n\t\t\tthis.formatToplineResult(\n\t\t\t\t`.${RaidSimResultsManager.resultMetricClasses['dtps']} .results-reference-diff`,\n\t\t\t\tres => res.getFirstPlayer()!.dtps,\n\t\t\t\t2,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['tmi']} .results-reference-diff`, res => res.getFirstPlayer()!.tmi, 2, true);\n\t\t\tthis.formatToplineResult(\n\t\t\t\t`.${RaidSimResultsManager.resultMetricClasses['cod']} .results-reference-diff`,\n\t\t\t\tres => res.getFirstPlayer()!.chanceOfDeath,\n\t\t\t\t1,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t} else {\n\t\t\tthis.formatToplineResult(\n\t\t\t\t`.${RaidSimResultsManager.resultMetricClasses['dtps']} .results-reference-diff`,\n\t\t\t\tres => sum(res.getPlayers()!.map(player => player.dtps.avg))/res.getPlayers().length,\n\t\t\t\t2,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate formatToplineResult(\n\t\tquerySelector: string,\n\t\tgetMetrics: (result: SimResult) => DistributionMetricsProto | number,\n\t\tprecision: number,\n\t\tlowerIsBetter?: boolean,\n\t) {\n\t\tconst elem = this.simUI.resultsViewer.contentElem.querySelector<HTMLSpanElement>(querySelector);\n\t\tif (!elem) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst cur = this.currentData!.simResult;\n\t\tconst ref = this.referenceData!.simResult;\n\t\tconst curMetricsTemp = getMetrics(cur);\n\t\tconst refMetricsTemp = getMetrics(ref);\n\t\tif (typeof curMetricsTemp === 'number') {\n\t\t\tconst curMetrics = curMetricsTemp as number;\n\t\t\tconst refMetrics = refMetricsTemp as number;\n\t\t\tformatDeltaTextElem(elem, refMetrics, curMetrics, precision, lowerIsBetter);\n\t\t} else {\n\t\t\tconst curMetrics = curMetricsTemp as DistributionMetricsProto;\n\t\t\tconst refMetrics = refMetricsTemp as DistributionMetricsProto;\n\t\t\tconst isDiff = this.applyZTestTooltip(elem, ref.iterations, refMetrics.avg, refMetrics.stdev, cur.iterations, curMetrics.avg, curMetrics.stdev);\n\t\t\tformatDeltaTextElem(elem, refMetrics.avg, curMetrics.avg, precision, lowerIsBetter, !isDiff);\n\t\t}\n\t}\n\n\tprivate applyZTestTooltip(elem: HTMLElement, n1: number, avg1: number, stdev1: number, n2: number, avg2: number, stdev2: number): boolean {\n\t\tconst delta = avg1 - avg2;\n\t\tconst err1 = stdev1 / Math.sqrt(n1);\n\t\tconst err2 = stdev2 / Math.sqrt(n2);\n\t\tconst denom = Math.sqrt(Math.pow(err1, 2) + Math.pow(err2, 2));\n\t\tconst z = Math.abs(delta / denom);\n\t\tconst isDiff = z > 1.96;\n\n\t\tlet significance_str = '';\n\t\tif (isDiff) {\n\t\t\tsignificance_str = `Difference is significantly different (Z = ${z.toFixed(3)}).`;\n\t\t} else {\n\t\t\tsignificance_str = `Difference is not significantly different (Z = ${z.toFixed(3)}).`;\n\t\t}\n\t\ttippy(elem, {\n\t\t\tcontent: significance_str,\n\t\t\tignoreAttributes: true,\n\t\t});\n\n\t\treturn isDiff;\n\t}\n\n\tgetRunData(): SimRunData | null {\n\t\tif (!this.currentData) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn SimRunData.create({\n\t\t\trun: this.currentData.simResult.toProto(),\n\t\t\treferenceRun: this.referenceData?.simResult.toProto(),\n\t\t});\n\t}\n\n\tgetCurrentData(): ReferenceData | null {\n\t\tif (!this.currentData) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Defensive copy.\n\t\treturn {\n\t\t\tsimResult: this.currentData.simResult,\n\t\t\tsettings: JSON.parse(JSON.stringify(this.currentData.settings)),\n\t\t\traidProto: this.currentData.raidProto,\n\t\t\tencounterProto: this.currentData.encounterProto,\n\t\t};\n\t}\n\n\tgetReferenceData(): ReferenceData | null {\n\t\tif (!this.referenceData) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Defensive copy.\n\t\treturn {\n\t\t\tsimResult: this.referenceData.simResult,\n\t\t\tsettings: JSON.parse(JSON.stringify(this.referenceData.settings)),\n\t\t\traidProto: this.referenceData.raidProto,\n\t\t\tencounterProto: this.referenceData.encounterProto,\n\t\t};\n\t}\n\n\tstatic makeToplineResultsContent(simResult: SimResult, filter?: SimResultFilter): HTMLElement {\n\t\tconst players = simResult.getRaidIndexedPlayers(filter);\n\t\tconst content = (<></>) as HTMLElement;\n\n\t\tif (players.length === 1) {\n\t\t\tconst playerMetrics = players[0];\n\t\t\tif (playerMetrics.getTargetIndex(filter) === null) {\n\t\t\t\tconst dpsMetrics = playerMetrics.dps;\n\t\t\t\tconst dpaspMetrics = playerMetrics.dpasp;\n\t\t\t\tconst tpsMetrics = playerMetrics.tps;\n\t\t\t\tconst dtpsMetrics = playerMetrics.dtps;\n\t\t\t\tconst tmiMetrics = playerMetrics.tmi;\n\t\t\t\tcontent.appendChild(\n\t\t\t\t\tthis.buildResultsLine({\n\t\t\t\t\t\taverage: dpsMetrics.avg,\n\t\t\t\t\t\tstdev: dpsMetrics.stdev,\n\t\t\t\t\t\tclasses: this.getResultsLineClasses('dps'),\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\t// Hide dpasp if it's zero.\n\t\t\t\tconst dpaspContent = this.buildResultsLine({\n\t\t\t\t\taverage: dpaspMetrics.avg,\n\t\t\t\t\tstdev: dpaspMetrics.stdev,\n\t\t\t\t\tclasses: this.getResultsLineClasses('dpasp'),\n\t\t\t\t});\n\t\t\t\tif (dpaspMetrics.avg === 0) {\n\t\t\t\t\tdpaspContent.classList.add('hide');\n\t\t\t\t}\n\t\t\t\tcontent.appendChild(dpaspContent);\n\n\t\t\t\tcontent.appendChild(\n\t\t\t\t\tthis.buildResultsLine({\n\t\t\t\t\t\taverage: tpsMetrics.avg,\n\t\t\t\t\t\tstdev: tpsMetrics.stdev,\n\t\t\t\t\t\tclasses: this.getResultsLineClasses('tps'),\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tcontent.appendChild(\n\t\t\t\t\tthis.buildResultsLine({\n\t\t\t\t\t\taverage: dtpsMetrics.avg,\n\t\t\t\t\t\tstdev: dtpsMetrics.stdev,\n\t\t\t\t\t\tclasses: this.getResultsLineClasses('dtps'),\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\tif (players[0].spec?.specID == Spec.SpecBloodDeathKnight) {\n\t\t\t\t\tcontent.appendChild(\n\t\t\t\t\t\tthis.buildResultsLine({\n\t\t\t\t\t\t\taverage: playerMetrics.hps.avg,\n\t\t\t\t\t\t\tstdev: playerMetrics.hps.stdev,\n\t\t\t\t\t\t\tclasses: this.getResultsLineClasses('hps'),\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tcontent.appendChild(\n\t\t\t\t\tthis.buildResultsLine({\n\t\t\t\t\t\taverage: tmiMetrics.avg,\n\t\t\t\t\t\tstdev: tmiMetrics.stdev,\n\t\t\t\t\t\tclasses: this.getResultsLineClasses('tmi'),\n\t\t\t\t\t}),\n\t\t\t\t);\n\n\t\t\t\tcontent.appendChild(\n\t\t\t\t\tthis.buildResultsLine({\n\t\t\t\t\t\taverage: playerMetrics.chanceOfDeath,\n\t\t\t\t\t\tclasses: this.getResultsLineClasses('cod'),\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst actions = simResult.getRaidIndexedActionMetrics(filter);\n\t\t\t\tif (!!actions.length) {\n\t\t\t\t\tconst mergedActions = ActionMetrics.merge(actions);\n\t\t\t\t\tcontent.appendChild(\n\t\t\t\t\t\tthis.buildResultsLine({\n\t\t\t\t\t\t\taverage: mergedActions.dps,\n\t\t\t\t\t\t\tclasses: this.getResultsLineClasses('dps'),\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t\tcontent.appendChild(\n\t\t\t\t\t\tthis.buildResultsLine({\n\t\t\t\t\t\t\taverage: mergedActions.tps,\n\t\t\t\t\t\t\tclasses: this.getResultsLineClasses('tps'),\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tconst targetActions = simResult.getTargets(filter).map(target => target.actions).flat().map(action => action.forTarget({player: playerMetrics.unitIndex}));\n\t\t\t\tif (!!targetActions.length) {\n\t\t\t\t\tconst mergedTargetActions = ActionMetrics.merge(targetActions);\n\t\t\t\t\tcontent.appendChild(\n\t\t\t\t\t\tthis.buildResultsLine({\n\t\t\t\t\t\t\taverage: mergedTargetActions.dps,\n\t\t\t\t\t\t\tclasses: this.getResultsLineClasses('dtps'),\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (players[0].spec?.specID == Spec.SpecBloodDeathKnight) {\n\t\t\t\t\tcontent.appendChild(\n\t\t\t\t\t\tthis.buildResultsLine({\n\t\t\t\t\t\t\taverage: playerMetrics.hps.avg,\n\t\t\t\t\t\t\tstdev: playerMetrics.hps.stdev,\n\t\t\t\t\t\t\tclasses: this.getResultsLineClasses('hps'),\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (players[0].spec?.specID != Spec.SpecBloodDeathKnight) {\n\t\t\t\tcontent.appendChild(\n\t\t\t\t\tthis.buildResultsLine({\n\t\t\t\t\t\taverage: playerMetrics.tto.avg,\n\t\t\t\t\t\tstdev: playerMetrics.tto.stdev,\n\t\t\t\t\t\tclasses: this.getResultsLineClasses('tto'),\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t\tcontent.appendChild(\n\t\t\t\t\tthis.buildResultsLine({\n\t\t\t\t\t\taverage: playerMetrics.hps.avg,\n\t\t\t\t\t\tstdev: playerMetrics.hps.stdev,\n\t\t\t\t\t\tclasses: this.getResultsLineClasses('hps'),\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tconst dpsMetrics = simResult.raidMetrics.dps;\n\t\t\tcontent.appendChild(\n\t\t\t\tthis.buildResultsLine({\n\t\t\t\t\taverage: dpsMetrics.avg,\n\t\t\t\t\tstdev: dpsMetrics.stdev,\n\t\t\t\t\tclasses: this.getResultsLineClasses('dps'),\n\t\t\t\t}),\n\t\t\t);\n\n\t\t\tconst targetActions = simResult.getTargets(filter).map(target => target.actions).flat().map(action => action.forTarget(filter));\n\t\t\tif (!!targetActions.length) {\n\t\t\t\tconst mergedTargetActions = ActionMetrics.merge(targetActions);\n\t\t\t\tcontent.appendChild(\n\t\t\t\t\tthis.buildResultsLine({\n\t\t\t\t\t\taverage: mergedTargetActions.dps,\n\t\t\t\t\t\tclasses: this.getResultsLineClasses('dtps'),\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst hpsMetrics = simResult.raidMetrics.hps;\n\t\t\tcontent.appendChild(\n\t\t\t\tthis.buildResultsLine({\n\t\t\t\t\taverage: hpsMetrics.avg,\n\t\t\t\t\tstdev: hpsMetrics.stdev,\n\t\t\t\t\tclasses: this.getResultsLineClasses('hps'),\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tif (simResult.request.encounter?.useHealth) {\n\t\t\tcontent.appendChild(\n\t\t\t\tthis.buildResultsLine({\n\t\t\t\t\taverage: simResult.result.avgIterationDuration,\n\t\t\t\t\tclasses: this.getResultsLineClasses('dur'),\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\treturn content;\n\t}\n\n\tprivate static getResultsLineClasses(metric: keyof ResultMetrics): string {\n\t\tconst classes = [this.resultMetricClasses[metric]];\n\t\tif (this.resultMetricCategories[metric]) classes.push(this.metricsClasses[this.resultMetricCategories[metric]]);\n\n\t\treturn classes.join(' ');\n\t}\n\n\tprivate static buildResultsLine(args: ResultsLineArgs): Element {\n\t\treturn (\n\t\t\t<div className={`results-metric ${args.classes}`}>\n\t\t\t\t<span className=\"topline-result-avg\">{args.average.toFixed(2)}</span>\n\t\t\t\t{args.stdev && (\n\t\t\t\t\t<span className=\"topline-result-stdev\">\n\t\t\t\t\t\t(<i className=\"fas fa-plus-minus fa-xs\"></i>\n\t\t\t\t\t\t{args.stdev.toFixed()})\n\t\t\t\t\t</span>\n\t\t\t\t)}\n\t\t\t\t<div className=\"results-reference hide\">\n\t\t\t\t\t<span className=\"results-reference-diff\"></span> vs reference\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { element } from 'tsx-vanilla';\n\nimport { DeathKnight } from '../../player_classes/death_knight.js';\nimport { Hunter } from '../../player_classes/hunter.js';\nimport { Rogue } from '../../player_classes/rogue.js';\nimport { Warrior } from '../../player_classes/warrior.js';\nimport { PlayerSpecs } from '../../player_specs/index.js';\nimport { RaidSimResultsManager } from '../raid_sim_action.jsx';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\nexport class ToplineResults extends ResultComponent {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'topline-results-root';\n\t\tsuper(config);\n\n\t\tthis.rootElem.classList.add('results-sim');\n\t}\n\n\tonSimResult(resultData: SimResultData) {\n\t\tconst content = RaidSimResultsManager.makeToplineResultsContent(resultData.result, resultData.filter);\n\n\t\tconst noManaClasses = [DeathKnight, Rogue, Warrior, Hunter];\n\n\t\tconst players = resultData.result.getRaidIndexedPlayers(resultData.filter);\n\t\tif (players.length === 1 && !!players[0].spec && !noManaClasses.some(klass => PlayerSpecs.getPlayerClass(players[0].spec!) === klass)) {\n\t\t\tconst player = players[0];\n\t\t\tconst secondsOOM = player.secondsOomAvg;\n\t\t\tconst percentOOM = secondsOOM / resultData.result.encounterMetrics.durationSeconds;\n\t\t\tconst dangerLevel = percentOOM < 0.01 ? 'safe' : percentOOM < 0.05 ? 'warning' : 'danger';\n\n\t\t\tcontent.appendChild(\n\t\t\t\t<div className={`results-sim-percent-oom ${dangerLevel} damage-metrics`}>\n\t\t\t\t\t<span className=\"topline-result-avg\">{secondsOOM.toFixed(1)}s</span>\n\t\t\t\t</div>,\n\t\t\t);\n\t\t}\n\n\t\tthis.rootElem.innerHTML = '';\n\t\tthis.rootElem.appendChild(content);\n\t}\n}\n","import { element, fragment, ref } from 'tsx-vanilla';\n\nimport { REPO_NAME } from '../constants/other';\nimport { DetailedResultsUpdate, SimRun, SimRunData } from '../proto/ui';\nimport { SimResult } from '../proto_utils/sim_result';\nimport { SimUI } from '../sim_ui';\nimport { TypedEvent } from '../typed_event';\nimport { Component } from './component';\nimport { AuraMetricsTable } from './detailed_results/aura_metrics';\nimport { CastMetricsTable } from './detailed_results/cast_metrics';\nimport { DpsHistogram } from './detailed_results/dps_histogram';\nimport { DtpsMeleeMetricsTable } from './detailed_results/dtps_melee_metrics';\nimport { DtpsSpellMetricsTable } from './detailed_results/dtps_spell_metrics';\nimport { HealingMetricsTable } from './detailed_results/healing_metrics';\nimport { LogRunner } from './detailed_results/log_runner';\nimport { MeleeMetricsTable } from './detailed_results/melee_metrics';\nimport { PlayerDamageMetricsTable } from './detailed_results/player_damage';\nimport { PlayerDamageTakenMetricsTable } from './detailed_results/player_damage_taken';\nimport { ResourceMetricsTable } from './detailed_results/resource_metrics';\nimport { SimResultData } from './detailed_results/result_component';\nimport { ResultsFilter } from './detailed_results/results_filter';\nimport { SpellMetricsTable } from './detailed_results/spell_metrics';\nimport { Timeline } from './detailed_results/timeline';\nimport { ToplineResults } from './detailed_results/topline_results';\nimport { RaidSimResultsManager } from './raid_sim_action';\n\ndeclare let Chart: any;\n\ntype Tab = {\n\tisActive?: boolean;\n\ttargetId: string;\n\tlabel: string;\n\tclasses?: string[];\n};\n\nconst tabs: Tab[] = [\n\t{\n\t\tisActive: true,\n\t\ttargetId: 'damageTab',\n\t\tlabel: 'Damage',\n\t\tclasses: ['damage-metrics'],\n\t},\n\t{\n\t\ttargetId: 'healingTab',\n\t\tlabel: 'Healing',\n\t\tclasses: ['healing-metrics'],\n\t},\n\t{\n\t\ttargetId: 'damageTakenTab',\n\t\tlabel: 'Damage Taken',\n\t\tclasses: ['threat-metrics'],\n\t},\n\t{\n\t\ttargetId: 'buffsTab',\n\t\tlabel: 'Buffs',\n\t},\n\t{\n\t\ttargetId: 'debuffsTab',\n\t\tlabel: 'Debuffs',\n\t},\n\t{\n\t\ttargetId: 'castsTab',\n\t\tlabel: 'Casts',\n\t},\n\t{\n\t\ttargetId: 'resourcesTab',\n\t\tlabel: 'Resources',\n\t},\n\t{\n\t\ttargetId: 'timelineTab',\n\t\tlabel: 'Timeline',\n\t},\n\t{\n\t\ttargetId: 'logTab',\n\t\tlabel: 'Log',\n\t},\n];\n\nconst layoutHTML = (\n\t<div className=\"dr-root dr-no-results\">\n\t\t<div className=\"dr-toolbar\">\n\t\t\t<div className=\"results-filter\"></div>\n\t\t\t<div className=\"tabs-filler\"></div>\n\t\t\t<ul className=\"nav nav-tabs\" attributes={{ role: 'tablist' }}>\n\t\t\t\t{tabs.map(({ label, targetId, isActive, classes }) => (\n\t\t\t\t\t<li className={`nav-item dr-tab-tab ${classes?.join(' ') || ''}`} attributes={{ role: 'presentation' }}>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tclassName={`nav-link${isActive ? ' active' : ''}`}\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tattributes={{\n\t\t\t\t\t\t\t\trole: 'tab',\n\t\t\t\t\t\t\t\t// @ts-expect-error\n\t\t\t\t\t\t\t\t'aria-controls': targetId,\n\t\t\t\t\t\t\t\t'aria-selected': !!isActive,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\tdataset={{\n\t\t\t\t\t\t\t\tbsToggle: 'tab',\n\t\t\t\t\t\t\t\tbsTarget: `#${targetId}`,\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</li>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</div>\n\t\t<div className=\"tab-content\">\n\t\t\t<div id=\"noResultsTab\" className=\"tab-pane dr-tab-content fade active show\">\n\t\t\t\tRun a simulation to view results\n\t\t\t</div>\n\t\t\t<div id=\"damageTab\" className=\"tab-pane dr-tab-content damage-content fade active show\">\n\t\t\t\t<div className=\"dr-row topline-results\"></div>\n\t\t\t\t<div className=\"dr-row all-players-only\">\n\t\t\t\t\t<div className=\"player-damage-metrics\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"dr-row single-player-only\">\n\t\t\t\t\t<div className=\"melee-metrics\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"dr-row single-player-only\">\n\t\t\t\t\t<div className=\"spell-metrics\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"dr-row dps-histogram\"></div>\n\t\t\t</div>\n\t\t\t<div id=\"healingTab\" className=\"tab-pane dr-tab-content healing-content fade\">\n\t\t\t\t<div className=\"dr-row topline-results\"></div>\n\t\t\t\t<div className=\"dr-row single-player-only\">\n\t\t\t\t\t<div className=\"healing-spell-metrics\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"dr-row hps-histogram\"></div>\n\t\t\t</div>\n\t\t\t<div id=\"damageTakenTab\" className=\"tab-pane dr-tab-content damage-taken-content fade\">\n\t\t\t\t<div className=\"dr-row topline-results\"></div>\n\t\t\t\t<div className=\"dr-row all-players-only\">\n\t\t\t\t\t<div className=\"player-damage-taken-metrics\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"dr-row single-player-only\">\n\t\t\t\t\t<div className=\"dtps-melee-metrics\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"dr-row single-player-only\">\n\t\t\t\t\t<div className=\"dtps-spell-metrics\"></div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"dr-row damage-taken-histogram single-player-only\"></div>\n\t\t\t</div>\n\t\t\t<div id=\"buffsTab\" className=\"tab-pane dr-tab-content buffs-content fade\">\n\t\t\t\t<div className=\"dr-row\">\n\t\t\t\t\t<div className=\"buff-aura-metrics\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div id=\"debuffsTab\" className=\"tab-pane dr-tab-content debuffs-content fade\">\n\t\t\t\t<div className=\"dr-row\">\n\t\t\t\t\t<div className=\"debuff-aura-metrics\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div id=\"castsTab\" className=\"tab-pane dr-tab-content casts-content fade\">\n\t\t\t\t<div className=\"dr-row\">\n\t\t\t\t\t<div className=\"cast-metrics\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div id=\"resourcesTab\" className=\"tab-pane dr-tab-content resources-content fade\">\n\t\t\t\t<div className=\"dr-row\">\n\t\t\t\t\t<div className=\"resource-metrics\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div id=\"timelineTab\" className=\"tab-pane dr-tab-content timeline-content fade\">\n\t\t\t\t<div className=\"dr-row\">\n\t\t\t\t\t<div className=\"timeline\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div id=\"logTab\" className=\"tab-pane dr-tab-content log-content fade\">\n\t\t\t\t<div className=\"dr-row\">\n\t\t\t\t\t<div className=\"log\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n);\n\nexport abstract class DetailedResults extends Component {\n\tprotected readonly simUI: SimUI | null;\n\tprotected latestRun: SimRunData | null = null;\n\n\tprivate currentSimResult: SimResult | null = null;\n\tprivate resultsEmitter: TypedEvent<SimResultData | null> = new TypedEvent<SimResultData | null>();\n\tprivate resultsFilter: ResultsFilter;\n\tprivate rootDiv: HTMLElement;\n\n\tconstructor(parent: HTMLElement, simUI: SimUI | null, cssScheme: string) {\n\t\tsuper(parent, 'detailed-results-manager-root');\n\t\tthis.rootElem.appendChild(layoutHTML);\n\t\tthis.rootDiv = this.rootElem.querySelector('.dr-root')!;\n\t\tthis.simUI = simUI;\n\n\t\tthis.simUI?.sim.settingsChangeEmitter.on(async () => await this.updateSettings());\n\n\t\tChart.defaults.color = 'white';\n\n\t\t// Allow styling the sticky toolbar\n\t\tconst toolbar = document.querySelector('.dr-toolbar') as HTMLElement;\n\t\tnew IntersectionObserver(\n\t\t\t([e]) => {\n\t\t\t\te.target.classList.toggle('stuck', e.intersectionRatio < 1);\n\t\t\t},\n\t\t\t{\n\t\t\t\t// Intersect with the sim header or top of the separate tab\n\t\t\t\trootMargin: this.simUI ? `-${this.simUI.simHeader.rootElem.offsetHeight + 1}px 0px 0px 0px` : '0px',\n\t\t\t\tthreshold: [1],\n\t\t\t},\n\t\t).observe(toolbar);\n\n\t\tthis.resultsFilter = new ResultsFilter({\n\t\t\tparent: this.rootElem.querySelector('.results-filter')!,\n\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t});\n\n\t\t[...this.rootElem.querySelectorAll<HTMLElement>('.topline-results')]?.forEach(toplineResultsDiv => {\n\t\t\tnew ToplineResults({ parent: toplineResultsDiv, resultsEmitter: this.resultsEmitter });\n\t\t});\n\n\t\tnew CastMetricsTable({\n\t\t\tparent: this.rootElem.querySelector('.cast-metrics')!,\n\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t});\n\t\tnew MeleeMetricsTable({\n\t\t\tparent: this.rootElem.querySelector('.melee-metrics')!,\n\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t});\n\t\tnew SpellMetricsTable({\n\t\t\tparent: this.rootElem.querySelector('.spell-metrics')!,\n\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t});\n\t\tnew HealingMetricsTable({\n\t\t\tparent: this.rootElem.querySelector('.healing-spell-metrics')!,\n\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t});\n\t\tnew ResourceMetricsTable({\n\t\t\tparent: this.rootElem.querySelector('.resource-metrics')!,\n\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t});\n\t\tnew PlayerDamageMetricsTable(\n\t\t\t{ parent: this.rootElem.querySelector('.player-damage-metrics')!, resultsEmitter: this.resultsEmitter },\n\t\t\tthis.resultsFilter,\n\t\t);\n\t\tnew PlayerDamageTakenMetricsTable(\n\t\t\t{ parent: this.rootElem.querySelector('.player-damage-taken-metrics')!, resultsEmitter: this.resultsEmitter },\n\t\t\tthis.resultsFilter,\n\t\t);\n\t\tnew AuraMetricsTable(\n\t\t\t{\n\t\t\t\tparent: this.rootElem.querySelector('.buff-aura-metrics')!,\n\t\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t\t},\n\t\t\tfalse,\n\t\t);\n\t\tnew AuraMetricsTable(\n\t\t\t{\n\t\t\t\tparent: this.rootElem.querySelector('.debuff-aura-metrics')!,\n\t\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t\t},\n\t\t\ttrue,\n\t\t);\n\n\t\tnew DpsHistogram({\n\t\t\tparent: this.rootElem.querySelector('.dps-histogram')!,\n\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t});\n\n\t\tnew DtpsMeleeMetricsTable({\n\t\t\tparent: this.rootElem.querySelector('.dtps-melee-metrics')!,\n\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t});\n\t\tnew DtpsSpellMetricsTable({\n\t\t\tparent: this.rootElem.querySelector('.dtps-spell-metrics')!,\n\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t});\n\n\t\tconst timeline = new Timeline({\n\t\t\tparent: this.rootElem.querySelector('.timeline')!,\n\t\t\tcssScheme: cssScheme,\n\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t});\n\n\t\tconst tabEl = document.querySelector('a[data-bs-target=\"#timelineTab\"]');\n\t\ttabEl?.addEventListener('shown.bs.tab', () => {\n\t\t\ttimeline.render();\n\t\t});\n\n\t\tnew LogRunner({\n\t\t\tparent: this.rootElem.querySelector('.log')!,\n\t\t\tcssScheme: cssScheme,\n\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t});\n\n\t\tthis.rootElem.classList.add('hide-threat-metrics', 'hide-threat-metrics');\n\n\t\tthis.resultsFilter.changeEmitter.on(() => this.updateResults());\n\n\t\tthis.resultsEmitter.on((_, resultData) => {\n\t\t\tif (resultData?.filter.player || resultData?.filter.player === 0) {\n\t\t\t\tthis.rootDiv.classList.remove('all-players');\n\t\t\t\tthis.rootDiv.classList.add('single-player');\n\t\t\t} else {\n\t\t\t\tthis.rootDiv.classList.add('all-players');\n\t\t\t\tthis.rootDiv.classList.remove('single-player');\n\t\t\t}\n\t\t});\n\t}\n\n\tabstract postMessage(update: DetailedResultsUpdate): Promise<void>;\n\n\tprotected async setSimRunData(simRunData: SimRunData) {\n\t\tthis.latestRun = simRunData;\n\t\tawait this.postMessage(\n\t\t\tDetailedResultsUpdate.create({\n\t\t\t\tdata: {\n\t\t\t\t\toneofKind: 'runData',\n\t\t\t\t\trunData: simRunData,\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\t}\n\n\tprotected async updateSettings() {\n\t\tif (!this.simUI) return;\n\t\tawait this.postMessage(\n\t\t\tDetailedResultsUpdate.create({\n\t\t\t\tdata: {\n\t\t\t\t\toneofKind: 'settings',\n\t\t\t\t\tsettings: this.simUI.sim.toProto(),\n\t\t\t\t},\n\t\t\t}),\n\t\t);\n\t}\n\n\tprivate updateResults() {\n\t\tconst eventID = TypedEvent.nextEventID();\n\t\tif (this.currentSimResult == null) {\n\t\t\tthis.rootDiv.classList.add('dr-no-results');\n\t\t\tthis.resultsEmitter.emit(eventID, null);\n\t\t} else {\n\t\t\tthis.rootDiv.classList.remove('dr-no-results');\n\t\t\tthis.resultsEmitter.emit(eventID, {\n\t\t\t\teventID: eventID,\n\t\t\t\tresult: this.currentSimResult,\n\t\t\t\tfilter: this.resultsFilter.getFilter(),\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected async handleMessage(data: DetailedResultsUpdate) {\n\t\tswitch (data.data.oneofKind) {\n\t\t\tcase 'runData':\n\t\t\t\tconst runData = data.data.runData;\n\t\t\t\tthis.currentSimResult = await SimResult.fromProto(runData.run || SimRun.create());\n\t\t\t\tthis.updateResults();\n\t\t\t\tbreak;\n\t\t\tcase 'settings':\n\t\t\t\tconst settings = data.data.settings;\n\t\t\t\tif (settings.showDamageMetrics) {\n\t\t\t\t\tthis.rootElem.classList.remove('hide-damage-metrics');\n\t\t\t\t} else {\n\t\t\t\t\tthis.rootElem.classList.add('hide-damage-metrics');\n\t\t\t\t\tconst damageTabEl = document.getElementById('damageTab')!;\n\t\t\t\t\tconst healingTabEl = document.getElementById('healingTab')!;\n\t\t\t\t\tif (damageTabEl.classList.contains('active')) {\n\t\t\t\t\t\tdamageTabEl.classList.remove('active', 'show');\n\t\t\t\t\t\thealingTabEl.classList.add('active', 'show');\n\n\t\t\t\t\t\tconst toolbar = document.getElementsByClassName('dr-toolbar')[0] as HTMLElement;\n\t\t\t\t\t\ttoolbar.querySelector('.damage-metrics')?.children[0].classList.remove('active');\n\t\t\t\t\t\ttoolbar.querySelector('.healing-metrics')?.children[0].classList.add('active');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.rootElem.classList[settings.showThreatMetrics ? 'remove' : 'add']('hide-threat-metrics');\n\t\t\t\tthis.rootElem.classList[settings.showHealingMetrics ? 'remove' : 'add']('hide-healing-metrics');\n\t\t\t\tthis.rootElem.classList[settings.showExperimental ? 'remove' : 'add']('hide-experimental');\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport class WindowedDetailedResults extends DetailedResults {\n\tconstructor(parent: HTMLElement) {\n\t\tsuper(parent, null, new URLSearchParams(window.location.search).get('cssScheme') ?? '');\n\n\t\twindow.addEventListener('message', async event => await this.handleMessage(DetailedResultsUpdate.fromJson(event.data)));\n\n\t\tthis.rootElem.insertAdjacentHTML('beforeend', `<div class=\"sim-bg\"></div>`);\n\t}\n\n\tasync postMessage(update: DetailedResultsUpdate): Promise<void> {\n\t\tawait this.handleMessage(update);\n\t}\n}\n\nexport class EmbeddedDetailedResults extends DetailedResults {\n\tprivate tabWindow: Window | null = null;\n\n\tconstructor(parent: HTMLElement, simUI: SimUI, simResultsManager: RaidSimResultsManager) {\n\t\tsuper(parent, simUI, simUI.cssScheme);\n\n\t\tconst newTabBtn = (\n\t\t\t<div className=\"detailed-results-controls-div\">\n\t\t\t\t<button className=\"detailed-results-new-tab-button btn btn-primary\">View in Separate Tab</button>\n\t\t\t\t<button className=\"detailed-results-1-iteration-button btn btn-primary\">Sim 1 Iteration</button>\n\t\t\t</div>\n\t\t);\n\n\t\tthis.rootElem.prepend(newTabBtn);\n\n\t\tconst url = new URL(`${window.location.protocol}//${window.location.host}/${REPO_NAME}/detailed_results/index.html`);\n\t\turl.searchParams.append('cssClass', simUI.cssClass);\n\n\t\tif (simUI.isIndividualSim()) {\n\t\t\turl.searchParams.append('isIndividualSim', '');\n\t\t\tthis.rootElem.classList.add('individual-sim');\n\t\t}\n\n\t\tconst newTabButton = this.rootElem.querySelector('.detailed-results-new-tab-button');\n\t\tnewTabButton?.addEventListener('click', () => {\n\t\t\tif (this.tabWindow == null || this.tabWindow.closed) {\n\t\t\t\tthis.tabWindow = window.open(url.href, 'Detailed Results');\n\t\t\t\tthis.tabWindow!.addEventListener('load', async () => {\n\t\t\t\t\tif (this.latestRun) {\n\t\t\t\t\t\tawait this.updateSettings();\n\t\t\t\t\t\tawait this.setSimRunData(this.latestRun);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.tabWindow.focus();\n\t\t\t}\n\t\t});\n\n\t\tconst simButton = this.rootElem.querySelector('.detailed-results-1-iteration-button');\n\t\tsimButton?.addEventListener('click', () => {\n\t\t\t(window.opener || window.parent)!.postMessage('runOnce', '*');\n\t\t});\n\n\t\tsimResultsManager.currentChangeEmitter.on(async () => {\n\t\t\tconst runData = simResultsManager.getRunData();\n\t\t\tif (runData) {\n\t\t\t\tawait this.updateSettings();\n\t\t\t\tawait this.setSimRunData(runData);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync postMessage(update: DetailedResultsUpdate) {\n\t\tif (this.tabWindow) {\n\t\t\tthis.tabWindow.postMessage(DetailedResultsUpdate.toJson(update), '*');\n\t\t}\n\t\tawait this.handleMessage(update);\n\t}\n}\n"],"names":["element","tagName","props","children","el","tagMap","document","createElement","appendChildren","shadowRootOptions","attachShadow","attributes","style","dataset","ref","prop","specialProps","has","attr","setAttribute","Object","assign","addStyles","value","l","length","fragment","DocumentFragment","styles","name","indexOf","setProperty","parent","child","Array","isArray","append","Set","typeofJsonValue","t","encTable","split","decTable","i","charCodeAt","UnknownFieldHandler","WireType","varint64read","lowBits","highBits","shift","b","this","buf","pos","assertBounds","middleByte","Error","varint64write","lo","hi","bytes","hasNext","byte","push","splitBits","hasMoreBits","symbol","Symbol","for","onRead","typeName","message","fieldNo","wireType","data","is","no","onWrite","writer","list","tag","raw","all","filter","uf","last","slice","TWO_PWR_32_DBL","int64fromString","dec","minus","base","add1e6digit","begin","end","digit1e6","Number","int64toString","bitsLow","bitsHigh","mid","high","digitA","digitB","digitC","decimalFrom1e7","digit1e7","needLeadingZeros","partial","String","Math","floor","varint32write","varint32read","result","readBytes","BI","assertBi","bi","dv","DataView","ArrayBuffer","ok","globalThis","BigInt","getBigInt64","getBigUint64","setBigInt64","setBigUint64","MIN","MAX","UMIN","UMAX","C","V","detectBi","RE_DECIMAL_STR","HALF_2_PWR_32","SharedPbLong","constructor","isZero","toNumber","isSafeInteger","PbULong","from","ZERO","getInt32","trim","test","toString","toBigInt","setInt32","PbLong","pbl","negate","isNegative","n","defaultsRead","readUnknownField","readerFactory","BinaryReader","textDecoder","varint64","uint32","len","view","buffer","byteOffset","byteLength","TextDecoder","fatal","ignoreBOM","skip","start","Varint","Bit64","Bit32","LengthDelimited","StartGroup","EndGroup","subarray","RangeError","int32","sint32","zze","int64","uint64","sint64","s","bool","fixed32","getUint32","sfixed32","fixed64","sfixed64","float","getFloat32","double","getFloat64","string","decode","assert","condition","msg","assertInt32","arg","isInteger","assertUInt32","assertFloat32","isFinite","defaultsWrite","writeUnknownFields","writerFactory","BinaryWriter","textEncoder","stack","TextEncoder","chunks","finish","Uint8Array","offset","set","fork","join","chunk","prev","pop","type","encode","setFloat32","setFloat64","setUint32","long","sign","emitDefaultValues","enumAsInteger","useProtoFieldName","prettySpaces","ignoreUnknownFields","MESSAGE_TYPE","lowerCamelCase","snakeCase","capNext","sb","next","charAt","toUpperCase","toLowerCase","ScalarType","LongType","RepeatType","normalizeFieldInfo","field","_a","_b","_c","_d","localName","jsonName","repeat","NO","opt","oneof","kind","isOneofGroup","any","hasOwnProperty","oneofKind","keys","ReflectionTypeCheck","info","fields","prepare","req","known","oneofs","includes","values","depth","allowExcessProperties","some","k","group","find","f","repeated","scalars","T","L","scalar","INT32","messages","mapKeys","K","isAssignable","longType","argType","UINT64","FIXED64","INT64","SFIXED64","SINT64","BIGINT","NUMBER","isNaN","BOOL","STRING","BYTES","DOUBLE","FLOAT","map","FIXED32","SFIXED32","SINT32","UINT32","parseInt","reflectionLongConvert","ReflectionJsonReader","fMap","fieldsInput","fieldName","jsonValue","what","read","input","options","oneofsHandled","jsonKey","entries","target","fieldObj","jsonObjKey","jsonObjValue","val","internalJsonRead","enum","key","fieldArr","jsonItem","json","localEnumName","substring","enumNumber","e","NaN","POSITIVE_INFINITY","NEGATIVE_INFINITY","encodeURIComponent","base64Str","es","bytePos","groupPos","p","base64decode","error","ReflectionJsonWriter","write","source","jsonObj","entryKey","entryValue","messageType","enumInfo","jsonArr","optional","internalJsonWrite","ed","ulong","base64","base64encode","reflectionScalarDefault","ReflectionBinaryReader","fieldNoToField","Map","reader","get","u","d","arr","internalBinaryRead","mapKey","mapVal","mapEntry","keyRaw","create","ReflectionBinaryWriter","concat","sort","a","emitDefault","PACKED","packed","item","keyValue","handler","internalBinaryWrite","method","isDefault","scalarInfo","m","reflectionMergePartial","fieldValue","output","mergePartial","objectValues","primitiveEq","ba","bb","repeatedPrimitiveEq","repeatedMsgEq","equals","MessageType","defaultCheckDepth","refTypeCheck","refJsonReader","refJsonWriter","refBinReader","refBinWriter","defineProperty","enumerable","reflectionCreate","clone","copy","val_a","val_b","reflectionEquals","fromBinary","binaryReadOptions","fromJson","jsonReadOptions","fromJsonString","JSON","parse","toJson","jsonWriteOptions","toJsonString","stringify","toBinary","binaryWriteOptions","UnitReference_Type","Spec","Race","Faction","Class","Profession","Stat","PseudoStat","ItemType","ArmorType","WeaponType","HandType","RangedWeaponType","ItemSlot","ItemQuality","GemColor","SpellSchool","TinkerHands","Potions","Conjured","Flask","BattleElixir","GuardianElixir","Food","MobType","InputType","EnchantType","OtherAction","RotationType","UnitStats","super","stats","pseudoStats","ReforgeStat","id","fromStat","toStat","multiplier","RaidBuffs","markOfTheWild","blessingOfKings","drumsOfTheBurningWild","elementalResistanceTotem","resistanceAura","shadowProtection","aspectOfTheWild","powerWordFortitude","commandingShout","bloodPact","battleShout","hornOfWinter","strengthOfEarthTotem","trueshotAura","unleashedRage","abominationsMight","blessingOfMight","windfuryTotem","icyTalons","huntingParty","arcaneBrilliance","felIntelligence","manaSpringTotem","demonicPact","totemicWrath","flametongueTotem","moonkinForm","shadowForm","wrathOfAirTotem","arcaneTactics","ferociousInspiration","communion","leaderOfThePack","elementalOath","honorAmongThieves","rampage","terrifyingRoar","furiousHowl","bloodlust","heroism","timeWarp","manaTideTotemCount","devotionAura","stoneskinTotem","retributionAura","PartyBuffs","IndividualBuffs","innervateCount","hymnOfHopeCount","vampiricTouch","enduringWinter","soulLeach","revitalize","powerInfusionCount","unholyFrenzyCount","tricksOfTheTradeCount","divineGuardianCount","painSuppressionCount","handOfSacrificeCount","guardianSpiritCount","focusMagic","darkIntent","Debuffs","curseOfElements","ebonPlaguebringer","earthAndMoon","masterPoisoner","fireBreath","lightningBreath","criticalMass","shadowAndFlame","bloodFrenzy","hemorrhage","mangle","stampede","exposeArmor","sunderArmor","faerieFire","corrosiveSpit","savageCombat","brittleBones","acidSpit","curseOfWeakness","demoralizingRoar","demoralizingShout","vindication","scarletFever","demoralizingScreech","thunderClap","frostFever","infectedWounds","judgementsOfTheJust","dustCloud","earthShock","judgement","Consumes","flask","battleElixir","guardianElixir","food","petScrollOfAgility","petScrollOfStrength","defaultPotion","prepopPotion","defaultConjured","explosiveBigDaddy","highpoweredBoltGun","tinkerHands","TargetInput","inputType","label","tooltip","boolValue","numberValue","enumValue","enumOptions","Target","level","mobType","minBaseDamage","damageSpread","swingSpeed","dualWield","dualWieldPenalty","parryHaste","suppressDodge","spellSchool","tankIndex","targetInputs","Encounter","duration","durationVariation","executeProportion20","executeProportion25","executeProportion35","executeProportion90","useHealth","targets","PresetTarget","path","PresetEncounter","ItemRandomSuffix","ItemSpec","randomSuffix","enchant","gems","reforging","EquipmentSpec","items","SimDatabase","SimItem","SimEnchant","SimGem","randomSuffixes","enchants","reforgeStats","armorType","weaponType","handType","rangedWeaponType","gemSockets","socketBonus","weaponDamageMin","weaponDamageMax","weaponSpeed","setName","randPropPoints","effectId","color","UnitReference","index","owner","ActionID","rawId","spellId","itemId","otherId","Glyphs","prime1","prime2","prime3","major1","major2","major3","minor1","minor2","minor3","Cooldown","timings","Cooldowns","cooldowns","hpPercentForDefensives","HealingModel","hps","cadenceSeconds","cadenceVariation","inspirationUptime","burstWindow","CustomSpell","spells","spell","castsPerMinute","ItemSwap","mhItem","ohItem","rangedItem","ms","CHARACTER_LEVEL","BOSS_LEVEL","EXPERTISE_PER_QUARTER_PERCENT_REDUCTION","MELEE_CRIT_RATING_PER_CRIT_CHANCE","MELEE_HIT_RATING_PER_HIT_CHANCE","SPELL_CRIT_RATING_PER_CRIT_CHANCE","SPELL_HIT_RATING_PER_HIT_CHANCE","HASTE_RATING_PER_HASTE_PERCENT","MASTERY_RATING_PER_MASTERY_POINT","DEFENSE_RATING_PER_DEFENSE","MISS_DODGE_PARRY_BLOCK_CRIT_CHANCE_PER_DEFENSE","BLOCK_RATING_PER_BLOCK_CHANCE","RESILIENCE_RATING_PER_CRIT_REDUCTION_CHANCE","masteryPercentPerPoint","SpecAssassinationRogue","SpecCombatRogue","SpecSubtletyRogue","SpecBloodDeathKnight","SpecFrostDeathKnight","SpecUnholyDeathKnight","SpecBalanceDruid","SpecFeralDruid","SpecRestorationDruid","SpecHolyPaladin","SpecProtectionPaladin","SpecRetributionPaladin","SpecElementalShaman","SpecEnhancementShaman","SpecRestorationShaman","SpecBeastMasteryHunter","SpecMarksmanshipHunter","SpecSurvivalHunter","SpecArmsWarrior","SpecFuryWarrior","SpecProtectionWarrior","SpecArcaneMage","SpecFireMage","SpecFrostMage","SpecDisciplinePriest","SpecHolyPriest","SpecShadowPriest","SpecAfflictionWarlock","SpecDemonologyWarlock","SpecDestructionWarlock","ShamanTotems_TotemType","ElementalShaman_Options_ThunderstormRange","ShamanPrimeGlyph","ShamanMajorGlyph","ShamanMinorGlyph","EarthTotem","AirTotem","FireTotem","WaterTotem","CallTotem","ShamanShield","ShamanImbue","ShamanSyncType","ShamanTalents","acuity","convection","concussion","callOfFlame","elementalWarding","reverberation","elementalPrecision","rollingThunder","elementalFocus","elementalReach","lavaFlows","fulmination","elementalMastery","earthsGrasp","feedback","lavaSurge","earthquake","elementalWeapons","focusedStrikes","improvedShields","elementalDevastation","flurry","ancestralSwiftness","totemicReach","toughness","stormstrike","staticShock","frozenPower","seasonedWinds","searingFlames","earthenPower","shamanisticRage","maelstromWeapon","improvedLavaLash","feralSpirit","ancestralResolve","tidalFocus","sparkOfLife","resurgence","totemicFocus","focusedInsight","naturesGuardian","ancestralHealing","naturesSwiftness","naturesBlessing","soothingRains","improvedCleanseSpirit","cleansingWaters","ancestralAwakening","manaTideTotem","telluricCurrents","spiritLinkTotem","tidalWaves","blessingOfTheEternals","riptide","TotemSet","earth","air","fire","water","ShamanTotems","useFireElemental","bonusSpellpower","enhTierTenBonus","elements","ancestors","spirits","ShamanOptions","shield","call","imbueMh","totems","ElementalShaman","ElementalShaman_Options","ElementalShaman_Rotation","thunderstormRange","classOptions","EnhancementShaman","EnhancementShaman_Options","EnhancementShaman_Rotation","syncType","imbueOh","RestorationShaman","RestorationShaman_Options","RestorationShaman_Rotation","earthShieldPPM","FeralDruid_Rotation_AplType","FeralDruid_Rotation_BiteModeType","DruidPrimeGlyph","DruidMajorGlyph","DruidMinorGlyph","DruidTalents","naturesGrace","starlightWrath","naturesMajesty","genesis","moonglow","balanceOfPower","euphoria","typhoon","shootingStars","owlkinFrenzy","galeWinds","solarBeam","dreamstate","forceOfNature","sunfire","fungalGrowth","lunarShower","starfall","feralSwiftness","furor","predatoryStrikes","furySwipes","primalFury","feralAggression","kingOfTheJungle","feralCharge","thickHide","brutalImpact","nurturingInstinct","primalMadness","survivalInstincts","endlessCarnage","naturalReaction","bloodInTheWater","rendAndTear","pulverize","berserk","blessingOfTheGrove","naturalShapeshifter","naturalist","heartOfTheWild","perseverance","masterShapeshifter","improvedRejuvenation","livingSeed","furyOfStormrage","naturesBounty","empoweredTouch","malfurionsGift","efflorescence","wildGrowth","naturesCure","naturesWard","giftOfTheEarthmother","swiftRejuvenation","treeOfLife","DruidOptions","innervateTarget","BalanceDruid","BalanceDruid_Options","BalanceDruid_Rotation","okfUptime","FeralDruid","FeralDruid_Rotation","FeralDruid_Options","rotation","bearWeave","maintainFaerieFire","minCombosForRip","useRake","useBite","mangleSpam","biteTime","minCombosForBite","biteDuringExecute","ripLeeway","minRoarOffset","biteModeType","snekWeave","manualParams","rotationType","allowAoeBerserk","meleeWeave","assumeBleedActive","FeralTankDruid_Options","maulRageThreshold","maintainDemoralizingRoar","lacerateTime","startingRage","RestorationDruid","RestorationDruid_Options","RestorationDruid_Rotation","APLRotation_Type","APLActionItemSwap_SwapSet","APLValueCompare_ComparisonOperator","APLValueMath_MathOperator","APLValueIsExecutePhase_ExecutePhaseThreshold","APLValueRuneType","APLValueRuneSlot","APLValueEclipsePhase","APLRotation","SimpleRotation","APLPrepullAction","APLListItem","prepullActions","priorityList","simple","specRotationJson","APLAction","APLValue","hide","action","doAtValue","notes","APLActionCastSpell","APLActionCastFriendlySpell","APLActionChannelSpell","APLActionMultidot","APLActionMultishield","APLActionAutocastOtherCooldowns","APLActionWait","APLActionWaitUntil","APLActionSchedule","APLActionSequence","APLActionResetSequence","APLActionStrictSequence","APLActionChangeTarget","APLActionActivateAura","APLActionCancelAura","APLActionTriggerICD","APLActionItemSwap","APLActionMove","APLActionMoveDuration","APLActionCatOptimalRotationAction","APLActionCustomRotation","castSpell","castFriendlySpell","channelSpell","multidot","multishield","autocastOtherCooldowns","wait","waitUntil","schedule","sequence","resetSequence","strictSequence","changeTarget","activateAura","cancelAura","triggerIcd","itemSwap","move","moveDuration","catOptimalRotationAction","customRotation","APLValueConst","APLValueAnd","APLValueOr","APLValueNot","APLValueCompare","APLValueMath","APLValueMax","APLValueMin","APLValueCurrentTime","APLValueCurrentTimePercent","APLValueRemainingTime","APLValueRemainingTimePercent","APLValueIsExecutePhase","APLValueNumberTargets","APLValueBossSpellTimeToReady","APLValueBossSpellIsCasting","APLValueCurrentHealth","APLValueCurrentHealthPercent","APLValueCurrentMana","APLValueCurrentManaPercent","APLValueCurrentRage","APLValueCurrentEnergy","APLValueCurrentFocus","APLValueCurrentComboPoints","APLValueCurrentRunicPower","APLValueCurrentSolarEnergy","APLValueCurrentLunarEnergy","APLValueUnitIsMoving","APLValueCurrentRuneCount","APLValueCurrentNonDeathRuneCount","APLValueCurrentRuneDeath","APLValueCurrentRuneActive","APLValueRuneCooldown","APLValueNextRuneCooldown","APLValueRuneSlotCooldown","APLValueGCDIsReady","APLValueGCDTimeToReady","APLValueAutoTimeToNext","APLValueSpellCanCast","APLValueSpellIsReady","APLValueSpellTimeToReady","APLValueSpellCastTime","APLValueSpellTravelTime","APLValueSpellCPM","APLValueSpellIsChanneling","APLValueSpellChanneledTicks","APLValueSpellCurrentCost","APLValueAuraIsActive","APLValueAuraIsActiveWithReactionTime","APLValueAuraRemainingTime","APLValueAuraNumStacks","APLValueAuraInternalCooldown","APLValueAuraICDIsReadyWithReactionTime","APLValueAuraShouldRefresh","APLValueDotIsActive","APLValueDotRemainingTime","APLValueDotTickFrequency","APLValueSequenceIsComplete","APLValueSequenceIsReady","APLValueSequenceTimeToReady","APLValueChannelClipDelay","APLValueInputDelay","APLValueFrontOfTarget","APLValueTotemRemainingTime","APLValueCatExcessEnergy","APLValueCatNewSavageRoarDuration","APLValueWarlockShouldRecastDrainSoul","APLValueWarlockShouldRefreshCorruption","APLValueCurrentEclipsePhase","const","and","or","not","cmp","math","max","min","currentTime","currentTimePercent","remainingTime","remainingTimePercent","isExecutePhase","numberTargets","bossSpellTimeToReady","bossSpellIsCasting","currentHealth","currentHealthPercent","currentMana","currentManaPercent","currentRage","currentEnergy","currentFocus","currentComboPoints","currentRunicPower","currentSolarEnergy","currentLunarEnergy","unitIsMoving","currentRuneCount","currentNonDeathRuneCount","currentRuneDeath","currentRuneActive","runeCooldown","nextRuneCooldown","runeSlotCooldown","gcdIsReady","gcdTimeToReady","autoTimeToNext","spellCanCast","spellIsReady","spellTimeToReady","spellCastTime","spellTravelTime","spellCpm","spellIsChanneling","spellChanneledTicks","spellCurrentCost","auraIsActive","auraIsActiveWithReactionTime","auraRemainingTime","auraNumStacks","auraInternalCooldown","auraIcdIsReadyWithReactionTime","auraShouldRefresh","dotIsActive","dotRemainingTime","dotTickFrequency","sequenceIsComplete","sequenceIsReady","sequenceTimeToReady","channelClipDelay","inputDelay","frontOfTarget","totemRemainingTime","catExcessEnergy","catNewSavageRoarDuration","warlockShouldRecastDrainSoul","warlockShouldRefreshCorruption","druidCurrentEclipsePhase","allowRecast","interruptIf","maxDots","maxOverlap","maxShields","innerAction","actions","sequenceName","newTarget","auraId","swapSet","rangeFromTarget","vals","op","lhs","rhs","threshold","targetUnit","sourceUnit","runeType","runeSlot","eclipsePhase","totemType","WarriorPrimeGlyph","WarriorMajorGlyph","WarriorMinorGlyph","WarriorShout","WarriorTalents","warAcademy","fieldDressing","blitz","tacticalMastery","secondWind","deepWounds","drumsOfWar","tasteForBlood","sweepingStrikes","impale","improvedHamstring","improvedSlam","deadlyCalm","lambsToTheSlaughter","juggernaut","suddenDeath","wreckingCrew","throwdown","bladestorm","bloodCraze","battleTrance","cruelty","executioner","boomingVoice","rudeInterruption","piercingHowl","deathWish","enrage","dieByTheSword","ragingBlow","heroicFury","furiousAttacks","meatCleaver","intensifyRage","bloodsurge","skirmisher","titansGrip","singleMindedFury","incite","bloodAndThunder","shieldSpecialization","shieldMastery","holdTheLine","gagOrder","lastStand","concussionBlow","bastionOfDefense","warbringer","improvedRevenge","devastate","impendingVictory","thunderstruck","vigilance","heavyRepercussions","safeguard","swordAndBoard","shockwave","WarriorOptions","shout","useShatteringThrow","ArmsWarrior","ArmsWarrior_Options","ArmsWarrior_Rotation","useRecklessness","stanceSnapshot","disableExpertiseGemming","FuryWarrior","FuryWarrior_Options","FuryWarrior_Rotation","ProtectionWarrior","ProtectionWarrior_Options","ProtectionWarrior_Rotation","WarlockOptions_Summon","WarlockPrimeGlyph","WarlockMajorGlyph","WarlockMinorGlyph","WarlockTalents","doomAndGloom","improvedLifeTap","improvedCorruption","jinx","soulSiphon","siphonLife","curseOfExhaustion","improvedFear","eradication","improvedHowlOfTerror","soulSwap","shadowEmbrace","deathsEmbrace","nightfall","soulburnSeedOfCorruption","everlastingAffliction","pandemic","haunt","demonicEmbrace","darkArts","felSynergy","demonicRebirth","manaFeed","demonicAegis","masterSummoner","impendingDoom","demonicEmpowerment","improvedHealthFunnel","moltenCore","handOfGuldan","auraOfForeboding","ancientGrimoire","inferno","decimation","cremation","metamorphosis","bane","improvedImmolate","aftermath","emberstorm","improvedSearingPain","improvedSoulFire","backdraft","shadowburn","burningEmbers","soulLeech","backlash","netherWard","fireAndBrimstone","shadowfury","netherProtection","empoweredImp","baneOfHavoc","chaosBolt","WarlockOptions","summon","detonateSeed","AfflictionWarlock","AfflictionWarlock_Options","AfflictionWarlock_Rotation","DemonologyWarlock","DemonologyWarlock_Options","DemonologyWarlock_Rotation","DestructionWarlock","DestructionWarlock_Options","DestructionWarlock_Rotation","RogueOptions_PoisonImbue","RoguePrimeGlyph","RogueMajorGlyph","RogueMinorGlyph","RogueTalents","deadlyMomentum","coupDeGrace","lethality","ruthlessness","quickening","puncturingWounds","blackjack","deadlyBrew","coldBlood","vilePoisons","deadenedNerves","sealFate","murderousIntent","overkill","improvedExposeArmor","cutToTheChase","venomousWounds","vendetta","improvedRecuperate","improvedSinisterStrike","precision","improvedSliceAndDice","improvedSprint","aggression","improvedKick","lightningReflexes","revealingStrike","reinforcedLeather","improvedGouge","combatPotency","bladeTwisting","throwingSpecialization","adrenalineRush","banditsGuile","restlessBlades","killingSpree","nightstalker","improvedAmbush","relentlessStrikes","elusiveness","waylay","opportunity","initiative","energeticRecovery","findWeakness","premeditation","envelopingShadows","cheatDeath","preparation","sanguinaryVein","slaughterFromTheShadows","serratedBlades","shadowDance","RogueOptions","mhImbue","ohImbue","thImbue","startingOverkillDuration","applyPoisonsManually","vanishBreakTime","tricksOfTheTradeTarget","AssassinationRogue","AssassinationRogue_Options","AssassinationRogue_Rotation","CombatRogue","CombatRogue_Options","CombatRogue_Rotation","SubtletyRogue","SubtletyRogue_Options","SubtletyRogue_Rotation","honorAmongThievesCritRate","PriestOptions_Armor","PriestPrimeGlyph","PriestMajorGlyph","PriestMinorGlyph","PriestTalents","improvedPowerWordShield","twinDisciplines","mentalAgility","evangelism","archangel","innerSanctum","soulWarding","renewedHope","powerInfusion","atonement","innerFocus","rapture","borrowedTime","reflectiveShield","strengthOfSoul","divineAegis","painSuppression","trainOfThought","focusedWill","grace","powerWordBarrier","improvedRenew","empoweredHealing","divineFury","desperatePrayer","surgeOfLight","inspiration","divineTouch","holyConcentration","lightwell","tomeOfLight","rapidRenewal","spiritOfRedemption","serendipity","bodyAndSoul","chakra","revelations","blessedResilience","testOfFaith","heavenlyVoice","circleOfHealing","guardianSpirit","darkness","improvedShadowWordPain","veiledShadows","improvedPsychicScream","improvedMindBlast","improvedDevouringPlague","twistedFaith","shadowform","phantasm","harnessedShadows","silence","vampiricEmbrace","masochism","mindMelt","painAndSuffering","paralysis","psychicHorror","sinAndPunishment","shadowyApparition","dispersion","PriestOptions","armor","useShadowfiend","DisciplinePriest","DisciplinePriest_Options","DisciplinePriest_Rotation","powerInfusionTarget","HolyPriest","HolyPriest_Options","HolyPriest_Rotation","ShadowPriest","ShadowPriest_Options","ShadowPriest_Rotation","PaladinPrimeGlyph","PaladinMajorGlyph","PaladinMinorGlyph","Blessings","PaladinAura","PaladinSeal","PaladinJudgement","PaladinTalents","arbiterOfTheLight","protectorOfTheInnocent","judgementsOfThePure","clarityOfPurpose","lastWord","blazingLight","denounce","divineFavor","infusionOfLight","daybreak","enlightenedJudgements","beaconOfLight","speedOfLight","sacredCleansing","conviction","auraMastery","paragonOfVirtue","towerOfRadiance","blessedLife","lightOfDawn","divinity","sealsOfThePure","eternalGlory","improvedHammerOfJustice","hallowedGround","sanctuary","hammerOfTheRighteous","wrathOfTheLightbringer","reckoning","shieldOfTheRighteous","grandCrusader","holyShield","guardedByTheLight","divineGuardian","sacredDuty","shieldOfTheTemplar","ardentDefender","eyeForAnEye","crusade","improvedJudgement","guardiansFavor","ruleOfLaw","pursuitOfJustice","theArtOfWar","longArmOfTheLaw","divineStorm","sacredShield","sanctityOfBattle","sealsOfCommand","sanctifiedWrath","selflessHealer","repentance","divinePurpose","inquiryOfFaith","actsOfSacrifice","zealotry","PaladinOptions","seal","aura","useAvengingWrath","RetributionPaladin","RetributionPaladin_Options","RetributionPaladin_Rotation","ProtectionPaladin","ProtectionPaladin_Options","ProtectionPaladin_Rotation","HolyPaladin","HolyPaladin_Options","HolyPaladin_Rotation","MagePrimeGlyph","MageMajorGlyph","MageMinorGlyph","MageTalents","arcaneConcentration","improvedCounterspell","netherwindPresence","tormentTheWeak","invocation","improvedArcaneMissiles","improvedBlink","arcaneFlows","presenceOfMind","missileBarrage","prismaticCloak","improvedPolymorph","incantersAbsorption","improvedArcaneExplosion","arcanePotency","slow","netherVortex","improvedManaGem","arcanePower","masterOfElements","burningSoul","improvedFireBlast","ignite","firePower","blazingSpeed","impact","cauterize","blastWave","hotStreak","improvedScorch","moltenShields","combustion","improvedHotStreak","firestarter","improvedFlamestrike","dragonsBreath","moltenFury","pyromaniac","livingBomb","earlyFrost","piercingIce","shatter","iceFloes","improvedConeOfCold","piercingChill","permafrost","iceShards","icyVeins","fingersOfFrost","improvedFreeze","coldSnap","brainFreeze","shatteredBarrier","iceBarrier","reactiveBarrier","frostfireOrb","deepFreeze","MageOptions","ArcaneMage","ArcaneMage_Options","ArcaneMage_Rotation","focusMagicPercentUptime","focusMagicTarget","FireMage","FireMage_Options","FireMage_Rotation","FrostMage","FrostMage_Options","FrostMage_Rotation","waterElementalDisobeyChance","HunterOptions_Ammo","HunterOptions_PetType","HunterPrimeGlyph","HunterMajorGlyph","HunterMinorGlyph","HunterStingType","HunterTalents","improvedKillCommand","oneWithNature","bestialDiscipline","pathfinding","spiritBond","frenzy","improvedMendPet","cobraStrikes","fervor","focusFire","longevity","killingStreak","crouchingTigerHiddenChimera","bestialWrath","kindredSpirits","theBeastWithin","invigoration","beastMastery","goForTheThroat","efficiency","rapidKilling","sicEm","improvedSteadyShot","carefulAim","silencingShot","concussiveBarrage","piercingShots","bombardment","termination","resistanceIsFutile","rapidRecuperation","masterMarksman","readiness","posthaste","markedForDeath","chimeraShot","hunterVsWild","pathing","improvedSerpentSting","survivalTactics","trapMastery","entrapment","pointOfNoEscape","thrillOfTheHunt","counterattack","lockAndLoad","resourcefulness","mirroredBlades","tNT","toxicology","wyvernSting","noxiousStings","sniperTraining","serpentSpread","blackArrow","HunterPetTalents","serpentSwiftness","dash","greatStamina","naturalArmor","improvedCower","bloodthirsty","spikedCollar","boarsSpeed","cullingTheHerd","lionhearted","charge","heartOfThePhoenix","spidersBite","greatResistance","rabid","lickYourWounds","callOfTheWild","sharkAttack","wildHunt","bloodOfTheRhino","petBarding","guardDog","thunderstomp","graceOfTheMantis","taunt","roarOfSacrifice","intervene","silverback","dive","mobility","owlsFocus","carrionFeeder","cornered","feedingFrenzy","wolverineBite","roarOfRecovery","bullheaded","HunterOptions","ammo","petType","petUptime","timeToTrapWeaveMs","useHuntersMark","petTalents","BeastMasteryHunter","BeastMasteryHunter_Options","BeastMasteryHunter_Rotation","sting","trapWeave","viperStartManaPercent","viperStopManaPercent","allowExplosiveShotDownrank","multiDotSerpentSting","MarksmanshipHunter","MarksmanshipHunter_Options","MarksmanshipHunter_Rotation","SurvivalHunter","SurvivalHunter_Options","SurvivalHunter_Rotation","sniperTrainingUptime","BloodDeathKnight_Rotation_Opener","BloodDeathKnight_Rotation_OptimizationSetting","BloodDeathKnight_Rotation_BloodSpell","BloodDeathKnight_Rotation_BloodTapPrio","BloodDeathKnight_Rotation_Presence","DeathKnightPrimeGlyph","DeathKnightMajorGlyph","DeathKnightMinorGlyph","DeathKnightTalents","butchery","bladeBarrier","bladedArmor","improvedBloodTap","scentOfBlood","handOfDoom","bloodCakedBlade","boneShield","sanguineFortitude","bloodParasite","improvedBloodPresence","willOfTheNecropolis","runeTap","vampiricBlood","improvedDeathStrike","crimsonScourge","dancingRuneWeapon","runicPowerMastery","icyReach","nervesOfColdSteel","annihilation","lichborne","onAPaleHorse","endlessWinter","mercilessCombat","chillOfTheGrave","killingMachine","rime","pillarOfFrost","improvedIcyTalons","chilblains","hungeringCold","improvedFrostPresence","threatOfThassarian","mightOfTheFrozenWastes","howlingBlast","unholyCommand","virulence","epidemic","desecration","resilientInfection","morbidity","runicCorruption","unholyFrenzy","contagion","shadowInfusion","deathsAdvance","magicSuppression","rageOfRivendare","unholyBlight","antiMagicZone","improvedUnholyPresence","darkTransformation","suddenDoom","summonGargoyle","DeathKnightOptions","startingRunicPower","BloodDeathKnight","BloodDeathKnight_Rotation","BloodDeathKnight_Options","opener","optimizationSetting","bloodSpell","presence","bloodTapPrio","defensiveDelay","drwPestiApply","FrostDeathKnight","FrostDeathKnight_Options","FrostDeathKnight_Rotation","useAms","avgAmsSuccessRate","avgAmsHit","UnholyDeathKnight","UnholyDeathKnight_Options","UnholyDeathKnight_Rotation","unholyFrenzyTarget","ResourceType","Player","race","class","enableItemSwap","spec","talentsString","profession1","profession2","reactionTimeMs","channelClipDelayMs","inFrontOfTarget","distanceFromTarget","darkIntentUptime","equipment","consumes","bonusStats","buffs","bloodDeathKnight","frostDeathKnight","unholyDeathKnight","balanceDruid","feralDruid","restorationDruid","beastMasteryHunter","marksmanshipHunter","survivalHunter","arcaneMage","fireMage","frostMage","holyPaladin","protectionPaladin","retributionPaladin","disciplinePriest","holyPriest","shadowPriest","assassinationRogue","combatRogue","subtletyRogue","elementalShaman","enhancementShaman","restorationShaman","afflictionWarlock","demonologyWarlock","destructionWarlock","armsWarrior","furyWarrior","protectionWarrior","glyphs","healingModel","database","Party","players","Raid","parties","numActiveParties","tanks","staggerStormstrikes","targetDummies","debuffs","SimOptions","iterations","randomSeed","debug","debugFirstIteration","isTest","saveAllValues","interactive","ActionMetrics","TargetedActionMetrics","isMelee","unitIndex","casts","hits","crits","misses","dodges","parries","blocks","glances","damage","threat","healing","shielding","castTimeMs","AggregatorData","sumSq","AuraMetrics","uptimeSecondsAvg","uptimeSecondsStdev","procsAvg","aggregatorData","ResourceMetrics","events","gain","actualGain","DistributionMetrics","avg","stdev","maxSeed","minSeed","hist","allValues","binaryReadMap4","UnitMetrics","secondsOomAvg","chanceOfDeath","auras","resources","pets","dps","dpasp","dtps","tmi","tto","PartyMetrics","RaidMetrics","EncounterMetrics","RaidSimRequest","raid","encounter","simOptions","RaidSimResult","logs","firstIterationDuration","avgIterationDuration","errorResult","raidMetrics","encounterMetrics","ComputeStatsRequest","AuraStats","maxStacks","hasIcd","hasExclusiveEffect","SpellStats","isCastable","isChanneled","isMajorCooldown","hasDot","hasShield","prepullOnly","encounterOnly","hasCastTime","isFriendly","APLActionStats","warnings","APLStats","UnitMetadata","PetStats","metadata","PlayerStats","sets","baseStats","gearStats","talentsStats","buffsStats","consumesStats","finalStats","rotationStats","PartyStats","RaidStats","TargetStats","EncounterStats","ComputeStatsResult","raidStats","encounterStats","StatWeightsRequest","statsToWeigh","pseudoStatsToWeigh","epReferenceStat","player","raidBuffs","partyBuffs","StatWeightsResult","StatWeightValues","tps","pDeath","weights","weightsStdev","epValues","epValuesStdev","progressId","ProgressMetrics","BulkSimResult","completedIterations","totalIterations","completedSims","totalSims","presimRunning","finalRaidResult","finalWeightResult","finalBulkResult","BulkSimRequest","BulkSettings","baseSettings","bulkSettings","TalentLoadout","combinations","fastMode","autoEnchant","autoGem","defaultRedGem","defaultBlueGem","defaultYellowGem","defaultMetaGem","ensureMetaReqMet","iterationsPerCombo","simTalents","talentsToSim","BulkComboResult","results","equippedGearResult","ItemSpecWithSlot","itemsAdded","unitMetrics","talentLoadout","slot","Phase","Phase6","CURRENT_PHASE","REPO_NAME","pathnameParts","window","location","pathname","repoPartIdx","findIndex","part","PlayerClass","_PlayerSpec","races","armorTypes","PlayerSpec","_BloodDeathKnight","arguments","specIndex","specID","classID","friendlyName","simLink","isTankSpec","isHealingSpec","isRangedDpsSpec","isMeleeDpsSpec","canDualWield","getIcon","size","ClassDeathKnight","getSpecSiteUrl","_FrostDeathKnight","_UnholyDeathKnight","_DeathKnight","hexColor","specs","weaponTypes","rangedWeaponTypes","RaceBloodElf","RaceDraenei","RaceDwarf","RaceHuman","RaceGnome","RaceGoblin","RaceNightElf","RaceOrc","RaceTauren","RaceTroll","RaceUndead","RaceWorgen","ArmorTypePlate","ArmorTypeMail","ArmorTypeLeather","ArmorTypeCloth","WeaponTypeAxe","canUseTwoHand","WeaponTypeMace","WeaponTypePolearm","WeaponTypeSword","RangedWeaponTypeRelic","DeathKnight","_BalanceDruid","ClassDruid","_FeralDruid","_RestorationDruid","_Druid","WeaponTypeDagger","WeaponTypeFist","WeaponTypeOffHand","WeaponTypeStaff","Druid","_BeastMasteryHunter","ClassHunter","_MarksmanshipHunter","_SurvivalHunter","_Hunter","RangedWeaponTypeBow","RangedWeaponTypeCrossbow","RangedWeaponTypeGun","Hunter","_ArcaneMage","ClassMage","_FireMage","_FrostMage","_Mage","RangedWeaponTypeWand","Mage","_HolyPaladin","ClassPaladin","_ProtectionPaladin","_RetributionPaladin","_Paladin","cssClass","WeaponTypeShield","Paladin","_DisciplinePriest","ClassPriest","_HolyPriest","_ShadowPriest","_Priest","Priest","_AssassinationRogue","ClassRogue","_CombatRogue","_SubtletyRogue","_Rogue","RangedWeaponTypeThrown","Rogue","_ElementalShaman","ClassShaman","_EnhancementShaman","_RestorationShaman","_Shaman","Shaman","_AfflictionWarlock","ClassWarlock","_DemonologyWarlock","_DestructionWarlock","_Warlock","Warlock","_ArmsWarrior","ClassWarrior","_FuryWarrior","_ProtectionWarrior","_Warrior","Warrior","protoToPlayerClass","ClassUnknown","PlayerClasses","getCssClass","playerClass","replace","fromProto","protoId","naturalOrder","specToPlayerSpec","SpecUnknown","DeathKnightSpecs.BloodDeathKnight","DeathKnightSpecs.FrostDeathKnight","DeathKnightSpecs.UnholyDeathKnight","DruidSpecs.BalanceDruid","DruidSpecs.FeralDruid","DruidSpecs.RestorationDruid","HunterSpecs.BeastMasteryHunter","HunterSpecs.MarksmanshipHunter","HunterSpecs.SurvivalHunter","MageSpecs.ArcaneMage","MageSpecs.FireMage","MageSpecs.FrostMage","PaladinSpecs.HolyPaladin","PaladinSpecs.ProtectionPaladin","PaladinSpecs.RetributionPaladin","PriestSpecs.DisciplinePriest","PriestSpecs.HolyPriest","PriestSpecs.ShadowPriest","RogueSpecs.AssassinationRogue","RogueSpecs.CombatRogue","RogueSpecs.SubtletyRogue","ShamanSpecs.ElementalShaman","ShamanSpecs.EnhancementShaman","ShamanSpecs.RestorationShaman","WarlockSpecs.AfflictionWarlock","WarlockSpecs.DemonologyWarlock","WarlockSpecs.DestructionWarlock","WarriorSpecs.ArmsWarrior","WarriorSpecs.FuryWarrior","WarriorSpecs.ProtectionWarrior","getPlayerClass","playerSpec","PlayerSpecs","DeathKnightSpecs","DruidSpecs","HunterSpecs","MageSpecs","PaladinSpecs","PriestSpecs","RogueSpecs","ShamanSpecs","WarlockSpecs","WarriorSpecs","getFullSpecName","getSpecNumber","getLocalStorageKey","UIItem_FactionRestriction","Expansion","DungeonDifficulty","RepLevel","RepFaction","SourceFilterOption","RaidFilterOption","UIDatabase","UIItem","UIEnchant","UIGem","UIZone","UINPC","IconData","GlyphID","encounters","zones","npcs","itemIcons","spellIcons","glyphIds","expansion","zoneId","UIItemSource","icon","randomSuffixOptions","ilvl","phase","quality","unique","heroic","classAllowlist","requiredProfession","sources","factionRestriction","CraftedSource","DropSource","QuestSource","SoldBySource","RepSource","crafted","drop","quest","soldBy","rep","profession","difficulty","npcId","otherName","category","npcName","repFactionId","repLevel","factionId","extraTypes","enchantType","hasBuff","DatabaseFilters","raids","minMhWeaponSpeed","maxMhWeaponSpeed","minOhWeaponSpeed","maxOhWeaponSpeed","minRangedWeaponSpeed","maxRangedWeaponSpeed","oneHandedWeapons","twoHandedWeapons","matchingGemsOnly","favoriteItems","favoriteGems","favoriteEnchants","SimSettings","fixedRngSeed","showDamageMetrics","showThreatMetrics","showHealingMetrics","showExperimental","showQuickSwap","showEpValues","language","faction","filters","IndividualSimSettings","epRatios","dpsRefStat","healRefStat","tankRefStat","settings","epWeightsStats","SavedGearSet","gear","bonusStatsStats","SavedSettings","professions","playerBuffs","SavedTalents","SavedRotation","BlessingsAssignment","blessings","BlessingsAssignments","paladins","SavedEncounter","SavedRaid","RaidSimSettings","SimRun","request","SimRunData","run","referenceRun","DetailedResultsUpdate","runData","noop","stringComparator","sum","reduce","total","cur","maxIndex","v","arrayEquals","comparator","every","distinct","distinctArr","forEach","dVal","bucket","buckets","valString","stDevToConf90","stDev","N","sqrt","getEnumValues","enumType","isRightClick","event","button","downloadString","fileName","dataStr","downloadAnchorNode","body","appendChild","click","remove","formatDeltaTextElem","elem","before","after","lowerIsBetter","noColor","delta","deltaStr","toFixed","textContent","classList","Boolean","add","permutations","withoutThisElem","splice","perm","flat","permutationsWithDups","smaller","permutation","newPerm","combinationsWithDups","permutationA","permutationB","buf2hex","x","padStart","jsonStringifyCustom","indent","jsonStringifyCustomHelper","indentStr","handlerResult","str","fieldKey","jsonStringifyWithFlattenedPaths","mod","hostname","getEnvironment","isLocal","isExternal","NUM_SPECS","raidSimIcon","raidSimLabel","getTalentTreePoints","trees","tree","char","getTalentPoints","getTalentTree","classString","specString","URL","protocol","host","raidSimSiteUrl","textCssClassForClass","textCssClassForSpec","UnknownRotation","UnknownTalents","UnknownClassOptions","UnknownSpecOptions","specTypeFunctions","rotationCreate","rotationEquals","rotationCopy","rotationToJson","rotationFromJson","_obj","talentsCreate","talentsEquals","talentsCopy","talentsToJson","talentsFromJson","optionsCreate","optionsEquals","optionsCopy","optionsToJson","optionsFromJson","optionsFromPlayer","_player","obj","raceToFaction","RaceUnknown","Unknown","Alliance","Horde","withSpec","specOptions","getPlayerSpecFromPlayer","specValues","isSharpWeaponType","isBluntWeaponType","metaGemEffectEPs","getMetaGemEffectEP","gem","playerStats","canEquipItem","ItemTypeFinger","ItemTypeTrinket","ItemTypeWeapon","eligibleWeaponType","wt","HandTypeOffHand","HandTypeOneHand","ItemSlotOffHand","HandTypeTwoHand","ItemTypeRanged","pvpSeasonFromName","Wrathful","Bloodthirsty","Vicious","Ruthless","Cataclysmic","isPVPItem","getPVPSeasonFromItem","seasonName","itemTypeToSlotsMap","ItemTypeUnknown","ItemTypeHead","ItemSlotHead","ItemTypeNeck","ItemSlotNeck","ItemTypeShoulder","ItemSlotShoulder","ItemTypeBack","ItemSlotBack","ItemTypeChest","ItemSlotChest","ItemTypeWrist","ItemSlotWrist","ItemTypeHands","ItemSlotHands","ItemTypeWaist","ItemSlotWaist","ItemTypeLegs","ItemSlotLegs","ItemTypeFeet","ItemSlotFeet","ItemSlotFinger1","ItemSlotFinger2","ItemSlotTrinket1","ItemSlotTrinket2","ItemSlotRanged","getEligibleItemSlots","HandTypeMainHand","ItemSlotMainHand","Item","getEligibleEnchantSlots","Enchant","enchantAppliesToItem","sharedSlots","EnchantTypeTwoHand","EnchantTypeShield","EnchantTypeOffHand","EnchantTypeStaff","canEquipEnchant","newUnitReference","raidIndex","emptyUnitReference","makeBlessingsAssignments","numPaladins","assignments","fill","BlessingUnknown","makeBlankBlessingsAssignments","BlessingOfKings","BlessingOfMight","j","makeDefaultBlessings","orderedResourceTypes","ResourceTypeHealth","ResourceTypeMana","ResourceTypeEnergy","ResourceTypeRage","ResourceTypeComboPoints","ResourceTypeFocus","ResourceTypeRunicPower","ResourceTypeBloodRune","ResourceTypeFrostRune","ResourceTypeUnholyRune","ResourceTypeDeathRune","ResourceTypeLunarEnergy","ResourceTypeSolarEnergy","AL_CATEGORY_HARD_MODE","TypedEvent","listeners","firedEvents","frozenEvents","on","listener","dispose","off","idx","once","onceListener","eventID","emit","fe","freezeCount","frozenTypedEvents","fireEventInternal","freezeAllAndDo","func","console","typedEvents","typedEvent","frozenEvent","nextEventID","onAny","newEvent","emitter","wowheadSupportedLanguages","en","cn","de","fr","it","ko","pt","ru","getBrowserLanguageCode","browserLang","navigator","getWowheadLanguagePrefix","cachedWowheadLanguagePrefix_","setLanguageCode","newLang","cachedLanguageCode_","GEM_COLORS","GemColorUnknown","PRIMARY_COLORS","GemColorRed","GemColorYellow","GemColorBlue","SECONDARY_COLORS","GemColorGreen","GemColorPurple","GemColorOrange","socketToMatchingColors","gemColorMatchesSocket","gemColor","socketColor","gemMatchesSocket","gemEligibleForSocket","GemColorMeta","GemColorCogwheel","isUnrestrictedGem","ProfessionUnknown","GemColorPrismatic","MetaGemCondition","description","minRed","minYellow","minBlue","compareColorGreater","compareColorLesser","metaGemConditions","isMet","numRed","numYellow","numBlue","getNumInCategory","isCompareColorCondition","isOneOfEach","isTwoAndOne","isThreeOfAColor","fromMinColors","fromCompareColors","getMetaGemCondition","getMetaGemConditionDescription","metaGem","emptyGemSocketIcons","getEmptyGemSocketIconUrl","armorTypeNames","ArmorTypeUnknown","weaponTypeNames","WeaponTypeUnknown","rangedWeaponTypeNames","RangedWeaponTypeUnknown","raceNames","nameToRace","normalized","replaceAll","classNames","nameToClass","lower","professionNames","Alchemy","Blacksmithing","Enchanting","Engineering","Herbalism","Inscription","Jewelcrafting","Leatherworking","Mining","Skinning","Tailoring","Archeology","nameToProfession","statOrder","StatHealth","StatMana","StatArmor","StatBonusArmor","StatStamina","StatStrength","StatAgility","StatIntellect","StatSpirit","StatSpellPower","StatSpellHit","StatSpellCrit","StatSpellHaste","StatSpellPenetration","StatMP5","StatAttackPower","StatRangedAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","StatMastery","StatDefense","StatBlock","StatDodge","StatParry","StatResilience","StatArcaneResistance","StatFireResistance","StatFrostResistance","StatNatureResistance","StatShadowResistance","statNames","shortSecondaryStatNames","PseudoStatMainHandDps","PseudoStatOffHandDps","PseudoStatRangedDps","pseudoStatNames","PseudoStatDodge","PseudoStatParry","getClassStatName","stat","statName","slotNames","resourceNames","ResourceTypeNone","sourceNames","SourceUnknown","SourceCrafting","SourceQuest","SourceReputation","SourcePvp","SourceDungeon","SourceDungeonH","SourceRaid","SourceRaidH","raidNames","RaidUnknown","RaidIcecrownCitadel","RaidRubySanctum","RaidBlackwingDescent","RaidTheBastionOfTwilight","RaidBaradinHold","RaidThroneOfTheFourWinds","RaidFirelands","RaidDragonSoul","difficultyNames","DifficultyUnknown","DifficultyNormal","DifficultyHeroic","DifficultyTitanRuneAlpha","DifficultyTitanRuneBeta","DifficultyRaid10","DifficultyRaid10H","DifficultyRaid25","DifficultyRaid25H","REP_LEVEL_NAMES","RepLevelUnknown","RepLevelHated","RepLevelHostile","RepLevelUnfriendly","RepLevelNeutral","RepLevelFriendly","RepLevelHonored","RepLevelRevered","RepLevelExalted","REP_FACTION_NAMES","RepFactionUnknown","RepFactionTheEarthenRing","RepFactionGuardiansOfHyjal","RepFactionTherazane","RepFactionDragonmawClan","RepFactionRamkahen","RepFactionWildhammerClan","RepFactionBaradinsWardens","RepFactionHellscreamsReach","RepFactionAvengersOfHyjal","REP_FACTION_QUARTERMASTERS","masterySpellNames","masterySpellIDs","STATS_LEN","PSEUDOSTATS_LEN","UnitStat","pseudoStat","isStat","isPseudoStat","getStat","getPseudoStat","other","getName","clazz","getProtoValue","proto","setProtoValue","fromPseudoStat","getAll","allStats","allPseudoStats","Stats","initStatsArray","expectedLen","newStats","newStat","statIdx","getUnitStat","withStat","withPseudoStat","withUnitStat","addStat","subtract","scale","_stat","computeEP","epWeights","belowCaps","statCaps","asArray","toProto","fromMap","statsMap","pseudoStatsMap","statsArr","entry","statStr","pseudoStatsArr","pseudoStatstr","unitStats","getWeaponDPS","EquippedItem","reforge","_item","_enchant","_gems","_randomSuffix","_reforge","numPossibleSockets","numSockets","Gem","withItem","newEnchant","newGems","firstMatchingIndex","socketIdx","firstEligibleIndex","couldHaveExtraSocket","withEnchant","withReforge","withGemHelper","withGem","curItem","removeGemsWithId","gemId","removeAllGems","withRandomSuffix","asActionId","ActionId","fromRandomSuffix","fromItemId","asSpec","meetsSocketBonus","socketBonusStats","requiresExtraSocket","hasExtraGem","hasExtraSocket","isBlacksmithing","numSocketsOfColor","hasRandomSuffixOptions","hasSocketedGem","allSocketColors","curSocketColors","curGems","curEquippedGems","g","getProfessionRequirements","profs","getFailedProfessionRequirements","failed","BaseGear","getItemSlots","otherArray","thisItem","equalsOrBothNull","getEquippedItem","asMap","newInternalGear","withEquippedItemInternal","newSlot","newItem","canDualWield2H","removeUniqueGems","removeUniqueItems","validateWeaponCombo","mainHand","offHand","canDW2h","toDatabase","db","equippedItems","ei","itemToDB","getReforgeById","enchantToDB","gemToDB","Gear","withEquippedItem","getTrinkets","hasTrinket","hasRelic","relicItem","getAllGems","getNonMetaGems","statsFromGems","getGemsOfColor","getJCGems","getMetaGem","gemColorCounts","red","yellow","blue","hasActiveMetaGem","isMetaGemActive","hasInactiveMetaGem","itemSlot","withSingleGemSubstitution","oldGem","newGem","currentGems","withMetaGem","headItem","withoutMetaGem","withoutGems","curGear","withoutBlacksmithSockets","wristItem","handsItem","hasBluntMHWeapon","weapon","hasSharpMHWeapon","hasBluntOHWeapon","hasSharpOHWeapon","ItemSwapGear","_Database","enchantsBySlot","presetEncounters","presetTargets","loadedLeftovers","loadProto","loadPromise","fetch","then","response","getLeftovers","loadLeftoversIfNecessary","leftoverDb","reforgeStat","npc","zone","Promise","resolve","getAllItems","getItems","getItemById","getRandomSuffixById","getAvailableReforges","statIndex","getEnchants","getGems","ret","getNpc","getZone","getMatchingGems","lookupGem","itemID","lookupItemSpec","itemSpec","slots","lookupEquipmentSpec","equipSpec","gearMap","assignedSlot","lookupItemSwap","enchantSpellIdToEffectId","enchantSpellId","glyphItemToSpellId","gid","glyphSpellToItemId","getPresetEncounter","getPresetTarget","getAllPresetEncounters","getAllPresetTargets","getItemIconData","getWowheadItemTooltipData","getSpellIconData","getWowheadSpellTooltipData","getWowheadTooltipData","tooltipPostfix","url","WOWHEAD_EXPANSION_ENV","mergeSimDatabases","db1","db2","Database","buildWowheadTooltipDataset","async","lang","params","URLSearchParams","langPrefix","useBuffAura","itemLevel","gemIds","enchantId","reforgeId","randomEnchantmentId","setPieceIds","transmogId","_ActionId","baseName","iconUrl","randomSuffixId","OtherActionNone","OtherActionWait","OtherActionManaRegen","resourceTypeToIcon","OtherActionEnergyRegen","OtherActionFocusRegen","OtherActionManaGain","OtherActionRageGain","OtherActionAttack","OtherActionShoot","OtherActionPet","OtherActionRefund","OtherActionDamageTaken","OtherActionHealingModel","OtherActionBloodRuneGain","OtherActionFrostRuneGain","OtherActionUnholyRuneGain","OtherActionDeathRuneGain","OtherActionPotion","OtherActionMove","anyId","equalsIgnoringTag","setBackground","backgroundImage","makeItemUrl","searchParams","makeSpellUrl","makeItemTooltipData","makeSpellTooltipData","makeQuestUrl","makeNpcUrl","makeZoneUrl","setWowheadHref","href","setWowheadDataset","wowhead","setBackgroundAndHref","fillAndSet","setHref","filled","playerIndex","tooltipData","getTooltipData","idString","toProtoString","iconOverrideId","idOverrides","makeIconUrl","overrideTooltipData","toStringIgnoringTag","ActionIdProto","withoutTag","fromEmpty","fromSpellId","fromOtherId","fromPetName","petName","petNameToActionId","petNameToIcon","fromItem","fromReforge","fromMatch","match","idType","fromLogString","logRegex","warn","replaceAllInString","matches","matchAll","logRegexGlobal","replaceData","actionId","filledId","firstIndex","iconLabel","RegExp","defaultTargetIcon","Shadowfiend","Bloodworm","Gargoyle","Ghoul","Valkyr","Bat","Bear","Boar","Cat","Chimaera","Crab","Crocolisk","Devilsaur","Dragonhawk","Felguard","Felhunter","Infernal","Gorilla","Hyena","Imp","Moth","Owl","Raptor","Ravager","Rhino","Scorpid","Serpent","Silithid","Spider","Succubus","Tallstrider","Turtle","Wasp","Wolf","Worm","Fox","getPetIconFromName","buffAuraToSpellIdMap","_Entity","ownerName","isTarget","isPet","toHTML","className","parseAll","parseRegex","Entity","SimLog","cachedHTML","logIndex","timestamp","activeAuras","includeTimestamp","cacheOutput","html","regexp","captureArr","exec","toPrefix","prefix","formattedTimestamp","positiveTimestamp","abs","minutes","seconds","milliseconds","formatted","newActionIdLink","isAura","iconElem","actionAnchor","lines","line","lineIndex","threatMatch","parseFloat","remainder","entities","DamageDealtLog","ResourceChangedLog","AuraEventLog","AuraStacksChangeLog","MajorCooldownUsedLog","CastBeganLog","CastCompletedLog","StatChangeLog","isDamageDealt","isResourceChanged","isAuraEvent","isAuraStacksChange","isMajorCooldownUsed","isCastBegan","isCastCompleted","isStatChange","groupDuplicateTimestamps","grouped","curGroup","log","cacheKey","fn","amount","miss","crit","crush","glance","dodge","parry","block","tick","partialResist1_4","partialResist2_4","partialResist3_4","hit","isDamage","isHealing","isShielding","threatPostfix","cause","_DpsLog","damageLogs","fromLogs","damageDealtLogs","groupedDamageLogs","curDamageLogs","curDamageTotal","ddLogGroup","ddLog","newStartIdx","curLog","inWindow","DPS_WINDOW","DpsLog","ThreatLogGroup","threatBefore","threatAfter","groupedLogs","curThreat","logGroup","newThreat","threatLog","isGained","isFaded","isRefreshed","oldStacks","newStacks","AuraUptimeLog","fadedAt","stacksChange","gainedAt","entity","encounterDuration","unmatchedGainedLogs","uptimeLogs","matchingGainedIdx","gainedLog","gained","stacks","stacksChangeLogs","unmatchedLog","populateActiveAuras","auraLogs","curAuras","auraLogsIndex","curAura","resourceType","valueBefore","valueAfter","isSpend","signedDiff","verb","resourceName","resourceClass","resultString","stringToResourceType","ResourceChangedLogGroup","maxValue","allResourceChangedLogs","resourceChangedLogs","logs2","maxResource","cooldownId","manaCost","castTime","effectiveTime","castId","CastLog","castBeganLog","castCompletedLog","travelTime","totalDamage","ddl","castBeganLogs","castCompletedLogs","toBucketKey","castBeganLogsByAbility","castCompletedLogsByAbility","damageDealtLogsByAbility","castLogs","bucketKey","abilityCastsBegan","abilityCastsCompleted","abilityDamageDealt","ddIdx","cbIdx","cbLog","ccLog","nextCcLog","ddLogs","isGain","SimResultData","SimResult","party","units","getPlayers","getUnitWithIndex","getRaidIndexedPlayers","getPlayerWithRaidIndex","getFirstPlayer","getPlayerWithIndex","getTargets","getTargetWithIndex","getTargetWithEncounterIndex","unit","getDamageMetrics","DistributionMetricsProto","getActionMetrics","joinById","getPlayerAndPetActions","forTarget","getRaidIndexedActionMetrics","getSpellMetrics","hitAttempts","isMeleeAction","getMeleeMetrics","getResourceMetrics","resource","getBuffMetrics","getDebuffMetrics","uptimePercent","makeNew","resultData","raidPromise","encounterPromise","metrics","numParties","partyIndex","numPlayers","makeNewPlayer","petActionId","isPlayer","classColor","dpsLogs","threatLogs","auraUptimeLogs","majorCooldownLogs","groupedResourceLogs","majorCooldownAuraUptimeLogs","auraLog","mcdLog","getTargetIndex","maxThreat","totalDamageTaken","pet","getActionsForDisplay","getMeleeActions","getSpellActions","getHealingActions","playerLogs","petLogs","actionsPromise","actionMetrics","aurasPromise","auraMetrics","resourcesPromise","resourceMetrics","petsPromise","petMetrics","petIdPromise","playerMetrics","makeNewTarget","targetLogs","targetMetrics","numTargets","durationSeconds","averageProcs","ppm","merge","removeTag","actionIdOverride","firstAura","AuraMetricsProto","groupById","useTag","aurasToJoin","gainPerSecond","avgGain","wastedGain","firstResource","ResourceMetricsProto","resourcesToJoin","tam","combinedMetrics","avgCastTimeMs","hpm","totalHealing","manaMetrics","r","healingThroughput","avgCast","avgCastHealing","avgCastThreat","landedHits","avgHit","avgHitThreat","critPercent","missPercent","dodgePercent","parryPercent","blockPercent","glancePercent","targetData","ActionMetricsProto","firstAction","maxTargets","mergedTargets","actionsToJoin","landedHitsRaw","timeSpentCastingMs","lhr","TargetedActionMetricsProto","Component","parentElem","rootCssClass","rootElem","disposeCallbacks","disposed","customRootElement","addOnDisposeCallback","callback","Input","modObject","config","enabled","changeEmitter","inputConfig","inline","extraCssClasses","buildLabel","changedEvent","setInputValue","getSourceValue","update","labelTooltip","tippy","content","enableWhen","getInputElem","removeAttribute","showWhen","init","initialValue","defaultValue","getValue","setSourceValue","newValue","setValue","sourceToValue","src","valueToSource","inputChanged","getInputValue","newGroupContainer","BooleanPicker","inputElem","reverse","prepend","addEventListener","checked","ResultComponent","lastSimResult","resultsEmitter","_","onSimResult","hasLastSimResult","getLastSimResult","ColumnSortType","ColumnSortType2","MetricsTable","columnConfigs","onUpdate","tableElem","getElementsByClassName","bodyElem","headerRowElem","columnConfig","headerCell","headerCellClass","columnClass","ignoreAttributes","sortList","sortData","$","tablesorter","cssChildRow","sortMetrics","addRow","metric","rowElem","cellElem","fillCell","getDisplayString","customizeRowElem","addGroup","shouldCollapse","mergedMetrics","mergeMetrics","parentRow","childRows","childRow","expand","row","groupedMetrics","getGroupedMetrics","trigger","nameCellConfig","getData","metricType","playerNameCellConfig","AuraMetricsTable","useDebuffs","Descending","actionGroups","petGroups","CastMetricsTable","DpsHistogram","chartBounds","getBoundingClientRect","chartCanvas","height","width","damageMetrics","colors","labels","ctx","getContext","Chart","datasets","backgroundColor","plugins","title","display","text","legend","scales","y","beginAtZero","ticks","DtpsMeleeMetricsTable","targetActions","DtpsSpellMetricsTable","HealingMetricsTable","isObject_1","freeGlobal","global","freeSelf","self","root","Function","now_1","Date","now","reWhitespace","trimmedEndIndex","reTrimStart","_baseTrim","_Symbol","require$$0","objectProto","prototype","nativeObjectToString","symToStringTag","toStringTag","_getRawTag","isOwn","unmasked","getRawTag","require$$1","objectToString","baseGetTag","isObjectLike","baseTrim","isObject","isSymbol","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","valueOf","isBinary","nativeMax","nativeMin","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","time","args","thisArg","apply","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","setTimeout","timeWaiting","remainingWait","debounced","isInvoking","leadingEdge","clearTimeout","cancel","flush","LogRunner","virtualScroll","showDebugChangeEmitter","showDebug","logsAsHTML","logsAsText","innerHTML","searchInput","querySelector","debounce","searchLogs","scrollToTopBtn","scrollToTop","_logRunner","lastResults","initializeClusterize","scrollElem","contentElem","CustomVirtualScroll","scrollContainer","contentContainer","itemHeight","searchQuery","matchQuotesRegex","keywords","filteredLogs","logText","keyword","startsWith","endsWith","setItems","getLogs","validLogs","fragmentToString","div","cloneNode","visibleItemsCount","startIndex","placeholderTop","placeholderBottom","attachScrollListener","scrollTop","updateVisibleItems","newItems","newIndex","endIndex","visibleItems","createDocumentFragment","remainingItems","MeleeMetricsTable","petsByName","actionColors","SourceChart","allActionMetrics","actionMetric","names","am","totalDmg","bgColors","position","PlayerDamageMetricsTable","resultsFilter","chart","placement","onShow","instance","chartContainer","makeChart","setContent","playerDps","getPlayerDps","raidDps","maxDps","getFilter","setPlayer","maxDpsIndex","maxDpsTargetActions","PlayerDamageTakenMetricsTable","playerFilter","playerDtps","getPlayerDtps","raidDtps","maxDtps","maxDtpsTargetActions","ResourceMetricsTable","containerElem","childConfig","table","TypedResourceMetricsTable","contains","DropdownPicker","valueConfigs","vc","headerText","currentSelection","submenus","buttonElem","defaultLabel","listElem","buildDropdown","setOptions","newValueConfigs","valueConfig","itemElem","containsSubmenuChildren","submenu","headerElem","setOptionContent","theme","updateValue","createSubmenu","getSubmenu","equalPaths","childNodes","newSubmenu","aVal","newSrcValue","newSelection","createMissingValue","TextDropdownPicker","UnitPicker","isSelectButton","unitConfig","img","hideLabel","hideLabelWhenDefaultSelected","insertAdjacentText","ALL_UNITS","ResultsFilter","currentFilter","_filterData","refToValue","filterData","numToRef","refToNum","targetFilter","setTarget","getUnitOptions","newPlayer","UnitType","AllPlayers","AllTargets","simResult","allUnitsOption","unitOptions","curRef","option","o","SpellMetricsTable","dpsColor","manaColor","threatColor","Timeline","rendered","hiddenIds","hiddenIdsChangeEmitter","draggable","chartPicker","dpsResourcesPlotElem","rotationPlotElem","updatePlot","dpsResourcesPlot","ApexCharts","foreColor","animations","series","xaxis","noData","stroke","curve","rotationLabels","rotationTimeline","rotationHiddenIdsContainer","isMouseDown","startX","scrollLeft","ondragstart","preventDefault","onmousedown","pageX","offsetLeft","onmouseleave","onmouseup","onmousemove","walk","tickAmount","decimalsInFloat","show","yaxis","beforeResetZoom","toolbar","tooltipHandlers","custom","seriesIndex","dataPointIndex","updateRotationChart","dpsData","addDpsSeries","addDpsYAxis","tooltipHandler","addManaSeries","addThreatSeries","addMajorCooldownAnnotations","clearRotationChart","addThreatYAxis","updateOptions","dpsAxisMax","ceil","seriesName","axisBorder","axisTicks","minWidth","axisMax","colorOverride","dpsTooltip","manaLogs","maxMana","opposite","formatter","resourceTooltip","threatTooltip","mcdLogs","mcdAuraLogs","cooldownIconOffsets","mcdIdx","cdLog","cdIdx","distinctMcdAuras","mcdAuraColors","mcdAuraLog","dAura","annotations","x2","fillColor","points","image","offsetY","innerText","drawRotationTimeRuler","addResourceRow","buffsById","debuffsById","buffsAndDebuffsById","playerCastsByAbility","getSortedCastsByAbility","addCastRow","playerPets","petsLog","addSeparatorRow","addPetRow","buffsToShow","addAuraRow","targetCastsByAbility","debuffsToShow","meleeActionIds","spellActionIds","getActionCategory","fixedCategory","idToCategoryMap","meleeActionId","MELEE_ACTION_CATEGORY","spellActionId","SPELL_ACTION_CATEGORY","DEFAULT_ACTION_CATEGORY","castsByAbility","idsToGroupForRotation","categoryA","categoryB","makeLabelElem","isHiddenLabel","labelText","labelIcon","hideElem","labelElem","hiddenId","updateHidden","makeRowElem","timeToPx","filledActionId","separatorElem","resourceLogs","startValue","resourceLogGroup","cNames","resourceElem","left","percentageResources","bgElem","resourceTooltipElem","aurasById","castLog","castElem","travelTimeElem","travelTimeStr","tt","tickElem","applyAuraUptimeLogsToRow","aul","auraElem","scl","stacksChangeElem","timeToPxValue","canvas","strokeStyle","font","fillStyle","lineWidth","beginPath","moveTo","lineTo","numTicks","textAlign","lineHeight","fillText","_includeAuras","damageLog","tooltipLogItem","tooltipAurasSection","includeAuras","valToDisplayString","manaChangedLog","tooltipLogItemElem","tooltipAurasSectionElem","render","addRaidSimAction","simUI","addAction","runSim","progress","resultsManager","setSimProgress","RaidSimResultsManager","sim","simResultEmitter","setSimResult","_RaidSimResultsManager","currentChangeEmitter","referenceChangeEmitter","currentData","referenceData","resultsViewer","isIndividualSim","RaidProto","EncounterProto","raidProto","encounterProto","makeToplineResultsContent","role","cssScheme","setResultTooltip","selector","resultDivElem","querySelectorAll","simReferenceSetButton","updateReference","simReferenceSwapButton","swapEventID","tmpData","simReferenceDeleteButton","formatToplineResult","resultMetricClasses","res","getMetrics","curMetricsTemp","refMetricsTemp","curMetrics","refMetrics","isDiff","applyZTestTooltip","n1","avg1","stdev1","n2","avg2","stdev2","err1","err2","denom","pow","z","significance_str","getRunData","getCurrentData","getReferenceData","dpsMetrics","dpaspMetrics","tpsMetrics","dtpsMetrics","tmiMetrics","buildResultsLine","average","classes","getResultsLineClasses","dpaspContent","mergedActions","mergedTargetActions","hpsMetrics","resultMetricCategories","metricsClasses","cod","dur","demo","ToplineResults","noManaClasses","klass","secondsOOM","percentOOM","dangerLevel","layoutHTML","isActive","targetId","bsToggle","bsTarget","DetailedResults","latestRun","currentSimResult","rootDiv","settingsChangeEmitter","updateSettings","defaults","IntersectionObserver","toggle","intersectionRatio","rootMargin","simHeader","offsetHeight","observe","toplineResultsDiv","timeline","tabEl","updateResults","setSimRunData","simRunData","postMessage","handleMessage","damageTabEl","getElementById","healingTabEl","WindowedDetailedResults","search","insertAdjacentHTML","EmbeddedDetailedResults","simResultsManager","tabWindow","newTabBtn","newTabButton","closed","open","focus","simButton"],"mappings":"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ASA,GAAwB,IACjC,MAASA,GAAwB,IAGjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASE,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GAGjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GAGjC,KAAQF,GAAwB,GAChC,KAAQA,GAAwB,GAChC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASE,GAAwB,GACjC,MAASA,GAAwB,GAGjC,KAAQ,IACR,KAAQ,IACR,KAAQ,IACR,MAASF,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASE,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,KAAQC,GAA0B,GAGlC,IAAOD,GAAwB,IAC/B,IAAOA,GAAwB,IAC/B,IAAOA,GAAwB,GAC/B,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,IAAOA,GAAwB,IAC/B,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,IAAOA,GAAwB,GAC/B,MAASA,GAAwB,IACjC,KAAQA,GAAwB,IAChC,KAAQA,GAAwB,GAChC,KAAQA,GAAwB,GAChC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IAGjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IAGjC,MAAS,GACT,MAAS,GACT,MAASF,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,KAAQA,GAAwB,IAChC,KAAQA,GAAwB,IAChC,MAASA,GAAwB,IACjC,MAASE,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,KAAQA,GAAwB,IAChC,MAASA,GAAwB,IACjC,GAAMC,GAA0B,GAChC,KAAQA,GAA0B,GAClC,KAAQA,GAA0B,GAGlC,MAASH,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASG,GAA0B,GACnC,MAASA,GAA0B,GACnC,MAASA,GAA0B,GAGnC,MAASD,GAAwB,KACjC,MAASA,GAAwB,KACjC,MAASA,GAAwB,KACjC,MAASA,GAAwB,KACjC,MAASA,GAAwB,KACjC,MAASA,GAAwB,KACjC,MAASA,GAAwB,MAG5BG,GAAuC,CAC5C,KACA,KACA,MACA,MACA,MACA,OAGKqB,GAA2C,CAACniE,GAAa8sB,mBAAoB9sB,GAAa+sB,kBC30CzF,SAAS03C,GAAiBC,GAC1BA,EAAAC,UAAU,WAAY,cAAct7B,SACzCq7B,EAAME,QAAQC,IACbC,EAAeC,eAAeF,EAAQ,MAIlC,MAAAC,EAAiB,IAAIE,GAAsBN,GAI1C,OAHPA,EAAMO,IAAIC,iBAAiBl3C,IAAG,CAACO,EAAS4qC,KACxB2L,EAAAK,aAAa52C,EAAS4qC,EAAS,IAExC2L,CACR,CAkCO,MAAMM,GAAN,MAAMA,EAyCZ,WAAAjuH,CAAYutH,GAVH/yH,KAAA0zH,qBAAyC,IAAIz3C,GAC7Cj8E,KAAA2zH,uBAA2C,IAAI13C,GAE/Cj8E,KAAAgzG,cAAkC,IAAI/2B,GAI/Cj8E,KAAQ4zH,YAAoC,KAC5C5zH,KAAQ6zH,cAAsC,KAG7C7zH,KAAK+yH,MAAQA,EAEb,CAAC/yH,KAAK0zH,qBAAsB1zH,KAAK2zH,wBAAwBzkD,SAAQyO,GAAWA,EAAQtB,OAAcr8E,KAAKgzG,cAAcn2B,KAAKD,MAC3H,CAEA,cAAAw2C,CAAeF,GACdlzH,KAAK+yH,MAAMe,cAAchR,WACvBlmH,EAAA,MAAI,CAAAwjG,UAAU,eACbxjG,EAAA,OAAIwjG,UAAU,oCACb,OAAA,CAAKA,UAAU,sBAAsB8yB,EAAS/9D,IAAI6b,QAAQ,KAE3DhxE,KAAK+yH,MAAMgB,mBACVn3H,EAAA,MAAA,CAAIwjG,UAAU,mCACbxjG,EAAA,OAAK,CAAAwjG,UAAU,sBAAsB8yB,EAAStsG,IAAIoqD,QAAQ,KAG5Dp0E,EAAA,MACC,KAAAs2H,EAASj5D,cAAgB,yBAA2B,GAAGi5D,EAASr5D,yBAAyBq5D,EAASp5D,kBAClGl9D,EAAA,KAAA,MAAK,wBAKV,CAEA,YAAA42H,CAAa52C,EAAkB4qC,GAC9BxnH,KAAK4zH,YAAc,CAClBpM,YACA36C,SAAU,CACTjX,KAAMo+D,GAAUl8G,OAAO9X,KAAK+yH,MAAMO,IAAI19D,KAAKo2B,WAC3Cn2B,UAAWo+D,GAAen8G,OAAO9X,KAAK+yH,MAAMO,IAAIz9D,UAAUm2B,YAE3DkoC,UAAWF,GAAU98G,MAAMswG,EAAUz5C,QAAQnY,MAAQo+D,GAAUn/G,UAC/Ds/G,eAAgBF,GAAe/8G,MAAMswG,EAAUz5C,QAAQlY,WAAao+D,GAAep/G,WAE/E7U,KAAA0zH,qBAAqB72C,KAAKD,GAE/B58E,KAAK+yH,MAAMe,cAAchR,WACvBlmH,EAAA,MAAA,CAAIwjG,UAAU,eACbqzB,EAAsBW,0BAA0B5M,KAChD,OAAIpnB,UAAU,2BACb,IAAA,CAAExF,KAAK,qBAAqBwF,UAAU,4BAA4B7iG,WAAY,CAAE82H,KAAM,WACrFz3H,EAAA,KAAEwjG,UAAW,4BAA4BpgG,KAAK+yH,MAAMuB,mBAAsB,uBAE3E,MAAI,CAAAl0B,UAAU,6BACdxjG,EAAC,KAAEg+F,KAAK,qBAAqBwF,UAAU,kCAAkC7iG,WAAY,CAAE82H,KAAM,aAC3F,IAAE,CAAAj0B,UAAU,8BAAgC,UAE7C,IAAE,CAAAxF,KAAK,qBAAqBwF,UAAU,+BAA+B7iG,WAAY,CAAE82H,KAAM,WACxFz3H,EAAA,IAAA,CAAEwjG,UAAU,2BAA6B,cAOzC,MAAAm0B,EAAmB,CAACC,EAAkB7gB,KAC3C,MAAM8gB,EAAgBz0H,KAAK+yH,MAAMe,cAAcnU,YAAYT,cAA2BsV,GAClFC,GACH/gB,EAAM+gB,EAAe,CAAE9gB,UAAS8O,UAAW,SAC5C,EAED8R,EAAiB,mBAAoB,qBACrCA,EAAiB,qBAAsB,oCACvCA,EAAiB,mBAAoB,eACrCA,EAAiB,mBAAoB,wDACrCA,EAAiB,mBAAoB,qBACrCA,EAAiB,oBAAqB,2BACtCA,EAAiB,mBAAoB,0BACrCA,EACC,4BAEE33H,EAAA,IAAA,KAAE,+BACF,IAAE,KAAA,2GACHA,EAAC,SACCA,EAAA,IAAA,KAAE,oBAAoB,6GAI1B23H,EACC,mBACA33H,EAAA0B,EAAA,OACE,IAAE,KAAA,mBACF1B,EAAA,IAAA,KAAE,iIAC6H,IAC9HA,EAAA,IAAA,KAAE,gBAAgB,QAAMA,EAAA,IAAA,KAAE,mBAAmB,cAE/CA,EAAC,IAAE,KAAA,0KAOAoD,KAAK+yH,MAAMgB,oBACf,IAAI/zH,KAAK+yH,MAAMe,cAAcnU,YAAY+U,iBAAiB,yCAAyCxlD,SAAa98D,GAAAA,EAAEm+D,WAClH,IAAIvwE,KAAK+yH,MAAMe,cAAcnU,YAAY+U,iBAAiB,sBAAsBxlD,SAAa98D,GAAAA,EAAEm+D,WAC/F,IAAIvwE,KAAK+yH,MAAMe,cAAcnU,YAAY+U,iBAAiB,oBAAoBxlD,SAAa98D,GAAAA,EAAEm+D,WAC7F,IAAIvwE,KAAK+yH,MAAMe,cAAcnU,YAAY+U,iBAAiB,oBAAoBxlD,SAAa98D,GAAAA,EAAEm+D,WAC7F,IAAIvwE,KAAK+yH,MAAMe,cAAcnU,YAAY+U,iBAAiB,oBAAoBxlD,SAAa98D,GAAAA,EAAEm+D,WAC7F,IAAIvwE,KAAK+yH,MAAMe,cAAcnU,YAAY+U,iBAAiB,qBAAqBxlD,SAAa98D,GAAAA,EAAEm+D,WAC9F,IAAIvwE,KAAK+yH,MAAMe,cAAcnU,YAAY+U,iBAAiB,oBAAoBxlD,SAAa98D,GAAAA,EAAEm+D,WAC7F,IAAIvwE,KAAK+yH,MAAMe,cAAcnU,YAAY+U,iBAAiB,oBAAoBxlD,SAAa98D,GAAAA,EAAEm+D,YAG9F,MAAMokD,EAAwB30H,KAAK+yH,MAAMe,cAAcnU,YAAYT,cAA+B,8BAC9FyV,IACmBA,EAAA1f,iBAAiB,SAAS,KAC/Cj1G,KAAK6zH,cAAgB7zH,KAAK4zH,YAC1B5zH,KAAK2zH,uBAAuB92C,KAAKZ,GAAWuB,eAC5Cx9E,KAAK40H,iBAAgB,IAEtBlhB,EAAMihB,EAAuB,CAAEhhB,QAAS,sBAGzC,MAAMkhB,EAAyB70H,KAAK+yH,MAAMe,cAAcnU,YAAYT,cAA+B,+BAC/F2V,IACoBA,EAAA5f,iBAAiB,SAAS,KAChDh5B,GAAWiB,gBAAe,KACrB,GAAAl9E,KAAK4zH,aAAe5zH,KAAK6zH,cAAe,CACrC,MAAAiB,EAAc74C,GAAWuB,cACzBu3C,EAAU/0H,KAAK4zH,YACrB5zH,KAAK4zH,YAAc5zH,KAAK6zH,cACxB7zH,KAAK6zH,cAAgBkB,EAErB/0H,KAAK+yH,MAAMO,IAAI19D,KAAKuO,UAAU2wD,EAAa90H,KAAK4zH,YAAYM,WAC5Dl0H,KAAK+yH,MAAMO,IAAIz9D,UAAUsO,UAAU2wD,EAAa90H,KAAK4zH,YAAYO,gBACjEn0H,KAAKwzH,aAAasB,EAAa90H,KAAK4zH,YAAYpM,WAE3CxnH,KAAA2zH,uBAAuB92C,KAAKi4C,GACjC90H,KAAK40H,iBACN,IACA,IAEFlhB,EAAMmhB,EAAwB,CAC7BlhB,QAAS,8BACT4C,kBAAkB,KAGpB,MAAMye,EAA2Bh1H,KAAK+yH,MAAMe,cAAcnU,YAAYT,cAA+B,iCACjG8V,IACsBA,EAAA/f,iBAAiB,SAAS,KAClDj1G,KAAK6zH,cAAgB,KACrB7zH,KAAK2zH,uBAAuB92C,KAAKZ,GAAWuB,eAC5Cx9E,KAAK40H,iBAAgB,IAEtBlhB,EAAMshB,EAA0B,CAC/BrhB,QAAS,mBACT4C,kBAAkB,KAIpBv2G,KAAK40H,iBACN,CAEQ,eAAAA,GACP,IAAK50H,KAAK6zH,gBAAkB7zH,KAAK4zH,YAIhC,OAFK5zH,KAAA+yH,MAAMe,cAAcnU,YAAYT,cAAc,2BAA2BhuC,UAAUX,OAAO,sBAC/FvwE,KAAK+yH,MAAMe,cAAcnU,YAAY+U,iBAAiB,sBAAsBxlD,SAAQ98D,GAAKA,EAAE8+D,UAAUE,IAAI,UAIpGpxE,KAAA+yH,MAAMe,cAAcnU,YAAYT,cAAc,2BAA2BhuC,UAAUE,IAAI,iBAC5FpxE,KAAK+yH,MAAMe,cAAcnU,YAAY+U,iBAAiB,sBAAsBxlD,SAAQ98D,GAAKA,EAAE8+D,UAAUX,OAAO,UAGxGvwE,KAAAi1H,oBAAoB,IAAIxB,EAAsByB,oBAAyB,+BAAoCC,GAAAA,EAAI/+D,YAAYjB,KAAK,GACjIn1D,KAAK+yH,MAAMgB,mBACT/zH,KAAAi1H,oBAAoB,IAAIxB,EAAsByB,oBAAyB,+BAAoCC,GAAAA,EAAI/+D,YAAYxvC,KAAK,GACrI5mB,KAAKi1H,oBAAoB,IAAIxB,EAAsByB,oBAA2B,iCAA6BC,GAAOA,EAAIjqB,iBAAkB91C,OAAO,GAC/Ip1D,KAAKi1H,oBAAoB,IAAIxB,EAAsByB,oBAAyB,+BAA6BC,GAAOA,EAAIjqB,iBAAkB31C,KAAK,GAC3Iv1D,KAAKi1H,oBAAoB,IAAIxB,EAAsByB,oBAAyB,+BAA6BC,GAAOA,EAAIjqB,iBAAkB9xC,KAAK,GACtIp5D,KAAAi1H,oBACJ,IAAIxB,EAAsByB,oBAA0B,gCACpDC,GAAOA,EAAIjqB,iBAAkB71C,MAC7B,GACA,GAEDr1D,KAAKi1H,oBAAoB,IAAIxB,EAAsByB,oBAAyB,+BAA6BC,GAAOA,EAAIjqB,iBAAkB51C,KAAK,GAAG,GACzIt1D,KAAAi1H,oBACJ,IAAIxB,EAAsByB,oBAAyB,+BACnDC,GAAOA,EAAIjqB,iBAAkBn2C,eAC7B,GACA,IAGI/0D,KAAAi1H,oBACJ,IAAIxB,EAAsByB,oBAA0B,gCAC7CC,GAAA5mD,GAAI4mD,EAAIrqB,aAAc36F,KAAI4oD,GAAUA,EAAO1D,KAAKf,OAAM6gE,EAAIrqB,aAAazsG,QAC9E,GACA,EAGH,CAEQ,mBAAA42H,CACP/V,EACAkW,EACA1lF,EACAkhC,GAEA,MAAMH,EAAOzwE,KAAK+yH,MAAMe,cAAcnU,YAAYT,cAA+BA,GACjF,IAAKzuC,EACJ,OAGK,MAAA/B,EAAM1uE,KAAK4zH,YAAapM,UACxB9pH,EAAMsC,KAAK6zH,cAAerM,UAC1B6N,EAAiBD,EAAW1mD,GAC5B4mD,EAAiBF,EAAW13H,GAC9B,GAA0B,iBAAnB23H,EAA6B,CAGvC7kD,GAAoBC,EADD6kD,EADAD,EAE+B3lF,EAAWkhC,EAAa,KACpE,CACN,MAAM2kD,EAAaF,EACbG,EAAaF,EACbG,EAASz1H,KAAK01H,kBAAkBjlD,EAAM/yE,EAAIw0D,WAAYsjE,EAAWlhE,IAAKkhE,EAAWjhE,MAAOma,EAAIxc,WAAYqjE,EAAWjhE,IAAKihE,EAAWhhE,OACrHic,GAAAC,EAAM+kD,EAAWlhE,IAAKihE,EAAWjhE,IAAK5kB,EAAWkhC,GAAgB6kD,EACtF,CACD,CAEQ,iBAAAC,CAAkBjlD,EAAmBklD,EAAYC,EAAcC,EAAgBC,EAAYC,EAAcC,GAChH,MAAMllD,EAAQ8kD,EAAOG,EACfE,EAAOJ,EAASlyH,KAAK+rE,KAAKimD,GAC1BO,EAAOF,EAASryH,KAAK+rE,KAAKomD,GAC1BK,EAAQxyH,KAAK+rE,KAAK/rE,KAAKyyH,IAAIH,EAAM,GAAKtyH,KAAKyyH,IAAIF,EAAM,IACrDG,EAAI1yH,KAAK49F,IAAIzwB,EAAQqlD,GACrBV,EAASY,EAAI,KAEnB,IAAIC,EAAmB,GAWhB,OATNA,EADGb,EACgB,8CAA8CY,EAAErlD,QAAQ,OAExD,kDAAkDqlD,EAAErlD,QAAQ,OAEhF0iC,EAAMjjC,EAAM,CACXkjC,QAAS2iB,EACT/f,kBAAkB,IAGZkf,CACR,CAEA,UAAAc,GACK,OAACv2H,KAAK4zH,YAIH5lD,GAAWn5D,OAAO,CACxBo5D,IAAKjuE,KAAK4zH,YAAYpM,UAAUx7B,UAChC9d,aAAcluE,KAAK6zH,eAAerM,UAAUx7B,YALrC,IAOT,CAEA,cAAAwqC,GACK,OAACx2H,KAAK4zH,YAKH,CACNpM,UAAWxnH,KAAK4zH,YAAYpM,UAC5B36C,SAAUj1D,KAAKC,MAAMD,KAAKK,UAAUjY,KAAK4zH,YAAY/mD,WACrDqnD,UAAWl0H,KAAK4zH,YAAYM,UAC5BC,eAAgBn0H,KAAK4zH,YAAYO,gBAR1B,IAUT,CAEA,gBAAAsC,GACK,OAACz2H,KAAK6zH,cAKH,CACNrM,UAAWxnH,KAAK6zH,cAAcrM,UAC9B36C,SAAUj1D,KAAKC,MAAMD,KAAKK,UAAUjY,KAAK6zH,cAAchnD,WACvDqnD,UAAWl0H,KAAK6zH,cAAcK,UAC9BC,eAAgBn0H,KAAK6zH,cAAcM,gBAR5B,IAUT,CAEA,gCAAOC,CAA0B5M,EAAsBxlH,GAChD,MAAAyvD,EAAU+1D,EAAUxc,sBAAsBhpG,GAC1C2xG,EAAa/2G,EAAA0B,EAAA,MAEf,GAAmB,IAAnBmzD,EAAQpzD,OAAc,CACnB,MAAA0wG,EAAgBt9C,EAAQ,GAC9B,GAA6C,OAAzCs9C,EAAcnB,eAAe5rG,GAAkB,CAClD,MAAM00H,EAAa3nB,EAAc55C,IAC3BwhE,EAAe5nB,EAAc35C,MAC7BwhE,EAAa7nB,EAAc31C,IAC3By9D,EAAc9nB,EAAc15C,KAC5ByhE,EAAa/nB,EAAcz5C,IACzBq+C,EAAAtjC,YACPrwE,KAAK+2H,iBAAiB,CACrBC,QAASN,EAAWpiE,IACpBC,MAAOmiE,EAAWniE,MAClB0iE,QAASj3H,KAAKk3H,sBAAsB,UAKhC,MAAAC,EAAen3H,KAAK+2H,iBAAiB,CAC1CC,QAASL,EAAariE,IACtBC,MAAOoiE,EAAapiE,MACpB0iE,QAASj3H,KAAKk3H,sBAAsB,WAEZ,IAArBP,EAAariE,KACH6iE,EAAAjmD,UAAUE,IAAI,QAE5BuiC,EAAQtjC,YAAY8mD,GAEZxjB,EAAAtjC,YACPrwE,KAAK+2H,iBAAiB,CACrBC,QAASJ,EAAWtiE,IACpBC,MAAOqiE,EAAWriE,MAClB0iE,QAASj3H,KAAKk3H,sBAAsB,UAG9BvjB,EAAAtjC,YACPrwE,KAAK+2H,iBAAiB,CACrBC,QAASH,EAAYviE,IACrBC,MAAOsiE,EAAYtiE,MACnB0iE,QAASj3H,KAAKk3H,sBAAsB,WAIlCzlE,EAAQ,GAAG/C,MAAMuO,QAAU5kD,GAAKsQ,sBAC3BgrF,EAAAtjC,YACPrwE,KAAK+2H,iBAAiB,CACrBC,QAASjoB,EAAcnoF,IAAI0tC,IAC3BC,MAAOw6C,EAAcnoF,IAAI2tC,MACzB0iE,QAASj3H,KAAKk3H,sBAAsB,UAK/BvjB,EAAAtjC,YACPrwE,KAAK+2H,iBAAiB,CACrBC,QAASF,EAAWxiE,IACpBC,MAAOuiE,EAAWviE,MAClB0iE,QAASj3H,KAAKk3H,sBAAsB,UAI9BvjB,EAAAtjC,YACPrwE,KAAK+2H,iBAAiB,CACrBC,QAASjoB,EAAch6C,cACvBkiE,QAASj3H,KAAKk3H,sBAAsB,SAEtC,KACM,CACA,MAAAtzF,EAAU4jF,EAAU1b,4BAA4B9pG,GAClD,GAAE4hC,EAAQvlC,OAAQ,CACf,MAAA+4H,EAAgB3kE,GAAc88C,MAAM3rE,GAClC+vE,EAAAtjC,YACPrwE,KAAK+2H,iBAAiB,CACrBC,QAASI,EAAcjiE,IACvB8hE,QAASj3H,KAAKk3H,sBAAsB,UAG9BvjB,EAAAtjC,YACPrwE,KAAK+2H,iBAAiB,CACrBC,QAASI,EAAch+D,IACvB69D,QAASj3H,KAAKk3H,sBAAsB,SAGvC,CAEM,MAAA/c,EAAgBqN,EAAUpc,WAAWppG,GAAQmO,KAAImB,GAAUA,EAAOsyB,UAAS6tC,OAAOthE,QAAc4nB,EAAO8zE,UAAU,CAAC9yC,OAAQg2C,EAAcn8C,cAC1I,GAAEunD,EAAc97G,OAAQ,CACrB,MAAAg5H,EAAsB5kE,GAAc88C,MAAM4K,GACxCxG,EAAAtjC,YACPrwE,KAAK+2H,iBAAiB,CACrBC,QAASK,EAAoBliE,IAC7B8hE,QAASj3H,KAAKk3H,sBAAsB,UAGvC,CAEIzlE,EAAQ,GAAG/C,MAAMuO,QAAU5kD,GAAKsQ,sBAC3BgrF,EAAAtjC,YACPrwE,KAAK+2H,iBAAiB,CACrBC,QAASjoB,EAAcnoF,IAAI0tC,IAC3BC,MAAOw6C,EAAcnoF,IAAI2tC,MACzB0iE,QAASj3H,KAAKk3H,sBAAsB,SAIxC,CAEIzlE,EAAQ,GAAG/C,MAAMuO,QAAU5kD,GAAKsQ,uBAC3BgrF,EAAAtjC,YACPrwE,KAAK+2H,iBAAiB,CACrBC,QAASjoB,EAAcx5C,IAAIjB,IAC3BC,MAAOw6C,EAAcx5C,IAAIhB,MACzB0iE,QAASj3H,KAAKk3H,sBAAsB,UAG9BvjB,EAAAtjC,YACPrwE,KAAK+2H,iBAAiB,CACrBC,QAASjoB,EAAcnoF,IAAI0tC,IAC3BC,MAAOw6C,EAAcnoF,IAAI2tC,MACzB0iE,QAASj3H,KAAKk3H,sBAAsB,UAGvC,KACM,CACA,MAAAR,EAAalP,EAAUpxD,YAAYjB,IACjCw+C,EAAAtjC,YACPrwE,KAAK+2H,iBAAiB,CACrBC,QAASN,EAAWpiE,IACpBC,MAAOmiE,EAAWniE,MAClB0iE,QAASj3H,KAAKk3H,sBAAsB,UAItC,MAAM/c,EAAgBqN,EAAUpc,WAAWppG,GAAQmO,KAAcmB,GAAAA,EAAOsyB,UAAS6tC,OAAOthE,QAAc4nB,EAAO8zE,UAAU7pG,KACnH,GAAEm4G,EAAc97G,OAAQ,CACrB,MAAAg5H,EAAsB5kE,GAAc88C,MAAM4K,GACxCxG,EAAAtjC,YACPrwE,KAAK+2H,iBAAiB,CACrBC,QAASK,EAAoBliE,IAC7B8hE,QAASj3H,KAAKk3H,sBAAsB,UAGvC,CAEM,MAAAI,EAAa9P,EAAUpxD,YAAYxvC,IACjC+sF,EAAAtjC,YACPrwE,KAAK+2H,iBAAiB,CACrBC,QAASM,EAAWhjE,IACpBC,MAAO+iE,EAAW/iE,MAClB0iE,QAASj3H,KAAKk3H,sBAAsB,SAGvC,CAWO,OATH1P,EAAUz5C,QAAQlY,WAAW1yC,WACxBwwF,EAAAtjC,YACPrwE,KAAK+2H,iBAAiB,CACrBC,QAASxP,EAAUzjH,OAAOmyD,qBAC1B+gE,QAASj3H,KAAKk3H,sBAAsB,UAKhCvjB,CACR,CAEA,4BAAeujB,CAAsBngB,GACpC,MAAMkgB,EAAU,CAACj3H,KAAKk1H,oBAAoBne,IAGnC,OAFH/2G,KAAKu3H,uBAAuBxgB,IAASkgB,EAAQr2H,KAAKZ,KAAKw3H,eAAex3H,KAAKu3H,uBAAuBxgB,KAE/FkgB,EAAQrsH,KAAK,IACrB,CAEA,uBAAemsH,CAAiBrZ,GAE9B,OAAA9gH,EAAC,OAAIwjG,UAAW,kBAAkBsd,EAAKuZ,WACrCr6H,EAAA,OAAK,CAAAwjG,UAAU,sBAAsBsd,EAAKsZ,QAAQhmD,QAAQ,IAC1D0sC,EAAKnpD,SACJ,OAAK,CAAA6rC,UAAU,wBAAuB,IACrCxjG,EAAC,KAAEwjG,UAAU,4BACbsd,EAAKnpD,MAAMyc,UAAU,KAGvBp0E,EAAA,MAAA,CAAIwjG,UAAU,0BACbxjG,EAAA,QAAKwjG,UAAU,2BAAgC,iBAIpD,GApgBAqzB,GAAO8D,uBAAoF,CAC1FpiE,IAAK,SACLC,MAAO,OACPgE,IAAK,SACL/D,KAAM,SACNC,IAAK,SACLmiE,IAAK,SACLliE,IAAK,UACL3uC,IAAK,WAGN6sG,GAAOyB,oBAA2D,CACjEuC,IAAK,kBACLtiE,IAAK,kBACLC,MAAO,oBACPC,KAAM,mBACNC,IAAK,kBACLoiE,IAAK,kBACL9wG,IAAK,kBACLwyC,IAAK,kBACL7D,IAAK,mBAGNk+D,GAAO+D,eAA+D,CACrEnkE,OAAQ,iBACRskE,KAAM,eACNpkE,QAAS,kBACTD,OAAQ,kBA5BH,IAAM+/D,GAANI,GC9CA,MAAMmE,WAAuBziB,GACnC,WAAA3vG,CAAYstG,GACXA,EAAOT,aAAe,uBACtBn4F,MAAM44F,GAED9yG,KAAAsyG,SAASphC,UAAUE,IAAI,cAC7B,CAEA,WAAAmkC,CAAY9I,GACX,MAAMkH,EAAU0f,GAAsBe,0BAA0B3nB,EAAW1oG,OAAQ0oG,EAAWzqG,QAExF61H,EAAgB,CAACl4D,GAAa+C,GAAOkB,GAAS9C,IAE9CrP,EAAUg7C,EAAW1oG,OAAOinG,sBAAsByB,EAAWzqG,QAC/D,GAAmB,IAAnByvD,EAAQpzD,QAAkBozD,EAAQ,GAAG/C,OAASmpE,EAAcxpH,MAAKypH,GAAStxD,GAAYF,eAAe7U,EAAQ,GAAG/C,QAAWopE,IAAQ,CAChI,MACAC,EADStmE,EAAQ,GACGqD,cACpBkjE,EAAaD,EAAatrB,EAAW1oG,OAAOsyD,iBAAiB+4C,gBAC7D6oB,EAAcD,EAAa,IAAO,OAASA,EAAa,IAAO,UAAY,SAEzErkB,EAAAtjC,cACN,MAAA,CAAI+vB,UAAW,2BAA2B63B,oBAC1Cr7H,EAAC,OAAK,CAAAwjG,UAAU,sBAAsB23B,EAAW/mD,QAAQ,GAAG,MAG/D,CAEAhxE,KAAKsyG,SAAS0M,UAAY,GACrBh/G,KAAAsyG,SAASjiC,YAAYsjC,EAC3B,ECLD,MA2CMukB,KACJ,MAAI,CAAA93B,UAAU,yBACbxjG,EAAA,MAAA,CAAIwjG,UAAU,cACbxjG,EAAA,MAAA,CAAIwjG,UAAU,mBACdxjG,EAAA,MAAA,CAAIwjG,UAAU,gBACdxjG,EAAA,KAAA,CAAGwjG,UAAU,eAAe7iG,WAAY,CAAE82H,KAAM,YAhDhC,CACnB,CACC8D,UAAU,EACVC,SAAU,YACV32G,MAAO,SACPw1G,QAAS,CAAC,mBAEX,CACCmB,SAAU,aACV32G,MAAO,UACPw1G,QAAS,CAAC,oBAEX,CACCmB,SAAU,iBACV32G,MAAO,eACPw1G,QAAS,CAAC,mBAEX,CACCmB,SAAU,WACV32G,MAAO,SAER,CACC22G,SAAU,aACV32G,MAAO,WAER,CACC22G,SAAU,WACV32G,MAAO,SAER,CACC22G,SAAU,eACV32G,MAAO,aAER,CACC22G,SAAU,cACV32G,MAAO,YAER,CACC22G,SAAU,SACV32G,MAAO,QAUCtR,KAAI,EAAGsR,QAAO22G,WAAUD,WAAUlB,aACtCr6H,EAAA,KAAA,CAAGwjG,UAAW,uBAAuB62B,GAASrsH,KAAK,MAAQ,KAAMrN,WAAY,CAAE82H,KAAM,iBACrFz3H,EAAC,IAAA,CACAwjG,UAAW,YAAW+3B,EAAW,UAAY,IAC7CntH,KAAK,SACLzN,WAAY,CACX82H,KAAM,MAEN,gBAAiB+D,EACjB,kBAAmBD,GAEpB16H,QAAS,CACR46H,SAAU,MACVC,SAAU,IAAIF,MAEd32G,QAMN7kB,EAAC,MAAI,CAAAwjG,UAAU,iBACb,MAAI,CAAA9lF,GAAG,eAAe8lF,UAAU,4CAA2C,sCAG3E,MAAA,CAAI9lF,GAAG,YAAY8lF,UAAU,2DAC5BxjG,EAAA,MAAA,CAAIwjG,UAAU,2BACfxjG,EAAC,OAAIwjG,UAAU,6BACb,MAAA,CAAIA,UAAU,2BAEfxjG,EAAA,MAAA,CAAIwjG,UAAU,6BACbxjG,EAAA,MAAA,CAAIwjG,UAAU,mBAEhBxjG,EAAC,MAAI,CAAAwjG,UAAU,6BACbxjG,EAAA,MAAI,CAAAwjG,UAAU,qBAEf,OAAIA,UAAU,0BAEfxjG,EAAA,MAAA,CAAI0d,GAAG,aAAa8lF,UAAU,gDAC7BxjG,EAAA,MAAA,CAAIwjG,UAAU,2BACdxjG,EAAA,MAAA,CAAIwjG,UAAU,6BACbxjG,EAAA,MAAA,CAAIwjG,UAAU,2BAEfxjG,EAAA,MAAA,CAAIwjG,UAAU,0BAEhBxjG,EAAC,MAAI,CAAA0d,GAAG,iBAAiB8lF,UAAU,qDAClCxjG,EAAC,MAAI,CAAAwjG,UAAU,2BACdxjG,EAAA,MAAA,CAAIwjG,UAAU,6BACb,MAAA,CAAIA,UAAU,iCAEfxjG,EAAA,MAAA,CAAIwjG,UAAU,6BACbxjG,EAAA,MAAA,CAAIwjG,UAAU,wBAEfxjG,EAAA,MAAI,CAAAwjG,UAAU,6BACdxjG,EAAC,MAAI,CAAAwjG,UAAU,0BAEf,MAAI,CAAAA,UAAU,sDAEfxjG,EAAA,MAAA,CAAI0d,GAAG,WAAW8lF,UAAU,8CAC3BxjG,EAAA,MAAA,CAAIwjG,UAAU,UACbxjG,EAAA,MAAA,CAAIwjG,UAAU,0BAGhB,MAAA,CAAI9lF,GAAG,aAAa8lF,UAAU,gDAC7BxjG,EAAA,MAAA,CAAIwjG,UAAU,UACbxjG,EAAA,MAAA,CAAIwjG,UAAU,0BAGhBxjG,EAAA,MAAI,CAAA0d,GAAG,WAAW8lF,UAAU,gDAC3B,MAAI,CAAAA,UAAU,UACbxjG,EAAA,MAAA,CAAIwjG,UAAU,qBAGhB,MAAI,CAAA9lF,GAAG,eAAe8lF,UAAU,kDAC/BxjG,EAAA,OAAIwjG,UAAU,UACbxjG,EAAA,MAAA,CAAIwjG,UAAU,yBAGhB,MAAI,CAAA9lF,GAAG,cAAc8lF,UAAU,mDAC9B,MAAA,CAAIA,UAAU,UACbxjG,EAAA,MAAA,CAAIwjG,UAAU,eAGjBxjG,EAAC,MAAI,CAAA0d,GAAG,SAAS8lF,UAAU,4CAC1BxjG,EAAC,MAAI,CAAAwjG,UAAU,UACbxjG,EAAA,MAAI,CAAAwjG,UAAU,YAOb,MAAem4B,WAAwBpmB,GAS7C,WAAA3sG,CAAY5G,EAAqBm0H,EAAqBuB,GACrDp6G,MAAMtb,EAAQ,iCARfoB,KAAUw4H,UAA+B,KAEzCx4H,KAAQy4H,iBAAqC,KACrCz4H,KAAAq1G,eAAmD,IAAIp5B,GAMzDj8E,KAAAsyG,SAASjiC,YAAY6nD,IAC1Bl4H,KAAK04H,QAAU14H,KAAKsyG,SAAS4M,cAAc,YAC3Cl/G,KAAK+yH,MAAQA,EAER/yH,KAAA+yH,OAAOO,IAAIqF,sBAAsBt8C,IAAGqb,eAAkB13F,KAAK44H,mBAEhEtf,MAAMuf,SAAS1zG,MAAQ,QAGjB,MAAAqlG,EAAUttH,SAASgiH,cAAc,eACnC,IAAA4Z,sBACH,EAAE1mH,MACDA,EAAEd,OAAO4/D,UAAU6nD,OAAO,QAAS3mH,EAAE4mH,kBAAoB,EAAC,GAE3D,CAECC,WAAYj5H,KAAK+yH,MAAQ,IAAI/yH,KAAK+yH,MAAMmG,UAAU5mB,SAAS6mB,aAAe,kBAAoB,MAC9F70F,UAAW,CAAC,KAEZ80F,QAAQ5O,GAELxqH,KAAAuiH,cAAgB,IAAImE,GAAc,CACtC9nH,OAAQoB,KAAKsyG,SAAS4M,cAAc,mBACpC7J,eAAgBr1G,KAAKq1G,iBAGrB,IAAGr1G,KAAKsyG,SAASoiB,iBAA8B,sBAAsBxlD,SAA6BmqD,IAClG,IAAIzB,GAAe,CAAEh5H,OAAQy6H,EAAmBhkB,eAAgBr1G,KAAKq1G,gBAAgB,IAGtF,IAAIqD,GAAiB,CACpB95G,OAAQoB,KAAKsyG,SAAS4M,cAAc,iBACpC7J,eAAgBr1G,KAAKq1G,iBAEtB,IAAIsM,GAAkB,CACrB/iH,OAAQoB,KAAKsyG,SAAS4M,cAAc,kBACpC7J,eAAgBr1G,KAAKq1G,iBAEtB,IAAIyS,GAAkB,CACrBlpH,OAAQoB,KAAKsyG,SAAS4M,cAAc,kBACpC7J,eAAgBr1G,KAAKq1G,iBAEtB,IAAIgF,GAAoB,CACvBz7G,OAAQoB,KAAKsyG,SAAS4M,cAAc,0BACpC7J,eAAgBr1G,KAAKq1G,iBAEtB,IAAIyO,GAAqB,CACxBllH,OAAQoB,KAAKsyG,SAAS4M,cAAc,qBACpC7J,eAAgBr1G,KAAKq1G,iBAElB,IAAAiN,GACH,CAAE1jH,OAAQoB,KAAKsyG,SAAS4M,cAAc,0BAA4B7J,eAAgBr1G,KAAKq1G,gBACvFr1G,KAAKuiH,eAEF,IAAAgB,GACH,CAAE3kH,OAAQoB,KAAKsyG,SAAS4M,cAAc,gCAAkC7J,eAAgBr1G,KAAKq1G,gBAC7Fr1G,KAAKuiH,eAEF,IAAAlK,GACH,CACCz5G,OAAQoB,KAAKsyG,SAAS4M,cAAc,sBACpC7J,eAAgBr1G,KAAKq1G,iBAEtB,GAEG,IAAAgD,GACH,CACCz5G,OAAQoB,KAAKsyG,SAAS4M,cAAc,wBACpC7J,eAAgBr1G,KAAKq1G,iBAEtB,GAGD,IAAIsD,GAAa,CAChB/5G,OAAQoB,KAAKsyG,SAAS4M,cAAc,kBACpC7J,eAAgBr1G,KAAKq1G,iBAGtB,IAAI6E,GAAsB,CACzBt7G,OAAQoB,KAAKsyG,SAAS4M,cAAc,uBACpC7J,eAAgBr1G,KAAKq1G,iBAEtB,IAAI+E,GAAsB,CACzBx7G,OAAQoB,KAAKsyG,SAAS4M,cAAc,uBACpC7J,eAAgBr1G,KAAKq1G,iBAGhB,MAAAikB,EAAW,IAAIpR,GAAS,CAC7BtpH,OAAQoB,KAAKsyG,SAAS4M,cAAc,aACpCoV,YACAjf,eAAgBr1G,KAAKq1G,iBAGhBkkB,EAAQr8H,SAASgiH,cAAc,oCAC9Bqa,GAAAtkB,iBAAiB,gBAAgB,KACvCqkB,EAASzG,QAAO,IAGjB,IAAInU,GAAU,CACb9/G,OAAQoB,KAAKsyG,SAAS4M,cAAc,QACpCoV,YACAjf,eAAgBr1G,KAAKq1G,iBAGtBr1G,KAAKsyG,SAASphC,UAAUE,IAAI,sBAAuB,uBAEnDpxE,KAAKuiH,cAAcvP,cAAc32B,IAAG,IAAMr8E,KAAKw5H,kBAE/Cx5H,KAAKq1G,eAAeh5B,IAAG,CAACi5B,EAAG7I,KACtBA,GAAYzqG,OAAO+2D,QAAwC,IAA9B0zC,GAAYzqG,OAAO+2D,QAC9C/4D,KAAA04H,QAAQxnD,UAAUX,OAAO,eACzBvwE,KAAA04H,QAAQxnD,UAAUE,IAAI,mBAEtBpxE,KAAA04H,QAAQxnD,UAAUE,IAAI,eACtBpxE,KAAA04H,QAAQxnD,UAAUX,OAAO,iBAC/B,GAEF,CAIA,mBAAgBkpD,CAAcC,GAC7B15H,KAAKw4H,UAAYkB,QACX15H,KAAK25H,YACVxrD,GAAsBt5D,OAAO,CAC5BtT,KAAM,CACLiM,UAAW,UACX4gE,QAASsrD,KAIb,CAEA,oBAAgBd,GACV54H,KAAK+yH,aACJ/yH,KAAK25H,YACVxrD,GAAsBt5D,OAAO,CAC5BtT,KAAM,CACLiM,UAAW,WACXq/D,SAAU7sE,KAAK+yH,MAAMO,IAAItnC,aAI7B,CAEQ,aAAAwtC,GACD,MAAA58C,EAAUX,GAAWuB,cACE,MAAzBx9E,KAAKy4H,kBACHz4H,KAAA04H,QAAQxnD,UAAUE,IAAI,iBACtBpxE,KAAAq1G,eAAex4B,KAAKD,EAAS,QAE7B58E,KAAA04H,QAAQxnD,UAAUX,OAAO,iBACzBvwE,KAAAq1G,eAAex4B,KAAKD,EAAS,CACjCA,UACA74E,OAAQ/D,KAAKy4H,iBACbz2H,OAAQhC,KAAKuiH,cAAcY,cAG9B,CAEA,mBAAgByW,CAAcr4H,GACrB,OAAAA,EAAKA,KAAKiM,WACjB,IAAK,UACE,MAAA4gE,EAAU7sE,EAAKA,KAAK6sE,QACrBpuE,KAAAy4H,uBAAyB9tB,GAAUxmC,UAAUiK,EAAQH,KAAOH,GAAOj5D,UACxE7U,KAAKw5H,gBACL,MACD,IAAK,WACE,MAAA3sD,EAAWtrE,EAAKA,KAAKsrE,SAC3B,GAAIA,EAASd,kBACP/rE,KAAAsyG,SAASphC,UAAUX,OAAO,2BACzB,CACDvwE,KAAAsyG,SAASphC,UAAUE,IAAI,uBACtB,MAAAyoD,EAAc38H,SAAS48H,eAAe,aACtCC,EAAe78H,SAAS48H,eAAe,cAC7C,GAAID,EAAY3oD,UAAUizC,SAAS,UAAW,CACjC0V,EAAA3oD,UAAUX,OAAO,SAAU,QAC1BwpD,EAAA7oD,UAAUE,IAAI,SAAU,QAErC,MAAMo5C,EAAUttH,SAAS84G,uBAAuB,cAAc,GACtDwU,EAAAtL,cAAc,oBAAoBniH,SAAS,GAAGm0E,UAAUX,OAAO,UAC/Di6C,EAAAtL,cAAc,qBAAqBniH,SAAS,GAAGm0E,UAAUE,IAAI,SACtE,CACD,CACApxE,KAAKsyG,SAASphC,UAAUrE,EAASb,kBAAoB,SAAW,OAAO,uBACvEhsE,KAAKsyG,SAASphC,UAAUrE,EAASZ,mBAAqB,SAAW,OAAO,wBACxEjsE,KAAKsyG,SAASphC,UAAUrE,EAASX,iBAAmB,SAAW,OAAO,qBAGzE,EAGM,MAAM8tD,WAAgCzB,GAC5C,WAAA/yH,CAAY5G,GACLsb,MAAAtb,EAAQ,KAAM,IAAIi5F,gBAAgB17B,OAAOC,SAAS69D,QAAQ7lH,IAAI,cAAgB,IAEpF+nD,OAAO84C,iBAAiB,WAAWvd,MAAM5nB,SAAe9vE,KAAK45H,cAAczrD,GAAsB12D,SAASq4D,EAAMvuE,SAE3GvB,KAAAsyG,SAAS4nB,mBAAmB,YAAa,6BAC/C,CAEA,iBAAMP,CAAYnmB,SACXxzG,KAAK45H,cAAcpmB,EAC1B,EAGM,MAAM2mB,WAAgC5B,GAG5C,WAAA/yH,CAAY5G,EAAqBm0H,EAAcqH,GACxClgH,MAAAtb,EAAQm0H,EAAOA,EAAMuB,WAH5Bt0H,KAAQq6H,UAA2B,KAK5B,MAAAC,IACJ,MAAA,CAAIl6B,UAAU,iCACbxjG,EAAA,SAAO,CAAAwjG,UAAU,mDAAkD,wBACnExjG,EAAA,SAAA,CAAOwjG,UAAU,uDAAsD,oBAIrEpgG,KAAAsyG,SAAS0C,QAAQslB,GAEtB,MAAMnjC,EAAM,IAAIvjB,IAAI,GAAGzX,OAAOC,SAASyX,aAAa1X,OAAOC,SAAS0X,QAAQ7X,kCAC5Ek7B,EAAIiD,aAAap7F,OAAO,WAAY+zH,EAAMpxD,UAEtCoxD,EAAMgB,oBACL58B,EAAAiD,aAAap7F,OAAO,kBAAmB,IACtCgB,KAAAsyG,SAASphC,UAAUE,IAAI,mBAG7B,MAAMmpD,EAAev6H,KAAKsyG,SAAS4M,cAAc,oCACnCqb,GAAAtlB,iBAAiB,SAAS,KACjB,MAAlBj1G,KAAKq6H,WAAqBr6H,KAAKq6H,UAAUG,QAC5Cx6H,KAAKq6H,UAAYl+D,OAAOs+D,KAAKtjC,EAAIyD,KAAM,oBAClC56F,KAAAq6H,UAAWplB,iBAAiB,QAAQvd,UACpC13F,KAAKw4H,kBACFx4H,KAAK44H,uBACL54H,KAAKy5H,cAAcz5H,KAAKw4H,WAC/B,KAGDx4H,KAAKq6H,UAAUK,OAChB,IAGD,MAAMC,EAAY36H,KAAKsyG,SAAS4M,cAAc,wCACnCyb,GAAA1lB,iBAAiB,SAAS,MACnC94C,OAAO/O,QAAU+O,OAAOv9D,QAAS+6H,YAAY,UAAW,IAAG,IAG3CS,EAAA1G,qBAAqBr3C,IAAGqb,UACnC,MAAAtpB,EAAUgsD,EAAkB7D,aAC9BnoD,UACGpuE,KAAK44H,uBACL54H,KAAKy5H,cAAcrrD,GAC1B,GAEF,CAEA,iBAAMurD,CAAYnmB,GACbxzG,KAAKq6H,WACRr6H,KAAKq6H,UAAUV,YAAYxrD,GAAsBr2D,OAAO07F,GAAS,WAE5DxzG,KAAK45H,cAAcpmB,EAC1B","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,90,91,92,93,94,95,96,97,98,99,100,101,102,103]}