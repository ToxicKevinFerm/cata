{"version":3,"file":"sim-VooX1d6X.chunk.js","sources":["../../../ui/death_knight/blood/inputs.ts","../../../ui/death_knight/blood/presets.ts","../../../ui/death_knight/blood/sim.ts","../../../ui/death_knight/inputs.ts"],"sourcesContent":["import * as InputHelpers from '../../core/components/input_helpers';\nimport { Player } from '../../core/player';\nimport { Spec } from '../../core/proto/common';\nimport {\n\tBloodDeathKnight_Rotation_BloodSpell as BloodSpell,\n\tBloodDeathKnight_Rotation_BloodTapPrio as BloodTapPrio,\n\tBloodDeathKnight_Rotation_Opener as Opener,\n\tBloodDeathKnight_Rotation_OptimizationSetting as OptimizationSetting,\n\tBloodDeathKnight_Rotation_Presence as Presence,\n\tDeathKnightMajorGlyph,\n} from '../../core/proto/death_knight';\nimport { TypedEvent } from '../../core/typed_event';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\n// export const DrwPestiApply = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecBloodDeathKnight>({\n// \tfieldName: 'drwPestiApply',\n// \tlabel: 'DRW Pestilence Add',\n// \tlabelTooltip:\n// \t\t'There is currently an interaction with DRW and pestilence where you can use pestilence to force DRW to apply diseases if they are already applied by the DK. It only works with Glyph of Disease and if there is an off target. This toggle forces the sim to assume there is an off target.',\n// \tshowWhen: (player: Player<Spec.SpecBloodDeathKnight>) =>\n// \t\tplayer.getTalentTree() == 0 &&\n// \t\t(player.getGlyphs().major1 == DeathKnightMajorGlyph.GlyphOfDisease ||\n// \t\t\tplayer.getGlyphs().major2 == DeathKnightMajorGlyph.GlyphOfDisease ||\n// \t\t\tplayer.getGlyphs().major3 == DeathKnightMajorGlyph.GlyphOfDisease),\n// \tchangeEmitter: (player: Player<Spec.SpecBloodDeathKnight>) =>\n// \t\tTypedEvent.onAny([player.specOptionsChangeEmitter, player.rotationChangeEmitter, player.talentsChangeEmitter]),\n// });\n\nexport const DefensiveCdDelay = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecBloodDeathKnight>({\n\tfieldName: 'defensiveDelay',\n\tlabel: 'Defensives Delay',\n\tlabelTooltip: 'Minimum delay between using more defensive cooldowns.',\n});\n\nexport const BloodDeathKnightRotationConfig = {\n\tinputs: [\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBloodDeathKnight, Presence>({\n\t\t\tfieldName: 'presence',\n\t\t\tlabel: 'Presence',\n\t\t\tlabelTooltip: 'Presence to be in during the encounter.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Blood', value: Presence.Blood },\n\t\t\t\t{ name: 'Frost', value: Presence.Frost },\n\t\t\t\t{ name: 'Unholy', value: Presence.Unholy },\n\t\t\t],\n\t\t\tchangeEmitter: (player: Player<Spec.SpecBloodDeathKnight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBloodDeathKnight, Opener>({\n\t\t\tfieldName: 'opener',\n\t\t\tlabel: 'Opener',\n\t\t\tlabelTooltip:\n\t\t\t\t'Chose what opener to perform:<br>\\\n\t\t\t\t<b>Regular</b>: Regular opener.<br>\\\n\t\t\t\t<b>Threat</b>: Full IT spam for max threat.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Regular', value: Opener.Regular },\n\t\t\t\t{ name: 'Threat', value: Opener.Threat },\n\t\t\t],\n\t\t\tchangeEmitter: (player: Player<Spec.SpecBloodDeathKnight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBloodDeathKnight, OptimizationSetting>({\n\t\t\tfieldName: 'optimizationSetting',\n\t\t\tlabel: 'Optimization Setting',\n\t\t\tlabelTooltip:\n\t\t\t\t'Chose what metric to optimize:<br>\\\n\t\t\t\t<b>Hps</b>: Prioritizes holding runes for healing after damage taken.<br>\\\n\t\t\t\t<b>Tps</b>: Prioritizes spending runes for icy touch spam.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Hps', value: OptimizationSetting.Hps },\n\t\t\t\t{ name: 'Tps', value: OptimizationSetting.Tps },\n\t\t\t],\n\t\t\tchangeEmitter: (player: Player<Spec.SpecBloodDeathKnight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBloodDeathKnight, BloodSpell>({\n\t\t\tfieldName: 'bloodSpell',\n\t\t\tlabel: 'Blood Spell',\n\t\t\tlabelTooltip: 'Chose what blood rune spender to use.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Blood Strike', value: BloodSpell.BloodStrike },\n\t\t\t\t{ name: 'Blood Boil', value: BloodSpell.BloodBoil },\n\t\t\t\t{ name: 'Heart Strike', value: BloodSpell.HeartStrike },\n\t\t\t],\n\t\t\tchangeEmitter: (player: Player<Spec.SpecBloodDeathKnight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t}),\n\t\tInputHelpers.makeRotationEnumInput<Spec.SpecBloodDeathKnight, BloodTapPrio>({\n\t\t\tfieldName: 'bloodTapPrio',\n\t\t\tlabel: 'Blood Tap',\n\t\t\tlabelTooltip:\n\t\t\t\t'Chose how to use Blood Tap:<br>\\\n\t\t\t\t<b>Use as Defensive Cooldown</b>: Use as defined in Cooldowns (Requires T10 4pc).<br>\\\n\t\t\t\t<b>Offensive</b>: Use Blood Tap for extra Icy Touches.',\n\t\t\tvalues: [\n\t\t\t\t{ name: 'Use as Defensive Cooldown', value: BloodTapPrio.Defensive },\n\t\t\t\t{ name: 'Offensive', value: BloodTapPrio.Offensive },\n\t\t\t],\n\t\t\tchangeEmitter: (player: Player<Spec.SpecBloodDeathKnight>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t}),\n\t],\n};\n","import { DistanceFromTarget } from '../../core/components/other_inputs';\nimport * as PresetUtils from '../../core/preset_utils.js';\nimport { Consumes, Flask, Food, Glyphs, Potions, Profession, TinkerHands } from '../../core/proto/common.js';\nimport { BloodDeathKnight_Options, DeathKnightMajorGlyph, DeathKnightMinorGlyph,DeathKnightPrimeGlyph } from '../../core/proto/death_knight';\nimport { SavedTalents } from '../../core/proto/ui.js';\nimport P1BloodApl from './apls/p1.apl.json';\nimport P1BloodGear from './gear_sets/p1.gear.json';\n\nexport const P1_BLOOD_PRESET = PresetUtils.makePresetGear('P1', P1BloodGear);\n\nexport const BLOOD_P1_ROTATION_PRESET_DEFAULT = PresetUtils.makePresetAPLRotation('P1', P1BloodApl);\n\nexport const BloodTalents = {\n\tname: 'Blood',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '03323000132222311321-3-013',\n\t\tglyphs: Glyphs.create({\n\t\t\tprime1: DeathKnightPrimeGlyph.GlyphOfDeathStrike,\n\t\t\tprime2: DeathKnightPrimeGlyph.GlyphOfHeartStrike,\n\t\t\tprime3: DeathKnightPrimeGlyph.GlyphOfRuneStrike,\n\t\t\tmajor1: DeathKnightMajorGlyph.GlyphOfVampiricBlood,\n\t\t\tmajor2: DeathKnightMajorGlyph.GlyphOfDancingRuneWeapon,\n\t\t\tmajor3: DeathKnightMajorGlyph.GlyphOfBoneShield,\n\t\t\tminor1: DeathKnightMinorGlyph.GlyphOfDeathGate,\n\t\t\tminor2: DeathKnightMinorGlyph.GlyphOfPathOfFrost,\n\t\t\tminor3: DeathKnightMinorGlyph.GlyphOfHornOfWinter,\n\t\t}),\n\t}),\n};\n\nexport const DefaultOptions = BloodDeathKnight_Options.create({\n\tclassOptions: {\n\t\tstartingRunicPower: 0,\n\t},\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskOfSteelskin,\n\tfood: Food.FoodBeerBasedCrocolisk,\n\tdefaultPotion: Potions.GolembloodPotion,\n\tprepopPotion: Potions.GolembloodPotion,\n\ttinkerHands: TinkerHands.TinkerHandsSynapseSprings,\n});\n\nexport const OtherDefaults = {\n\tprofession1: Profession.Engineering,\n\tprofession2: Profession.Leatherworking,\n\tdistanceFromTarget: 5,\n};\n","import * as BuffDebuffInputs from '../../core/components/inputs/buffs_debuffs';\nimport * as OtherInputs from '../../core/components/other_inputs';\nimport { IndividualSimUI, registerSpecConfig } from '../../core/individual_sim_ui';\nimport { Player } from '../../core/player';\nimport { PlayerClasses } from '../../core/player_classes';\nimport { APLRotation } from '../../core/proto/apl';\nimport { Debuffs, Faction, IndividualBuffs, PartyBuffs, PseudoStat, Race, RaidBuffs, Spec, Stat, TristateEffect } from '../../core/proto/common';\nimport { Stats } from '../../core/proto_utils/stats';\nimport * as DeathKnightInputs from '../inputs';\nimport * as BloodInputs from './inputs';\nimport * as Presets from './presets';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecBloodDeathKnight, {\n\tcssClass: 'blood-death-knight-sim-ui',\n\tcssScheme: PlayerClasses.getCssClass(PlayerClasses.DeathKnight),\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: ['<p>Defensive CDs use is very basic and wip.</p>'],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatStamina,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatAttackPower,\n\t\tStat.StatExpertise,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatHealth,\n\t\tStat.StatArmor,\n\t\tStat.StatBonusArmor,\n\t\tStat.StatDodge,\n\t\tStat.StatParry,\n\t\tStat.StatSpellHit,\n\t\tStat.StatNatureResistance,\n\t\tStat.StatShadowResistance,\n\t\tStat.StatFrostResistance,\n\t\tStat.StatMastery,\n\t],\n\tepPseudoStats: [PseudoStat.PseudoStatMainHandDps, PseudoStat.PseudoStatOffHandDps],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatArmor,\n\t\tStat.StatStamina,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatAttackPower,\n\t\tStat.StatExpertise,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatDodge,\n\t\tStat.StatParry,\n\t\tStat.StatMastery,\n\t],\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.P1_BLOOD_PRESET.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap(\n\t\t\t{\n\t\t\t\t[Stat.StatArmor]: 0.05,\n\t\t\t\t[Stat.StatBonusArmor]: 0.03,\n\t\t\t\t[Stat.StatStamina]: 1,\n\t\t\t\t[Stat.StatStrength]: 0.33,\n\t\t\t\t[Stat.StatAgility]: 0.6,\n\t\t\t\t[Stat.StatAttackPower]: 0.06,\n\t\t\t\t[Stat.StatExpertise]: 0.67,\n\t\t\t\t[Stat.StatMeleeHit]: 0.67,\n\t\t\t\t[Stat.StatMeleeCrit]: 0.28,\n\t\t\t\t[Stat.StatMeleeHaste]: 0.21,\n\t\t\t\t[Stat.StatDodge]: 0.7,\n\t\t\t\t[Stat.StatParry]: 0.58,\n\t\t\t},\n\t\t\t{\n\t\t\t\t[PseudoStat.PseudoStatMainHandDps]: 3.1,\n\t\t\t\t[PseudoStat.PseudoStatOffHandDps]: 0.0,\n\t\t\t},\n\t\t),\n\t\tother: Presets.OtherDefaults,\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.BloodTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: RaidBuffs.create({\n\t\t\tretributionAura: true,\n\t\t\tpowerWordFortitude: true,\n\t\t\tmarkOfTheWild: true,\n\t\t\ticyTalons: true,\n\t\t\thornOfWinter: true,\n\t\t\tabominationsMight: true,\n\t\t\tleaderOfThePack: true,\n\t\t\tbloodlust: true,\n\t\t\tarcaneTactics: true,\n\t\t\tdevotionAura: true,\n\t\t\tresistanceAura: true,\n\t\t}),\n\t\tpartyBuffs: PartyBuffs.create({}),\n\t\tindividualBuffs: IndividualBuffs.create({}),\n\t\tdebuffs: Debuffs.create({\n\t\t\tbloodFrenzy: true,\n\t\t\tsunderArmor: true,\n\t\t\tebonPlaguebringer: true,\n\t\t\tcriticalMass: true,\n\t\t\tvindication: true,\n\t\t\tfrostFever: true,\n\t\t\tjudgement: true,\n\t\t}),\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [],\n\t// Inputs to include in the 'Rotation' section on the settings tab.\n\trotationInputs: BloodInputs.BloodDeathKnightRotationConfig,\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\tBuffDebuffInputs.SpellDamageDebuff\n\t],\n\texcludeBuffDebuffInputs: [\n\t\tBuffDebuffInputs.SpellHasteBuff,\n\t\tBuffDebuffInputs.BleedDebuff,\n\t],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [\n\t\t\tOtherInputs.InputDelay,\n\t\t\tOtherInputs.TankAssignment,\n\t\t\tOtherInputs.HpPercentForDefensives,\n\t\t\tOtherInputs.IncomingHps,\n\t\t\tOtherInputs.HealingCadence,\n\t\t\tOtherInputs.HealingCadenceVariation,\n\t\t\tOtherInputs.BurstWindow,\n\t\t\tOtherInputs.InspirationUptime,\n\t\t\tOtherInputs.InFrontOfTarget,\n\t\t\tDeathKnightInputs.StartingRunicPower(),\n\t\t\tOtherInputs.DarkIntentUptime\n\t\t],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [\n\t\t\tPresets.BLOOD_P1_ROTATION_PRESET_DEFAULT\n\t\t],\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [\n\t\t\tPresets.BloodTalents\n\t\t],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.P1_BLOOD_PRESET\n\t\t],\n\t},\n\n\tautoRotation: (_player: Player<Spec.SpecBloodDeathKnight>): APLRotation => {\n\t\treturn Presets.BLOOD_P1_ROTATION_PRESET_DEFAULT.rotation.rotation!;\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecBloodDeathKnight,\n\t\t\ttalents: Presets.BloodTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceWorgen,\n\t\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.P1_BLOOD_PRESET.gear,\n\t\t\t\t\t2: Presets.P1_BLOOD_PRESET.gear,\n\t\t\t\t\t3: Presets.P1_BLOOD_PRESET.gear,\n\t\t\t\t\t4: Presets.P1_BLOOD_PRESET.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.P1_BLOOD_PRESET.gear,\n\t\t\t\t\t2: Presets.P1_BLOOD_PRESET.gear,\n\t\t\t\t\t3: Presets.P1_BLOOD_PRESET.gear,\n\t\t\t\t\t4: Presets.P1_BLOOD_PRESET.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t\totherDefaults: Presets.OtherDefaults,\n\t\t},\n\t],\n});\n\nexport class BloodDeathKnightSimUI extends IndividualSimUI<Spec.SpecBloodDeathKnight> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecBloodDeathKnight>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n","import * as InputHelpers from '../core/components/input_helpers';\nimport { Player } from '../core/player';\nimport { DeathKnightSpecs } from '../core/proto_utils/utils';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const StartingRunicPower = <SpecType extends DeathKnightSpecs>() =>\n\tInputHelpers.makeClassOptionsNumberInput<SpecType>({\n\t\tfieldName: 'startingRunicPower',\n\t\tlabel: 'Starting Runic Power',\n\t\tlabelTooltip: 'Initial RP at the start of each iteration.',\n\t});\n\n// export const PetUptime = <SpecType extends DeathKnightSpecs>() =>\n// \tInputHelpers.makeClassOptionsNumberInput<SpecType>({\n// \t\tfieldName: 'petUptime',\n// \t\tlabel: 'Ghoul Uptime (%)',\n// \t\tlabelTooltip: 'Percent of the fight duration for which your ghoul will be on target.',\n// \t\tpercent: true,\n// \t\tshowWhen: (player: Player<SpecType>) => player.getTalents().masterOfGhouls,\n// \t});\n"],"names":["InputHelpers.makeSpecOptionsNumberInput","fieldName","label","labelTooltip","BloodDeathKnightRotationConfig","inputs","InputHelpers.makeRotationEnumInput","values","name","value","Presence","Blood","Frost","Unholy","changeEmitter","player","TypedEvent","onAny","rotationChangeEmitter","talentsChangeEmitter","Opener","Regular","Threat","OptimizationSetting","Hps","Tps","BloodSpell","BloodStrike","BloodBoil","HeartStrike","BloodTapPrio","Defensive","Offensive","P1_BLOOD_PRESET","PresetUtils.makePresetGear","BLOOD_P1_ROTATION_PRESET_DEFAULT","PresetUtils.makePresetAPLRotation","P1BloodApl","BloodTalents","data","SavedTalents","create","talentsString","glyphs","Glyphs","prime1","DeathKnightPrimeGlyph","GlyphOfDeathStrike","prime2","GlyphOfHeartStrike","prime3","GlyphOfRuneStrike","major1","DeathKnightMajorGlyph","GlyphOfVampiricBlood","major2","GlyphOfDancingRuneWeapon","major3","GlyphOfBoneShield","minor1","DeathKnightMinorGlyph","GlyphOfDeathGate","minor2","GlyphOfPathOfFrost","minor3","GlyphOfHornOfWinter","DefaultOptions","BloodDeathKnight_Options","classOptions","startingRunicPower","DefaultConsumes","Consumes","flask","Flask","FlaskOfSteelskin","food","Food","FoodBeerBasedCrocolisk","defaultPotion","Potions","GolembloodPotion","prepopPotion","tinkerHands","TinkerHands","TinkerHandsSynapseSprings","OtherDefaults","profession1","Profession","Engineering","profession2","Leatherworking","distanceFromTarget","SPEC_CONFIG","registerSpecConfig","Spec","SpecBloodDeathKnight","cssClass","cssScheme","PlayerClasses","getCssClass","DeathKnight","knownIssues","epStats","Stat","StatStamina","StatStrength","StatAgility","StatAttackPower","StatExpertise","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatSpellHit","StatSpellCrit","StatSpellHaste","StatHealth","StatArmor","StatBonusArmor","StatDodge","StatParry","StatNatureResistance","StatShadowResistance","StatFrostResistance","StatMastery","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","epReferenceStat","displayStats","defaults","gear","Presets.P1_BLOOD_PRESET","epWeights","Stats","fromMap","other","Presets.OtherDefaults","consumes","Presets.DefaultConsumes","talents","Presets.BloodTalents","specOptions","Presets.DefaultOptions","raidBuffs","RaidBuffs","retributionAura","powerWordFortitude","markOfTheWild","icyTalons","hornOfWinter","abominationsMight","leaderOfThePack","bloodlust","arcaneTactics","devotionAura","resistanceAura","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","debuffs","Debuffs","bloodFrenzy","sunderArmor","ebonPlaguebringer","criticalMass","vindication","frostFever","judgement","playerIconInputs","rotationInputs","BloodInputs.BloodDeathKnightRotationConfig","includeBuffDebuffInputs","BuffDebuffInputs.SpellDamageDebuff","excludeBuffDebuffInputs","BuffDebuffInputs.SpellHasteBuff","BuffDebuffInputs.BleedDebuff","otherInputs","OtherInputs.InputDelay","OtherInputs.TankAssignment","OtherInputs.HpPercentForDefensives","OtherInputs.IncomingHps","OtherInputs.HealingCadence","OtherInputs.HealingCadenceVariation","OtherInputs.BurstWindow","OtherInputs.InspirationUptime","OtherInputs.InFrontOfTarget","InputHelpers.makeClassOptionsNumberInput","OtherInputs.DarkIntentUptime","encounterPicker","showExecuteProportion","presets","rotations","Presets.BLOOD_P1_ROTATION_PRESET_DEFAULT","autoRotation","_player","rotation","raidSimPresets","spec","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","RaceWorgen","Horde","RaceTroll","defaultGear","otherDefaults","BloodDeathKnightSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}