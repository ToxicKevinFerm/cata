{"version":3,"file":"sim-B0UCk-nU.chunk.js","sources":["../../../ui/mage/arcane/inputs.ts","../../../ui/mage/arcane/presets.ts","../../../ui/mage/arcane/sim.ts"],"sourcesContent":["import * as InputHelpers from '../../core/components/input_helpers';\nimport { Player } from '../../core/player';\nimport { Spec } from '../../core/proto/common';\nimport { TypedEvent } from '../../core/typed_event';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const FocusMagicUptime = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecArcaneMage>({\n\tfieldName: 'focusMagicPercentUptime',\n\tlabel: 'Focus Magic Percent Uptime',\n\tlabelTooltip: 'Percent of uptime for Focus Magic Buddy',\n\textraCssClasses: ['within-raid-sim-hide'],\n});\n\nexport const MageRotationConfig = {\n\tinputs: [\n\t\t// ********************************************************\n\t\t//                      ARCANE INPUTS\n\t\t// ********************************************************\n\t\t// InputHelpers.makeRotationNumberInput<Spec.SpecArcaneMage>({\n\t\t// \tfieldName: 'only3ArcaneBlastStacksBelowManaPercent',\n\t\t// \tpercent: true,\n\t\t// \tlabel: 'Stack Arcane Blast to 3 below mana %',\n\t\t// \tlabelTooltip: 'When below this mana %, AM/ABarr will be used at 3 stacks of AB instead of 4.',\n\t\t// \tshowWhen: (player: Player<Spec.SpecArcaneMage>) => player.getTalentTree() == 0,\n\t\t// \tchangeEmitter: (player: Player<Spec.SpecArcaneMage>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t// }),\n\t\t// InputHelpers.makeRotationNumberInput<Spec.SpecArcaneMage>({\n\t\t// \tfieldName: 'blastWithoutMissileBarrageAboveManaPercent',\n\t\t// \tpercent: true,\n\t\t// \tlabel: 'AB without Missile Barrage above mana %',\n\t\t// \tlabelTooltip: 'When above this mana %, spam AB until a Missile Barrage proc occurs.',\n\t\t// \tshowWhen: (player: Player<Spec.SpecArcaneMage>) => player.getTalentTree() == 0,\n\t\t// \tchangeEmitter: (player: Player<Spec.SpecArcaneMage>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t// }),\n\t\t// InputHelpers.makeRotationNumberInput<Spec.SpecArcaneMage>({\n\t\t// \tfieldName: 'missileBarrageBelowManaPercent',\n\t\t// \tpercent: true,\n\t\t// \tlabel: 'Use Missile Barrage ASAP below mana %',\n\t\t// \tlabelTooltip: 'When below this mana %, use Missile Barrage proc as soon as possible. Can be useful to conserve mana.',\n\t\t// \tshowWhen: (player: Player<Spec.SpecArcaneMage>) => player.getTalentTree() == 0,\n\t\t// \tchangeEmitter: (player: Player<Spec.SpecArcaneMage>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t\t// }),\n\t// \tInputHelpers.makeRotationBooleanInput<Spec.SpecArcaneMage>({\n\t// \t\tfieldName: 'useArcaneBarrage',\n\t// \t\tlabel: 'Use Arcane Barrage',\n\t// \t\tlabelTooltip: 'Includes Arcane Barrage in the rotation.',\n\t// \t\tenableWhen: (player: Player<Spec.SpecArcaneMage>) => player.getTalents().arcaneBarrage,\n\t// \t\tshowWhen: (player: Player<Spec.SpecArcaneMage>) => player.getTalentTree() == 0,\n\t// \t\tchangeEmitter: (player: Player<Spec.SpecArcaneMage>) => TypedEvent.onAny([player.rotationChangeEmitter, player.talentsChangeEmitter]),\n\t// \t}),\n\t],\n};\n","import * as PresetUtils from '../../core/preset_utils';\nimport { Conjured, Consumes, Debuffs, Flask, Food, Glyphs, Potions, Profession, RaidBuffs, Spec, TinkerHands, UnitReference} from '../../core/proto/common';\nimport {\n\tArcaneMage_Options as MageOptions,\n\tMageMajorGlyph as MajorGlyph,\n\tMageMinorGlyph as MinorGlyph,\n\tMagePrimeGlyph as PrimeGlyph,\n} from '../../core/proto/mage';\nimport { SavedTalents } from '../../core/proto/ui';\nimport ArcaneApl from './apls/arcane.apl.json';\nimport P1ArcaneGear from './gear_sets/p1_arcane.gear.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\nexport const ARCANE_P1_PRESET = PresetUtils.makePresetGear('Arcane P1 Preset', P1ArcaneGear, { talentTree: 0 });\n\n/* export const DefaultSimpleRotation = MageRotation.create({\n\tonly3ArcaneBlastStacksBelowManaPercent: 0.15,\n\tblastWithoutMissileBarrageAboveManaPercent: 0.2,\n\tmissileBarrageBelowManaPercent: 0,\n\tuseArcaneBarrage: false,\n}); */\n\n//export const ROTATION_PRESET_SIMPLE = PresetUtils.makePresetSimpleRotation('Simple Default', Spec.SpecArcaneMage, DefaultSimpleRotation);\nexport const ARCANE_ROTATION_PRESET_DEFAULT = PresetUtils.makePresetAPLRotation('Arcane', ArcaneApl, { talentTree: 0 });\n//export const ARCANE_ROTATION_PRESET_AOE = PresetUtils.makePresetAPLRotation('Arcane AOE', ArcaneAoeApl, { talentTree: 0 });\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/cata/talent-calc and copy the numbers in the url.\nexport const ArcaneTalents = {\n\tname: 'Arcane',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '303322021230122210121-23-03',\n\t\tglyphs: Glyphs.create({\n\t\t\tprime1: PrimeGlyph.GlyphOfArcaneMissiles,\n\t\t\tprime2: PrimeGlyph.GlyphOfArcaneBlast,\n\t\t\tprime3: PrimeGlyph.GlyphOfMageArmor,\n\t\t\tmajor1: MajorGlyph.GlyphOfEvocation,\n\t\t\tmajor2: MajorGlyph.GlyphOfArcanePower,\n\t\t\tmajor3: MajorGlyph.GlyphOfManaShield,\n\t\t}),\n\t}),\n};\n\nexport const DefaultArcaneOptions = MageOptions.create({\n\tclassOptions: {\n\t},\n\tfocusMagicPercentUptime: 99,\n\tfocusMagicTarget: UnitReference.create(),\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tarcaneBrilliance: true,\n\tbloodlust: true,\n\tmarkOfTheWild: true,\n\ticyTalons: true,\n\tmoonkinForm: true,\n\tleaderOfThePack: true,\n\tpowerWordFortitude: true,\n\tstrengthOfEarthTotem: true,\n\ttrueshotAura: true,\n\twrathOfAirTotem: true,\n\tdemonicPact: true,\n\tblessingOfKings: true,\n\tblessingOfMight: true,\n\tcommunion: true,\n});\n\nexport const DefaultArcaneConsumes = Consumes.create({\n\tflask: Flask.FlaskOfTheDraconicMind,\n\tfood: Food.FoodSeafoodFeast,\n\tdefaultPotion: Potions.VolcanicPotion,\n\tprepopPotion: Potions.VolcanicPotion,\n\ttinkerHands: TinkerHands.TinkerHandsSynapseSprings,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n    ebonPlaguebringer: true,\n    shadowAndFlame: true,\n    judgement: true,\n});\n\nexport const OtherDefaults = {\n\tdistanceFromTarget: 20,\n\tprofession1: Profession.Engineering,\n\tprofession2: Profession.Tailoring,\n};\n","import * as OtherInputs from '../../core/components/other_inputs';\nimport { IndividualSimUI, registerSpecConfig } from '../../core/individual_sim_ui';\nimport { Player } from '../../core/player';\nimport { PlayerClasses } from '../../core/player_classes';\nimport { Mage } from '../../core/player_classes/mage';\nimport { APLRotation } from '../../core/proto/apl';\nimport { Faction, IndividualBuffs, PartyBuffs, Race, Spec, Stat } from '../../core/proto/common';\nimport { Stats } from '../../core/proto_utils/stats';\nimport * as MageInputs from '../inputs';\nimport * as ArcaneInputs from './inputs';\nimport * as Presets from './presets';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecArcaneMage, {\n\tcssClass: 'arcane-mage-sim-ui',\n\tcssScheme: PlayerClasses.getCssClass(Mage),\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [Stat.StatIntellect,\n\t\tStat.StatSpirit,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatMastery,\n\t],\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatSpellPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatMana,\n\t\tStat.StatStamina,\n\t\tStat.StatIntellect,\n\t\tStat.StatSpirit,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatMastery,\n\t],\n\t// modifyDisplayStats: (player: Player<Spec.SpecArcaneMage>) => {\n\t// \tlet stats = new Stats();\n\n\t// \tif (player.getTalentTree() === 0) {\n\t// \t\tstats = stats.addStat(Stat.StatSpellHit, player.getTalents().arcaneFocus * 1 * Mechanics.SPELL_HIT_RATING_PER_HIT_CHANCE);\n\t// \t}\n\n\t// \treturn {\n\t// \t\ttalents: stats,\n\t// \t};\n\t// },\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.ARCANE_P1_PRESET.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatIntellect]: 0.48,\n\t\t\t[Stat.StatSpirit]: 0.42,\n\t\t\t[Stat.StatSpellPower]: 1,\n\t\t\t[Stat.StatSpellHit]: 0.38,\n\t\t\t[Stat.StatSpellCrit]: 0.58,\n\t\t\t[Stat.StatSpellHaste]: 0.94,\n\t\t\t[Stat.StatMastery]: 0.8\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultArcaneConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.ArcaneTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultArcaneOptions,\n\t\tother: Presets.OtherDefaults,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: Presets.DefaultRaidBuffs,\n\n\t\tpartyBuffs: PartyBuffs.create({\n\t\t\tmanaTideTotems: 1,\n\t\t}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\tvampiricTouch: true,\n\t\t}),\n\t\tdebuffs: Presets.DefaultDebuffs,\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [],\n\t// Inputs to include in the 'Rotation' section on the settings tab.\n\trotationInputs: ArcaneInputs.MageRotationConfig,\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\t//Should add hymn of hope, revitalize, and\n\t],\n\texcludeBuffDebuffInputs: [],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [ArcaneInputs.FocusMagicUptime, OtherInputs.InputDelay, OtherInputs.DistanceFromTarget, OtherInputs.TankAssignment],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: true,\n\t},\n\n\tpresets: {\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [Presets.ARCANE_ROTATION_PRESET_DEFAULT],\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [Presets.ArcaneTalents],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.ARCANE_P1_PRESET,\n\t\t],\n\t},\n\n\tautoRotation: (player: Player<Spec.SpecArcaneMage>): APLRotation => {\n/* \t\tconst numTargets = player.sim.encounter.targets.length;\n\t\tif (numTargets > 3) {\n\t\t\treturn Presets.ARCANE_ROTATION_PRESET_AOE.rotation.rotation!;\n\t\t} else {\n\t\t\treturn Presets.ARCANE_ROTATION_PRESET_DEFAULT.rotation.rotation!;\n\t\t} */\n\t\treturn Presets.ARCANE_ROTATION_PRESET_DEFAULT.rotation.rotation!\n\t},\n\n\t/* simpleRotation: (player: Player<Spec.SpecArcaneMage>, simple: ArcaneMage_Rotation, cooldowns: Cooldowns): APLRotation => {\n\t\tconst [prepullActions, actions] = AplUtils.standardCooldownDefaults(cooldowns);\n\n\t\tconst prepullMirrorImage = APLPrepullAction.fromJsonString(\n\t\t\t`{\"action\":{\"castSpell\":{\"spellId\":{\"spellId\":55342}}},\"doAtValue\":{\"const\":{\"val\":\"-2s\"}}}`,\n\t\t);\n\n\t\tconst berserking = APLAction.fromJsonString(\n\t\t\t`{\"condition\":{\"not\":{\"val\":{\"auraIsActive\":{\"auraId\":{\"spellId\":12472}}}}},\"castSpell\":{\"spellId\":{\"spellId\":26297}}}`,\n\t\t);\n\t\tconst hyperspeedAcceleration = APLAction.fromJsonString(\n\t\t\t`{\"condition\":{\"not\":{\"val\":{\"auraIsActive\":{\"auraId\":{\"spellId\":12472}}}}},\"castSpell\":{\"spellId\":{\"spellId\":54758}}}`,\n\t\t);\n\t\tconst combatPot = APLAction.fromJsonString(\n\t\t\t`{\"condition\":{\"not\":{\"val\":{\"auraIsActive\":{\"auraId\":{\"spellId\":12472}}}}},\"castSpell\":{\"spellId\":{\"otherId\":\"OtherActionPotion\"}}}`,\n\t\t);\n\t\tconst evocation = APLAction.fromJsonString(\n\t\t\t`{\"condition\":{\"cmp\":{\"op\":\"OpLe\",\"lhs\":{\"currentManaPercent\":{}},\"rhs\":{\"const\":{\"val\":\"25%\"}}}},\"castSpell\":{\"spellId\":{\"spellId\":12051}}}`,\n\t\t);\n\n\t\tconst arcaneBlastBelowStacks = APLAction.fromJsonString(\n\t\t\t`{\"condition\":{\"or\":{\"vals\":[{\"cmp\":{\"op\":\"OpLt\",\"lhs\":{\"auraNumStacks\":{\"auraId\":{\"spellId\":36032}}},\"rhs\":{\"const\":{\"val\":\"4\"}}}},{\"and\":{\"vals\":[{\"cmp\":{\"op\":\"OpLt\",\"lhs\":{\"auraNumStacks\":{\"auraId\":{\"spellId\":36032}}},\"rhs\":{\"const\":{\"val\":\"3\"}}}},{\"cmp\":{\"op\":\"OpLt\",\"lhs\":{\"currentManaPercent\":{}},\"rhs\":{\"const\":{\"val\":\"${(\n\t\t\t\tsimple.only3ArcaneBlastStacksBelowManaPercent * 100\n\t\t\t).toFixed(0)}%\"}}}}]}}]}},\"castSpell\":{\"spellId\":{\"spellId\":42897}}}`,\n\t\t);\n\t\tconst arcaneMissilesWithMissileBarrageBelowMana = APLAction.fromJsonString(\n\t\t\t`{\"condition\":{\"and\":{\"vals\":[{\"auraIsActiveWithReactionTime\":{\"auraId\":{\"spellId\":44401}}},{\"cmp\":{\"op\":\"OpLt\",\"lhs\":{\"currentManaPercent\":{}},\"rhs\":{\"const\":{\"val\":\"${(\n\t\t\t\tsimple.missileBarrageBelowManaPercent * 100\n\t\t\t).toFixed(0)}%\"}}}}]}},\"castSpell\":{\"spellId\":{\"spellId\":42846}}}`,\n\t\t);\n\t\tconst arcaneMisslesWithMissileBarrage = APLAction.fromJsonString(\n\t\t\t`{\"condition\":{\"auraIsActiveWithReactionTime\":{\"auraId\":{\"spellId\":44401}}},\"castSpell\":{\"spellId\":{\"spellId\":42846}}}`,\n\t\t);\n\t\tconst arcaneBlastAboveMana = APLAction.fromJsonString(\n\t\t\t`{\"condition\":{\"cmp\":{\"op\":\"OpGt\",\"lhs\":{\"currentManaPercent\":{}},\"rhs\":{\"const\":{\"val\":\"${(\n\t\t\t\tsimple.blastWithoutMissileBarrageAboveManaPercent * 100\n\t\t\t).toFixed(0)}%\"}}}},\"castSpell\":{\"spellId\":{\"spellId\":42897}}}`,\n\t\t);\n\t\tconst arcaneMissiles = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":42846}}}`);\n\t\tconst arcaneBarrage = APLAction.fromJsonString(`{\"castSpell\":{\"spellId\":{\"spellId\":44781}}}`);\n\n\t\tprepullActions.push(prepullMirrorImage);\n\n\t\tactions.push(\n\t\t\t...([\n\t\t\t\tberserking,\n\t\t\t\thyperspeedAcceleration,\n\t\t\t\tcombatPot,\n\t\t\t\tsimple.missileBarrageBelowManaPercent > 0 ? arcaneMissilesWithMissileBarrageBelowMana : null,\n\t\t\t\tarcaneBlastBelowStacks,\n\t\t\t\tarcaneMisslesWithMissileBarrage,\n\t\t\t\tevocation,\n\t\t\t\tarcaneBlastAboveMana,\n\t\t\t\tsimple.useArcaneBarrage ? arcaneBarrage : null,\n\t\t\t\tarcaneMissiles,\n\t\t\t].filter(a => a) as Array<APLAction>),\n\t\t);\n\n\t\treturn APLRotation.create({\n\t\t\tprepullActions: prepullActions,\n\t\t\tpriorityList: actions.map(action =>\n\t\t\t\tAPLListItem.create({\n\t\t\t\t\taction: action,\n\t\t\t\t}),\n\t\t\t),\n\t\t});\n\t}, */\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecArcaneMage,\n\t\t\ttalents: Presets.ArcaneTalents.data,\n\t\t\tspecOptions: Presets.DefaultArcaneOptions,\n\t\t\tconsumes: Presets.DefaultArcaneConsumes,\n\t\t\totherDefaults: Presets.OtherDefaults,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceGnome,\n\t\t\t\t[Faction.Horde]: Race.RaceTroll,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.ARCANE_P1_PRESET.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.ARCANE_P1_PRESET.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class ArcaneMageSimUI extends IndividualSimUI<Spec.SpecArcaneMage> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecArcaneMage>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["FocusMagicUptime","InputHelpers.makeSpecOptionsNumberInput","fieldName","label","labelTooltip","extraCssClasses","ARCANE_P1_PRESET","PresetUtils.makePresetGear","talentTree","ARCANE_ROTATION_PRESET_DEFAULT","PresetUtils.makePresetAPLRotation","ArcaneApl","ArcaneTalents","name","data","SavedTalents","create","talentsString","glyphs","Glyphs","prime1","PrimeGlyph","GlyphOfArcaneMissiles","prime2","GlyphOfArcaneBlast","prime3","GlyphOfMageArmor","major1","MajorGlyph","GlyphOfEvocation","major2","GlyphOfArcanePower","major3","GlyphOfManaShield","DefaultArcaneOptions","MageOptions","classOptions","focusMagicPercentUptime","focusMagicTarget","UnitReference","DefaultRaidBuffs","RaidBuffs","arcaneBrilliance","bloodlust","markOfTheWild","icyTalons","moonkinForm","leaderOfThePack","powerWordFortitude","strengthOfEarthTotem","trueshotAura","wrathOfAirTotem","demonicPact","blessingOfKings","blessingOfMight","communion","DefaultArcaneConsumes","Consumes","flask","Flask","FlaskOfTheDraconicMind","food","Food","FoodSeafoodFeast","defaultPotion","Potions","VolcanicPotion","prepopPotion","tinkerHands","TinkerHands","TinkerHandsSynapseSprings","DefaultDebuffs","Debuffs","ebonPlaguebringer","shadowAndFlame","judgement","OtherDefaults","distanceFromTarget","profession1","Profession","Engineering","profession2","Tailoring","SPEC_CONFIG","registerSpecConfig","Spec","SpecArcaneMage","cssClass","cssScheme","PlayerClasses","getCssClass","Mage","knownIssues","epStats","Stat","StatIntellect","StatSpirit","StatSpellPower","StatSpellHit","StatSpellCrit","StatSpellHaste","StatMastery","epReferenceStat","displayStats","StatHealth","StatMana","StatStamina","defaults","gear","Presets.ARCANE_P1_PRESET","epWeights","Stats","fromMap","consumes","Presets.DefaultArcaneConsumes","talents","Presets.ArcaneTalents","specOptions","Presets.DefaultArcaneOptions","other","Presets.OtherDefaults","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","manaTideTotems","individualBuffs","IndividualBuffs","vampiricTouch","debuffs","Presets.DefaultDebuffs","playerIconInputs","rotationInputs","inputs","includeBuffDebuffInputs","excludeBuffDebuffInputs","otherInputs","ArcaneInputs.FocusMagicUptime","OtherInputs.InputDelay","OtherInputs.DistanceFromTarget","OtherInputs.TankAssignment","encounterPicker","showExecuteProportion","presets","rotations","Presets.ARCANE_ROTATION_PRESET_DEFAULT","autoRotation","player","rotation","raidSimPresets","spec","otherDefaults","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","RaceGnome","Horde","RaceTroll","defaultGear","ArcaneMageSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}