{"version":3,"file":"sim-DvgechBU.chunk.js","sources":["../../../ui/druid/balance/inputs.ts","../../../ui/druid/balance/presets.ts","../../../ui/druid/balance/sim.ts"],"sourcesContent":["import * as InputHelpers from '../../core/components/input_helpers.js';\nimport { Spec } from '../../core/proto/common.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const OkfUptime = InputHelpers.makeSpecOptionsNumberInput<Spec.SpecBalanceDruid>({\n\tfieldName: 'okfUptime',\n\tlabel: 'Owlkin Frenzy Uptime (%)',\n\tlabelTooltip: 'Percentage of fight uptime for Owlkin Frenzy',\n\tpercent: true,\n});\n","import * as PresetUtils from '../../core/preset_utils.js';\nimport {\n\tConsumes,\n\tDebuffs,\n\tExplosive,\n\tFaction,\n\tFlask,\n\tFood,\n\tGlyphs,\n\tIndividualBuffs,\n\tPartyBuffs,\n\tPotions,\n\tProfession,\n\tRaidBuffs,\n\tTristateEffect,\n\tUnitReference,\n} from '../../core/proto/common.js';\nimport { BalanceDruid_Options as BalanceDruidOptions, DruidMajorGlyph, DruidMinorGlyph, DruidPrimeGlyph } from '../../core/proto/druid.js';\nimport { SavedTalents } from '../../core/proto/ui.js';\nimport DefaultApl from './apls/default.apl.json';\nimport PreraidGear from './gear_sets/preraid.gear.json';\n\nexport const PreraidPresetGear = PresetUtils.makePresetGear('Pre-raid', PreraidGear);\n\nexport const PresetRotationDefault = PresetUtils.makePresetAPLRotation('Default', DefaultApl);\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/cata/talent-calc and copy the numbers in the url.\nexport const StandardTalents = {\n\tname: 'Standard',\n\tdata: SavedTalents.create({\n\t\ttalentsString: '33230221123212111001-01-020331',\n\t\tglyphs: Glyphs.create({\n\t\t\tprime1: DruidPrimeGlyph.GlyphOfInsectSwarm,\n\t\t\tprime2: DruidPrimeGlyph.GlyphOfMoonfire,\n\t\t\tprime3: DruidPrimeGlyph.GlyphOfWrath,\n\t\t\tmajor1: DruidMajorGlyph.GlyphOfStarfall,\n\t\t\tmajor2: DruidMajorGlyph.GlyphOfRebirth,\n\t\t\tmajor3: DruidMajorGlyph.GlyphOfFocus,\n\t\t\tminor1: DruidMinorGlyph.GlyphOfTyphoon,\n\t\t\tminor2: DruidMinorGlyph.GlyphOfUnburdenedRebirth,\n\t\t\tminor3: DruidMinorGlyph.GlyphOfMarkOfTheWild,\n\t\t}),\n\t}),\n};\n\nexport const DefaultOptions = BalanceDruidOptions.create({\n\tclassOptions: {\n\t\tinnervateTarget: UnitReference.create(),\n\t},\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tflask: Flask.FlaskOfTheDraconicMind,\n\tfood: Food.FoodSeafoodFeast,\n\tdefaultPotion: Potions.VolcanicPotion,\n\tprepopPotion: Potions.VolcanicPotion,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tarcaneBrilliance: true,\n\tbloodlust: true,\n\tmarkOfTheWild: true,\n\ticyTalons: true,\n\tmoonkinForm: true,\n\tleaderOfThePack: true,\n\tpowerWordFortitude: true,\n\tstrengthOfEarthTotem: true,\n\ttrueshotAura: true,\n\twrathOfAirTotem: true,\n\tdemonicPact: true,\n\tblessingOfKings: true,\n\tblessingOfMight: true,\n\tcommunion: true,\n});\n\nexport const DefaultIndividualBuffs = IndividualBuffs.create({\n\tvampiricTouch: true,\n});\n\nexport const DefaultPartyBuffs = PartyBuffs.create({\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tbloodFrenzy: true,\n\tsunderArmor: true,\n\tebonPlaguebringer: true,\n\tmangle: true,\n\tcriticalMass: true,\n\tdemoralizingShout: true,\n\tfrostFever: true,\n\tjudgement: true,\n});\n\nexport const OtherDefaults = {\n\tdistanceFromTarget: 18,\n\tprofession1: Profession.Engineering,\n\tprofession2: Profession.Tailoring,\n};\n","import * as BuffDebuffInputs from '../../core/components/inputs/buffs_debuffs';\nimport * as OtherInputs from '../../core/components/other_inputs';\nimport * as Mechanics from '../../core/constants/mechanics';\nimport { IndividualSimUI, registerSpecConfig } from '../../core/individual_sim_ui';\nimport { Player } from '../../core/player';\nimport { PlayerClasses } from '../../core/player_classes';\nimport { APLRotation } from '../../core/proto/apl';\nimport { Faction, Race, Spec, Stat } from '../../core/proto/common';\nimport { Stats } from '../../core/proto_utils/stats';\nimport * as DruidInputs from '../inputs';\nimport * as BalanceInputs from './inputs';\nimport * as Presets from './presets';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecBalanceDruid, {\n\tcssClass: 'balance-druid-sim-ui',\n\tcssScheme: PlayerClasses.getCssClass(PlayerClasses.Druid),\n\t// List any known bugs / issues here, and they'll be shown on the site.\n\tknownIssues: [],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatIntellect,\n\t\tStat.StatSpirit,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatMastery,\n\t],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatSpellPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatMana,\n\t\tStat.StatStamina,\n\t\tStat.StatIntellect,\n\t\tStat.StatSpirit,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatMastery,\n\t],\n\n\tmodifyDisplayStats: (player: Player<Spec.SpecBalanceDruid>) => {\n\t\tlet stats = new Stats();\n\t\tstats = stats.addStat(Stat.StatSpellCrit, player.getTalents().naturesMajesty * 2 * Mechanics.SPELL_CRIT_RATING_PER_CRIT_CHANCE);\n\n\t\treturn {\n\t\t\ttalents: stats,\n\t\t};\n\t},\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.PreraidPresetGear.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatIntellect]: 0.43,\n\t\t\t[Stat.StatSpirit]: 0.34,\n\t\t\t[Stat.StatSpellPower]: 1,\n\t\t\t[Stat.StatSpellCrit]: 0.82,\n\t\t\t[Stat.StatSpellHaste]: 0.8,\n\t\t\t[Stat.StatMastery]: 0.0,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.StandardTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: Presets.DefaultRaidBuffs,\n\t\tpartyBuffs: Presets.DefaultPartyBuffs,\n\t\tindividualBuffs: Presets.DefaultIndividualBuffs,\n\t\tdebuffs: Presets.DefaultDebuffs,\n\t\tother: Presets.OtherDefaults,\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [DruidInputs.SelfInnervate()],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [\n\t\tBuffDebuffInputs.MeleeHasteBuff,\n\t\tBuffDebuffInputs.CritBuff,\n\t\tBuffDebuffInputs.AttackPowerPercentBuff,\n\t\tBuffDebuffInputs.MajorArmorDebuff,\n\t\tBuffDebuffInputs.PhysicalDamageDebuff,\n\t],\n\texcludeBuffDebuffInputs: [],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [BalanceInputs.OkfUptime, OtherInputs.TankAssignment, OtherInputs.InputDelay, OtherInputs.DistanceFromTarget, OtherInputs.DarkIntentUptime],\n\t},\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [Presets.StandardTalents],\n\t\trotations: [Presets.PresetRotationDefault],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [ Presets.PreraidPresetGear]\n\t},\n\n\tautoRotation: (_player: Player<Spec.SpecBalanceDruid>): APLRotation => {\n\t\treturn Presets.PresetRotationDefault.rotation.rotation!;\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecBalanceDruid,\n\t\t\ttalents: Presets.StandardTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\totherDefaults: Presets.OtherDefaults,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceNightElf,\n\t\t\t\t[Faction.Horde]: Race.RaceTauren,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.PreraidPresetGear.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.PreraidPresetGear.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class BalanceDruidSimUI extends IndividualSimUI<Spec.SpecBalanceDruid> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecBalanceDruid>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["OkfUptime","InputHelpers.makeSpecOptionsNumberInput","fieldName","label","labelTooltip","percent","PreraidPresetGear","PresetUtils.makePresetGear","PresetRotationDefault","PresetUtils.makePresetAPLRotation","DefaultApl","StandardTalents","name","data","SavedTalents","create","talentsString","glyphs","Glyphs","prime1","DruidPrimeGlyph","GlyphOfInsectSwarm","prime2","GlyphOfMoonfire","prime3","GlyphOfWrath","major1","DruidMajorGlyph","GlyphOfStarfall","major2","GlyphOfRebirth","major3","GlyphOfFocus","minor1","DruidMinorGlyph","GlyphOfTyphoon","minor2","GlyphOfUnburdenedRebirth","minor3","GlyphOfMarkOfTheWild","DefaultOptions","BalanceDruidOptions","classOptions","innervateTarget","UnitReference","DefaultConsumes","Consumes","flask","Flask","FlaskOfTheDraconicMind","food","Food","FoodSeafoodFeast","defaultPotion","Potions","VolcanicPotion","prepopPotion","DefaultRaidBuffs","RaidBuffs","arcaneBrilliance","bloodlust","markOfTheWild","icyTalons","moonkinForm","leaderOfThePack","powerWordFortitude","strengthOfEarthTotem","trueshotAura","wrathOfAirTotem","demonicPact","blessingOfKings","blessingOfMight","communion","DefaultIndividualBuffs","IndividualBuffs","vampiricTouch","DefaultPartyBuffs","PartyBuffs","DefaultDebuffs","Debuffs","bloodFrenzy","sunderArmor","ebonPlaguebringer","mangle","criticalMass","demoralizingShout","frostFever","judgement","OtherDefaults","distanceFromTarget","profession1","Profession","Engineering","profession2","Tailoring","SPEC_CONFIG","registerSpecConfig","Spec","SpecBalanceDruid","cssClass","cssScheme","PlayerClasses","getCssClass","Druid","knownIssues","epStats","Stat","StatIntellect","StatSpirit","StatSpellPower","StatSpellHit","StatSpellCrit","StatSpellHaste","StatMastery","epReferenceStat","displayStats","StatHealth","StatMana","StatStamina","modifyDisplayStats","player","stats","Stats","addStat","getTalents","naturesMajesty","Mechanics.SPELL_CRIT_RATING_PER_CRIT_CHANCE","talents","defaults","gear","Presets.PreraidPresetGear","epWeights","fromMap","consumes","Presets.DefaultConsumes","Presets.StandardTalents","specOptions","Presets.DefaultOptions","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","Presets.DefaultPartyBuffs","individualBuffs","Presets.DefaultIndividualBuffs","debuffs","Presets.DefaultDebuffs","other","Presets.OtherDefaults","playerIconInputs","DruidInputs.SelfInnervate","includeBuffDebuffInputs","BuffDebuffInputs.MeleeHasteBuff","BuffDebuffInputs.CritBuff","BuffDebuffInputs.AttackPowerPercentBuff","BuffDebuffInputs.MajorArmorDebuff","BuffDebuffInputs.PhysicalDamageDebuff","excludeBuffDebuffInputs","otherInputs","inputs","BalanceInputs.OkfUptime","OtherInputs.TankAssignment","OtherInputs.InputDelay","OtherInputs.DistanceFromTarget","OtherInputs.DarkIntentUptime","encounterPicker","showExecuteProportion","presets","rotations","Presets.PresetRotationDefault","autoRotation","_player","rotation","raidSimPresets","spec","otherDefaults","defaultFactionRaces","Faction","Unknown","Race","RaceUnknown","Alliance","RaceNightElf","Horde","RaceTauren","defaultGear","BalanceDruidSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}